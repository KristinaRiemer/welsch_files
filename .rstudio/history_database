1560186299111:#     start = ipft,
1560186299112:#     count = 1,
1560186299113:#     vals = as.numeric(pft.trait.values[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar)
1560186299114:#   )
1560186299115:# }
1560186299116:} ## end loop over VARIABLES
1560186308950:for (v in seq_along(pft_pecan_vals)) {
1560186308951:pecan_var <- names(pft_pecan_vals)[v]
1560186308954:### ----- Leaf physiological parameters
1560186308955:update_vars <- function(nc = ctsm.param.nc, ctsm_var, ctsm_vals, start = ipft, count = 1){
1560186308956:ncdf4::ncvar_put(nc, varid = ctsm_var, vals = ctsm_vals, start, count)
1560186308957:}
1560186308959:if (pecan_var == "c2n_leaf") {update_vars(ctsm_var = "leafcn", ctsm_vals = pft_pecan_vals[v])}
1560186308961:if (pecan_var == "sla") {update_vars(ctsm_var = "slatop", ctsm_vals = udunits2::ud.convert(pecan_pft_vals[v], "m2 kg-1", "m2 g-1") / leafC))}
1560186308962:# if (pecan_var == "stom_slope") {update_vars(ctsm_var = "mbbopt", ctsm_vals = pft_pecan_vals[v])}
1560186308963:# if (pecan_var == "fineroot2leaf") {update_vars(ctsm_var = "froot_leaf", ctsm_vals = pft_pecan_vals[v])}
1560186308964:# if (pecan_var == "vcmax") {update_vars(ctsm_var = "flnr", ctsm_vals = as.numeric(pft.trait.values[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar))}
1560186308966:# if (var == "sla") {
1560186308968:#   ## default 0.03846
1560186308969:#   ncdf4::ncvar_put(
1560186308970:#     nc = ctsm.param.nc,
1560186308971:#     varid = "slatop",
1560186308972:#     start = ipft,
1560186308973:#     count = 1,
1560186308975:#     vals = udunits2::ud.convert(pft.trait.values[v], "m2 kg-1", "m2 g-1") / leafC
1560186308976:#   )
1560186308977:# }
1560186308978:# if (var == "c2n_leaf"){
1560186308979:#   ## default 35.36068
1560186308980:#   ncdf4::ncvar_put(
1560186308981:#     nc = ctsm.param.nc,
1560186308983:#     varid = "leafcn",
1560186308984:#     start = ipft,
1560186308985:#     count = 1,
1560186308986:#     vals = pft.trait.values[v]
1560186308987:#   )
1560186308988:# }
1560186308990:# if (var == "stom_slope"){
1560186308991:#   ## default 9.757532
1560186308992:#   ncdf4::ncvar_put(
1560186308993:#     nc = ctsm.param.nc,
1560186308994:#     varid = "mbbopt",
1560186308995:#     start = ipft,
1560186308996:#     count = 1,
1560186308998:#     vals = pft.trait.values[v]
1560186308999:#   )
1560186309000:# }
1560186309001:# if (var == "fineroot2leaf"){
1560186309002:#   ## default 1.5
1560186309003:#   ncdf4::ncvar_put(
1560186309004:#     nc = ctsm.param.nc,
1560186309006:#     varid = "froot_leaf",
1560186309007:#     start = ipft,
1560186309008:#     count = 1,
1560186309009:#     vals = pft.trait.values[v]
1560186309010:#   )
1560186309011:# }
1560186309012:# if (var == "vcmax"){
1560186309014:#   ## default 0.09
1560186309015:#   ncdf4::ncvar_put(
1560186309016:#     nc = ctsm.param.nc,
1560186309017:#     varid = "flnr",
1560186309018:#     start = ipft,
1560186309019:#     count = 1,
1560186309020:#     vals = as.numeric(pft.trait.values[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar)
1560186309022:#   )
1560186309023:# }
1560186309024:} ## end loop over VARIABLES
1560186350542:for (v in seq_along(pft_pecan_vals)) {
1560186350545:pecan_var <- names(pft_pecan_vals)[v]
1560186350549:### ----- Leaf physiological parameters
1560186350550:update_vars <- function(nc = ctsm.param.nc, ctsm_var, ctsm_vals, start = ipft, count = 1){
1560186350552:ncdf4::ncvar_put(nc, varid = ctsm_var, vals = ctsm_vals, start, count)
1560186350553:}
1560186350555:if (pecan_var == "c2n_leaf") {update_vars(ctsm_var = "leafcn", ctsm_vals = pft_pecan_vals[v])}
1560186350556:# if (pecan_var == "sla") {update_vars(ctsm_var = "slatop", ctsm_vals = udunits2::ud.convert(pecan_pft_vals[v], "m2 kg-1", "m2 g-1") / leafC))}
1560186350557:if (pecan_var == "stom_slope") {update_vars(ctsm_var = "mbbopt", ctsm_vals = pft_pecan_vals[v])}
1560186350559:# if (pecan_var == "fineroot2leaf") {update_vars(ctsm_var = "froot_leaf", ctsm_vals = pft_pecan_vals[v])}
1560186350560:# if (pecan_var == "vcmax") {update_vars(ctsm_var = "flnr", ctsm_vals = as.numeric(pft.trait.values[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar))}
1560186350562:} ## end loop over VARIABLES
1560186365742:for (v in seq_along(pft_pecan_vals)) {
1560186365744:pecan_var <- names(pft_pecan_vals)[v]
1560186365747:### ----- Leaf physiological parameters
1560186365749:update_vars <- function(nc = ctsm.param.nc, ctsm_var, ctsm_vals, start = ipft, count = 1){
1560186365750:ncdf4::ncvar_put(nc, varid = ctsm_var, vals = ctsm_vals, start, count)
1560186365752:}
1560186365755:if (pecan_var == "c2n_leaf") {update_vars(ctsm_var = "leafcn", ctsm_vals = pft_pecan_vals[v])}
1560186365756:# if (pecan_var == "sla") {update_vars(ctsm_var = "slatop", ctsm_vals = udunits2::ud.convert(pecan_pft_vals[v], "m2 kg-1", "m2 g-1") / leafC))}
1560186365757:if (pecan_var == "stom_slope") {update_vars(ctsm_var = "mbbopt", ctsm_vals = pft_pecan_vals[v])}
1560186365758:if (pecan_var == "fineroot2leaf") {update_vars(ctsm_var = "froot_leaf", ctsm_vals = pft_pecan_vals[v])}
1560186365759:if (pecan_var == "vcmax") {update_vars(ctsm_var = "flnr", ctsm_vals = as.numeric(pft.trait.values[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar))}
1560186365761:} ## end loop over VARIABLES
1560186387454:for (v in seq_along(pft_pecan_vals)) {
1560186387455:pecan_var <- names(pft_pecan_vals)[v]
1560186387458:### ----- Leaf physiological parameters
1560186387459:update_vars <- function(nc = ctsm.param.nc, ctsm_var, ctsm_vals, start = ipft, count = 1){
1560186387460:ncdf4::ncvar_put(nc, varid = ctsm_var, vals = ctsm_vals, start, count)
1560186387461:}
1560186387463:if (pecan_var == "c2n_leaf") {update_vars(ctsm_var = "leafcn", ctsm_vals = pft_pecan_vals[v])}
1560186387464:# if (pecan_var == "sla") {update_vars(ctsm_var = "slatop", ctsm_vals = udunits2::ud.convert(pecan_pft_vals[v], "m2 kg-1", "m2 g-1") / leafC))}
1560186387465:if (pecan_var == "stom_slope") {update_vars(ctsm_var = "mbbopt", ctsm_vals = pft_pecan_vals[v])}
1560186387466:if (pecan_var == "fineroot2leaf") {update_vars(ctsm_var = "froot_leaf", ctsm_vals = pft_pecan_vals[v])}
1560186387468:if (pecan_var == "vcmax") {update_vars(ctsm_var = "flnr", ctsm_vals = as.numeric(pft_pecan_vals[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar))}
1560186387470:} ## end loop over VARIABLES
1560186413898:for (v in seq_along(pft_pecan_vals)) {
1560186413900:pecan_var <- names(pft_pecan_vals)[v]
1560186413903:### ----- Leaf physiological parameters
1560186413905:update_vars <- function(nc = ctsm.param.nc, ctsm_var, ctsm_vals, start = ipft, count = 1){
1560186413907:ncdf4::ncvar_put(nc, varid = ctsm_var, vals = ctsm_vals, start, count)
1560186413909:}
1560186413911:if (pecan_var == "c2n_leaf") {update_vars(ctsm_var = "leafcn", ctsm_vals = pft_pecan_vals[v])}
1560186413912:if (pecan_var == "sla") {update_vars(ctsm_var = "slatop", ctsm_vals = udunits2::ud.convert(pecan_pft_vals[v], "m2 kg-1", "m2 g-1") / leafC)}
1560186413914:if (pecan_var == "stom_slope") {update_vars(ctsm_var = "mbbopt", ctsm_vals = pft_pecan_vals[v])}
1560186413915:if (pecan_var == "fineroot2leaf") {update_vars(ctsm_var = "froot_leaf", ctsm_vals = pft_pecan_vals[v])}
1560186413916:if (pecan_var == "vcmax") {update_vars(ctsm_var = "flnr", ctsm_vals = as.numeric(pft_pecan_vals[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar))}
1560186413918:} ## end loop over VARIABLES
1560186444909:for (v in seq_along(pft_pecan_vals)) {
1560186444912:pecan_var <- names(pft_pecan_vals)[v]
1560186444915:### ----- Leaf physiological parameters
1560186444917:update_vars <- function(nc = ctsm.param.nc, ctsm_var, ctsm_vals, start = ipft, count = 1){
1560186444919:ncdf4::ncvar_put(nc, varid = ctsm_var, vals = ctsm_vals, start, count)
1560186444921:}
1560186444923:if (pecan_var == "c2n_leaf") {update_vars(ctsm_var = "leafcn", ctsm_vals = pft_pecan_vals[v])}
1560186444924:if (pecan_var == "sla") {update_vars(ctsm_var = "slatop", ctsm_vals = udunits2::ud.convert(pft_pecan_vals[v], "m2 kg-1", "m2 g-1") / leafC)}
1560186444925:if (pecan_var == "stom_slope") {update_vars(ctsm_var = "mbbopt", ctsm_vals = pft_pecan_vals[v])}
1560186444926:if (pecan_var == "fineroot2leaf") {update_vars(ctsm_var = "froot_leaf", ctsm_vals = pft_pecan_vals[v])}
1560186444928:if (pecan_var == "vcmax") {update_vars(ctsm_var = "flnr", ctsm_vals = as.numeric(pft_pecan_vals[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar))}
1560186444930:} ## end loop over VARIABLES
1560186475932:.libPaths("~/R_libs/") #delete
1560186476478:library(PEcAn.CTSM) #delete
1560186476614:trait.values <- list(c4_grass = list(sla = 0.03, c2n_leaf = 35, stom_slope = 10, fineroot2leaf = 2, vcmax = 50)) #delete
1560186477035:## Copy and open default parameter files
1560186477037:ctsm.param.default <-
1560186477039:system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM')
1560186478460:if (!exists('local.rundir'))
1560186479710:local.rundir <- tempdir()
1560186479922:if (!exists('run.id'))
1560186480129:run.id <- 1
1560186480417:ctsm.param.file <-
1560186480419:file.path(local.rundir, paste0("ctsm_params.", run.id, ".nc"))
1560186480631:file.copy(ctsm.param.default, ctsm.param.file)
1560186480990:ctsm.param.nc <- ncdf4::nc_open(ctsm.param.file, write = TRUE)
1560186481380:## Loop over PFTS
1560186481382:npft <- length(trait.values)
1560186481776:PEcAn.logger::logger.debug('there are ',
1560186481778:npft,
1560186481780:'PFTs in this run, they are named:',
1560186481782:names(trait.values))
1560186482485:ctsm_pftnames <-
1560186482486:stringr::str_trim(tolower(ncdf4::ncvar_get(ctsm.param.nc, "pftname")))
1560186482896:i <- 1 #delete
1560186483347:#for (i in seq_len(npft)) {
1560186483349:pft.name <- names(trait.values)[i]
1560186483778:if (is.null(pft.name) | is.na(pft.name)) {
1560186483780:PEcAn.logger::logger.error("pft.name missing")
1560186483783:} else {
1560186483785:PEcAn.logger::logger.info(paste("PFT =", pft.name))
1560186483787:PEcAn.logger::logger.debug(paste0("ctsm PFT number: ", which(ctsm_pftnames == pft.name)))
1560186483789:}
1560186484095:if (pft.name == 'env')
1560186484488:next   ## HACK, need to remove env from default
1560186484950:## Match PFT name to COLUMN
1560186484952:ipft <- match(tolower(pft.name), ctsm_pftnames)
1560186485274:PEcAn.logger::logger.debug(paste0("CTSM pft index number: ", ipft))
1560186485700:if (is.na(ipft)) {
1560186485702:PEcAn.logger::logger.severe(
1560186485704:paste(
1560186485706:"Unmatched PFT",
1560186485708:pft.name,
1560186485710:"in CTSM PEcAn does not yet support non-default PFTs for this model"
1560186485712:)
1560186485714:)
1560186485715:}
1560186487246:## Special variables used in conversions
1560186487248:leafC <- 0.48
1560186487458:fnr <- 7.16 #mass ratio of total Rubisco molecular mass to nitrogen in Rubisco (g Rubisco g-1 N in Rubisco)
1560186487872:ar <- 60 #specific activity of Rubisco (µmol CO2 g-1 Rubisco s-1)
1560186488211:sla_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop") #delete
1560186488459:c2n_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn") #delete
1560186488657:sto_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "mbbopt") #delete
1560186488862:frl_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "froot_leaf") #delete
1560186489128:flnr_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "flnr") #delete
1560186489612:## Loop over VARIABLES
1560186489613:pft_pecan_vals <- trait.values[[i]]
1560186489971:for (v in seq_along(pft_pecan_vals)) {
1560186489973:pecan_var <- names(pft_pecan_vals)[v]
1560186489977:### ----- Leaf physiological parameters
1560186489979:update_vars <- function(nc = ctsm.param.nc, ctsm_var, ctsm_vals, start = ipft, count = 1){
1560186489981:ncdf4::ncvar_put(nc, varid = ctsm_var, vals = ctsm_vals, start, count)
1560186489982:}
1560186489983:if (pecan_var == "c2n_leaf") {update_vars(ctsm_var = "leafcn", ctsm_vals = pft_pecan_vals[v])}
1560186489984:if (pecan_var == "sla") {update_vars(ctsm_var = "slatop", ctsm_vals = udunits2::ud.convert(pft_pecan_vals[v], "m2 kg-1", "m2 g-1") / leafC)}
1560186489985:if (pecan_var == "stom_slope") {update_vars(ctsm_var = "mbbopt", ctsm_vals = pft_pecan_vals[v])}
1560186489986:if (pecan_var == "fineroot2leaf") {update_vars(ctsm_var = "froot_leaf", ctsm_vals = pft_pecan_vals[v])}
1560186489987:if (pecan_var == "vcmax") {update_vars(ctsm_var = "flnr", ctsm_vals = as.numeric(pft_pecan_vals[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar))}
1560186489988:} ## end loop over VARIABLES
1560186492414:write_params_ctsm <-
1560186492416:function(defaults = system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM'),
1560186492417:trait.values,
1560186492419:settings,
1560186492420:run.id) {
1560186492422:.libPaths("~/R_libs/") #delete
1560186492424:library(PEcAn.CTSM) #delete
1560186492425:trait.values <- list(c4_grass = list(sla = 0.03, c2n_leaf = 35, stom_slope = 10, fineroot2leaf = 2, vcmax = 50)) #delete
1560186492426:## Copy and open default parameter files
1560186492427:ctsm.param.default <-
1560186492428:system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM')
1560186492429:if (!exists('local.rundir'))
1560186492430:local.rundir <- tempdir()
1560186492431:if (!exists('run.id'))
1560186492432:run.id <- 1
1560186492433:ctsm.param.file <-
1560186492435:file.path(local.rundir, paste0("ctsm_params.", run.id, ".nc"))
1560186492436:file.copy(ctsm.param.default, ctsm.param.file)
1560186492437:ctsm.param.nc <- ncdf4::nc_open(ctsm.param.file, write = TRUE)
1560186492439:## Loop over PFTS
1560186492440:npft <- length(trait.values)
1560186492441:PEcAn.logger::logger.debug('there are ',
1560186492442:npft,
1560186492443:'PFTs in this run, they are named:',
1560186492444:names(trait.values))
1560186492445:ctsm_pftnames <-
1560186492446:stringr::str_trim(tolower(ncdf4::ncvar_get(ctsm.param.nc, "pftname")))
1560186492447:i <- 1 #delete
1560186492448:#for (i in seq_len(npft)) {
1560186492449:pft.name <- names(trait.values)[i]
1560186492450:if (is.null(pft.name) | is.na(pft.name)) {
1560186492451:PEcAn.logger::logger.error("pft.name missing")
1560186492452:} else {
1560186492454:PEcAn.logger::logger.info(paste("PFT =", pft.name))
1560186492455:PEcAn.logger::logger.debug(paste0("ctsm PFT number: ", which(ctsm_pftnames == pft.name)))
1560186492456:}
1560186492457:if (pft.name == 'env')
1560186492458:next   ## HACK, need to remove env from default
1560186492460:## Match PFT name to COLUMN
1560186492461:ipft <- match(tolower(pft.name), ctsm_pftnames)
1560186492463:PEcAn.logger::logger.debug(paste0("CTSM pft index number: ", ipft))
1560186492465:if (is.na(ipft)) {
1560186492466:PEcAn.logger::logger.severe(
1560186492467:paste(
1560186492468:"Unmatched PFT",
1560186492470:pft.name,
1560186492471:"in CTSM PEcAn does not yet support non-default PFTs for this model"
1560186492472:)
1560186492473:)
1560186492474:}
1560186492476:## Special variables used in conversions
1560186492478:leafC <- 0.48
1560186492479:fnr <- 7.16 #mass ratio of total Rubisco molecular mass to nitrogen in Rubisco (g Rubisco g-1 N in Rubisco)
1560186492480:ar <- 60 #specific activity of Rubisco (µmol CO2 g-1 Rubisco s-1)
1560186492481:sla_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop") #delete
1560186492482:c2n_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn") #delete
1560186492484:sto_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "mbbopt") #delete
1560186492485:frl_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "froot_leaf") #delete
1560186492486:flnr_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "flnr") #delete
1560186492489:## Loop over VARIABLES
1560186492490:pft_pecan_vals <- trait.values[[i]]
1560186492491:for (v in seq_along(pft_pecan_vals)) {
1560186492493:pecan_var <- names(pft_pecan_vals)[v]
1560186492495:### ----- Leaf physiological parameters
1560186492497:update_vars <- function(nc = ctsm.param.nc, ctsm_var, ctsm_vals, start = ipft, count = 1){
1560186492498:ncdf4::ncvar_put(nc, varid = ctsm_var, vals = ctsm_vals, start, count)
1560186492499:}
1560186492501:if (pecan_var == "c2n_leaf") {update_vars(ctsm_var = "leafcn", ctsm_vals = pft_pecan_vals[v])}
1560186492502:if (pecan_var == "sla") {update_vars(ctsm_var = "slatop", ctsm_vals = udunits2::ud.convert(pft_pecan_vals[v], "m2 kg-1", "m2 g-1") / leafC)}
1560186492503:if (pecan_var == "stom_slope") {update_vars(ctsm_var = "mbbopt", ctsm_vals = pft_pecan_vals[v])}
1560186492505:if (pecan_var == "fineroot2leaf") {update_vars(ctsm_var = "froot_leaf", ctsm_vals = pft_pecan_vals[v])}
1560186492506:if (pecan_var == "vcmax") {update_vars(ctsm_var = "flnr", ctsm_vals = as.numeric(pft_pecan_vals[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar))}
1560186492508:} ## end loop over VARIABLES
1560186492509:} ## end loop over PFTs
1560186493186:}
1560186499239:sla_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")
1560186499244:c2n_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")
1560186499249:sto_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "mbbopt")
1560186499253:frl_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "froot_leaf")
1560186499257:flnr_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "flnr")
1560186499261:sla_old[15]
1560186499262:sla_new[15]
1560186499264:c2n_old[15]
1560186499265:c2n_new[15]
1560186499267:sto_old[15]
1560186499268:sto_new[15]
1560186499270:frl_old[15]
1560186499271:frl_new[15]
1560186499273:flnr_old[15]
1560186499274:flnr_new[15]
1560186940694:ctsm_pftnames
1560186949403:ncdf4::ncvar_get(ctsm.param.nc, "pftname")
1560186991406:trimws(tolower(ncdf4::ncvar_get(ctsm.param.nc, "pftname")))
1560187006037:bla <- head(trimws(tolower(ncdf4::ncvar_get(ctsm.param.nc, "pftname"))))
1560187017227:bla <- trimws(tolower(ncdf4::ncvar_get(ctsm.param.nc, "pftname")))
1560187030639:bla == ctsm_pftnames
1560187115573:pft.name
1560187128024:names(trait.values)[1]
1560187131447:names(trait.values)[[1]]
1560187145124:trait.values <- list(c4_grass = list(sla = 0.03, c2n_leaf = 35, stom_slope = 10, fineroot2leaf = 2, vcmax = 50))
1560187152336:.libPaths("~/R_libs/")
1560187152893:library(PEcAn.CTSM)
1560187160384:## Copy and open default parameter files
1560187160385:ctsm.param.default <-
1560187160387:system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM')
1560187160584:if (!exists('local.rundir'))
1560187160689:local.rundir <- tempdir()
1560187160738:if (!exists('run.id'))
1560187160959:run.id <- 1
1560187161114:ctsm.param.file <-
1560187161116:file.path(local.rundir, paste0("ctsm_params.", run.id, ".nc"))
1560187161230:file.copy(ctsm.param.default, ctsm.param.file)
1560187161473:ctsm.param.nc <- ncdf4::nc_open(ctsm.param.file, write = TRUE)
1560187162480:## Loop over PFTS
1560187162482:npft <- length(trait.values)
1560187162928:PEcAn.logger::logger.debug('there are ',
1560187162929:npft,
1560187162931:'PFTs in this run, they are named:',
1560187162933:names(trait.values))
1560187163692:ctsm_pftnames <-
1560187163694:trimws(tolower(ncdf4::ncvar_get(ctsm.param.nc, "pftname")))
1560187167912:i <- 1
1560187170440:pft.name <- names(trait.values)[[i]]
1560187171033:if (is.null(pft.name) || is.na(pft.name)) {
1560187171035:PEcAn.logger::logger.error("pft.name missing")
1560187171037:} else {
1560187171039:PEcAn.logger::logger.info(paste("PFT =", pft.name))
1560187171041:PEcAn.logger::logger.debug(paste0("ctsm PFT number: ", which(ctsm_pftnames == pft.name)))
1560187171044:}
1560187174803:if (pft.name == 'env')
1560187175659:next   ## HACK, need to remove env from default
1560187179315:## Match PFT name to COLUMN
1560187179317:ipft <- match(tolower(pft.name), ctsm_pftnames)
1560187180314:PEcAn.logger::logger.debug(paste0("CTSM pft index number: ", ipft))
1560187180971:if (is.na(ipft)) {
1560187180973:PEcAn.logger::logger.severe(
1560187180974:paste(
1560187180975:"Unmatched PFT",
1560187180976:pft.name,
1560187180977:"in CTSM PEcAn does not yet support non-default PFTs for this model"
1560187180978:)
1560187180980:)
1560187180981:}
1560187181783:## Special variables used in conversions
1560187181785:leafC <- 0.48
1560187181970:fnr <- 7.16 # mass ratio of total Rubisco molecular mass to nitrogen in Rubisco (g Rubisco g-1 N in Rubisco)
1560187182356:ar <- 60 # specific activity of Rubisco (µmol CO2 g-1 Rubisco s-1)
1560187183414:## Loop over VARIABLES
1560187183416:pft_pecan_vals <- trait.values[[i]]
1560187187143:for (v in seq_along(pft_pecan_vals)) {
1560187187145:pecan_var <- names(pft_pecan_vals)[v]
1560187187148:### ----- Leaf physiological parameters
1560187187150:update_vars <- function(nc = ctsm.param.nc, ctsm_var, ctsm_vals, start = ipft, count = 1){
1560187187151:ncdf4::ncvar_put(nc, varid = ctsm_var, vals = ctsm_vals, start, count)
1560187187152:}
1560187187153:if (pecan_var == "sla") {update_vars(ctsm_var = "slatop", ctsm_vals = udunits2::ud.convert(pft_pecan_vals[v], "m2 kg-1", "m2 g-1") / leafC)} ## default 0.03846
1560187187154:if (pecan_var == "c2n_leaf") {update_vars(ctsm_var = "leafcn", ctsm_vals = pft_pecan_vals[v])} ## default 35.36068
1560187187155:if (pecan_var == "stom_slope") {update_vars(ctsm_var = "mbbopt", ctsm_vals = pft_pecan_vals[v])} ## default 9.757532
1560187187156:if (pecan_var == "fineroot2leaf") {update_vars(ctsm_var = "froot_leaf", ctsm_vals = pft_pecan_vals[v])} ## default 1.5
1560187187157:if (pecan_var == "vcmax") {update_vars(ctsm_var = "flnr", ctsm_vals = as.numeric(pft_pecan_vals[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar))} ## default 0.09
1560187187158:}
1560187189993:for (i in seq_len(npft)) {
1560187189995:pft.name <- names(trait.values)[[i]]
1560187189997:if (is.null(pft.name) || is.na(pft.name)) {
1560187189998:PEcAn.logger::logger.error("pft.name missing")
1560187190000:} else {
1560187190002:PEcAn.logger::logger.info(paste("PFT =", pft.name))
1560187190004:PEcAn.logger::logger.debug(paste0("ctsm PFT number: ", which(ctsm_pftnames == pft.name)))
1560187190005:}
1560187190006:if (pft.name == 'env')
1560187190007:next   ## HACK, need to remove env from default
1560187190009:## Match PFT name to COLUMN
1560187190010:ipft <- match(tolower(pft.name), ctsm_pftnames)
1560187190011:PEcAn.logger::logger.debug(paste0("CTSM pft index number: ", ipft))
1560187190013:if (is.na(ipft)) {
1560187190014:PEcAn.logger::logger.severe(
1560187190015:paste(
1560187190016:"Unmatched PFT",
1560187190017:pft.name,
1560187190018:"in CTSM PEcAn does not yet support non-default PFTs for this model"
1560187190019:)
1560187190020:)
1560187190021:}
1560187190022:## Special variables used in conversions
1560187190023:leafC <- 0.48
1560187190024:fnr <- 7.16 # mass ratio of total Rubisco molecular mass to nitrogen in Rubisco (g Rubisco g-1 N in Rubisco)
1560187190025:ar <- 60 # specific activity of Rubisco (µmol CO2 g-1 Rubisco s-1)
1560187190027:## Loop over VARIABLES
1560187190028:pft_pecan_vals <- trait.values[[i]]
1560187190029:for (v in seq_along(pft_pecan_vals)) {
1560187190030:pecan_var <- names(pft_pecan_vals)[v]
1560187190032:### ----- Leaf physiological parameters
1560187190033:update_vars <- function(nc = ctsm.param.nc, ctsm_var, ctsm_vals, start = ipft, count = 1){
1560187190034:ncdf4::ncvar_put(nc, varid = ctsm_var, vals = ctsm_vals, start, count)
1560187190035:}
1560187190036:if (pecan_var == "sla") {update_vars(ctsm_var = "slatop", ctsm_vals = udunits2::ud.convert(pft_pecan_vals[v], "m2 kg-1", "m2 g-1") / leafC)} ## default 0.03846
1560187190037:if (pecan_var == "c2n_leaf") {update_vars(ctsm_var = "leafcn", ctsm_vals = pft_pecan_vals[v])} ## default 35.36068
1560187190038:if (pecan_var == "stom_slope") {update_vars(ctsm_var = "mbbopt", ctsm_vals = pft_pecan_vals[v])} ## default 9.757532
1560187190039:if (pecan_var == "fineroot2leaf") {update_vars(ctsm_var = "froot_leaf", ctsm_vals = pft_pecan_vals[v])} ## default 1.5
1560187190040:if (pecan_var == "vcmax") {update_vars(ctsm_var = "flnr", ctsm_vals = as.numeric(pft_pecan_vals[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar))} ## default 0.09
1560187190042:}
1560187190043:}
1560187190811:write_params_ctsm <-
1560187190813:function(defaults = system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM'),
1560187190814:trait.values,
1560187190815:settings,
1560187190817:run.id) {
1560187190819:## Copy and open default parameter files
1560187190820:ctsm.param.default <-
1560187190821:system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM')
1560187190822:if (!exists('local.rundir'))
1560187190823:local.rundir <- tempdir()
1560187190824:if (!exists('run.id'))
1560187190825:run.id <- 1
1560187190826:ctsm.param.file <-
1560187190827:file.path(local.rundir, paste0("ctsm_params.", run.id, ".nc"))
1560187190828:file.copy(ctsm.param.default, ctsm.param.file)
1560187190828:ctsm.param.nc <- ncdf4::nc_open(ctsm.param.file, write = TRUE)
1560187190830:## Loop over PFTS
1560187190831:npft <- length(trait.values)
1560187190832:PEcAn.logger::logger.debug('there are ',
1560187190833:npft,
1560187190834:'PFTs in this run, they are named:',
1560187190835:names(trait.values))
1560187190836:ctsm_pftnames <-
1560187190837:trimws(tolower(ncdf4::ncvar_get(ctsm.param.nc, "pftname")))
1560187190838:for (i in seq_len(npft)) {
1560187190839:pft.name <- names(trait.values)[[i]]
1560187190840:if (is.null(pft.name) || is.na(pft.name)) {
1560187190841:PEcAn.logger::logger.error("pft.name missing")
1560187190842:} else {
1560187190843:PEcAn.logger::logger.info(paste("PFT =", pft.name))
1560187190844:PEcAn.logger::logger.debug(paste0("ctsm PFT number: ", which(ctsm_pftnames == pft.name)))
1560187190845:}
1560187190846:if (pft.name == 'env')
1560187190847:next   ## HACK, need to remove env from default
1560187190849:## Match PFT name to COLUMN
1560187190851:ipft <- match(tolower(pft.name), ctsm_pftnames)
1560187190852:PEcAn.logger::logger.debug(paste0("CTSM pft index number: ", ipft))
1560187190854:if (is.na(ipft)) {
1560187190855:PEcAn.logger::logger.severe(
1560187190856:paste(
1560187190857:"Unmatched PFT",
1560187190858:pft.name,
1560187190859:"in CTSM PEcAn does not yet support non-default PFTs for this model"
1560187190860:)
1560187190861:)
1560187190862:}
1560187190866:## Special variables used in conversions
1560187190867:leafC <- 0.48
1560187190868:fnr <- 7.16 # mass ratio of total Rubisco molecular mass to nitrogen in Rubisco (g Rubisco g-1 N in Rubisco)
1560187190869:ar <- 60 # specific activity of Rubisco (µmol CO2 g-1 Rubisco s-1)
1560187190871:## Loop over VARIABLES
1560187190873:pft_pecan_vals <- trait.values[[i]]
1560187190874:for (v in seq_along(pft_pecan_vals)) {
1560187190875:pecan_var <- names(pft_pecan_vals)[v]
1560187190877:### ----- Leaf physiological parameters
1560187190878:update_vars <- function(nc = ctsm.param.nc, ctsm_var, ctsm_vals, start = ipft, count = 1){
1560187190879:ncdf4::ncvar_put(nc, varid = ctsm_var, vals = ctsm_vals, start, count)
1560187190881:}
1560187190882:if (pecan_var == "sla") {update_vars(ctsm_var = "slatop", ctsm_vals = udunits2::ud.convert(pft_pecan_vals[v], "m2 kg-1", "m2 g-1") / leafC)} ## default 0.03846
1560187190883:if (pecan_var == "c2n_leaf") {update_vars(ctsm_var = "leafcn", ctsm_vals = pft_pecan_vals[v])} ## default 35.36068
1560187190884:if (pecan_var == "stom_slope") {update_vars(ctsm_var = "mbbopt", ctsm_vals = pft_pecan_vals[v])} ## default 9.757532
1560187190886:if (pecan_var == "fineroot2leaf") {update_vars(ctsm_var = "froot_leaf", ctsm_vals = pft_pecan_vals[v])} ## default 1.5
1560187190887:if (pecan_var == "vcmax") {update_vars(ctsm_var = "flnr", ctsm_vals = as.numeric(pft_pecan_vals[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar))} ## default 0.09
1560187190888:}
1560187190890:}
1560187190891:}
1560265844001:library(pecanapi)
1560265880284:library(devtools)
1560265972342:build()
1560265986983:getwd()
1560265990765:setwd("~/pecan/api")
1560265993462:getwd()
1560265996239:build()
1560266011400:library(pecanapi)
1560266025185:install()
1560266038135:library(pecanapi)
1560266074403:.libPaths("~/R_libs/")
1560266082939:install()
1560266452258:library(pecanapi)
1560266461991:?pecanapi::get_model_id
1560266626832:?DBI::dbConnect
1560266770007:#options(pecanapi.user_id = 99000000002)
1560266770008:con <- DBI::dbConnect(
1560266770009:RPostgres::Postgres(),
1560266770010:user = "bety",
1560266770011:password = "bety",
1560266770012:host = "postgres"
1560266770013:#port = 5432
1560266770014:)
1560266770919:model_id <- get_model_id(con, "ED2")  #, "136")
1560266800965:model_id <- get_model_id(con, "ED2", "git")
1560266825530:#options(pecanapi.user_id = 99000000002)
1560266825532:con <- DBI::dbConnect(
1560266825534:RPostgres::Postgres(),
1560266825536:user = "bety",
1560266825538:password = "bety",
1560266825539:host = "postgres"
1560266825541:#port = 5432
1560266825542:)
1560266826710:model_id <- get_model_id(con, "ED2", "git")
1560266833653:model_id
1560266922504:1000000020
1560267046524:model_id <- get_model_id(con, "ED2", "rgit")
1560268797431:model_id <- get_model_id(con, "ED2", "git")
1560268809394:model_id <- get_model_id(con, "ED2", "git", multi_action = "all")
1560268817250:model_id
1560269723939:search_models(con, "ED")
1560277413066:model_id
1560277427547:get_model_id(con, "ED2", "git", multi_action = "all")
1560279084285:get_model_id(con, "ED2.2", "git")
1560279099565:get_model_id(con, "ED2", "ED2.2")
1560279151260:get_model_id(con, "ED2.2", "git")
1560279392249:get_model_id(con, "ED2", "git", multi_action = "all")
1560279398447:.libPaths("~/R_libs/")
1560279399122:library(pecanapi)
1560279399166:#options(pecanapi.user_id = 99000000002)
1560279399167:con <- DBI::dbConnect(
1560279399168:RPostgres::Postgres(),
1560279399169:user = "bety",
1560279399170:password = "bety",
1560279399171:host = "postgres"
1560279399172:#port = 5432
1560279399173:)
1560279401086:get_model_id(con, "ED2", "git", multi_action = "all")
1560279403423:get_model_id(con, "ED2.2", "git")
1560282321001:.libPaths("~/R_libs/")
1560282321713:library(PEcAn.CTSM)
1560454645331:.libPaths("~/R_libs/")
1560454651567:library(pecanapi)
1560454651578:#options(pecanapi.user_id = 99000000002)
1560454651579:con <- DBI::dbConnect(
1560454651580:RPostgres::Postgres(),
1560454651581:user = "bety",
1560454651582:password = "bety",
1560454651583:host = "postgres"
1560454651584:#port = 5432
1560454651585:)
1560454653217:get_model_id(con, "ED2", "git", multi_action = "all")
1560454654326:get_model_id(con, "ED2.2", "git")
1560539275753:.libPaths("~/R_libs/")
1560539283603:library(pecanapi)
1560539297087:#options(pecanapi.user_id = 99000000002)
1560539297088:con <- DBI::dbConnect(
1560539297090:RPostgres::Postgres(),
1560539297091:user = "bety",
1560539297092:password = "bety",
1560539297093:host = "postgres"
1560539297094:#port = 5432
1560539297095:)
1560539298862:get_model_id(con, "ED2", "git", multi_action = "all")
1560539301462:get_model_id(con, "ED2.2", "git")
1560539302833:search_models(con, "ED")
1560540062298:.libPaths("~/R_libs/")
1560540062946:library(pecanapi)
1560540063798:#options(pecanapi.user_id = 99000000002)
1560540063799:con <- DBI::dbConnect(
1560540063800:RPostgres::Postgres(),
1560540063801:user = "bety",
1560540063802:password = "bety",
1560540063803:host = "postgres"
1560540063804:#port = 5432
1560540063805:)
1560540065079:get_model_id(con, "ED2", "git", multi_action = "all")
1560540066827:get_model_id(con, "ED2.2", "git")
1560540067830:search_models(con, "ED")
1560540498049:search_models(con, "ED")
1560778500380:.libPaths("~/R_libs/")
1560778504319:library(pecanapi)
1560778505081:#options(pecanapi.user_id = 99000000002)
1560778505082:con <- DBI::dbConnect(
1560778505083:RPostgres::Postgres(),
1560778505084:user = "bety",
1560778505085:password = "bety",
1560778505086:host = "postgres"
1560778505087:#port = 5432
1560778505088:)
1560778506352:get_model_id(con, "ED2", "git", multi_action = "all")
1560778508321:get_model_id(con, "ED2.2", "git")
1560778509956:search_models(con, "ED")
1560778890943:pecanapi::get_model_id(con, "ED2.2", "git")
1560864146870:.libPaths("~/R_libs/")
1560864147536:library(pecanapi)
1560864149061:#options(pecanapi.user_id = 99000000002)
1560864149063:con <- DBI::dbConnect(
1560864149064:RPostgres::Postgres(),
1560864149065:user = "bety",
1560864149066:password = "bety",
1560864149068:host = "postgres"
1560864149069:#port = 5432
1560864149070:)
1560864151628:get_model_id(con, "ED2", "git", multi_action = "all")
1560864151999:get_model_id(con, "ED2.2", "git")
1560864153216:search_models(con, "ED")
1560864358523:tbl(con, 'pfts')
1560864369652:library(dplyr)
1560864374133:tbl(con, 'pfts')
1560864389408:pfts <- tbl(con, 'pfts')
1560864394150:View(pfts)
1560864410225:pfts <- tbl(con, 'pfts') %>%
1560864410227:collect()
1560864412579:View(pfts)
1560864427898:sort(pfts$name)
1560864539335:pfts <- tbl(con, 'pfts') %>%
1560864539337:collect() %>%
1560864539339:filter(name == "ebifarm.c4grass.doe_vd")
1560864542160:View(pfts)
1560864760295:pfts <- tbl(con, 'pfts') %>%
1560864760297:collect() %>%
1560864760299:filter(name == "c4grass")
1560864762230:View(pfts)
1560865424839:pfts <- tbl(con, 'pfts') %>%
1560865424841:collect() %>%
1560865424843:filter(modeltype_id == "5000000001")
1560865428225:View(pfts)
1560865441779:pfts <- tbl(con, 'pfts') %>%
1560865441780:collect()
1560865443126:View(pfts)
1560865453852:table(pfts$modeltype_id)
1560865500764:pfts <- tbl(con, 'pfts') %>%
1560865500766:collect() %>%
1560865500768:filter(modeltype_id == "1")
1560865502098:View(pfts)
1560865511917:sort(pfts$name)
1560869049349:.libPaths("~/R_libs/")
1560869050044:library(PEcAn.CTSM)
1560869059679:trait.values <- list(c4_grass = list(sla = 0.03, c2n_leaf = 35, stom_slope = 10, fineroot2leaf = 2, vcmax = 50))
1560869091963:run.id = 1
1560869096165:local.rundir = tempdir()
1560869100031:leafC = 0.48
1560869103643:fnr = 7.16
1560869107252:ar = 60
1560869112637:## Copy and open default parameter files
1560869112639:ctsm.param.default <-
1560869112641:system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM')
1560869114172:ctsm.param.file <-
1560869114174:file.path(local.rundir, paste0("ctsm_params.", run.id, ".nc"))
1560869114909:file.copy(ctsm.param.default, ctsm.param.file)
1560869115609:ctsm.param.nc <- ncdf4::nc_open(ctsm.param.file, write = TRUE)
1560869116904:## Loop over PFTS
1560869116906:npft <- length(trait.values)
1560869117460:PEcAn.logger::logger.debug('there are ',
1560869117462:npft,
1560869117465:'PFTs in this run, they are named:',
1560869117467:names(trait.values))
1560869118287:ctsm_pftnames <-
1560869118290:trimws(tolower(ncdf4::ncvar_get(ctsm.param.nc, "pftname")))
1560869122768:i <- 1
1560869125428:pft.name <- names(trait.values)[[i]]
1560869126546:if (is.null(pft.name) || is.na(pft.name)) {
1560869126548:PEcAn.logger::logger.error("pft.name missing")
1560869126550:} else {
1560869126553:PEcAn.logger::logger.info(paste("PFT =", pft.name))
1560869126555:PEcAn.logger::logger.debug(paste0("ctsm PFT number: ", which(ctsm_pftnames == pft.name)))
1560869126556:}
1560869127953:if (pft.name == 'env')
1560869128656:next   ## HACK, need to remove env from default
1560869129451:## Match PFT name to COLUMN
1560869129454:ipft <- match(tolower(pft.name), ctsm_pftnames)
1560869129973:PEcAn.logger::logger.debug(paste0("CTSM pft index number: ", ipft))
1560869130644:if (is.na(ipft)) {
1560869130646:PEcAn.logger::logger.severe(
1560869130648:paste(
1560869130649:"Unmatched PFT",
1560869130651:pft.name,
1560869130653:"in CTSM PEcAn does not yet support non-default PFTs for this model"
1560869130654:)
1560869130656:)
1560869130658:}
1560869131963:## Loop over VARIABLES
1560869131965:pft_pecan_vals <- trait.values[[i]]
1560869136704:for (v in seq_along(pft_pecan_vals)) {
1560869136706:pecan_var <- names(pft_pecan_vals)[v]
1560869136709:### ----- Leaf physiological parameters
1560869136711:update_vars <- function(ctsm_var, ctsm_vals, nc = ctsm.param.nc, start = ipft, count = 1){
1560869136733:ncdf4::ncvar_put(nc, varid = ctsm_var, vals = ctsm_vals, start, count)
1560869136735:}
1560869136737:if (pecan_var == "sla") {update_vars("slatop", udunits2::ud.convert(pft_pecan_vals[v], "m2 kg-1", "m2 g-1") / leafC)} ## default 0.03846
1560869136739:if (pecan_var == "c2n_leaf") {update_vars("leafcn", pft_pecan_vals[v])} ## default 35.36068
1560869136742:if (pecan_var == "stom_slope") {update_vars("mbbopt", pft_pecan_vals[v])} ## default 9.757532
1560869136743:if (pecan_var == "fineroot2leaf") {update_vars("froot_leaf", pft_pecan_vals[v])} ## default 1.5
1560869136744:if (pecan_var == "vcmax") {update_vars("flnr", as.numeric(pft_pecan_vals[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar))} ## default 0.09
1560869136746:}
1560869145409:sla_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")
1560869145554:c2n_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")
1560869145615:sto_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "mbbopt")
1560869145863:frl_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "froot_leaf")
1560869146029:flnr_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "flnr")
1560869146421:sla_old[15]
1560869146593:sla_new[15]
1560869146778:c2n_old[15]
1560869146875:c2n_new[15]
1560869147063:sto_old[15]
1560869148837:sto_new[15]
1560869148975:frl_old[15]
1560869149051:frl_new[15]
1560869149273:flnr_old[15]
1560869149515:flnr_new[15]
1560956731998:# ----------------------------------------------------------------------
1560956731999:# Load required libraries
1560956732001:# ----------------------------------------------------------------------
1560956732002:library(PEcAn.all)
1560956736765:library(PEcAn.utils)
1560956736766:library(RCurl)
1560956738267:# make sure always to call status.end
1560956738268:options(warn=1)
1560956738585:options(error=quote({
1560956738586:PEcAn.utils::status.end("ERROR")
1560956738588:PEcAn.remote::kill.tunnel(settings)
1560956738590:if (!interactive()) {
1560956738592:q(status = 1)
1560956738594:}
1560956738595:}))
1560956745261:# ----------------------------------------------------------------------
1560956745263:# PEcAn Workflow
1560956745264:# ----------------------------------------------------------------------
1560956745266:# Open and read in settings file for PEcAn run.
1560956745268:args <- commandArgs(trailingOnly = TRUE)
1560956746075:if (is.na(args[1])){
1560956746077:settings <- PEcAn.settings::read.settings("pecan.xml")
1560956746078:} else {
1560956746079:settings.file <- args[1]
1560956746080:settings <- PEcAn.settings::read.settings(settings.file)
1560956746081:}
1560956762067:getwd()
1560956777361:setwd("/home/kristinariemer/")
1560956778962:getwd()
1560956797402:# ----------------------------------------------------------------------
1560956797403:# Load required libraries
1560956797404:# ----------------------------------------------------------------------
1560956797405:library(PEcAn.all)
1560956801853:library(PEcAn.utils)
1560956801855:library(RCurl)
1560956803078:# make sure always to call status.end
1560956803080:options(warn=1)
1560956803261:options(error=quote({
1560956803263:PEcAn.utils::status.end("ERROR")
1560956803265:PEcAn.remote::kill.tunnel(settings)
1560956803267:if (!interactive()) {
1560956803269:q(status = 1)
1560956803270:}
1560956803271:}))
1560956806743:# ----------------------------------------------------------------------
1560956806745:# PEcAn Workflow
1560956806747:# ----------------------------------------------------------------------
1560956806749:# Open and read in settings file for PEcAn run.
1560956806751:args <- commandArgs(trailingOnly = TRUE)
1560956807656:if (is.na(args[1])){
1560956807658:settings <- PEcAn.settings::read.settings("ed2_files/pecan64.ed2.xml")
1560956807660:} else {
1560956807662:settings.file <- args[1]
1560956807664:settings <- PEcAn.settings::read.settings(settings.file)
1560956807666:}
1560956809086:# Check for additional modules that will require adding settings
1560956809119:if("benchmarking" %in% names(settings)){
1560956809121:library(PEcAn.benchmark)
1560956809122:settings <- papply(settings, read_settings_BRR)
1560956809124:}
1560956810063:if("sitegroup" %in% names(settings)){
1560956810065:if(is.null(settings$sitegroup$nSite)){
1560956810066:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1560956810068:sitegroupId = settings$sitegroup$id)
1560956810070:} else {
1560956810072:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1560956810074:sitegroupId = settings$sitegroup$id,
1560956810075:nSite = settings$sitegroup$nSite)
1560956810076:}
1560956810077:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1560956810078:}
1560956811474:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1560956811476:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1560956818922:# Write pecan.CHECKED.xml
1560956818924:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1560956820661:# start from scratch if no continue is passed in
1560956820664:statusFile <- file.path(settings$outdir, "STATUS")
1560956821652:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1560956821654:file.remove(statusFile)
1560956821655:}
1560956822794:# Do conversions
1560956822796:settings <- PEcAn.workflow::do_conversions(settings)
1560956825961:# Query the trait database for data and priors
1560956825963:if (PEcAn.utils::status.check("TRAIT") == 0){
1560956825964:PEcAn.utils::status.start("TRAIT")
1560956825965:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1560956825967:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1560956825968:PEcAn.utils::status.end()
1560956825969:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1560956825970:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1560956825972:}
1560956831533:# Run the PEcAn meta.analysis
1560956831535:if(!is.null(settings$meta.analysis)) {
1560956831537:if (PEcAn.utils::status.check("META") == 0){
1560956831538:PEcAn.utils::status.start("META")
1560956831540:PEcAn.MA::runModule.run.meta.analysis(settings)
1560956831541:PEcAn.utils::status.end()
1560956831542:}
1560956831543:}
1560956839779:# Write model specific configs
1560956839781:if (PEcAn.utils::status.check("CONFIG") == 0){
1560956839783:PEcAn.utils::status.start("CONFIG")
1560956839785:settings <- PEcAn.workflow::runModule.run.write.configs(settings)
1560956839787:PEcAn.settings::write.settings(settings, outputfile='pecan.CONFIGS.xml')
1560956839789:PEcAn.utils::status.end()
1560956839791:} else if (file.exists(file.path(settings$outdir, 'pecan.CONFIGS.xml'))) {
1560956839792:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.CONFIGS.xml'))
1560956839793:}
1560957852614:traceback()
1560958044523:traceback()
1561043512396:library(reticulate)
1561043526515:install.packages("reticulate")
1561043906611:.libPaths("~/R_libs/")
1561043914705:install.packages("reticulate")
1561044046270:library(reticulate)
1561562648656:# ----------------------------------------------------------------------
1561562648692:# Load required libraries
1561562648693:# ----------------------------------------------------------------------
1561562648695:library(PEcAn.all)
1561562653555:library(PEcAn.utils)
1561562653556:library(RCurl)
1561562653720:# make sure always to call status.end
1561562653721:options(warn=1)
1561562653722:options(error=quote({
1561562653723:PEcAn.utils::status.end("ERROR")
1561562653724:PEcAn.remote::kill.tunnel(settings)
1561562653725:if (!interactive()) {
1561562653726:q(status = 1)
1561562653727:}
1561562653728:}))
1561562655116:# ----------------------------------------------------------------------
1561562655118:# PEcAn Workflow
1561562655120:# ----------------------------------------------------------------------
1561562655122:# Open and read in settings file for PEcAn run.
1561562655123:args <- commandArgs(trailingOnly = TRUE)
1561562655928:if (is.na(args[1])){
1561562655930:settings <- PEcAn.settings::read.settings("ed2_files/pecan64.ed2.xml")
1561562655932:} else {
1561562655934:settings.file <- args[1]
1561562655936:settings <- PEcAn.settings::read.settings(settings.file)
1561562655938:}
1561562658054:# Check for additional modules that will require adding settings
1561562658056:if("benchmarking" %in% names(settings)){
1561562658057:library(PEcAn.benchmark)
1561562658058:settings <- papply(settings, read_settings_BRR)
1561562658059:}
1561562659259:if("sitegroup" %in% names(settings)){
1561562659261:if(is.null(settings$sitegroup$nSite)){
1561562659263:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1561562659265:sitegroupId = settings$sitegroup$id)
1561562659266:} else {
1561562659268:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1561562659270:sitegroupId = settings$sitegroup$id,
1561562659271:nSite = settings$sitegroup$nSite)
1561562659272:}
1561562659273:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1561562659274:}
1561562660448:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1561562660449:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1561562662977:# Write pecan.CHECKED.xml
1561562662978:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1561562664133:# start from scratch if no continue is passed in
1561562664136:statusFile <- file.path(settings$outdir, "STATUS")
1561562665748:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1561562665750:file.remove(statusFile)
1561562665752:}
1561562666869:# Do conversions
1561562666871:settings <- PEcAn.workflow::do_conversions(settings)
1561562669540:# Query the trait database for data and priors
1561562669542:if (PEcAn.utils::status.check("TRAIT") == 0){
1561562669544:PEcAn.utils::status.start("TRAIT")
1561562669546:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1561562669548:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1561562669549:PEcAn.utils::status.end()
1561562669550:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1561562669551:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1561562669552:}
1561562681493:# Run the PEcAn meta.analysis
1561562681495:if(!is.null(settings$meta.analysis)) {
1561562681497:if (PEcAn.utils::status.check("META") == 0){
1561562681500:PEcAn.utils::status.start("META")
1561562681502:PEcAn.MA::runModule.run.meta.analysis(settings)
1561562681504:PEcAn.utils::status.end()
1561562681505:}
1561562681506:}
1561562706629:# Write model specific configs
1561562706631:if (PEcAn.utils::status.check("CONFIG") == 0){
1561562706632:PEcAn.utils::status.start("CONFIG")
1561562706633:settings <- PEcAn.workflow::runModule.run.write.configs(settings)
1561562706634:PEcAn.settings::write.settings(settings, outputfile='pecan.CONFIGS.xml')
1561562706635:PEcAn.utils::status.end()
1561562706636:} else if (file.exists(file.path(settings$outdir, 'pecan.CONFIGS.xml'))) {
1561562706637:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.CONFIGS.xml'))
1561562706638:}
1561562752926:if ((length(which(commandArgs() == "--advanced")) != 0) && (PEcAn.utils::status.check("ADVANCED") == 0)) {
1561562752928:PEcAn.utils::status.start("ADVANCED")
1561562752929:q();
1561562752931:}
1561562754977:# Start ecosystem model runs
1561562754979:if (PEcAn.utils::status.check("MODEL") == 0) {
1561562754981:PEcAn.utils::status.start("MODEL")
1561562754984:PEcAn.remote::runModule.start.model.runs(settings, stop.on.error = FALSE)
1561562754986:PEcAn.utils::status.end()
1561562754988:}
1561562775661:traceback()
1561639757381:?start.model.runs
1561639916238:settings$host
1561639927293:start_serial()
1561639929464:?start_serial()
1561639946016:settings$rundir
1561639988573:settings$host$rundir
1561640097562:run_list
1561640116510:run_file <- file.path(settings$rundir, "runs.txt")
1561640119108:run_file
1561640145406:run_list <- readLines(con = run_file)
1561640151778:run_list
1561640210232:for(run in run_list){print(run)}
1561640220381:run = run_list[1]
1561640221399:run
1561640244209:start_serial(run = run, host = settings$host, rundir = settings$rundir,
1561640244211:host_rundir = settings$host$rundir, job_script = "job.sh")
1561640262268:traceback()
1561640311173:settings$host
1561640322708:settings$rundir
1561640330677:settings$host$rundir
1561640357962:# ----------------------------------------------------------------------
1561640357963:# Load required libraries
1561640357964:# ----------------------------------------------------------------------
1561640357965:library(PEcAn.all)
1561640363046:library(PEcAn.utils)
1561640363048:library(RCurl)
1561640364799:# make sure always to call status.end
1561640364801:options(warn=1)
1561640372298:options(error=quote({
1561640372299:PEcAn.utils::status.end("ERROR")
1561640372300:PEcAn.remote::kill.tunnel(settings)
1561640372301:if (!interactive()) {
1561640372303:q(status = 1)
1561640372304:}
1561640372306:}))
1561640376931:# ----------------------------------------------------------------------
1561640376933:# PEcAn Workflow
1561640376935:# ----------------------------------------------------------------------
1561640376937:# Open and read in settings file for PEcAn run.
1561640376939:args <- commandArgs(trailingOnly = TRUE)
1561640377945:if (is.na(args[1])){
1561640377947:settings <- PEcAn.settings::read.settings("ed2_files/pecan64.ed2.xml")
1561640377949:} else {
1561640377951:settings.file <- args[1]
1561640377953:settings <- PEcAn.settings::read.settings(settings.file)
1561640377956:}
1561640381482:# Check for additional modules that will require adding settings
1561640381484:if("benchmarking" %in% names(settings)){
1561640381485:library(PEcAn.benchmark)
1561640381486:settings <- papply(settings, read_settings_BRR)
1561640381488:}
1561640382367:if("sitegroup" %in% names(settings)){
1561640382368:if(is.null(settings$sitegroup$nSite)){
1561640382369:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1561640382370:sitegroupId = settings$sitegroup$id)
1561640382372:} else {
1561640382373:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1561640382375:sitegroupId = settings$sitegroup$id,
1561640382376:nSite = settings$sitegroup$nSite)
1561640382377:}
1561640382378:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1561640382379:}
1561640384719:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1561640384720:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1561640394537:# Write pecan.CHECKED.xml
1561640394538:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1561640396482:# start from scratch if no continue is passed in
1561640396483:statusFile <- file.path(settings$outdir, "STATUS")
1561640397452:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1561640397453:file.remove(statusFile)
1561640397455:}
1561640399145:# Do conversions
1561640399147:settings <- PEcAn.workflow::do_conversions(settings)
1561640403554:# Query the trait database for data and priors
1561640403556:if (PEcAn.utils::status.check("TRAIT") == 0){
1561640403557:PEcAn.utils::status.start("TRAIT")
1561640403558:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1561640403559:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1561640403560:PEcAn.utils::status.end()
1561640403561:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1561640403562:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1561640403563:}
1561640415740:# Run the PEcAn meta.analysis
1561640415741:if(!is.null(settings$meta.analysis)) {
1561640415742:if (PEcAn.utils::status.check("META") == 0){
1561640415743:PEcAn.utils::status.start("META")
1561640415744:PEcAn.MA::runModule.run.meta.analysis(settings)
1561640415745:PEcAn.utils::status.end()
1561640415746:}
1561640415747:}
1561640433018:# Write model specific configs
1561640433019:if (PEcAn.utils::status.check("CONFIG") == 0){
1561640433020:PEcAn.utils::status.start("CONFIG")
1561640433021:settings <- PEcAn.workflow::runModule.run.write.configs(settings)
1561640433022:PEcAn.settings::write.settings(settings, outputfile='pecan.CONFIGS.xml')
1561640433023:PEcAn.utils::status.end()
1561640433024:} else if (file.exists(file.path(settings$outdir, 'pecan.CONFIGS.xml'))) {
1561640433025:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.CONFIGS.xml'))
1561640433026:}
1561642559653:if ((length(which(commandArgs() == "--advanced")) != 0) && (PEcAn.utils::status.check("ADVANCED") == 0)) {
1561642559655:PEcAn.utils::status.start("ADVANCED")
1561642559657:q();
1561642559659:}
1561642562060:# Start ecosystem model runs
1561642562061:if (PEcAn.utils::status.check("MODEL") == 0) {
1561642562062:PEcAn.utils::status.start("MODEL")
1561642562063:PEcAn.remote::runModule.start.model.runs(settings, stop.on.error = FALSE)
1561642562064:PEcAn.utils::status.end()
1561642562065:}
1561642619843:traceback()
1561644499539:settings$host
1561645071266:host
1561999240964:library(dplyr)
1561999241634:library(ggplot2)
1561999241800:library(gridExtra)
1561999243034:theme_set(theme_bw())
1561999244235:# Open up a connection to BETY
1561999244237:bety <-dplyr::src_postgres(host = "postgres",
1561999244239:user = "bety",
1561999244241:password = "bety",
1561999244243:dbname = "bety")
1561999450629:library(dplyr)
1561999451217:library(ggplot2)
1561999453088:library(gridExtra)
1561999454250:theme_set(theme_bw())
1561999455429:# Open up a connection to BETY
1561999455431:bety <-dplyr::src_postgres(host = "postgres",
1561999455434:user = "bety",
1561999455436:password = "bety",
1561999455438:dbname = "bety")
1561999457871:# Get all priors data for CLM50 PFTs
1561999457872:clm_pfts <- tbl(bety, 'pfts') %>%
1561999457874:filter(modeltype_id == 9000000001) %>%
1561999457876:select(id, name) %>%
1561999457878:collect()
1561999459591:pft_prior_link <- tbl(bety, 'pfts_priors') %>%
1561999459593:filter(pft_id %in% clm_pfts$id) %>%
1561999459595:collect()
1561999460523:pft_prior_combined <- left_join(pft_prior_link, clm_pfts, by = c("pft_id" = "id"))
1561999461353:clm_priors <- tbl(bety, 'priors') %>%
1561999461354:filter(id %in% pft_prior_link$prior_id) %>%
1561999461356:collect()
1561999462112:clm_priors_extended <- left_join(clm_priors, pft_prior_combined, by = c("id" = "prior_id"))
1561999462791:clm_variables <- tbl(bety, 'variables') %>%
1561999462793:select(id, name, units) %>%
1561999462795:collect()
1561999464101:clm_priors_full <- left_join(clm_priors_extended, clm_variables, by = c("variable_id" = "id")) %>%
1561999464103:mutate(distn_r = paste0("d", distn),
1561999464105:pft_col = case_when(name.x == "Setaria WT priors defaults" ~ "black",
1561999464107:name.x == "Setaria WT priors data" ~ "red"))
1561999466309:# check variable names matching (growth respiration, Vcmax)
1561999466311:var_plot <- list()
1561999483828:for(var_name in sort(unique(clm_priors_full$name.y))){
1561999483830:clm_priors_by_var <- filter(clm_priors_full, name.y == var_name)
1561999483832:plot_center <- mean(c(clm_priors_by_var$parama[1], clm_priors_by_var$parama[2]), na.rm = TRUE)
1561999483833:var_plot[[var_name]] <- ggplot(data = data.frame(x = c(plot_center + (5 * plot_center), 0)), aes(x)) +
1561999483835:stat_function(fun = clm_priors_by_var$distn_r[1], n = 101,
1561999483836:args = list(clm_priors_by_var$parama[1], clm_priors_by_var$paramb[1]),
1561999483837:col = clm_priors_by_var$pft_col[1]) +
1561999483838:stat_function(fun = clm_priors_by_var$distn_r[2], n = 101,
1561999483839:args = list(clm_priors_by_var$parama[2], clm_priors_by_var$paramb[2]),
1561999483840:color = clm_priors_by_var$pft_col[2]) +
1561999483842:labs(x = paste0(var_name, " (", clm_priors_by_var$units[1], ")"), y = "") +
1561999483843:theme(axis.title.y = element_blank(),
1561999483844:axis.text.y = element_blank(),
1561999483845:axis.ticks.y = element_blank())
1561999483846:}
1561999484731:do.call(grid.arrange, var_plot)
1561999698907:warnings()
1561999757099:View(clm_priors_full)
1561999917127:getwd()
1561999980313:#load("/your_own_path/to_the_prior_distns/prior.distns.Rdata")
1561999980315:load("clm_params_data_out/pft/Setaria WT priors data/prior.distns.Rdata")
1562000000015:#load("/your_own_path/to_the_prior_distns/prior.distns.Rdata")
1562000000017:load("clm_params_data_out/pft/Setaria WT priors data/prior.distns.Rdata")
1562000002962:View(prior.distns)
1562000011749:library(ggplot2)
1562000012449:library(ggridges)
1562000012451:library(RColorBrewer)
1562000012660:library(gridExtra)
1562000020254:install.packages("ggridges")
1562000036992:.libPaths()
1562000062554:.libPaths("R_libs/")
1562000066514:install.packages("ggridges")
1562000079069:library(ggridges)
1562000089369:#load("/your_own_path/to_the_prior_distns/prior.distns.Rdata")
1562000089372:load("clm_params_data_out/pft/Setaria WT priors data/prior.distns.Rdata")
1562000090213:library(ggplot2)
1562000090973:library(ggridges)
1562000090975:library(RColorBrewer)
1562000091251:library(gridExtra)
1562000119704:#load("/your_own_path/to_the_prior_distns/prior.distns.Rdata")
1562000119705:load("clm_params_data_out/pft/Setaria WT priors data/prior.distns.Rdata")
1562000120582:library(ggplot2)
1562000121331:.libPaths("~/R_libs/")
1562000122387:library(ggridges)
1562000123731:library(RColorBrewer)
1562000124104:library(gridExtra)
1562000126923:plot_db_distns <- function(prior.distns){
1562000126925:parnames <- rownames(prior.distns)
1562000126928:dist_matrix <- matrix(NA, nrow = 1000000, ncol = length(parnames))
1562000126930:colnames(dist_matrix) <- parnames
1562000126933:for(i in seq_along(parnames)){
1562000126934:post <- dist_matrix[rownames(dist_matrix) == parnames[i],]
1562000126935:dist_matrix[,i] <- eval(parse(text = paste0("r", prior.distns$distn[i],"(1000000,", prior.distns$parama[i], ",", prior.distns$paramb[i],")")))
1562000126936:}
1562000126939:dist_df <- reshape::melt(dist_matrix)
1562000126941:colnames(dist_df) <- c("dist", "parameter", "value")
1562000126942:dist_df$dist <- "prior"
1562000126945:n <- length(parnames)
1562000126946:qual_col_pals <- brewer.pal.info[brewer.pal.info$category == 'qual',]
1562000126947:col_vector <- unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
1562000126949:plot_colors =sample(col_vector, n)
1562000126952:plot.list <- list()
1562000126953:for(i in  seq_along(parnames)){
1562000126954:sub_df <- dist_df[dist_df$parameter == parnames[i],]
1562000126955:plot.list[[i]] <- ggplot(sub_df, aes(x = value, y = 0)) +
1562000126957:geom_density_ridges( fill=plot_colors[i]) +
1562000126958:theme(legend.position="none",
1562000126959:axis.title.y=element_blank(),
1562000126961:axis.text.y=element_blank(),
1562000126962:axis.ticks.y=element_blank()) + ggtitle(parnames[i])
1562000126963:}
1562000126966:nplots <- length(plot.list)
1562000126968:nCol <- floor(sqrt(nplots))
1562000126969:do.call("grid.arrange", c(plot.list, ncol=nCol))
1562000126970:}
1562000128788:plot_db_distns(prior.distns)
1562000197378:#load("/your_own_path/to_the_prior_distns/prior.distns.Rdata")
1562000197379:load("clm_params_data_out/pft/Setaria WT priors data/prior.distns.Rdata")
1562000197382:library(ggplot2)
1562000198136:.libPaths("~/R_libs/")
1562000198137:library(ggridges)
1562000198168:library(RColorBrewer)
1562000198180:library(gridExtra)
1562000205318:prior.distns
1562000209447:parnames <- rownames(prior.distns)
1562000216782:dist_matrix <- matrix(NA, nrow = 1000000, ncol = length(parnames))
1562000222404:View(dist_matrix)
1562000230708:colnames(dist_matrix) <- parnames
1562000233188:View(dist_matrix)
1562000277587:for(i in seq_along(parnames)){
1562000277588:post <- dist_matrix[rownames(dist_matrix) == parnames[i],]
1562000277590:dist_matrix[,i] <- eval(parse(text = paste0("r", prior.distns$distn[i],"(1000000,", prior.distns$parama[i], ",", prior.distns$paramb[i],")")))
1562000277591:}
1562009347090:View(dist_matrix)
1562009420493:#load("/your_own_path/to_the_prior_distns/prior.distns.Rdata")
1562009420495:load("clm_params_data_out/pft/Setaria WT priors data/prior.distns.Rdata")
1562009421489:library(ggplot2)
1562009422218:.libPaths("~/R_libs/")
1562009422978:library(ggridges)
1562009423701:library(RColorBrewer)
1562009424085:library(gridExtra)
1562009427189:parnames <- rownames(prior.distns)
1562009428077:dist_matrix <- matrix(NA, nrow = 1000000, ncol = length(parnames))
1562009428912:colnames(dist_matrix) <- parnames
1562009429924:for(i in seq_along(parnames)){
1562009429925:post <- dist_matrix[rownames(dist_matrix) == parnames[i],]
1562009429927:dist_matrix[,i] <- eval(parse(text = paste0("r", prior.distns$distn[i],"(1000000,", prior.distns$parama[i], ",", prior.distns$paramb[i],")")))
1562009429929:}
1562009440493:head(dist_matrix)
1562009460877:seq_along(parnames)
1562009473357:i <- 1
1562009495234:prior.distns$distn[i]
1562009505447:prior.distns$parama[i]
1562009520823:prior.distns$paramb[i]
1562009541942:paste0("r", prior.distns$distn[i],"(1000000,", prior.distns$parama[i], ",", prior.distns$paramb[i],")")
1562009576511:rlnorm(1000000,0.811,0.843)
1562009579824:paste0("r", prior.distns$distn[i],"(1000000,", prior.distns$parama[i], ",", prior.distns$paramb[i],")")
1562009585010:head(rlnorm(1000000,0.811,0.843))
1562009596767:View(prior.distns)
1562009694083:load("clm_params_data_out/pft/Setaria WT priors data/prior.distns.Rdata")
1562009694091:library(ggplot2)
1562009694822:.libPaths("~/R_libs/")
1562009694824:library(ggridges)
1562009694854:library(RColorBrewer)
1562009694865:library(gridExtra)
1562009697099:# set up empty matrix to hold values for each parameter from distribution
1562009697101:parnames <- rownames(prior.distns)
1562009698151:dist_matrix <- matrix(NA, nrow = 1000, ncol = length(parnames))
1562009699047:colnames(dist_matrix) <- parnames
1562009700412:# generate 1 million values for each parameter and put into matrix
1562009700414:for(i in seq_along(parnames)){
1562009700416:post <- dist_matrix[rownames(dist_matrix) == parnames[i],]
1562009700418:dist_matrix[,i] <- eval(parse(text = paste0("r", prior.distns$distn[i],"(1000000,",
1562009700420:prior.distns$parama[i], ",",
1562009700421:prior.distns$paramb[i],")")))
1562009700422:}
1562009710375:# generate 1 million values for each parameter and put into matrix
1562009710377:for(i in seq_along(parnames)){
1562009710379:post <- dist_matrix[rownames(dist_matrix) == parnames[i],]
1562009710380:dist_matrix[,i] <- eval(parse(text = paste0("r", prior.distns$distn[i],"(1000,",
1562009710382:prior.distns$parama[i], ",",
1562009710384:prior.distns$paramb[i],")")))
1562009710385:}
1562009714518:View(dist_matrix)
1562009747527:dist_df <- reshape::melt(dist_matrix)
1562009750260:View(dist_df)
1562009760897:colnames(dist_df) <- c("dist", "parameter", "value")
1562009762033:dist_df$dist <- "prior"
1562009764866:View(dist_df)
1562009812700:n <- length(parnames)
1562009816739:n
1562009819568:qual_col_pals <- brewer.pal.info[brewer.pal.info$category == 'qual',]
1562009829696:qual_col_pals
1562009837139:col_vector <- unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
1562009838010:plot_colors =sample(col_vector, n)
1562009842937:plot_colors
1562009858269:col_vector
1562009881621:plot.list <- list()
1562009914535:for(i in  seq_along(parnames)){
1562009914536:sub_df <- dist_df[dist_df$parameter == parnames[i],]
1562009914538:plot.list[[i]] <- ggplot(sub_df, aes(x = value, y = 0)) +
1562009914540:geom_density_ridges( fill=plot_colors[i]) +
1562009914542:theme(legend.position="none",
1562009914544:axis.title.y=element_blank(),
1562009914546:axis.text.y=element_blank(),
1562009914547:axis.ticks.y=element_blank()) + ggtitle(parnames[i])
1562009914548:}
1562009921736:plot.list[1]
1562009926256:plot.list
1562009942280:parnames
1562009958713:nplots <- length(plot.list)
1562009959867:nCol <- floor(sqrt(nplots))
1562009966641:nplots
1562009968963:nCol
1562009972341:do.call("grid.arrange", c(plot.list, ncol=nCol))
1562009995659:?geom_density_ridges
1562010023113:sub_df
1562010028456:head(sub_df)
1562010183079:# TODO: download parameters using pecanapi R package?
1562010183082:load("clm_params_data_out/pft/Setaria WT priors data/prior.distns.Rdata")
1562010220843:getwd()
1562010233733:source("sentinel-detection/parameter_dists/plot_priors_istem.R")
1562011264573:?geom_density_ridges
1562011329052:# set up empty matrix to hold values for each parameter from distribution
1562011329053:parnames <- rownames(prior.distns)
1562011330282:dist_matrix <- matrix(NA, nrow = 1000000, ncol = length(parnames))
1562011330446:colnames(dist_matrix) <- parnames
1562011330592:# generate 1 million values for each parameter and put into matrix
1562011330593:for(i in seq_along(parnames)){
1562011330594:post <- dist_matrix[rownames(dist_matrix) == parnames[i],]
1562011330595:dist_matrix[,i] <- eval(parse(text = paste0("r", prior.distns$distn[i],"(1000000,",
1562011330596:prior.distns$parama[i], ",",
1562011330597:prior.distns$paramb[i],")")))
1562011330598:}
1562011332121:# manipulate into long dataframe
1562011332122:dist_df <- reshape::melt(dist_matrix)
1562011333787:colnames(dist_df) <- c("dist", "parameter", "value")
1562011333788:# TODO: adapt name for prior + data/default
1562011333789:dist_df$dist <- "prior"
1562011334138:# get colors for each distribution
1562011334140:n <- length(parnames)
1562011334142:qual_col_pals <- brewer.pal.info[brewer.pal.info$category == 'qual',]
1562011334166:col_vector <- unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
1562011334172:plot_colors =sample(col_vector, n)
1562011334176:# plot distribution using dataframe of parameter values
1562011334177:# TODO: be able to input single color for all values
1562011334178:plot.list <- list()
1562011334180:for(i in  seq_along(parnames)){
1562011334181:sub_df <- dist_df[dist_df$parameter == parnames[i],]
1562011334182:plot.list[[i]] <- ggplot(sub_df, aes(x = value, y = 0)) +
1562011334183:geom_density_ridges( fill=plot_colors[i]) +
1562011334184:theme(legend.position="none",
1562011334185:axis.title.y=element_blank(),
1562011334186:axis.text.y=element_blank(),
1562011334187:axis.ticks.y=element_blank()) + ggtitle(parnames[i])
1562011334188:}
1562011335700:nplots <- length(plot.list)
1562011335701:nCol <- floor(sqrt(nplots))
1562011335702:do.call("grid.arrange", c(plot.list, ncol=nCol))
1562011377507:?geom_density
1562011408641:View(dist_df)
1562011441891:ggplot(dist_df, aes(value)) + geom_density() + facet_wrap(~parameter)
1562011499973:ggplot(dist_df, aes(value)) + geom_density() + facet_wrap(~parameter, scales = "free")
1562011564971:plot_db_distns(prior.distns)
1562079101497:con <- DBI::dbConnect(RPostgres::Postgres(), user = "bety", password = "bety", host = "postgres")
1562079194895:library(RPostgres)
1562079212715:.libPaths("~/R_libs/")
1562079216101:con <- DBI::dbConnect(RPostgres::Postgres(), user = "bety", password = "bety", host = "postgres")
1562079218647:DBI::dbListTables(con)
1562093769839:getwd()
1562093784521:list.files("../../data/")
1562170905554:library(dplyr)
1562170960006:.libPaths("~/R_libs/")
1562170964117:DBI::dbConnect(RPostgreSQL::PostgreSQL(),
1562170964118:user = "bety",
1562170964119:password = "bety",
1562170964120:host = "postgres")
1562170969820:con <- DBI::dbConnect(RPostgreSQL::PostgreSQL(),
1562170969823:user = "bety",
1562170969825:password = "bety",
1562170969826:host = "postgres")
1562170971990:tbl(con, "dbfiles") %>%
1562170971992:filter(file_name %like% "OGE%", file_path %like% "/data%") %>%
1562170971994:select(id, file_name, file_path, machine_id, container_type, container_id)
1562170995740:machine_values <- tbl(con, "dbfiles") %>%
1562170995742:filter(file_name %like% "OGE%", file_path %like% "/data%") %>%
1562170995744:select(id, file_name, file_path, machine_id, container_type, container_id)
1562170997642:View(machine_values)
1562171005561:machine_values$id
1562171028563:machine_values <- tbl(con, "dbfiles") %>%
1562171028566:filter(file_name %like% "OGE%", file_path %like% "/data%") %>%
1562171028568:select(id, file_name, file_path, machine_id, container_type, container_id) %>%
1562171028570:collect()
1562171032159:View(machine_values)
1562171134625:machine_id <- tbl(con, "dbfiles") %>%
1562171134627:filter(file_name == "OGE2_", file_path == "/data/oge2OLD") %>%
1562171134629:pull(machine_id)
1562171139933:machine_id
1562171149311:options(scipen = 999)
1562171150495:machine_id
1562171155705:tbl(con, "machines") %>%
1562171155707:filter(id == !!machine_id)
1562171170703:View(tbl(con, "machines") %>%
1562171170705:filter(id == !!machine_id))
1562171179759:View(tbl(con, "machines") %>%
1562171179761:filter(id == !!machine_id) %>%
1562171179762:collect())
1562174224667:options(scipen = 999)
1562174228658:library(dplyr)
1562174229290:con <- DBI::dbConnect(RPostgreSQL::PostgreSQL(), user = "bety", password = "bety", host = "postgres")
1562174229816:tbl(con, "dbfiles") %>%
1562174229817:filter(file_name %like% "OGE%", file_path %like% "/data%") %>%
1562174229819:select(id, file_name, file_path, machine_id, container_type, container_id)
1562174328630:machine_id <- tbl(con, "dbfiles") %>%
1562174328633:filter(file_name == "OGE2_", file_path == "/data/oge2OLD") %>%
1562174328634:pull(machine_id)
1562174331483:tbl(con, "machines") %>%
1562174331485:filter(id == !!machine_id)
1562174383096:machine_id
1562174387538:!!machine_id
1562174427171:source('~/.active-rstudio-document', echo=TRUE)
1562174460612:tbl(con, "machines") %>%
1562174460614:filter(id == !!machine_id) %>%
1562174460616:select(hostname)
1562174938710:machine_id2 <- "25"
1562174947629:machine_id
1562174949761:machine_id2
1562174961432:machine_id2 <- c(25)
1562174963612:machine_id2
1562174973779:tbl(con, "machines") %>%
1562174973780:filter(id == !!machine_id2) %>%
1562174973781:select(hostname)
1562174983237:tbl(con, "machines") %>%
1562174983238:filter(id == !!machine_id2)
1562176250168:# Retrieve the models associated with the "old" welsch.cyverse.org machine,
1562176250170:# which was machine ID 25
1562176250172:models <- tbl(con, "dbfiles") %>%
1562176250173:filter(machine_id == 25, container_type == "Model") %>%
1562176250176:collect()
1562176254044:models
1562176263916:View(models)
1562176305088:machine_id
1562176312312:models2 <- tbl(con, "dbfiles") %>%
1562176312313:filter(machine_id == 9000000003, container_type == "Model") %>%
1562176312314:collect()
1562176313851:models2
1562176355708:machine_id
1562176363485:# It should have ED2 and BioCro. If not, there's a problem.
1562176363486:# Assuming that worked OK, just create new identical records, but under the new machine ID
1562176363488:DBI::dbExecute(con, "INSERT INTO dbfiles (machine_id, file_name, file_path, container_type, container_id) VALUES ($1, $2, $3, $4, $5)",
1562176363490:list(machine_id, models$file_name, models$file_path, models$container_type, models$container_id))
1562176391852:models2 <- tbl(con, "dbfiles") %>%
1562176391854:filter(machine_id == 9000000003, container_type == "Model") %>%
1562176391856:collect()
1562176392154:models2
1562176409043:library(DBI)
1562176412889:# It should have ED2 and BioCro. If not, there's a problem.
1562176412890:# Assuming that worked OK, just create new identical records, but under the new machine ID
1562176412892:DBI::dbExecute(con, "INSERT INTO dbfiles (machine_id, file_name, file_path, container_type, container_id) VALUES ($1, $2, $3, $4, $5)",
1562176412894:list(machine_id, models$file_name, models$file_path, models$container_type, models$container_id))
1562176446295:list(machine_id, models$file_name, models$file_path, models$container_type, models$container_id)
1562176769682:machine_id
1562176979565:library(dplyr)
1562176980497:con <- DBI::dbConnect(RPostgre::Postgre(),
1562176980498:user = "bety",
1562176980499:password = "bety",
1562176980500:host = "postgres")
1562176996948:con <- DBI::dbConnect(RPostgres::Postgres(),
1562176996949:user = "bety",
1562176996950:password = "bety",
1562176996951:host = "postgres")
1562177024639:.libPaths("~/R_libs/")
1562177030796:.libPaths("~/R_libs/")
1562177032029:library(dplyr)
1562177033712:con <- DBI::dbConnect(RPostgres::Postgres(),
1562177033713:user = "bety",
1562177033714:password = "bety",
1562177033715:host = "postgres")
1562177036365:tbl(con, "dbfiles") %>%
1562177036366:filter(file_name %like% "OGE%", file_path %like% "/data%") %>%
1562177036367:select(id, file_name, file_path, machine_id, container_type, container_id)
1562177038176:machine_id <- tbl(con, "dbfiles") %>%
1562177038177:filter(file_name == "OGE2_", file_path == "/data/oge2OLD") %>%
1562177038178:pull(machine_id)
1562177039656:tbl(con, "machines") %>%
1562177039659:filter(id == !!machine_id) %>%
1562177039660:select(hostname)
1562177045106:machine_id2 <- c(25)
1562177046568:tbl(con, "machines") %>%
1562177046569:filter(id == !!machine_id2) %>%
1562177046570:select(hostname)
1562177048214:# Retrieve the models associated with the "old" welsch.cyverse.org machine,
1562177048215:# which was machine ID 25
1562177048216:models <- tbl(con, "dbfiles") %>%
1562177048217:filter(machine_id == 25, container_type == "Model") %>%
1562177048217:collect()
1562177049071:models
1562177050458:models2 <- tbl(con, "dbfiles") %>%
1562177050459:filter(machine_id == 9000000003, container_type == "Model") %>%
1562177050460:collect()
1562177051680:models2
1562177053791:# It should have ED2 and BioCro. If not, there's a problem.
1562177053792:# Assuming that worked OK, just create new identical records, but under the new machine ID
1562177053793:DBI::dbExecute(con, "INSERT INTO dbfiles (machine_id, file_name, file_path, container_type, container_id) VALUES ($1, $2, $3, $4, $5)",
1562177053793:list(machine_id, models$file_name, models$file_path, models$container_type, models$container_id))
1562177081728:list(machine_id, models$file_name, models$file_path, models$container_type, models$container_id)
1562177106427:models$file_name
1562177118070:list(machine_id, models$file_name[1], models$file_path, models$container_type, models$container_id)
1562177137108:list(machine_id, models$file_name[1], models$file_path[1], models$container_type[1], models$container_id[1])
1562177140664:# It should have ED2 and BioCro. If not, there's a problem.
1562177140667:# Assuming that worked OK, just create new identical records, but under the new machine ID
1562177140669:DBI::dbExecute(con, "INSERT INTO dbfiles (machine_id, file_name, file_path, container_type, container_id) VALUES ($1, $2, $3, $4, $5)",
1562177140671:list(machine_id, models$file_name[1], models$file_path[1], models$container_type[1], models$container_id[1]))
1562177147042:models2 <- tbl(con, "dbfiles") %>%
1562177147044:filter(machine_id == 9000000003, container_type == "Model") %>%
1562177147046:collect()
1562177147966:models2
1562177167351:# It should have ED2 and BioCro. If not, there's a problem.
1562177167352:# Assuming that worked OK, just create new identical records, but under the new machine ID
1562177167353:DBI::dbExecute(con, "INSERT INTO dbfiles (machine_id, file_name, file_path, container_type, container_id) VALUES ($1, $2, $3, $4, $5)",
1562177167355:list(machine_id, models$file_name[2], models$file_path[2], models$container_type[2], models$container_id[2]))
1562177171246:models2 <- tbl(con, "dbfiles") %>%
1562177171248:filter(machine_id == 9000000003, container_type == "Model") %>%
1562177171250:collect()
1562177171987:models2
1562177176459:models
1562177192089:# It should have ED2 and BioCro. If not, there's a problem.
1562177192091:# Assuming that worked OK, just create new identical records, but under the new machine ID
1562177192093:DBI::dbExecute(con, "INSERT INTO dbfiles (machine_id, file_name, file_path, container_type, container_id) VALUES ($1, $2, $3, $4, $5)",
1562177192095:list(machine_id, models$file_name[3], models$file_path[3], models$container_type[3], models$container_id[3]))
1562177195730:models2 <- tbl(con, "dbfiles") %>%
1562177195731:filter(machine_id == 9000000003, container_type == "Model") %>%
1562177195733:collect()
1562177197186:models2
1562179001566:getwd()
1562181283378:# ----------------------------------------------------------------------
1562181283380:# Load required libraries
1562181283381:# ----------------------------------------------------------------------
1562181283382:library(PEcAn.all)
1562181288119:library(PEcAn.utils)
1562181288121:library(RCurl)
1562181291403:# make sure always to call status.end
1562181291404:options(warn=1)
1562181292824:options(error=quote({
1562181292825:PEcAn.utils::status.end("ERROR")
1562181292826:PEcAn.remote::kill.tunnel(settings)
1562181292827:if (!interactive()) {
1562181292829:q(status = 1)
1562181292830:}
1562181292832:}))
1562181294414:# ----------------------------------------------------------------------
1562181294415:# PEcAn Workflow
1562181294416:# ----------------------------------------------------------------------
1562181294417:# Open and read in settings file for PEcAn run.
1562181294418:args <- commandArgs(trailingOnly = TRUE)
1562181295432:if (is.na(args[1])){
1562181295433:settings <- PEcAn.settings::read.settings("/data/test_files/ed2_files/pecan64.ed2.xml")
1562181295434:} else {
1562181295435:settings.file <- args[1]
1562181295436:settings <- PEcAn.settings::read.settings(settings.file)
1562181295437:}
1562181296622:# Check for additional modules that will require adding settings
1562181296624:if("benchmarking" %in% names(settings)){
1562181296625:library(PEcAn.benchmark)
1562181296627:settings <- papply(settings, read_settings_BRR)
1562181296629:}
1562181297834:if("sitegroup" %in% names(settings)){
1562181297835:if(is.null(settings$sitegroup$nSite)){
1562181297837:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1562181297838:sitegroupId = settings$sitegroup$id)
1562181297840:} else {
1562181297841:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1562181297843:sitegroupId = settings$sitegroup$id,
1562181297844:nSite = settings$sitegroup$nSite)
1562181297846:}
1562181297847:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1562181297849:}
1562181298940:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1562181298942:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1562181301892:# Write pecan.CHECKED.xml
1562181301894:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1562181303563:# start from scratch if no continue is passed in
1562181303564:statusFile <- file.path(settings$outdir, "STATUS")
1562181306343:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1562181306344:file.remove(statusFile)
1562181306345:}
1562181307535:# Do conversions
1562181307536:settings <- PEcAn.workflow::do_conversions(settings)
1562181309922:# Query the trait database for data and priors
1562181309924:if (PEcAn.utils::status.check("TRAIT") == 0){
1562181309926:PEcAn.utils::status.start("TRAIT")
1562181309928:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1562181309931:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1562181309932:PEcAn.utils::status.end()
1562181309934:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1562181309935:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1562181309936:}
1562181331571:# Run the PEcAn meta.analysis
1562181331573:if(!is.null(settings$meta.analysis)) {
1562181331575:if (PEcAn.utils::status.check("META") == 0){
1562181331577:PEcAn.utils::status.start("META")
1562181331579:PEcAn.MA::runModule.run.meta.analysis(settings)
1562181331580:PEcAn.utils::status.end()
1562181331581:}
1562181331582:}
1562181339803:# Write model specific configs
1562181339805:if (PEcAn.utils::status.check("CONFIG") == 0){
1562181339807:PEcAn.utils::status.start("CONFIG")
1562181339809:settings <- PEcAn.workflow::runModule.run.write.configs(settings)
1562181339811:PEcAn.settings::write.settings(settings, outputfile='pecan.CONFIGS.xml')
1562181339812:PEcAn.utils::status.end()
1562181339814:} else if (file.exists(file.path(settings$outdir, 'pecan.CONFIGS.xml'))) {
1562181339815:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.CONFIGS.xml'))
1562181339816:}
1562181675262:if ((length(which(commandArgs() == "--advanced")) != 0) && (PEcAn.utils::status.check("ADVANCED") == 0)) {
1562181675264:PEcAn.utils::status.start("ADVANCED")
1562181675265:q();
1562181675267:}
1562181679633:# Start ecosystem model runs
1562181679634:if (PEcAn.utils::status.check("MODEL") == 0) {
1562181679635:PEcAn.utils::status.start("MODEL")
1562181679636:PEcAn.remote::runModule.start.model.runs(settings, stop.on.error = FALSE)
1562181679637:PEcAn.utils::status.end()
1562181679638:}
1562181688095:traceback()
1562183763256:getOption("pecanapi.rabbitmq_user")
1562350053798:# TODO: download parameters using pecanapi R package?
1562350053861:load("clm_params_data_out/pft/Setaria WT priors data/prior.distns.Rdata")
1562350056583:View(prior.distns)
1562350108067:load("~/biocro_results/pft/salix/prior.distns.Rdata")
1562350112769:View(prior.distns)
1562350563869:# TODO: download parameters using pecanapi R package?
1562350563871:load("clm_params_data_out/pft/Setaria WT priors data/prior.distns.Rdata")
1562350567227:View(prior.distns)
1562350864636:source("sentinel-detection/parameter_dists/plot_priors_istem.R")
1562355937686:?create_status_page
1562355959624:library(PEcAn.visualization)
1562355965429:?create_status_page
1562356044312:load("clm_params_data_out/pft/Setaria WT priors data/prior.distns.Rdata")
1562356049236:load("clm_params_data_out/pft/Setaria WT priors data/prior.distns.Rdata")
1562356089143:View(prior.distns)
1562356123720:library(dplyr)
1562356135243:prior.distns
1562356154654:row.names(prior.distns)
1562356202136:single_param <- prior.distns %>%
1562356202138:filter(row.names == "fineroot2leaf")
1562356220605:single_param <- prior.distns %>%
1562356220608:filter(dist == "gamma")
1562356230925:single_param <- prior.distns[1]
1562356237475:single_param
1562356243626:single_param <- prior.distns[1,]
1562356245883:single_param
1562356301342:single_param <- data.frame(prior.distns[1,])
1562356304288:single_param
1562356767084:# TODO: download parameters using pecanapi R package?
1562356767086:load("clm_params_data_out/pft/Setaria WT priors data/prior.distns.Rdata")
1562356771004:library(ggplot2)
1562356771748:.libPaths("~/R_libs/")
1562356771749:library(ggridges)
1562356771780:library(RColorBrewer)
1562356772501:library(gridExtra)
1562356774414:# set up empty matrix to hold values for each parameter from distribution
1562356774415:parnames <- rownames(prior.distns)
1562356776072:dist_matrix <- matrix(NA, nrow = 1000000, ncol = length(parnames))
1562356777918:colnames(dist_matrix) <- parnames
1562356783086:# generate 1 million values for each parameter and put into matrix
1562356783088:for(i in seq_along(parnames)){
1562356783090:post <- dist_matrix[rownames(dist_matrix) == parnames[i],]
1562356783092:dist_matrix[,i] <- eval(parse(text = paste0("r", prior.distns$distn[i],"(1000000,",
1562356783094:prior.distns$parama[i], ",",
1562356783095:prior.distns$paramb[i],")")))
1562356783096:}
1562356787764:View(dist_matrix)
1562356800939:class(dist_matrix)
1562356811936:# manipulate into long dataframe
1562356811937:dist_df <- reshape::melt(dist_matrix)
1562356817922:colnames(dist_df) <- c("dist", "parameter", "value")
1562356821798:dist_df
1562356984940:# TODO: download parameters using pecanapi R package?
1562356984941:load("clm_params_data_out/pft/Setaria WT priors data/prior.distns.Rdata")
1562356985131:library(ggplot2)
1562356985963:.libPaths("~/R_libs/")
1562356985964:library(ggridges)
1562356985996:library(RColorBrewer)
1562356986040:library(gridExtra)
1562356987782:# set up empty matrix to hold values for each parameter from distribution
1562356987784:parnames <- rownames(prior.distns)
1562356988792:dist_matrix <- matrix(NA, nrow = 1000000, ncol = length(parnames))
1562356989968:colnames(dist_matrix) <- parnames
1562356991663:# generate 1 million values for each parameter and put into matrix
1562356991665:for(i in seq_along(parnames)){
1562356991666:post <- dist_matrix[rownames(dist_matrix) == parnames[i],]
1562356991668:dist_matrix[,i] <- eval(parse(text = paste0("r", prior.distns$distn[i],"(1000000,",
1562356991669:prior.distns$parama[i], ",",
1562356991671:prior.distns$paramb[i],")")))
1562356991672:}
1562357018031:# TODO: download parameters using pecanapi R package?
1562357018032:load("clm_params_data_out/pft/Setaria WT priors data/prior.distns.Rdata")
1562357018694:library(ggplot2)
1562357019514:.libPaths("~/R_libs/")
1562357019516:library(ggridges)
1562357019546:library(RColorBrewer)
1562357019558:library(gridExtra)
1562357021925:# set up empty matrix to hold values for each parameter from distribution
1562357021926:parnames <- rownames(prior.distns)
1562357022824:dist_matrix <- matrix(NA, nrow = 1000, ncol = length(parnames))
1562357023644:colnames(dist_matrix) <- parnames
1562357024824:# generate 1 million values for each parameter and put into matrix
1562357024825:for(i in seq_along(parnames)){
1562357024826:post <- dist_matrix[rownames(dist_matrix) == parnames[i],]
1562357024827:dist_matrix[,i] <- eval(parse(text = paste0("r", prior.distns$distn[i],"(1000,",
1562357024828:prior.distns$parama[i], ",",
1562357024829:prior.distns$paramb[i],")")))
1562357024830:}
1562357027134:# manipulate into long dataframe
1562357027135:dist_df <- reshape::melt(dist_matrix)
1562357029292:colnames(dist_df) <- c("dist", "parameter", "value")
1562357038299:head(dist_df)
1562357057650:# TODO: adapt name for prior + data/default
1562357057652:dist_df$dist <- "prior"
1562357059955:head(dist_df)
1562357191852:load("clm_params_data_out/pft/Setaria WT priors data/prior.distns.Rdata")
1562357192940:single_param <- prior.distns[1,]
1562357198166:single_param
1562357203881:class(single_param)
1562357233765:row.names(single_param)
1562357344336:single_param_values <- data.frame(values = eval(parse(text = paste0("r",
1562357348031:)
1562357361841:single_param_values <- data.frame(values = eval(parse(text = paste0("r",
1562357361843:single_param$distn,
1562357361844:"(1000,",
1562357361846:single_param$parama,
1562357361848:",",
1562357361850:single_param$paramb))))
1562357377713:paste0("r",
1562357377716:single_param$distn,
1562357377718:"(1000,",
1562357377720:single_param$parama,
1562357377722:",",
1562357377724:single_param$paramb)
1562357391807:single_param_values <- data.frame(values = eval(parse(text = paste0("r",
1562357391809:single_param$distn,
1562357391811:"(1000,",
1562357391813:single_param$parama,
1562357391815:",",
1562357391816:single_param$paramb,
1562357391818:")"))))
1562357396570:single_param_values
1562357420778:paste0("r",
1562357420779:single_param$distn,
1562357420780:"(1000,",
1562357420781:single_param$parama,
1562357420782:",",
1562357420783:single_param$paramb,
1562357420784:")")
1562357461065:expression <- paste0("r",
1562357461068:single_param$distn,
1562357461069:"(1000,",
1562357461071:single_param$parama,
1562357461073:",",
1562357461075:single_param$paramb,
1562357461076:")")
1562357465290:expression
1562357489670:parse(expression)
1562357497078:eval(parse(expression))
1562357553057:values = eval(parse(text = paste0("r",
1562357553059:single_param$distn,
1562357553061:"(1000,",
1562357553062:single_param$parama,
1562357553064:",",
1562357553065:single_param$paramb,
1562357553066:")")))
1562357558488:values
1562357583636:values <- eval(parse(text = expression))
1562357586842:values
1562357594689:?parse
1562357703313:num_values <- 1000
1562357704109:expression <- paste0("r", single_param$distn, "(,", num_values, single_param$parama, ",", single_param$paramb, ")")
1562357707659:expression
1562357729755:num_values <- 1000
1562357730076:expression <- paste0("r", single_param$distn, "(", num_values, ",", single_param$parama, ",", single_param$paramb, ")")
1562357733088:expression
1562357737682:values <- eval(parse(text = expression))
1562357740518:values
1562357868664:load("clm_params_data_out/pft/Setaria WT priors data/prior.distns.Rdata")
1562357869274:num_values <- 1000
1562357870384:single_param <- prior.distns[1,]
1562357871523:expression <- paste0("r", single_param$distn, "(", num_values, ",", single_param$parama, ",", single_param$paramb, ")")
1562357872507:single_param_values <- data.frame(values <- eval(parse(text = expression)))
1562357879552:single_param_values
1562357888686:head(single_param_values)
1562357903397:colnames(single_param_values)
1562357914008:single_param_values <- data.frame(values = eval(parse(text = expression)))
1562357916545:colnames(single_param_values)
1562357919532:head(single_param_values)
1562357972353:library(ggridges)
1562357981749:.libPaths("~/R_libs/")
1562357982820:library(ggridges)
1562358031913:row.names(single_param)
1562358051241:ggplot(single_param_values, aes(x = values, y = 0)) +
1562358051243:geom_density_ridges() +
1562358051245:theme(legend.position="none",
1562358051246:axis.title.y=element_blank(),
1562358051248:axis.text.y=element_blank(),
1562358051249:axis.ticks.y=element_blank())
1562358051255:ggtitle(row.names(single_param))
1562358067764:library(ggplot2)
1562358072312:ggplot(single_param_values, aes(x = values, y = 0)) +
1562358072314:geom_density_ridges() +
1562358072316:theme(legend.position="none",
1562358072318:axis.title.y=element_blank(),
1562358072320:axis.text.y=element_blank(),
1562358072321:axis.ticks.y=element_blank())
1562358072608:ggtitle(row.names(single_param))
1562358117932:ggplot(single_param_values, aes(x = values, y = 0)) +
1562358117934:geom_density_ridges()
1562358124671:ggplot(single_param_values, aes(x = values, y = 0)) +
1562358124673:geom_density_ridges() +
1562358124676:ggtitle(row.names(single_param))
1562358130287:single_param_plot <-
1562358130289:ggplot(single_param_values, aes(x = values, y = 0)) +
1562358130291:geom_density_ridges() +
1562358130293:ggtitle(row.names(single_param)) +
1562358130295:theme(legend.position="none",
1562358130297:axis.title.y=element_blank(),
1562358130298:axis.text.y=element_blank(),
1562358130299:axis.ticks.y=element_blank())
1562359883797:single_param_plot <- ggplot(single_param_values, aes(x = values, y = 0)) +
1562359883800:geom_density_ridges() +
1562359883802:ggtitle(row.names(single_param))
1562359890740:single_param_plot
1562360025732:plot_parameter_dist <- function(param_data, num_values = 1000000){
1562360025734:expression <- paste0("r", param_data$distn, "(", num_values, ",", param_data$parama, ",", param_data$paramb, ")")
1562360025736:print(expression)
1562360025738:}
1562360041806:library(ggplot2)
1562360042552:.libPaths("~/R_libs/")
1562360043081:library(ggridges)
1562360052101:load("clm_params_data_out/pft/Setaria WT priors data/prior.distns.Rdata")
1562360052678:num_values <- 1000
1562360055114:single_param <- prior.distns[1,]
1562360058796:expression <- paste0("r", single_param$distn, "(", num_values, ",", single_param$parama, ",", single_param$paramb, ")")
1562360060280:single_param_values <- data.frame(values = eval(parse(text = expression)))
1562360069718:ggplot(single_param_values, aes(x = values, y = 0)) +
1562360069720:geom_density_ridges() +
1562360069722:ggtitle(row.names(single_param))
1562360078122:ggplot(single_param_values, aes(x = values, y = 0)) +
1562360078124:geom_density() +
1562360078126:ggtitle(row.names(single_param))
1562360140119:ggplot(single_param_values, aes(x = values)) +
1562360140121:geom_density() +
1562360140123:ggtitle(row.names(single_param))
1562360231849:plot_parameter_dist <- function(param_data, num_values = 1000000){
1562360231851:expression <- paste0("r", param_data$distn, "(", num_values, ",", param_data$parama, ",", param_data$paramb, ")")
1562360231854:print(expression)
1562360231856:}
1562360232464:plot_parameter_dist(ex_single_param)
1562360236365:ex_single_param <- prior.distns[1,]
1562360237492:plot_parameter_dist <- function(param_data, num_values = 1000000){
1562360237494:expression <- paste0("r", param_data$distn, "(", num_values, ",", param_data$parama, ",", param_data$paramb, ")")
1562360237496:print(expression)
1562360237498:}
1562360238353:plot_parameter_dist(ex_single_param)
1562360252878:single_param_values <- data.frame(values = eval(parse(text = expression)))
1562360283544:plot_parameter_dist <- function(param_data, num_values = 1000000){
1562360283546:expression <- paste0("r", param_data$distn, "(", num_values, ",", param_data$parama, ",", param_data$paramb, ")")
1562360283549:single_param_values <- data.frame(values = eval(parse(text = expression)))
1562360283551:single_param_plot <- ggplot(single_param_values, aes(x = values)) +
1562360283553:geom_density() +
1562360283555:ggtitle(row.names(single_param))
1562360283556:print(single_param_plot)
1562360283557:}
1562360292256:plot_parameter_dist <- function(param_data, num_values = 1000000){
1562360292258:expression <- paste0("r", param_data$distn, "(", num_values, ",", param_data$parama, ",", param_data$paramb, ")")
1562360292261:single_param_values <- data.frame(values = eval(parse(text = expression)))
1562360292263:single_param_plot <- ggplot(single_param_values, aes(x = values)) +
1562360292265:geom_density() +
1562360292267:ggtitle(row.names(single_param))
1562360292268:print(single_param_plot)
1562360292269:}
1562360292865:plot_parameter_dist(ex_single_param)
1562360327899:library(ggplot2)
1562360330178:load("clm_params_data_out/pft/Setaria WT priors data/prior.distns.Rdata")
1562360333808:ex_single_param <- prior.distns[1,]
1562360335191:plot_parameter_dist <- function(param_data, num_values = 1000000){
1562360335193:expression <- paste0("r", param_data$distn, "(", num_values, ",", param_data$parama, ",", param_data$paramb, ")")
1562360335195:single_param_values <- data.frame(values = eval(parse(text = expression)))
1562360335197:single_param_plot <- ggplot(single_param_values, aes(x = values)) +
1562360335198:geom_density() +
1562360335199:ggtitle(row.names(single_param))
1562360335200:print(single_param_plot)
1562360335202:}
1562360336188:plot_parameter_dist(ex_single_param)
1562360376627:plot_parameter_dist <- function(param_data, num_values = 1000000){
1562360376629:expression <- paste0("r", param_data$distn, "(", num_values, ",", param_data$parama, ",", param_data$paramb, ")")
1562360376631:single_param_values <- data.frame(values = eval(parse(text = expression)))
1562360376633:single_param_plot <- ggplot(single_param_values, aes(x = values)) +
1562360376635:geom_density() +
1562360376637:ggtitle(row.names(param_data))
1562360376638:print(single_param_plot)
1562360376639:}
1562360377598:plot_parameter_dist(ex_single_param)
1562360470871:library(ggplot2)
1562360471514:load("clm_params_data_out/pft/Setaria WT priors data/prior.distns.Rdata")
1562360474536:single_param <- prior.distns[1,]
1562360475563:num_values <- 1000000
1562360476741:expression <- paste0("r", single_param$distn, "(", num_values, ",", single_param$parama, ",", single_param$paramb, ")")
1562360477741:single_param_values <- data.frame(values = eval(parse(text = expression)))
1562360478943:single_param_plot <- ggplot(single_param_values, aes(x = values)) +
1562360478944:geom_density() +
1562360478945:ggtitle(row.names(single_param))
1562360480143:single_param_plot
1562360492841:library(ggplot2)
1562360493637:load("clm_params_data_out/pft/Setaria WT priors data/prior.distns.Rdata")
1562360496759:single_param <- prior.distns[1,]
1562360499016:num_values <- 1000
1562360499857:expression <- paste0("r", single_param$distn, "(", num_values, ",", single_param$parama, ",", single_param$paramb, ")")
1562360500357:single_param_values <- data.frame(values = eval(parse(text = expression)))
1562360500808:single_param_plot <- ggplot(single_param_values, aes(x = values)) +
1562360500809:geom_density() +
1562360500810:ggtitle(row.names(single_param))
1562360501764:single_param_plot
1562360560736:library(ggplot2)
1562360561526:load("clm_params_data_out/pft/Setaria WT priors data/prior.distns.Rdata")
1562360566690:.libPaths("~/R_libs/")
1562360566693:library(ggridges)
1562360569697:single_param <- prior.distns[1,]
1562360570345:num_values <- 1000
1562360571073:expression <- paste0("r", single_param$distn, "(", num_values, ",", single_param$parama, ",", single_param$paramb, ")")
1562360571591:single_param_values <- data.frame(values = eval(parse(text = expression)))
1562360574663:single_param_plot <- ggplot(single_param_values, aes(x = values, y = 0)) +
1562360574664:geom_density_ridges() +
1562360574665:ggtitle(row.names(single_param))
1562360575670:single_param_plot
1562360622958:source("sentinel-detection/parameter_dists/plot_priors_istem.R")
1562360673141:library(ggplot2)
1562360673922:load("clm_params_data_out/pft/Setaria WT priors data/prior.distns.Rdata")
1562360676967:.libPaths("~/R_libs/")
1562360678524:library(ggridges)
1562360682047:single_param <- prior.distns[1,]
1562360683170:num_values <- 1000000
1562360685587:expression <- paste0("r", single_param$distn, "(", num_values, ",", single_param$parama, ",", single_param$paramb, ")")
1562360686539:single_param_values <- data.frame(values = eval(parse(text = expression)))
1562360691703:single_param_plot <- ggplot(single_param_values, aes(x = values, y = 0)) +
1562360691705:geom_density_ridges() +
1562360691707:ggtitle(row.names(single_param))
1562360696252:single_param_plot
1562360752482:single_param_plot <- ggplot(single_param_values, aes(x = values, y = 0)) +
1562360752484:geom_density_ridges() +
1562360752486:ggtitle(row.names(single_param)) +
1562360752487:theme(legend.position="none",
1562360752489:axis.title.y=element_blank(),
1562360752490:axis.text.y=element_blank(),
1562360752492:axis.ticks.y=element_blank())
1562360752624:single_param_plot
1562361133294:# TODO: download parameters using pecanapi R package?
1562361133296:load("clm_params_data_out/pft/Setaria WT priors data/prior.distns.Rdata")
1562361134515:library(ggplot2)
1562361135272:.libPaths("~/R_libs/")
1562361135273:library(ggridges)
1562361135305:library(RColorBrewer)
1562361135317:library(gridExtra)
1562361135331:plot_db_distns <- function(prior.distns){
1562361135332:# set up empty matrix to hold values for each parameter from distribution
1562361135333:parnames <- rownames(prior.distns)
1562361135334:dist_matrix <- matrix(NA, nrow = 1000, ncol = length(parnames))
1562361135335:colnames(dist_matrix) <- parnames
1562361135337:# generate 1 million values for each parameter and put into matrix
1562361135338:for(i in seq_along(parnames)){
1562361135339:post <- dist_matrix[rownames(dist_matrix) == parnames[i],]
1562361135340:dist_matrix[,i] <- eval(parse(text = paste0("r", prior.distns$distn[i],"(1000,",
1562361135341:prior.distns$parama[i], ",",
1562361135342:prior.distns$paramb[i],")")))
1562361135343:}
1562361135345:# manipulate into long dataframe
1562361135347:dist_df <- reshape::melt(dist_matrix)
1562361135348:colnames(dist_df) <- c("dist", "parameter", "value")
1562361135349:# TODO: adapt name for prior + data/default
1562361135350:dist_df$dist <- "prior"
1562361135352:# get colors for each distribution
1562361135353:n <- length(parnames)
1562361135354:qual_col_pals <- brewer.pal.info[brewer.pal.info$category == 'qual',]
1562361135355:col_vector <- unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
1562361135356:plot_colors =sample(col_vector, n)
1562361135358:# plot distribution using dataframe of parameter values
1562361135359:# TODO: be able to input single color for all values
1562361135361:# TODO: replace ggridges function with geom_density if possible
1562361135362:plot.list <- list()
1562361135363:for(i in  seq_along(parnames)){
1562361135364:sub_df <- dist_df[dist_df$parameter == parnames[i],]
1562361135365:plot.list[[i]] <- ggplot(sub_df, aes(x = value, y = 0)) +
1562361135366:geom_density_ridges( fill=plot_colors[i]) +
1562361135367:theme(legend.position="none",
1562361135369:axis.title.y=element_blank(),
1562361135370:axis.text.y=element_blank(),
1562361135371:axis.ticks.y=element_blank()) + ggtitle(parnames[i])
1562361135372:}
1562361135375:nplots <- length(plot.list)
1562361135377:nCol <- floor(sqrt(nplots))
1562361135378:do.call("grid.arrange", c(plot.list, ncol=nCol))
1562361135379:}
1562361136499:plot_db_distns(prior.distns)
1562361155861:plot.list
1562361310820:# TODO: download parameters using pecanapi R package?
1562361310822:load("clm_params_data_out/pft/Setaria WT priors data/prior.distns.Rdata")
1562361310938:library(ggplot2)
1562361311764:.libPaths("~/R_libs/")
1562361311766:library(ggridges)
1562361311796:library(RColorBrewer)
1562361312346:library(gridExtra)
1562361315288:# set up empty matrix to hold values for each parameter from distribution
1562361315290:parnames <- rownames(prior.distns)
1562361316048:dist_matrix <- matrix(NA, nrow = 1000, ncol = length(parnames))
1562361316772:colnames(dist_matrix) <- parnames
1562361317660:# generate 1 million values for each parameter and put into matrix
1562361317662:for(i in seq_along(parnames)){
1562361317664:post <- dist_matrix[rownames(dist_matrix) == parnames[i],]
1562361317666:dist_matrix[,i] <- eval(parse(text = paste0("r", prior.distns$distn[i],"(1000,",
1562361317668:prior.distns$parama[i], ",",
1562361317670:prior.distns$paramb[i],")")))
1562361317672:}
1562361318520:# manipulate into long dataframe
1562361318522:dist_df <- reshape::melt(dist_matrix)
1562361318949:colnames(dist_df) <- c("dist", "parameter", "value")
1562361319533:# TODO: adapt name for prior + data/default
1562361319536:dist_df$dist <- "prior"
1562361320339:# get colors for each distribution
1562361320341:n <- length(parnames)
1562361320682:qual_col_pals <- brewer.pal.info[brewer.pal.info$category == 'qual',]
1562361321078:col_vector <- unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
1562361321456:plot_colors =sample(col_vector, n)
1562361322128:# plot distribution using dataframe of parameter values
1562361322130:# TODO: be able to input single color for all values
1562361322132:# TODO: replace ggridges function with geom_density if possible
1562361322134:plot.list <- list()
1562361322993:for(i in  seq_along(parnames)){
1562361322995:sub_df <- dist_df[dist_df$parameter == parnames[i],]
1562361322997:plot.list[[i]] <- ggplot(sub_df, aes(x = value, y = 0)) +
1562361323000:geom_density_ridges( fill=plot_colors[i]) +
1562361323002:theme(legend.position="none",
1562361323004:axis.title.y=element_blank(),
1562361323006:axis.text.y=element_blank(),
1562361323007:axis.ticks.y=element_blank()) + ggtitle(parnames[i])
1562361323008:}
1562361324039:nplots <- length(plot.list)
1562361324832:nCol <- floor(sqrt(nplots))
1562361326215:do.call("grid.arrange", c(plot.list, ncol=nCol))
1562361339359:View(dist_df)
1562361389397:dist_df[dist_df$parameter == "fineroot2leaf",]
1562361401141:dist_df$values[dist_df$parameter == "fineroot2leaf"]
1562361412647:dist_df$value[dist_df$parameter == "fineroot2leaf"]
1562361420605:right_values <- dist_df$value[dist_df$parameter == "fineroot2leaf"]
1562361427260:hist(right_values)
1562361461011:library(ggplot2)
1562361461255:load("clm_params_data_out/pft/Setaria WT priors data/prior.distns.Rdata")
1562361465964:single_param <- prior.distns[1,]
1562361466340:num_values <- 1000000
1562361469106:expression <- paste0("r", single_param$distn, "(", num_values, ",", single_param$parama, ",", single_param$paramb, ")")
1562361469912:single_param_values <- data.frame(values = eval(parse(text = expression)))
1562361477245:head(single_param_values)
1562361490978:hist(single_param_values)
1562361497009:hist(single_param_values$values)
1562361521399:max(single_param_values$values)
1562361525300:max(right_values)
1562361587065:plot_db_distns <- function(prior.distns){
1562361587067:# set up empty matrix to hold values for each parameter from distribution
1562361587069:parnames <- rownames(prior.distns)
1562361587071:dist_matrix <- matrix(NA, nrow = 1000, ncol = length(parnames))
1562361587073:colnames(dist_matrix) <- parnames
1562361587075:# generate 1 million values for each parameter and put into matrix
1562361587076:for(i in seq_along(parnames)){
1562361587077:post <- dist_matrix[rownames(dist_matrix) == parnames[i],]
1562361587079:print(paste0("r", prior.distns$distn[i],"(1000,",
1562361587080:prior.distns$parama[i], ",",
1562361587081:prior.distns$paramb[i],")"))
1562361587082:dist_matrix[,i] <- eval(parse(text = paste0("r", prior.distns$distn[i],"(1000,",
1562361587083:prior.distns$parama[i], ",",
1562361587084:prior.distns$paramb[i],")")))
1562361587086:}
1562361587088:# manipulate into long dataframe
1562361587089:dist_df <- reshape::melt(dist_matrix)
1562361587091:colnames(dist_df) <- c("dist", "parameter", "value")
1562361587092:# TODO: adapt name for prior + data/default
1562361587093:dist_df$dist <- "prior"
1562361587095:# get colors for each distribution
1562361587096:n <- length(parnames)
1562361587098:qual_col_pals <- brewer.pal.info[brewer.pal.info$category == 'qual',]
1562361587099:col_vector <- unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
1562361587100:plot_colors =sample(col_vector, n)
1562361587103:# plot distribution using dataframe of parameter values
1562361587104:# TODO: be able to input single color for all values
1562361587105:# TODO: replace ggridges function with geom_density if possible
1562361587106:plot.list <- list()
1562361587108:for(i in  seq_along(parnames)){
1562361587109:sub_df <- dist_df[dist_df$parameter == parnames[i],]
1562361587111:plot.list[[i]] <- ggplot(sub_df, aes(x = value, y = 0)) +
1562361587112:geom_density_ridges( fill=plot_colors[i]) +
1562361587113:theme(legend.position="none",
1562361587114:axis.title.y=element_blank(),
1562361587116:axis.text.y=element_blank(),
1562361587117:axis.ticks.y=element_blank()) + ggtitle(parnames[i])
1562361587119:}
1562361587122:nplots <- length(plot.list)
1562361587124:nCol <- floor(sqrt(nplots))
1562361587125:do.call("grid.arrange", c(plot.list, ncol=nCol))
1562361587126:}
1562361588196:plot_db_distns(prior.distns)
1562361604769:prior.distns
1562361639998:expression
1562361664923:rlnorm(1000,0.811,0.843)
1562361681307:max(rlnorm(1000,0.811,0.843))
1562361704986:max(rlnorm(1e+06,0.811,0.843))
1562361719090:1e+06
1562361731472:max(rlnorm(1e+06,0.811,0.843))
1562361742956:options(scipen = 999)
1562361744403:1e+06
1562361758730:max(rlnorm(1e+06,0.811,0.843))
1562361769998:max(rlnorm(1000000,0.811,0.843))
1562361775194:max(rlnorm(1000,0.811,0.843))
1562361813753:source("sentinel-detection/parameter_dists/plot_priors_istem.R")
1562361900596:source("pecan_riemer_fork/pecan/base/visualization/R/plot_parameter_dists.R")
1562615699258:library(shiny)
1562615750910:shiny::shinyApp(ui, server)
1562615942980:library(shiny)
1562615956871:getwd()
1562615963113:setwd("~/pecan/shiny")
1562615965022:getwd()
1562615992628:runApp("workflowPlot")
1562616011359:library(plotly)
1562616025052:install.packages("plotly")
1562616062609:.libPaths("~/R_libs/")
1562616066371:install.packages("plotly")
1562616097086:library(plotly)
1562616111319:.libPaths("~/R_libs/")
1562616119451:library(shiny)
1562616126747:setwd("~/pecan/shiny")
1562616132189:runApp("workflowPlot")
1562616153398:install.packages("shinythemes")
1562616163984:runApp("workflowPlot")
1562616175282:runApp("workflowPlot")
1562616187904:install.packages("shinyjs")
1562616194907:runApp("workflowPlot")
1562683355824:getwd()
1562683385195:setwd("/home/kristinariemer/")
1562684071108:trait.mcmc <- load("biocro_results/pft/salix/trait.mcmc.Rdata")
1562684081429:trait.mcmc
1562684148926:head(trait.mcmc)
1562684179912:load("biocro_results/pft/salix/trait.mcmc.Rdata")
1562684183730:View(trait.mcmc)
1562684200642:head(trait.mcmc$stomatal_slope.BB)
1562684216329:trait.mcmc$stomatal_slope.BB[[1]]
1562684221550:head(trait.mcmc$stomatal_slope.BB[[1]])
1562684226730:head(trait.mcmc$stomatal_slope.BB[[2]])
1562684229209:head(trait.mcmc$stomatal_slope.BB[[3]])
1562684281098:load("biocro_results/pft/salix/prior.distns.Rdata")
1562684283974:View(prior.distns)
1562684310513:priors <- prior.distns
1562684428467:do.plot <- !is.null(outdir)
1562684437340:filename.flag = ""
1562684440595:outdir = NULL
1562684443606:trait.data = NULL
1562684447329:do.plot <- !is.null(outdir)
1562684448318:if (do.plot == TRUE) {
1562684448320:pdf(file.path(outdir, paste("posteriors", filename.flag, ".pdf", sep = "")))
1562684448322:}
1562684467385:do.plot
1562684476895:names(trait.mcmc)
1562684514456:names(trait.mcmc)[1]
1562684519268:trait <- names(trait.mcmc)[1]
1562684528645:dat <- trait.mcmc[[trait]]
1562684532001:vname <- colnames(dat[[1]])
1562684534985:dat
1562684540451:vname
1562684543825:if ("beta.o" %in% vname) {
1562684543827:dat <- as.matrix(dat)[, "beta.o"]
1562684543829:}
1562684558278:pdist <- priors[trait, "distn"]
1562684560206:pparm <- as.numeric(priors[trait, 2:3])
1562684561510:ptrait <- trait
1562684566476:## first determine the candidate set of models based on any range restrictions
1562684566496:zerobound <- c("exp", "gamma", "lnorm", "weibull")
1562684609106:pdist
1562684620443:if (pdist %in% "beta") {
1562684620445:m   <- mean(dat)
1562684620446:v   <- var(dat)
1562684620449:k   <- (1 - m)/m
1562684620450:a   <- (k / ((1 + k) ^ 2 * v) - 1) / (1 + k)
1562684620452:b   <- a * k
1562684620454:fit <- try(suppressWarnings(fitdistr(dat, "beta", list(shape1 = a, shape2 = b))), silent = TRUE)
1562684620456:if (do.plot) {
1562684620457:x <- seq(0, 1, length = 1000)
1562684620458:plot(density(dat), col = 2, lwd = 2, main = trait)
1562684620461:if (!is.null(trait.data)) {
1562684620462:rug(trait.data[[trait]]$Y, lwd = 2, col = "purple")
1562684620463:}
1562684620464:lines(x, dbeta(x, fit$estimate[1], fit$estimate[2]), lwd = 2, type = "l")
1562684620465:lines(x, dbeta(x, pparm[1], pparm[2]), lwd = 3, type = "l", col = 3)
1562684620466:legend("topleft",
1562684620467:legend = c("data", "prior", "post", "approx"),
1562684620468:col = c("purple", 3, 2, 1), lwd = 2)
1562684620470:}
1562684620471:posteriors[trait, "parama"] <- fit$estimate[1]
1562684620472:posteriors[trait, "paramb"] <- fit$estimate[2]
1562684620473:} else if (pdist %in% zerobound | (pdist == "unif" & pparm[1] > 0)) {
1562684620474:dist.names <- c("exp", "lnorm", "weibull", "norm")
1562684620475:fit <- list()
1562684620476:fit[[1]] <- try(suppressWarnings(fitdistr(dat, "exponential")), silent = TRUE)
1562684620478:## fit[[2]] <- fitdistr(dat,'f',list(df1=10,df2=2*mean(dat)/(max(mean(dat)-1,1))))
1562684620479:fit[[2]] <- try(suppressWarnings(fitdistr(dat, "lognormal")), silent = TRUE)
1562684620480:fit[[3]] <- try(suppressWarnings(fitdistr(dat, "weibull")), silent = TRUE)
1562684620481:fit[[4]] <- try(suppressWarnings(fitdistr(dat, "normal")), silent = TRUE)
1562684620484:if (!trait == "cuticular_cond") {
1562684620485:fit[[5]] <- try(suppressWarnings(fitdistr(dat, "gamma")), silent = TRUE)
1562684620486:dist.names <- c(dist.names, "gamma")
1562684620487:}
1562684620489:failfit.bool <- sapply(fit, class) == "try-error"
1562684620490:fit[failfit.bool] <- NULL
1562684620491:dist.names <- dist.names[!failfit.bool]
1562684620493:fparm <- lapply(fit, function(x) { as.numeric(x$estimate) })
1562684620495:fAIC <- lapply(fit, AIC)
1562684620497:bestfit <- which.min(fAIC)
1562684620499:posteriors[ptrait, "distn"] <- dist.names[bestfit]
1562684620500:posteriors[ptrait, "parama"] <- fit[[bestfit]]$estimate[1]
1562684620501:if (bestfit == 1) {
1562684620503:posteriors[ptrait, "paramb"] <- NA
1562684620504:} else {
1562684620505:posteriors[ptrait, "paramb"] <- fit[[bestfit]]$estimate[2]
1562684620507:}
1562684620509:if (do.plot) {
1562684620511:.dens_plot(posteriors, priors, ptrait, dat, trait, trait.data)
1562684620512:}
1562684620513:} else {
1562684620515:## default: NORMAL
1562684620516:posteriors[trait, "distn"] <- "norm"
1562684620518:posteriors[trait, "parama"] <- mean(dat)
1562684620519:posteriors[trait, "paramb"] <- sd(dat)
1562684620521:if (do.plot) {
1562684620522:.dens_plot(posteriors, priors, ptrait, dat, trait, trait.data)
1562684620524:}
1562684620525:}
1562684643646:posteriors
1562684647333:## initialization
1562684647334:posteriors <- priors
1562684650366:posteriors
1562684657490:if (pdist %in% "beta") {
1562684657492:m   <- mean(dat)
1562684657493:v   <- var(dat)
1562684657494:k   <- (1 - m)/m
1562684657495:a   <- (k / ((1 + k) ^ 2 * v) - 1) / (1 + k)
1562684657497:b   <- a * k
1562684657520:fit <- try(suppressWarnings(fitdistr(dat, "beta", list(shape1 = a, shape2 = b))), silent = TRUE)
1562684657522:if (do.plot) {
1562684657523:x <- seq(0, 1, length = 1000)
1562684657525:plot(density(dat), col = 2, lwd = 2, main = trait)
1562684657526:if (!is.null(trait.data)) {
1562684657527:rug(trait.data[[trait]]$Y, lwd = 2, col = "purple")
1562684657528:}
1562684657529:lines(x, dbeta(x, fit$estimate[1], fit$estimate[2]), lwd = 2, type = "l")
1562684657530:lines(x, dbeta(x, pparm[1], pparm[2]), lwd = 3, type = "l", col = 3)
1562684657531:legend("topleft",
1562684657532:legend = c("data", "prior", "post", "approx"),
1562684657533:col = c("purple", 3, 2, 1), lwd = 2)
1562684657534:}
1562684657535:posteriors[trait, "parama"] <- fit$estimate[1]
1562684657537:posteriors[trait, "paramb"] <- fit$estimate[2]
1562684657538:} else if (pdist %in% zerobound | (pdist == "unif" & pparm[1] > 0)) {
1562684657539:dist.names <- c("exp", "lnorm", "weibull", "norm")
1562684657540:fit <- list()
1562684657541:fit[[1]] <- try(suppressWarnings(fitdistr(dat, "exponential")), silent = TRUE)
1562684657542:## fit[[2]] <- fitdistr(dat,'f',list(df1=10,df2=2*mean(dat)/(max(mean(dat)-1,1))))
1562684657543:fit[[2]] <- try(suppressWarnings(fitdistr(dat, "lognormal")), silent = TRUE)
1562684657545:fit[[3]] <- try(suppressWarnings(fitdistr(dat, "weibull")), silent = TRUE)
1562684657546:fit[[4]] <- try(suppressWarnings(fitdistr(dat, "normal")), silent = TRUE)
1562684657548:if (!trait == "cuticular_cond") {
1562684657550:fit[[5]] <- try(suppressWarnings(fitdistr(dat, "gamma")), silent = TRUE)
1562684657551:dist.names <- c(dist.names, "gamma")
1562684657552:}
1562684657553:failfit.bool <- sapply(fit, class) == "try-error"
1562684657555:fit[failfit.bool] <- NULL
1562684657556:dist.names <- dist.names[!failfit.bool]
1562684657558:fparm <- lapply(fit, function(x) { as.numeric(x$estimate) })
1562684657560:fAIC <- lapply(fit, AIC)
1562684657562:bestfit <- which.min(fAIC)
1562684657564:posteriors[ptrait, "distn"] <- dist.names[bestfit]
1562684657565:posteriors[ptrait, "parama"] <- fit[[bestfit]]$estimate[1]
1562684657566:if (bestfit == 1) {
1562684657568:posteriors[ptrait, "paramb"] <- NA
1562684657569:} else {
1562684657571:posteriors[ptrait, "paramb"] <- fit[[bestfit]]$estimate[2]
1562684657572:}
1562684657575:if (do.plot) {
1562684657576:.dens_plot(posteriors, priors, ptrait, dat, trait, trait.data)
1562684657577:}
1562684657579:} else {
1562684657580:## default: NORMAL
1562684657581:posteriors[trait, "distn"] <- "norm"
1562684657583:posteriors[trait, "parama"] <- mean(dat)
1562684657584:posteriors[trait, "paramb"] <- sd(dat)
1562684657585:if (do.plot) {
1562684657587:.dens_plot(posteriors, priors, ptrait, dat, trait, trait.data)
1562684657588:}
1562684657590:}
1562684756821:if (do.plot) {
1562684756824:dev.off()
1562684756826:}
1562684765315:do.plot
1562684795829:!is.null(outdir)
1562684819207:outdir <- ""
1562684821896:do.plot <- !is.null(outdir)
1562684827815:do.plot
1562684832121:if (do.plot == TRUE) {
1562684832124:pdf(file.path(outdir, paste("posteriors", filename.flag, ".pdf", sep = "")))
1562684832126:}
1562771039394:# ----------------------------------------------------------------------
1562771039422:# Load required libraries
1562771039423:# ----------------------------------------------------------------------
1562771039424:library(PEcAn.all)
1562771043976:library(PEcAn.utils)
1562771044002:library(RCurl)
1562771044142:# make sure always to call status.end
1562771044143:options(warn=1)
1562771044144:options(error=quote({
1562771044145:PEcAn.utils::status.end("ERROR")
1562771044145:PEcAn.remote::kill.tunnel(settings)
1562771044146:if (!interactive()) {
1562771044147:q(status = 1)
1562771044148:}
1562771044149:}))
1562771047091:# ----------------------------------------------------------------------
1562771047093:# PEcAn Workflow
1562771047094:# ----------------------------------------------------------------------
1562771047097:# Open and read in settings file for PEcAn run.
1562771047099:args <- commandArgs(trailingOnly = TRUE)
1562771048074:if (is.na(args[1])){
1562771048076:settings <- PEcAn.settings::read.settings("pecan.xml")
1562771048078:} else {
1562771048080:settings.file <- args[1]
1562771048081:settings <- PEcAn.settings::read.settings(settings.file)
1562771048083:}
1562771079635:# ----------------------------------------------------------------------
1562771079636:# Load required libraries
1562771079637:# ----------------------------------------------------------------------
1562771079638:library(PEcAn.all)
1562771084880:library(PEcAn.utils)
1562771084881:library(RCurl)
1562771085077:# make sure always to call status.end
1562771085078:options(warn=1)
1562771085080:options(error=quote({
1562771085081:PEcAn.utils::status.end("ERROR")
1562771085081:PEcAn.remote::kill.tunnel(settings)
1562771085082:if (!interactive()) {
1562771085083:q(status = 1)
1562771085084:}
1562771085085:}))
1562771085087:# ----------------------------------------------------------------------
1562771085088:# PEcAn Workflow
1562771085089:# ----------------------------------------------------------------------
1562771085090:# Open and read in settings file for PEcAn run.
1562771085090:args <- commandArgs(trailingOnly = TRUE)
1562771085092:if (is.na(args[1])){
1562771085093:settings <- PEcAn.settings::read.settings("/data/test_files/ed2_files/pecan64.ed2.xml")
1562771085094:} else {
1562771085095:settings.file <- args[1]
1562771085096:settings <- PEcAn.settings::read.settings(settings.file)
1562771085097:}
1562771086949:# Check for additional modules that will require adding settings
1562771086950:if("benchmarking" %in% names(settings)){
1562771086953:library(PEcAn.benchmark)
1562771086954:settings <- papply(settings, read_settings_BRR)
1562771086957:}
1562771087714:if("sitegroup" %in% names(settings)){
1562771087716:if(is.null(settings$sitegroup$nSite)){
1562771087718:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1562771087720:sitegroupId = settings$sitegroup$id)
1562771087722:} else {
1562771087724:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1562771087725:sitegroupId = settings$sitegroup$id,
1562771087726:nSite = settings$sitegroup$nSite)
1562771087727:}
1562771087728:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1562771087729:}
1562771089076:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1562771089078:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1562771089969:# Write pecan.CHECKED.xml
1562771089970:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1562771092416:# start from scratch if no continue is passed in
1562771092418:statusFile <- file.path(settings$outdir, "STATUS")
1562771093359:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1562771093361:file.remove(statusFile)
1562771093363:}
1562771094373:# Do conversions
1562771094374:settings <- PEcAn.workflow::do_conversions(settings)
1562771095374:# Query the trait database for data and priors
1562771095376:if (PEcAn.utils::status.check("TRAIT") == 0){
1562771095378:PEcAn.utils::status.start("TRAIT")
1562771095380:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1562771095382:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1562771095384:PEcAn.utils::status.end()
1562771095386:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1562771095387:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1562771095388:}
1562771126014:library(PEcAn.all)
1562771131232:library(PEcAn.utils)
1562771131234:library(RCurl)
1562771131430:#system('rm -rf ~/ed2_results')
1562771131432:# make sure always to call status.end
1562771131433:options(warn=1)
1562771131434:options(error=quote({
1562771131435:PEcAn.utils::status.end("ERROR")
1562771131436:PEcAn.remote::kill.tunnel(settings)
1562771131437:if (!interactive()) {
1562771131437:q(status = 1)
1562771131438:}
1562771131439:}))
1562771131441:#options(warning.expression=status.end("ERROR"))
1562771131444:# ----------------------------------------------------------------------
1562771131445:# PEcAn Workflow
1562771131445:# ----------------------------------------------------------------------
1562771131446:# Open and read in settings file for PEcAn run.
1562771131447:args <- commandArgs(trailingOnly = TRUE)
1562771131449:if (is.na(args[1])){
1562771131450:settings <- PEcAn.settings::read.settings("/data/test_files/ed2_files/pecan64.ed2.xml")
1562771131450:} else {
1562771131451:settings.file <- args[1]
1562771131452:settings <- PEcAn.settings::read.settings(settings.file)
1562771131453:}
1562771131490:# Check for additional modules that will require adding settings
1562771131491:if("benchmarking" %in% names(settings)){
1562771131492:library(PEcAn.benchmark)
1562771131493:settings <- papply(settings, read_settings_BRR)
1562771131494:}
1562771131496:if("sitegroup" %in% names(settings)){
1562771131497:if(is.null(settings$sitegroup$nSite)){
1562771131498:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1562771131499:sitegroupId = settings$sitegroup$id)
1562771131500:} else {
1562771131501:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1562771131502:sitegroupId = settings$sitegroup$id,
1562771131502:nSite = settings$sitegroup$nSite)
1562771131503:}
1562771131504:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1562771131505:}
1562771131508:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1562771131508:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1562771132502:# Write pecan.CHECKED.xml
1562771132503:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1562771132601:# start from scratch if no continue is passed in
1562771132602:statusFile <- file.path(settings$outdir, "STATUS")
1562771132604:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1562771132605:file.remove(statusFile)
1562771132606:}
1562771132608:# Do conversions
1562771132609:settings <- PEcAn.workflow::do_conversions(settings)
1562771132720:# Query the trait database for data and priors
1562771132721:if (PEcAn.utils::status.check("TRAIT") == 0){
1562771132722:PEcAn.utils::status.start("TRAIT")
1562771132723:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1562771132724:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1562771132725:PEcAn.utils::status.end()
1562771132726:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1562771132727:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1562771132728:}
1562771150052:# Run the PEcAn meta.analysis
1562771150053:if(!is.null(settings$meta.analysis)) {
1562771150054:if (PEcAn.utils::status.check("META") == 0){
1562771150055:PEcAn.utils::status.start("META")
1562771150056:PEcAn.MA::runModule.run.meta.analysis(settings)
1562771150058:PEcAn.utils::status.end()
1562771150059:}
1562771150060:}
1562771161763:# Write model specific configs
1562771161765:if (PEcAn.utils::status.check("CONFIG") == 0){
1562771161767:PEcAn.utils::status.start("CONFIG")
1562771161769:settings <- PEcAn.workflow::runModule.run.write.configs(settings)
1562771161771:PEcAn.settings::write.settings(settings, outputfile='pecan.CONFIGS.xml')
1562771161773:PEcAn.utils::status.end()
1562771161774:} else if (file.exists(file.path(settings$outdir, 'pecan.CONFIGS.xml'))) {
1562771161775:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.CONFIGS.xml'))
1562771161776:}
1562771198994:if ((length(which(commandArgs() == "--advanced")) != 0) && (PEcAn.utils::status.check("ADVANCED") == 0)) {
1562771198997:PEcAn.utils::status.start("ADVANCED")
1562771198998:q();
1562771199001:}
1562771201008:# Start ecosystem model runs
1562771201010:if (PEcAn.utils::status.check("MODEL") == 0) {
1562771201012:PEcAn.utils::status.start("MODEL")
1562771201014:PEcAn.remote::runModule.start.model.runs(settings, stop.on.error = FALSE)
1562771201016:PEcAn.utils::status.end()
1562771201017:}
1562771223370:traceback()
1562773506392:library(ggplot2)
1562773507429:load("clm_params_data_out/pft/Setaria WT priors data/prior.distns.Rdata")
1562773509579:ex_single_param <- prior.distns[1,]
1562773510417:plot_parameter_dist <- function(param_data, num_values = 1000000){
1562773510419:expression <- paste0("r", param_data$distn, "(", num_values, ",", param_data$parama, ",", param_data$paramb, ")")
1562773510421:single_param_values <- data.frame(values = eval(parse(text = expression)))
1562773510423:single_param_plot <- ggplot(single_param_values, aes(x = values)) +
1562773510425:geom_density() +
1562773510428:ggtitle(row.names(param_data))
1562773510429:print(single_param_plot)
1562773510431:}
1562773511626:plot_parameter_dist(ex_single_param)
1562958541825:sessionInfo()
1564080809232:sessionInfo()
1565367482239:PEcAn.visualization::plot.netcdf("biocro_darpa_results/out/SA-salix-chi_leaf-0.159/2004.nc", "LAI")
1565367739746:PEcAn.visualization::plot.netcdf("biocro_darpa_results/out/SA-salix-chi_leaf-0.159/2004.nc", "LAI")
