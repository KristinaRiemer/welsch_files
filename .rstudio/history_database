1560186299111:#     start = ipft,
1560186299112:#     count = 1,
1560186299113:#     vals = as.numeric(pft.trait.values[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar)
1560186299114:#   )
1560186299115:# }
1560186299116:} ## end loop over VARIABLES
1560186308950:for (v in seq_along(pft_pecan_vals)) {
1560186308951:pecan_var <- names(pft_pecan_vals)[v]
1560186308954:### ----- Leaf physiological parameters
1560186308955:update_vars <- function(nc = ctsm.param.nc, ctsm_var, ctsm_vals, start = ipft, count = 1){
1560186308956:ncdf4::ncvar_put(nc, varid = ctsm_var, vals = ctsm_vals, start, count)
1560186308957:}
1560186308959:if (pecan_var == "c2n_leaf") {update_vars(ctsm_var = "leafcn", ctsm_vals = pft_pecan_vals[v])}
1560186308961:if (pecan_var == "sla") {update_vars(ctsm_var = "slatop", ctsm_vals = udunits2::ud.convert(pecan_pft_vals[v], "m2 kg-1", "m2 g-1") / leafC))}
1560186308962:# if (pecan_var == "stom_slope") {update_vars(ctsm_var = "mbbopt", ctsm_vals = pft_pecan_vals[v])}
1560186308963:# if (pecan_var == "fineroot2leaf") {update_vars(ctsm_var = "froot_leaf", ctsm_vals = pft_pecan_vals[v])}
1560186308964:# if (pecan_var == "vcmax") {update_vars(ctsm_var = "flnr", ctsm_vals = as.numeric(pft.trait.values[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar))}
1560186308966:# if (var == "sla") {
1560186308968:#   ## default 0.03846
1560186308969:#   ncdf4::ncvar_put(
1560186308970:#     nc = ctsm.param.nc,
1560186308971:#     varid = "slatop",
1560186308972:#     start = ipft,
1560186308973:#     count = 1,
1560186308975:#     vals = udunits2::ud.convert(pft.trait.values[v], "m2 kg-1", "m2 g-1") / leafC
1560186308976:#   )
1560186308977:# }
1560186308978:# if (var == "c2n_leaf"){
1560186308979:#   ## default 35.36068
1560186308980:#   ncdf4::ncvar_put(
1560186308981:#     nc = ctsm.param.nc,
1560186308983:#     varid = "leafcn",
1560186308984:#     start = ipft,
1560186308985:#     count = 1,
1560186308986:#     vals = pft.trait.values[v]
1560186308987:#   )
1560186308988:# }
1560186308990:# if (var == "stom_slope"){
1560186308991:#   ## default 9.757532
1560186308992:#   ncdf4::ncvar_put(
1560186308993:#     nc = ctsm.param.nc,
1560186308994:#     varid = "mbbopt",
1560186308995:#     start = ipft,
1560186308996:#     count = 1,
1560186308998:#     vals = pft.trait.values[v]
1560186308999:#   )
1560186309000:# }
1560186309001:# if (var == "fineroot2leaf"){
1560186309002:#   ## default 1.5
1560186309003:#   ncdf4::ncvar_put(
1560186309004:#     nc = ctsm.param.nc,
1560186309006:#     varid = "froot_leaf",
1560186309007:#     start = ipft,
1560186309008:#     count = 1,
1560186309009:#     vals = pft.trait.values[v]
1560186309010:#   )
1560186309011:# }
1560186309012:# if (var == "vcmax"){
1560186309014:#   ## default 0.09
1560186309015:#   ncdf4::ncvar_put(
1560186309016:#     nc = ctsm.param.nc,
1560186309017:#     varid = "flnr",
1560186309018:#     start = ipft,
1560186309019:#     count = 1,
1560186309020:#     vals = as.numeric(pft.trait.values[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar)
1560186309022:#   )
1560186309023:# }
1560186309024:} ## end loop over VARIABLES
1560186350542:for (v in seq_along(pft_pecan_vals)) {
1560186350545:pecan_var <- names(pft_pecan_vals)[v]
1560186350549:### ----- Leaf physiological parameters
1560186350550:update_vars <- function(nc = ctsm.param.nc, ctsm_var, ctsm_vals, start = ipft, count = 1){
1560186350552:ncdf4::ncvar_put(nc, varid = ctsm_var, vals = ctsm_vals, start, count)
1560186350553:}
1560186350555:if (pecan_var == "c2n_leaf") {update_vars(ctsm_var = "leafcn", ctsm_vals = pft_pecan_vals[v])}
1560186350556:# if (pecan_var == "sla") {update_vars(ctsm_var = "slatop", ctsm_vals = udunits2::ud.convert(pecan_pft_vals[v], "m2 kg-1", "m2 g-1") / leafC))}
1560186350557:if (pecan_var == "stom_slope") {update_vars(ctsm_var = "mbbopt", ctsm_vals = pft_pecan_vals[v])}
1560186350559:# if (pecan_var == "fineroot2leaf") {update_vars(ctsm_var = "froot_leaf", ctsm_vals = pft_pecan_vals[v])}
1560186350560:# if (pecan_var == "vcmax") {update_vars(ctsm_var = "flnr", ctsm_vals = as.numeric(pft.trait.values[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar))}
1560186350562:} ## end loop over VARIABLES
1560186365742:for (v in seq_along(pft_pecan_vals)) {
1560186365744:pecan_var <- names(pft_pecan_vals)[v]
1560186365747:### ----- Leaf physiological parameters
1560186365749:update_vars <- function(nc = ctsm.param.nc, ctsm_var, ctsm_vals, start = ipft, count = 1){
1560186365750:ncdf4::ncvar_put(nc, varid = ctsm_var, vals = ctsm_vals, start, count)
1560186365752:}
1560186365755:if (pecan_var == "c2n_leaf") {update_vars(ctsm_var = "leafcn", ctsm_vals = pft_pecan_vals[v])}
1560186365756:# if (pecan_var == "sla") {update_vars(ctsm_var = "slatop", ctsm_vals = udunits2::ud.convert(pecan_pft_vals[v], "m2 kg-1", "m2 g-1") / leafC))}
1560186365757:if (pecan_var == "stom_slope") {update_vars(ctsm_var = "mbbopt", ctsm_vals = pft_pecan_vals[v])}
1560186365758:if (pecan_var == "fineroot2leaf") {update_vars(ctsm_var = "froot_leaf", ctsm_vals = pft_pecan_vals[v])}
1560186365759:if (pecan_var == "vcmax") {update_vars(ctsm_var = "flnr", ctsm_vals = as.numeric(pft.trait.values[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar))}
1560186365761:} ## end loop over VARIABLES
1560186387454:for (v in seq_along(pft_pecan_vals)) {
1560186387455:pecan_var <- names(pft_pecan_vals)[v]
1560186387458:### ----- Leaf physiological parameters
1560186387459:update_vars <- function(nc = ctsm.param.nc, ctsm_var, ctsm_vals, start = ipft, count = 1){
1560186387460:ncdf4::ncvar_put(nc, varid = ctsm_var, vals = ctsm_vals, start, count)
1560186387461:}
1560186387463:if (pecan_var == "c2n_leaf") {update_vars(ctsm_var = "leafcn", ctsm_vals = pft_pecan_vals[v])}
1560186387464:# if (pecan_var == "sla") {update_vars(ctsm_var = "slatop", ctsm_vals = udunits2::ud.convert(pecan_pft_vals[v], "m2 kg-1", "m2 g-1") / leafC))}
1560186387465:if (pecan_var == "stom_slope") {update_vars(ctsm_var = "mbbopt", ctsm_vals = pft_pecan_vals[v])}
1560186387466:if (pecan_var == "fineroot2leaf") {update_vars(ctsm_var = "froot_leaf", ctsm_vals = pft_pecan_vals[v])}
1560186387468:if (pecan_var == "vcmax") {update_vars(ctsm_var = "flnr", ctsm_vals = as.numeric(pft_pecan_vals[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar))}
1560186387470:} ## end loop over VARIABLES
1560186413898:for (v in seq_along(pft_pecan_vals)) {
1560186413900:pecan_var <- names(pft_pecan_vals)[v]
1560186413903:### ----- Leaf physiological parameters
1560186413905:update_vars <- function(nc = ctsm.param.nc, ctsm_var, ctsm_vals, start = ipft, count = 1){
1560186413907:ncdf4::ncvar_put(nc, varid = ctsm_var, vals = ctsm_vals, start, count)
1560186413909:}
1560186413911:if (pecan_var == "c2n_leaf") {update_vars(ctsm_var = "leafcn", ctsm_vals = pft_pecan_vals[v])}
1560186413912:if (pecan_var == "sla") {update_vars(ctsm_var = "slatop", ctsm_vals = udunits2::ud.convert(pecan_pft_vals[v], "m2 kg-1", "m2 g-1") / leafC)}
1560186413914:if (pecan_var == "stom_slope") {update_vars(ctsm_var = "mbbopt", ctsm_vals = pft_pecan_vals[v])}
1560186413915:if (pecan_var == "fineroot2leaf") {update_vars(ctsm_var = "froot_leaf", ctsm_vals = pft_pecan_vals[v])}
1560186413916:if (pecan_var == "vcmax") {update_vars(ctsm_var = "flnr", ctsm_vals = as.numeric(pft_pecan_vals[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar))}
1560186413918:} ## end loop over VARIABLES
1560186444909:for (v in seq_along(pft_pecan_vals)) {
1560186444912:pecan_var <- names(pft_pecan_vals)[v]
1560186444915:### ----- Leaf physiological parameters
1560186444917:update_vars <- function(nc = ctsm.param.nc, ctsm_var, ctsm_vals, start = ipft, count = 1){
1560186444919:ncdf4::ncvar_put(nc, varid = ctsm_var, vals = ctsm_vals, start, count)
1560186444921:}
1560186444923:if (pecan_var == "c2n_leaf") {update_vars(ctsm_var = "leafcn", ctsm_vals = pft_pecan_vals[v])}
1560186444924:if (pecan_var == "sla") {update_vars(ctsm_var = "slatop", ctsm_vals = udunits2::ud.convert(pft_pecan_vals[v], "m2 kg-1", "m2 g-1") / leafC)}
1560186444925:if (pecan_var == "stom_slope") {update_vars(ctsm_var = "mbbopt", ctsm_vals = pft_pecan_vals[v])}
1560186444926:if (pecan_var == "fineroot2leaf") {update_vars(ctsm_var = "froot_leaf", ctsm_vals = pft_pecan_vals[v])}
1560186444928:if (pecan_var == "vcmax") {update_vars(ctsm_var = "flnr", ctsm_vals = as.numeric(pft_pecan_vals[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar))}
1560186444930:} ## end loop over VARIABLES
1560186475932:.libPaths("~/R_libs/") #delete
1560186476478:library(PEcAn.CTSM) #delete
1560186476614:trait.values <- list(c4_grass = list(sla = 0.03, c2n_leaf = 35, stom_slope = 10, fineroot2leaf = 2, vcmax = 50)) #delete
1560186477035:## Copy and open default parameter files
1560186477037:ctsm.param.default <-
1560186477039:system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM')
1560186478460:if (!exists('local.rundir'))
1560186479710:local.rundir <- tempdir()
1560186479922:if (!exists('run.id'))
1560186480129:run.id <- 1
1560186480417:ctsm.param.file <-
1560186480419:file.path(local.rundir, paste0("ctsm_params.", run.id, ".nc"))
1560186480631:file.copy(ctsm.param.default, ctsm.param.file)
1560186480990:ctsm.param.nc <- ncdf4::nc_open(ctsm.param.file, write = TRUE)
1560186481380:## Loop over PFTS
1560186481382:npft <- length(trait.values)
1560186481776:PEcAn.logger::logger.debug('there are ',
1560186481778:npft,
1560186481780:'PFTs in this run, they are named:',
1560186481782:names(trait.values))
1560186482485:ctsm_pftnames <-
1560186482486:stringr::str_trim(tolower(ncdf4::ncvar_get(ctsm.param.nc, "pftname")))
1560186482896:i <- 1 #delete
1560186483347:#for (i in seq_len(npft)) {
1560186483349:pft.name <- names(trait.values)[i]
1560186483778:if (is.null(pft.name) | is.na(pft.name)) {
1560186483780:PEcAn.logger::logger.error("pft.name missing")
1560186483783:} else {
1560186483785:PEcAn.logger::logger.info(paste("PFT =", pft.name))
1560186483787:PEcAn.logger::logger.debug(paste0("ctsm PFT number: ", which(ctsm_pftnames == pft.name)))
1560186483789:}
1560186484095:if (pft.name == 'env')
1560186484488:next   ## HACK, need to remove env from default
1560186484950:## Match PFT name to COLUMN
1560186484952:ipft <- match(tolower(pft.name), ctsm_pftnames)
1560186485274:PEcAn.logger::logger.debug(paste0("CTSM pft index number: ", ipft))
1560186485700:if (is.na(ipft)) {
1560186485702:PEcAn.logger::logger.severe(
1560186485704:paste(
1560186485706:"Unmatched PFT",
1560186485708:pft.name,
1560186485710:"in CTSM PEcAn does not yet support non-default PFTs for this model"
1560186485712:)
1560186485714:)
1560186485715:}
1560186487246:## Special variables used in conversions
1560186487248:leafC <- 0.48
1560186487458:fnr <- 7.16 #mass ratio of total Rubisco molecular mass to nitrogen in Rubisco (g Rubisco g-1 N in Rubisco)
1560186487872:ar <- 60 #specific activity of Rubisco (µmol CO2 g-1 Rubisco s-1)
1560186488211:sla_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop") #delete
1560186488459:c2n_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn") #delete
1560186488657:sto_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "mbbopt") #delete
1560186488862:frl_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "froot_leaf") #delete
1560186489128:flnr_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "flnr") #delete
1560186489612:## Loop over VARIABLES
1560186489613:pft_pecan_vals <- trait.values[[i]]
1560186489971:for (v in seq_along(pft_pecan_vals)) {
1560186489973:pecan_var <- names(pft_pecan_vals)[v]
1560186489977:### ----- Leaf physiological parameters
1560186489979:update_vars <- function(nc = ctsm.param.nc, ctsm_var, ctsm_vals, start = ipft, count = 1){
1560186489981:ncdf4::ncvar_put(nc, varid = ctsm_var, vals = ctsm_vals, start, count)
1560186489982:}
1560186489983:if (pecan_var == "c2n_leaf") {update_vars(ctsm_var = "leafcn", ctsm_vals = pft_pecan_vals[v])}
1560186489984:if (pecan_var == "sla") {update_vars(ctsm_var = "slatop", ctsm_vals = udunits2::ud.convert(pft_pecan_vals[v], "m2 kg-1", "m2 g-1") / leafC)}
1560186489985:if (pecan_var == "stom_slope") {update_vars(ctsm_var = "mbbopt", ctsm_vals = pft_pecan_vals[v])}
1560186489986:if (pecan_var == "fineroot2leaf") {update_vars(ctsm_var = "froot_leaf", ctsm_vals = pft_pecan_vals[v])}
1560186489987:if (pecan_var == "vcmax") {update_vars(ctsm_var = "flnr", ctsm_vals = as.numeric(pft_pecan_vals[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar))}
1560186489988:} ## end loop over VARIABLES
1560186492414:write_params_ctsm <-
1560186492416:function(defaults = system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM'),
1560186492417:trait.values,
1560186492419:settings,
1560186492420:run.id) {
1560186492422:.libPaths("~/R_libs/") #delete
1560186492424:library(PEcAn.CTSM) #delete
1560186492425:trait.values <- list(c4_grass = list(sla = 0.03, c2n_leaf = 35, stom_slope = 10, fineroot2leaf = 2, vcmax = 50)) #delete
1560186492426:## Copy and open default parameter files
1560186492427:ctsm.param.default <-
1560186492428:system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM')
1560186492429:if (!exists('local.rundir'))
1560186492430:local.rundir <- tempdir()
1560186492431:if (!exists('run.id'))
1560186492432:run.id <- 1
1560186492433:ctsm.param.file <-
1560186492435:file.path(local.rundir, paste0("ctsm_params.", run.id, ".nc"))
1560186492436:file.copy(ctsm.param.default, ctsm.param.file)
1560186492437:ctsm.param.nc <- ncdf4::nc_open(ctsm.param.file, write = TRUE)
1560186492439:## Loop over PFTS
1560186492440:npft <- length(trait.values)
1560186492441:PEcAn.logger::logger.debug('there are ',
1560186492442:npft,
1560186492443:'PFTs in this run, they are named:',
1560186492444:names(trait.values))
1560186492445:ctsm_pftnames <-
1560186492446:stringr::str_trim(tolower(ncdf4::ncvar_get(ctsm.param.nc, "pftname")))
1560186492447:i <- 1 #delete
1560186492448:#for (i in seq_len(npft)) {
1560186492449:pft.name <- names(trait.values)[i]
1560186492450:if (is.null(pft.name) | is.na(pft.name)) {
1560186492451:PEcAn.logger::logger.error("pft.name missing")
1560186492452:} else {
1560186492454:PEcAn.logger::logger.info(paste("PFT =", pft.name))
1560186492455:PEcAn.logger::logger.debug(paste0("ctsm PFT number: ", which(ctsm_pftnames == pft.name)))
1560186492456:}
1560186492457:if (pft.name == 'env')
1560186492458:next   ## HACK, need to remove env from default
1560186492460:## Match PFT name to COLUMN
1560186492461:ipft <- match(tolower(pft.name), ctsm_pftnames)
1560186492463:PEcAn.logger::logger.debug(paste0("CTSM pft index number: ", ipft))
1560186492465:if (is.na(ipft)) {
1560186492466:PEcAn.logger::logger.severe(
1560186492467:paste(
1560186492468:"Unmatched PFT",
1560186492470:pft.name,
1560186492471:"in CTSM PEcAn does not yet support non-default PFTs for this model"
1560186492472:)
1560186492473:)
1560186492474:}
1560186492476:## Special variables used in conversions
1560186492478:leafC <- 0.48
1560186492479:fnr <- 7.16 #mass ratio of total Rubisco molecular mass to nitrogen in Rubisco (g Rubisco g-1 N in Rubisco)
1560186492480:ar <- 60 #specific activity of Rubisco (µmol CO2 g-1 Rubisco s-1)
1560186492481:sla_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop") #delete
1560186492482:c2n_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn") #delete
1560186492484:sto_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "mbbopt") #delete
1560186492485:frl_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "froot_leaf") #delete
1560186492486:flnr_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "flnr") #delete
1560186492489:## Loop over VARIABLES
1560186492490:pft_pecan_vals <- trait.values[[i]]
1560186492491:for (v in seq_along(pft_pecan_vals)) {
1560186492493:pecan_var <- names(pft_pecan_vals)[v]
1560186492495:### ----- Leaf physiological parameters
1560186492497:update_vars <- function(nc = ctsm.param.nc, ctsm_var, ctsm_vals, start = ipft, count = 1){
1560186492498:ncdf4::ncvar_put(nc, varid = ctsm_var, vals = ctsm_vals, start, count)
1560186492499:}
1560186492501:if (pecan_var == "c2n_leaf") {update_vars(ctsm_var = "leafcn", ctsm_vals = pft_pecan_vals[v])}
1560186492502:if (pecan_var == "sla") {update_vars(ctsm_var = "slatop", ctsm_vals = udunits2::ud.convert(pft_pecan_vals[v], "m2 kg-1", "m2 g-1") / leafC)}
1560186492503:if (pecan_var == "stom_slope") {update_vars(ctsm_var = "mbbopt", ctsm_vals = pft_pecan_vals[v])}
1560186492505:if (pecan_var == "fineroot2leaf") {update_vars(ctsm_var = "froot_leaf", ctsm_vals = pft_pecan_vals[v])}
1560186492506:if (pecan_var == "vcmax") {update_vars(ctsm_var = "flnr", ctsm_vals = as.numeric(pft_pecan_vals[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar))}
1560186492508:} ## end loop over VARIABLES
1560186492509:} ## end loop over PFTs
1560186493186:}
1560186499239:sla_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")
1560186499244:c2n_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")
1560186499249:sto_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "mbbopt")
1560186499253:frl_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "froot_leaf")
1560186499257:flnr_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "flnr")
1560186499261:sla_old[15]
1560186499262:sla_new[15]
1560186499264:c2n_old[15]
1560186499265:c2n_new[15]
1560186499267:sto_old[15]
1560186499268:sto_new[15]
1560186499270:frl_old[15]
1560186499271:frl_new[15]
1560186499273:flnr_old[15]
1560186499274:flnr_new[15]
1560186940694:ctsm_pftnames
1560186949403:ncdf4::ncvar_get(ctsm.param.nc, "pftname")
1560186991406:trimws(tolower(ncdf4::ncvar_get(ctsm.param.nc, "pftname")))
1560187006037:bla <- head(trimws(tolower(ncdf4::ncvar_get(ctsm.param.nc, "pftname"))))
1560187017227:bla <- trimws(tolower(ncdf4::ncvar_get(ctsm.param.nc, "pftname")))
1560187030639:bla == ctsm_pftnames
1560187115573:pft.name
1560187128024:names(trait.values)[1]
1560187131447:names(trait.values)[[1]]
1560187145124:trait.values <- list(c4_grass = list(sla = 0.03, c2n_leaf = 35, stom_slope = 10, fineroot2leaf = 2, vcmax = 50))
1560187152336:.libPaths("~/R_libs/")
1560187152893:library(PEcAn.CTSM)
1560187160384:## Copy and open default parameter files
1560187160385:ctsm.param.default <-
1560187160387:system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM')
1560187160584:if (!exists('local.rundir'))
1560187160689:local.rundir <- tempdir()
1560187160738:if (!exists('run.id'))
1560187160959:run.id <- 1
1560187161114:ctsm.param.file <-
1560187161116:file.path(local.rundir, paste0("ctsm_params.", run.id, ".nc"))
1560187161230:file.copy(ctsm.param.default, ctsm.param.file)
1560187161473:ctsm.param.nc <- ncdf4::nc_open(ctsm.param.file, write = TRUE)
1560187162480:## Loop over PFTS
1560187162482:npft <- length(trait.values)
1560187162928:PEcAn.logger::logger.debug('there are ',
1560187162929:npft,
1560187162931:'PFTs in this run, they are named:',
1560187162933:names(trait.values))
1560187163692:ctsm_pftnames <-
1560187163694:trimws(tolower(ncdf4::ncvar_get(ctsm.param.nc, "pftname")))
1560187167912:i <- 1
1560187170440:pft.name <- names(trait.values)[[i]]
1560187171033:if (is.null(pft.name) || is.na(pft.name)) {
1560187171035:PEcAn.logger::logger.error("pft.name missing")
1560187171037:} else {
1560187171039:PEcAn.logger::logger.info(paste("PFT =", pft.name))
1560187171041:PEcAn.logger::logger.debug(paste0("ctsm PFT number: ", which(ctsm_pftnames == pft.name)))
1560187171044:}
1560187174803:if (pft.name == 'env')
1560187175659:next   ## HACK, need to remove env from default
1560187179315:## Match PFT name to COLUMN
1560187179317:ipft <- match(tolower(pft.name), ctsm_pftnames)
1560187180314:PEcAn.logger::logger.debug(paste0("CTSM pft index number: ", ipft))
1560187180971:if (is.na(ipft)) {
1560187180973:PEcAn.logger::logger.severe(
1560187180974:paste(
1560187180975:"Unmatched PFT",
1560187180976:pft.name,
1560187180977:"in CTSM PEcAn does not yet support non-default PFTs for this model"
1560187180978:)
1560187180980:)
1560187180981:}
1560187181783:## Special variables used in conversions
1560187181785:leafC <- 0.48
1560187181970:fnr <- 7.16 # mass ratio of total Rubisco molecular mass to nitrogen in Rubisco (g Rubisco g-1 N in Rubisco)
1560187182356:ar <- 60 # specific activity of Rubisco (µmol CO2 g-1 Rubisco s-1)
1560187183414:## Loop over VARIABLES
1560187183416:pft_pecan_vals <- trait.values[[i]]
1560187187143:for (v in seq_along(pft_pecan_vals)) {
1560187187145:pecan_var <- names(pft_pecan_vals)[v]
1560187187148:### ----- Leaf physiological parameters
1560187187150:update_vars <- function(nc = ctsm.param.nc, ctsm_var, ctsm_vals, start = ipft, count = 1){
1560187187151:ncdf4::ncvar_put(nc, varid = ctsm_var, vals = ctsm_vals, start, count)
1560187187152:}
1560187187153:if (pecan_var == "sla") {update_vars(ctsm_var = "slatop", ctsm_vals = udunits2::ud.convert(pft_pecan_vals[v], "m2 kg-1", "m2 g-1") / leafC)} ## default 0.03846
1560187187154:if (pecan_var == "c2n_leaf") {update_vars(ctsm_var = "leafcn", ctsm_vals = pft_pecan_vals[v])} ## default 35.36068
1560187187155:if (pecan_var == "stom_slope") {update_vars(ctsm_var = "mbbopt", ctsm_vals = pft_pecan_vals[v])} ## default 9.757532
1560187187156:if (pecan_var == "fineroot2leaf") {update_vars(ctsm_var = "froot_leaf", ctsm_vals = pft_pecan_vals[v])} ## default 1.5
1560187187157:if (pecan_var == "vcmax") {update_vars(ctsm_var = "flnr", ctsm_vals = as.numeric(pft_pecan_vals[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar))} ## default 0.09
1560187187158:}
1560187189993:for (i in seq_len(npft)) {
1560187189995:pft.name <- names(trait.values)[[i]]
1560187189997:if (is.null(pft.name) || is.na(pft.name)) {
1560187189998:PEcAn.logger::logger.error("pft.name missing")
1560187190000:} else {
1560187190002:PEcAn.logger::logger.info(paste("PFT =", pft.name))
1560187190004:PEcAn.logger::logger.debug(paste0("ctsm PFT number: ", which(ctsm_pftnames == pft.name)))
1560187190005:}
1560187190006:if (pft.name == 'env')
1560187190007:next   ## HACK, need to remove env from default
1560187190009:## Match PFT name to COLUMN
1560187190010:ipft <- match(tolower(pft.name), ctsm_pftnames)
1560187190011:PEcAn.logger::logger.debug(paste0("CTSM pft index number: ", ipft))
1560187190013:if (is.na(ipft)) {
1560187190014:PEcAn.logger::logger.severe(
1560187190015:paste(
1560187190016:"Unmatched PFT",
1560187190017:pft.name,
1560187190018:"in CTSM PEcAn does not yet support non-default PFTs for this model"
1560187190019:)
1560187190020:)
1560187190021:}
1560187190022:## Special variables used in conversions
1560187190023:leafC <- 0.48
1560187190024:fnr <- 7.16 # mass ratio of total Rubisco molecular mass to nitrogen in Rubisco (g Rubisco g-1 N in Rubisco)
1560187190025:ar <- 60 # specific activity of Rubisco (µmol CO2 g-1 Rubisco s-1)
1560187190027:## Loop over VARIABLES
1560187190028:pft_pecan_vals <- trait.values[[i]]
1560187190029:for (v in seq_along(pft_pecan_vals)) {
1560187190030:pecan_var <- names(pft_pecan_vals)[v]
1560187190032:### ----- Leaf physiological parameters
1560187190033:update_vars <- function(nc = ctsm.param.nc, ctsm_var, ctsm_vals, start = ipft, count = 1){
1560187190034:ncdf4::ncvar_put(nc, varid = ctsm_var, vals = ctsm_vals, start, count)
1560187190035:}
1560187190036:if (pecan_var == "sla") {update_vars(ctsm_var = "slatop", ctsm_vals = udunits2::ud.convert(pft_pecan_vals[v], "m2 kg-1", "m2 g-1") / leafC)} ## default 0.03846
1560187190037:if (pecan_var == "c2n_leaf") {update_vars(ctsm_var = "leafcn", ctsm_vals = pft_pecan_vals[v])} ## default 35.36068
1560187190038:if (pecan_var == "stom_slope") {update_vars(ctsm_var = "mbbopt", ctsm_vals = pft_pecan_vals[v])} ## default 9.757532
1560187190039:if (pecan_var == "fineroot2leaf") {update_vars(ctsm_var = "froot_leaf", ctsm_vals = pft_pecan_vals[v])} ## default 1.5
1560187190040:if (pecan_var == "vcmax") {update_vars(ctsm_var = "flnr", ctsm_vals = as.numeric(pft_pecan_vals[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar))} ## default 0.09
1560187190042:}
1560187190043:}
1560187190811:write_params_ctsm <-
1560187190813:function(defaults = system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM'),
1560187190814:trait.values,
1560187190815:settings,
1560187190817:run.id) {
1560187190819:## Copy and open default parameter files
1560187190820:ctsm.param.default <-
1560187190821:system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM')
1560187190822:if (!exists('local.rundir'))
1560187190823:local.rundir <- tempdir()
1560187190824:if (!exists('run.id'))
1560187190825:run.id <- 1
1560187190826:ctsm.param.file <-
1560187190827:file.path(local.rundir, paste0("ctsm_params.", run.id, ".nc"))
1560187190828:file.copy(ctsm.param.default, ctsm.param.file)
1560187190828:ctsm.param.nc <- ncdf4::nc_open(ctsm.param.file, write = TRUE)
1560187190830:## Loop over PFTS
1560187190831:npft <- length(trait.values)
1560187190832:PEcAn.logger::logger.debug('there are ',
1560187190833:npft,
1560187190834:'PFTs in this run, they are named:',
1560187190835:names(trait.values))
1560187190836:ctsm_pftnames <-
1560187190837:trimws(tolower(ncdf4::ncvar_get(ctsm.param.nc, "pftname")))
1560187190838:for (i in seq_len(npft)) {
1560187190839:pft.name <- names(trait.values)[[i]]
1560187190840:if (is.null(pft.name) || is.na(pft.name)) {
1560187190841:PEcAn.logger::logger.error("pft.name missing")
1560187190842:} else {
1560187190843:PEcAn.logger::logger.info(paste("PFT =", pft.name))
1560187190844:PEcAn.logger::logger.debug(paste0("ctsm PFT number: ", which(ctsm_pftnames == pft.name)))
1560187190845:}
1560187190846:if (pft.name == 'env')
1560187190847:next   ## HACK, need to remove env from default
1560187190849:## Match PFT name to COLUMN
1560187190851:ipft <- match(tolower(pft.name), ctsm_pftnames)
1560187190852:PEcAn.logger::logger.debug(paste0("CTSM pft index number: ", ipft))
1560187190854:if (is.na(ipft)) {
1560187190855:PEcAn.logger::logger.severe(
1560187190856:paste(
1560187190857:"Unmatched PFT",
1560187190858:pft.name,
1560187190859:"in CTSM PEcAn does not yet support non-default PFTs for this model"
1560187190860:)
1560187190861:)
1560187190862:}
1560187190866:## Special variables used in conversions
1560187190867:leafC <- 0.48
1560187190868:fnr <- 7.16 # mass ratio of total Rubisco molecular mass to nitrogen in Rubisco (g Rubisco g-1 N in Rubisco)
1560187190869:ar <- 60 # specific activity of Rubisco (µmol CO2 g-1 Rubisco s-1)
1560187190871:## Loop over VARIABLES
1560187190873:pft_pecan_vals <- trait.values[[i]]
1560187190874:for (v in seq_along(pft_pecan_vals)) {
1560187190875:pecan_var <- names(pft_pecan_vals)[v]
1560187190877:### ----- Leaf physiological parameters
1560187190878:update_vars <- function(nc = ctsm.param.nc, ctsm_var, ctsm_vals, start = ipft, count = 1){
1560187190879:ncdf4::ncvar_put(nc, varid = ctsm_var, vals = ctsm_vals, start, count)
1560187190881:}
1560187190882:if (pecan_var == "sla") {update_vars(ctsm_var = "slatop", ctsm_vals = udunits2::ud.convert(pft_pecan_vals[v], "m2 kg-1", "m2 g-1") / leafC)} ## default 0.03846
1560187190883:if (pecan_var == "c2n_leaf") {update_vars(ctsm_var = "leafcn", ctsm_vals = pft_pecan_vals[v])} ## default 35.36068
1560187190884:if (pecan_var == "stom_slope") {update_vars(ctsm_var = "mbbopt", ctsm_vals = pft_pecan_vals[v])} ## default 9.757532
1560187190886:if (pecan_var == "fineroot2leaf") {update_vars(ctsm_var = "froot_leaf", ctsm_vals = pft_pecan_vals[v])} ## default 1.5
1560187190887:if (pecan_var == "vcmax") {update_vars(ctsm_var = "flnr", ctsm_vals = as.numeric(pft_pecan_vals[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar))} ## default 0.09
1560187190888:}
1560187190890:}
1560187190891:}
1560265844001:library(pecanapi)
1560265880284:library(devtools)
1560265972342:build()
1560265986983:getwd()
1560265990765:setwd("~/pecan/api")
1560265993462:getwd()
1560265996239:build()
1560266011400:library(pecanapi)
1560266025185:install()
1560266038135:library(pecanapi)
1560266074403:.libPaths("~/R_libs/")
1560266082939:install()
1560266452258:library(pecanapi)
1560266461991:?pecanapi::get_model_id
1560266626832:?DBI::dbConnect
1560266770007:#options(pecanapi.user_id = 99000000002)
1560266770008:con <- DBI::dbConnect(
1560266770009:RPostgres::Postgres(),
1560266770010:user = "bety",
1560266770011:password = "bety",
1560266770012:host = "postgres"
1560266770013:#port = 5432
1560266770014:)
1560266770919:model_id <- get_model_id(con, "ED2")  #, "136")
1560266800965:model_id <- get_model_id(con, "ED2", "git")
1560266825530:#options(pecanapi.user_id = 99000000002)
1560266825532:con <- DBI::dbConnect(
1560266825534:RPostgres::Postgres(),
1560266825536:user = "bety",
1560266825538:password = "bety",
1560266825539:host = "postgres"
1560266825541:#port = 5432
1560266825542:)
1560266826710:model_id <- get_model_id(con, "ED2", "git")
1560266833653:model_id
1560266922504:1000000020
1560267046524:model_id <- get_model_id(con, "ED2", "rgit")
1560268797431:model_id <- get_model_id(con, "ED2", "git")
1560268809394:model_id <- get_model_id(con, "ED2", "git", multi_action = "all")
1560268817250:model_id
1560269723939:search_models(con, "ED")
1560277413066:model_id
1560277427547:get_model_id(con, "ED2", "git", multi_action = "all")
1560279084285:get_model_id(con, "ED2.2", "git")
1560279099565:get_model_id(con, "ED2", "ED2.2")
1560279151260:get_model_id(con, "ED2.2", "git")
1560279392249:get_model_id(con, "ED2", "git", multi_action = "all")
1560279398447:.libPaths("~/R_libs/")
1560279399122:library(pecanapi)
1560279399166:#options(pecanapi.user_id = 99000000002)
1560279399167:con <- DBI::dbConnect(
1560279399168:RPostgres::Postgres(),
1560279399169:user = "bety",
1560279399170:password = "bety",
1560279399171:host = "postgres"
1560279399172:#port = 5432
1560279399173:)
1560279401086:get_model_id(con, "ED2", "git", multi_action = "all")
1560279403423:get_model_id(con, "ED2.2", "git")
1560282321001:.libPaths("~/R_libs/")
1560282321713:library(PEcAn.CTSM)
1560454645331:.libPaths("~/R_libs/")
1560454651567:library(pecanapi)
1560454651578:#options(pecanapi.user_id = 99000000002)
1560454651579:con <- DBI::dbConnect(
1560454651580:RPostgres::Postgres(),
1560454651581:user = "bety",
1560454651582:password = "bety",
1560454651583:host = "postgres"
1560454651584:#port = 5432
1560454651585:)
1560454653217:get_model_id(con, "ED2", "git", multi_action = "all")
1560454654326:get_model_id(con, "ED2.2", "git")
1560539275753:.libPaths("~/R_libs/")
1560539283603:library(pecanapi)
1560539297087:#options(pecanapi.user_id = 99000000002)
1560539297088:con <- DBI::dbConnect(
1560539297090:RPostgres::Postgres(),
1560539297091:user = "bety",
1560539297092:password = "bety",
1560539297093:host = "postgres"
1560539297094:#port = 5432
1560539297095:)
1560539298862:get_model_id(con, "ED2", "git", multi_action = "all")
1560539301462:get_model_id(con, "ED2.2", "git")
1560539302833:search_models(con, "ED")
1560540062298:.libPaths("~/R_libs/")
1560540062946:library(pecanapi)
1560540063798:#options(pecanapi.user_id = 99000000002)
1560540063799:con <- DBI::dbConnect(
1560540063800:RPostgres::Postgres(),
1560540063801:user = "bety",
1560540063802:password = "bety",
1560540063803:host = "postgres"
1560540063804:#port = 5432
1560540063805:)
1560540065079:get_model_id(con, "ED2", "git", multi_action = "all")
1560540066827:get_model_id(con, "ED2.2", "git")
1560540067830:search_models(con, "ED")
1560540498049:search_models(con, "ED")
1560778500380:.libPaths("~/R_libs/")
1560778504319:library(pecanapi)
1560778505081:#options(pecanapi.user_id = 99000000002)
1560778505082:con <- DBI::dbConnect(
1560778505083:RPostgres::Postgres(),
1560778505084:user = "bety",
1560778505085:password = "bety",
1560778505086:host = "postgres"
1560778505087:#port = 5432
1560778505088:)
1560778506352:get_model_id(con, "ED2", "git", multi_action = "all")
1560778508321:get_model_id(con, "ED2.2", "git")
1560778509956:search_models(con, "ED")
1560778890943:pecanapi::get_model_id(con, "ED2.2", "git")
1560864146870:.libPaths("~/R_libs/")
1560864147536:library(pecanapi)
1560864149061:#options(pecanapi.user_id = 99000000002)
1560864149063:con <- DBI::dbConnect(
1560864149064:RPostgres::Postgres(),
1560864149065:user = "bety",
1560864149066:password = "bety",
1560864149068:host = "postgres"
1560864149069:#port = 5432
1560864149070:)
1560864151628:get_model_id(con, "ED2", "git", multi_action = "all")
1560864151999:get_model_id(con, "ED2.2", "git")
1560864153216:search_models(con, "ED")
1560864358523:tbl(con, 'pfts')
1560864369652:library(dplyr)
1560864374133:tbl(con, 'pfts')
1560864389408:pfts <- tbl(con, 'pfts')
1560864394150:View(pfts)
1560864410225:pfts <- tbl(con, 'pfts') %>%
1560864410227:collect()
1560864412579:View(pfts)
1560864427898:sort(pfts$name)
1560864539335:pfts <- tbl(con, 'pfts') %>%
1560864539337:collect() %>%
1560864539339:filter(name == "ebifarm.c4grass.doe_vd")
1560864542160:View(pfts)
1560864760295:pfts <- tbl(con, 'pfts') %>%
1560864760297:collect() %>%
1560864760299:filter(name == "c4grass")
1560864762230:View(pfts)
1560865424839:pfts <- tbl(con, 'pfts') %>%
1560865424841:collect() %>%
1560865424843:filter(modeltype_id == "5000000001")
1560865428225:View(pfts)
1560865441779:pfts <- tbl(con, 'pfts') %>%
1560865441780:collect()
1560865443126:View(pfts)
1560865453852:table(pfts$modeltype_id)
1560865500764:pfts <- tbl(con, 'pfts') %>%
1560865500766:collect() %>%
1560865500768:filter(modeltype_id == "1")
1560865502098:View(pfts)
1560865511917:sort(pfts$name)
1560869049349:.libPaths("~/R_libs/")
1560869050044:library(PEcAn.CTSM)
1560869059679:trait.values <- list(c4_grass = list(sla = 0.03, c2n_leaf = 35, stom_slope = 10, fineroot2leaf = 2, vcmax = 50))
1560869091963:run.id = 1
1560869096165:local.rundir = tempdir()
1560869100031:leafC = 0.48
1560869103643:fnr = 7.16
1560869107252:ar = 60
1560869112637:## Copy and open default parameter files
1560869112639:ctsm.param.default <-
1560869112641:system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM')
1560869114172:ctsm.param.file <-
1560869114174:file.path(local.rundir, paste0("ctsm_params.", run.id, ".nc"))
1560869114909:file.copy(ctsm.param.default, ctsm.param.file)
1560869115609:ctsm.param.nc <- ncdf4::nc_open(ctsm.param.file, write = TRUE)
1560869116904:## Loop over PFTS
1560869116906:npft <- length(trait.values)
1560869117460:PEcAn.logger::logger.debug('there are ',
1560869117462:npft,
1560869117465:'PFTs in this run, they are named:',
1560869117467:names(trait.values))
1560869118287:ctsm_pftnames <-
1560869118290:trimws(tolower(ncdf4::ncvar_get(ctsm.param.nc, "pftname")))
1560869122768:i <- 1
1560869125428:pft.name <- names(trait.values)[[i]]
1560869126546:if (is.null(pft.name) || is.na(pft.name)) {
1560869126548:PEcAn.logger::logger.error("pft.name missing")
1560869126550:} else {
1560869126553:PEcAn.logger::logger.info(paste("PFT =", pft.name))
1560869126555:PEcAn.logger::logger.debug(paste0("ctsm PFT number: ", which(ctsm_pftnames == pft.name)))
1560869126556:}
1560869127953:if (pft.name == 'env')
1560869128656:next   ## HACK, need to remove env from default
1560869129451:## Match PFT name to COLUMN
1560869129454:ipft <- match(tolower(pft.name), ctsm_pftnames)
1560869129973:PEcAn.logger::logger.debug(paste0("CTSM pft index number: ", ipft))
1560869130644:if (is.na(ipft)) {
1560869130646:PEcAn.logger::logger.severe(
1560869130648:paste(
1560869130649:"Unmatched PFT",
1560869130651:pft.name,
1560869130653:"in CTSM PEcAn does not yet support non-default PFTs for this model"
1560869130654:)
1560869130656:)
1560869130658:}
1560869131963:## Loop over VARIABLES
1560869131965:pft_pecan_vals <- trait.values[[i]]
1560869136704:for (v in seq_along(pft_pecan_vals)) {
1560869136706:pecan_var <- names(pft_pecan_vals)[v]
1560869136709:### ----- Leaf physiological parameters
1560869136711:update_vars <- function(ctsm_var, ctsm_vals, nc = ctsm.param.nc, start = ipft, count = 1){
1560869136733:ncdf4::ncvar_put(nc, varid = ctsm_var, vals = ctsm_vals, start, count)
1560869136735:}
1560869136737:if (pecan_var == "sla") {update_vars("slatop", udunits2::ud.convert(pft_pecan_vals[v], "m2 kg-1", "m2 g-1") / leafC)} ## default 0.03846
1560869136739:if (pecan_var == "c2n_leaf") {update_vars("leafcn", pft_pecan_vals[v])} ## default 35.36068
1560869136742:if (pecan_var == "stom_slope") {update_vars("mbbopt", pft_pecan_vals[v])} ## default 9.757532
1560869136743:if (pecan_var == "fineroot2leaf") {update_vars("froot_leaf", pft_pecan_vals[v])} ## default 1.5
1560869136744:if (pecan_var == "vcmax") {update_vars("flnr", as.numeric(pft_pecan_vals[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar))} ## default 0.09
1560869136746:}
1560869145409:sla_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")
1560869145554:c2n_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")
1560869145615:sto_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "mbbopt")
1560869145863:frl_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "froot_leaf")
1560869146029:flnr_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "flnr")
1560869146421:sla_old[15]
1560869146593:sla_new[15]
1560869146778:c2n_old[15]
1560869146875:c2n_new[15]
1560869147063:sto_old[15]
1560869148837:sto_new[15]
1560869148975:frl_old[15]
1560869149051:frl_new[15]
1560869149273:flnr_old[15]
1560869149515:flnr_new[15]
1560956731998:# ----------------------------------------------------------------------
1560956731999:# Load required libraries
1560956732001:# ----------------------------------------------------------------------
1560956732002:library(PEcAn.all)
1560956736765:library(PEcAn.utils)
1560956736766:library(RCurl)
1560956738267:# make sure always to call status.end
1560956738268:options(warn=1)
1560956738585:options(error=quote({
1560956738586:PEcAn.utils::status.end("ERROR")
1560956738588:PEcAn.remote::kill.tunnel(settings)
1560956738590:if (!interactive()) {
1560956738592:q(status = 1)
1560956738594:}
1560956738595:}))
1560956745261:# ----------------------------------------------------------------------
1560956745263:# PEcAn Workflow
1560956745264:# ----------------------------------------------------------------------
1560956745266:# Open and read in settings file for PEcAn run.
1560956745268:args <- commandArgs(trailingOnly = TRUE)
1560956746075:if (is.na(args[1])){
1560956746077:settings <- PEcAn.settings::read.settings("pecan.xml")
1560956746078:} else {
1560956746079:settings.file <- args[1]
1560956746080:settings <- PEcAn.settings::read.settings(settings.file)
1560956746081:}
1560956762067:getwd()
1560956777361:setwd("/home/kristinariemer/")
1560956778962:getwd()
1560956797402:# ----------------------------------------------------------------------
1560956797403:# Load required libraries
1560956797404:# ----------------------------------------------------------------------
1560956797405:library(PEcAn.all)
1560956801853:library(PEcAn.utils)
1560956801855:library(RCurl)
1560956803078:# make sure always to call status.end
1560956803080:options(warn=1)
1560956803261:options(error=quote({
1560956803263:PEcAn.utils::status.end("ERROR")
1560956803265:PEcAn.remote::kill.tunnel(settings)
1560956803267:if (!interactive()) {
1560956803269:q(status = 1)
1560956803270:}
1560956803271:}))
1560956806743:# ----------------------------------------------------------------------
1560956806745:# PEcAn Workflow
1560956806747:# ----------------------------------------------------------------------
1560956806749:# Open and read in settings file for PEcAn run.
1560956806751:args <- commandArgs(trailingOnly = TRUE)
1560956807656:if (is.na(args[1])){
1560956807658:settings <- PEcAn.settings::read.settings("ed2_files/pecan64.ed2.xml")
1560956807660:} else {
1560956807662:settings.file <- args[1]
1560956807664:settings <- PEcAn.settings::read.settings(settings.file)
1560956807666:}
1560956809086:# Check for additional modules that will require adding settings
1560956809119:if("benchmarking" %in% names(settings)){
1560956809121:library(PEcAn.benchmark)
1560956809122:settings <- papply(settings, read_settings_BRR)
1560956809124:}
1560956810063:if("sitegroup" %in% names(settings)){
1560956810065:if(is.null(settings$sitegroup$nSite)){
1560956810066:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1560956810068:sitegroupId = settings$sitegroup$id)
1560956810070:} else {
1560956810072:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1560956810074:sitegroupId = settings$sitegroup$id,
1560956810075:nSite = settings$sitegroup$nSite)
1560956810076:}
1560956810077:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1560956810078:}
1560956811474:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1560956811476:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1560956818922:# Write pecan.CHECKED.xml
1560956818924:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1560956820661:# start from scratch if no continue is passed in
1560956820664:statusFile <- file.path(settings$outdir, "STATUS")
1560956821652:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1560956821654:file.remove(statusFile)
1560956821655:}
1560956822794:# Do conversions
1560956822796:settings <- PEcAn.workflow::do_conversions(settings)
1560956825961:# Query the trait database for data and priors
1560956825963:if (PEcAn.utils::status.check("TRAIT") == 0){
1560956825964:PEcAn.utils::status.start("TRAIT")
1560956825965:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1560956825967:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1560956825968:PEcAn.utils::status.end()
1560956825969:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1560956825970:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1560956825972:}
1560956831533:# Run the PEcAn meta.analysis
1560956831535:if(!is.null(settings$meta.analysis)) {
1560956831537:if (PEcAn.utils::status.check("META") == 0){
1560956831538:PEcAn.utils::status.start("META")
1560956831540:PEcAn.MA::runModule.run.meta.analysis(settings)
1560956831541:PEcAn.utils::status.end()
1560956831542:}
1560956831543:}
1560956839779:# Write model specific configs
1560956839781:if (PEcAn.utils::status.check("CONFIG") == 0){
1560956839783:PEcAn.utils::status.start("CONFIG")
1560956839785:settings <- PEcAn.workflow::runModule.run.write.configs(settings)
1560956839787:PEcAn.settings::write.settings(settings, outputfile='pecan.CONFIGS.xml')
1560956839789:PEcAn.utils::status.end()
1560956839791:} else if (file.exists(file.path(settings$outdir, 'pecan.CONFIGS.xml'))) {
1560956839792:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.CONFIGS.xml'))
1560956839793:}
1560957852614:traceback()
1560958044523:traceback()
1561043512396:library(reticulate)
1561043526515:install.packages("reticulate")
1561043906611:.libPaths("~/R_libs/")
1561043914705:install.packages("reticulate")
1561044046270:library(reticulate)
1561562648656:# ----------------------------------------------------------------------
1561562648692:# Load required libraries
1561562648693:# ----------------------------------------------------------------------
1561562648695:library(PEcAn.all)
1561562653555:library(PEcAn.utils)
1561562653556:library(RCurl)
1561562653720:# make sure always to call status.end
1561562653721:options(warn=1)
1561562653722:options(error=quote({
1561562653723:PEcAn.utils::status.end("ERROR")
1561562653724:PEcAn.remote::kill.tunnel(settings)
1561562653725:if (!interactive()) {
1561562653726:q(status = 1)
1561562653727:}
1561562653728:}))
1561562655116:# ----------------------------------------------------------------------
1561562655118:# PEcAn Workflow
1561562655120:# ----------------------------------------------------------------------
1561562655122:# Open and read in settings file for PEcAn run.
1561562655123:args <- commandArgs(trailingOnly = TRUE)
1561562655928:if (is.na(args[1])){
1561562655930:settings <- PEcAn.settings::read.settings("ed2_files/pecan64.ed2.xml")
1561562655932:} else {
1561562655934:settings.file <- args[1]
1561562655936:settings <- PEcAn.settings::read.settings(settings.file)
1561562655938:}
1561562658054:# Check for additional modules that will require adding settings
1561562658056:if("benchmarking" %in% names(settings)){
1561562658057:library(PEcAn.benchmark)
1561562658058:settings <- papply(settings, read_settings_BRR)
1561562658059:}
1561562659259:if("sitegroup" %in% names(settings)){
1561562659261:if(is.null(settings$sitegroup$nSite)){
1561562659263:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1561562659265:sitegroupId = settings$sitegroup$id)
1561562659266:} else {
1561562659268:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1561562659270:sitegroupId = settings$sitegroup$id,
1561562659271:nSite = settings$sitegroup$nSite)
1561562659272:}
1561562659273:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1561562659274:}
1561562660448:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1561562660449:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1561562662977:# Write pecan.CHECKED.xml
1561562662978:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1561562664133:# start from scratch if no continue is passed in
1561562664136:statusFile <- file.path(settings$outdir, "STATUS")
1561562665748:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1561562665750:file.remove(statusFile)
1561562665752:}
1561562666869:# Do conversions
1561562666871:settings <- PEcAn.workflow::do_conversions(settings)
1561562669540:# Query the trait database for data and priors
1561562669542:if (PEcAn.utils::status.check("TRAIT") == 0){
1561562669544:PEcAn.utils::status.start("TRAIT")
1561562669546:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1561562669548:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1561562669549:PEcAn.utils::status.end()
1561562669550:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1561562669551:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1561562669552:}
1561562681493:# Run the PEcAn meta.analysis
1561562681495:if(!is.null(settings$meta.analysis)) {
1561562681497:if (PEcAn.utils::status.check("META") == 0){
1561562681500:PEcAn.utils::status.start("META")
1561562681502:PEcAn.MA::runModule.run.meta.analysis(settings)
1561562681504:PEcAn.utils::status.end()
1561562681505:}
1561562681506:}
1561562706629:# Write model specific configs
1561562706631:if (PEcAn.utils::status.check("CONFIG") == 0){
1561562706632:PEcAn.utils::status.start("CONFIG")
1561562706633:settings <- PEcAn.workflow::runModule.run.write.configs(settings)
1561562706634:PEcAn.settings::write.settings(settings, outputfile='pecan.CONFIGS.xml')
1561562706635:PEcAn.utils::status.end()
1561562706636:} else if (file.exists(file.path(settings$outdir, 'pecan.CONFIGS.xml'))) {
1561562706637:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.CONFIGS.xml'))
1561562706638:}
1561562752926:if ((length(which(commandArgs() == "--advanced")) != 0) && (PEcAn.utils::status.check("ADVANCED") == 0)) {
1561562752928:PEcAn.utils::status.start("ADVANCED")
1561562752929:q();
1561562752931:}
1561562754977:# Start ecosystem model runs
1561562754979:if (PEcAn.utils::status.check("MODEL") == 0) {
1561562754981:PEcAn.utils::status.start("MODEL")
1561562754984:PEcAn.remote::runModule.start.model.runs(settings, stop.on.error = FALSE)
1561562754986:PEcAn.utils::status.end()
1561562754988:}
1561562775661:traceback()
1561639757381:?start.model.runs
1561639916238:settings$host
1561639927293:start_serial()
1561639929464:?start_serial()
1561639946016:settings$rundir
1561639988573:settings$host$rundir
1561640097562:run_list
1561640116510:run_file <- file.path(settings$rundir, "runs.txt")
1561640119108:run_file
1561640145406:run_list <- readLines(con = run_file)
1561640151778:run_list
1561640210232:for(run in run_list){print(run)}
1561640220381:run = run_list[1]
1561640221399:run
1561640244209:start_serial(run = run, host = settings$host, rundir = settings$rundir,
1561640244211:host_rundir = settings$host$rundir, job_script = "job.sh")
1561640262268:traceback()
1561640311173:settings$host
1561640322708:settings$rundir
1561640330677:settings$host$rundir
1561640357962:# ----------------------------------------------------------------------
1561640357963:# Load required libraries
1561640357964:# ----------------------------------------------------------------------
1561640357965:library(PEcAn.all)
1561640363046:library(PEcAn.utils)
1561640363048:library(RCurl)
1561640364799:# make sure always to call status.end
1561640364801:options(warn=1)
1561640372298:options(error=quote({
1561640372299:PEcAn.utils::status.end("ERROR")
1561640372300:PEcAn.remote::kill.tunnel(settings)
1561640372301:if (!interactive()) {
1561640372303:q(status = 1)
1561640372304:}
1561640372306:}))
1561640376931:# ----------------------------------------------------------------------
1561640376933:# PEcAn Workflow
1561640376935:# ----------------------------------------------------------------------
1561640376937:# Open and read in settings file for PEcAn run.
1561640376939:args <- commandArgs(trailingOnly = TRUE)
1561640377945:if (is.na(args[1])){
1561640377947:settings <- PEcAn.settings::read.settings("ed2_files/pecan64.ed2.xml")
1561640377949:} else {
1561640377951:settings.file <- args[1]
1561640377953:settings <- PEcAn.settings::read.settings(settings.file)
1561640377956:}
1561640381482:# Check for additional modules that will require adding settings
1561640381484:if("benchmarking" %in% names(settings)){
1561640381485:library(PEcAn.benchmark)
1561640381486:settings <- papply(settings, read_settings_BRR)
1561640381488:}
1561640382367:if("sitegroup" %in% names(settings)){
1561640382368:if(is.null(settings$sitegroup$nSite)){
1561640382369:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1561640382370:sitegroupId = settings$sitegroup$id)
1561640382372:} else {
1561640382373:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1561640382375:sitegroupId = settings$sitegroup$id,
1561640382376:nSite = settings$sitegroup$nSite)
1561640382377:}
1561640382378:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1561640382379:}
1561640384719:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1561640384720:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1561640394537:# Write pecan.CHECKED.xml
1561640394538:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1561640396482:# start from scratch if no continue is passed in
1561640396483:statusFile <- file.path(settings$outdir, "STATUS")
1561640397452:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1561640397453:file.remove(statusFile)
1561640397455:}
1561640399145:# Do conversions
1561640399147:settings <- PEcAn.workflow::do_conversions(settings)
1561640403554:# Query the trait database for data and priors
1561640403556:if (PEcAn.utils::status.check("TRAIT") == 0){
1561640403557:PEcAn.utils::status.start("TRAIT")
1561640403558:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1561640403559:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1561640403560:PEcAn.utils::status.end()
1561640403561:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1561640403562:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1561640403563:}
1561640415740:# Run the PEcAn meta.analysis
1561640415741:if(!is.null(settings$meta.analysis)) {
1561640415742:if (PEcAn.utils::status.check("META") == 0){
1561640415743:PEcAn.utils::status.start("META")
1561640415744:PEcAn.MA::runModule.run.meta.analysis(settings)
1561640415745:PEcAn.utils::status.end()
1561640415746:}
1561640415747:}
1561640433018:# Write model specific configs
1561640433019:if (PEcAn.utils::status.check("CONFIG") == 0){
1561640433020:PEcAn.utils::status.start("CONFIG")
1561640433021:settings <- PEcAn.workflow::runModule.run.write.configs(settings)
1561640433022:PEcAn.settings::write.settings(settings, outputfile='pecan.CONFIGS.xml')
1561640433023:PEcAn.utils::status.end()
1561640433024:} else if (file.exists(file.path(settings$outdir, 'pecan.CONFIGS.xml'))) {
1561640433025:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.CONFIGS.xml'))
1561640433026:}
1561642559653:if ((length(which(commandArgs() == "--advanced")) != 0) && (PEcAn.utils::status.check("ADVANCED") == 0)) {
1561642559655:PEcAn.utils::status.start("ADVANCED")
1561642559657:q();
1561642559659:}
1561642562060:# Start ecosystem model runs
1561642562061:if (PEcAn.utils::status.check("MODEL") == 0) {
1561642562062:PEcAn.utils::status.start("MODEL")
1561642562063:PEcAn.remote::runModule.start.model.runs(settings, stop.on.error = FALSE)
1561642562064:PEcAn.utils::status.end()
1561642562065:}
1561642619843:traceback()
1561644499539:settings$host
1561645071266:host
1561999240964:library(dplyr)
1561999241634:library(ggplot2)
1561999241800:library(gridExtra)
1561999243034:theme_set(theme_bw())
1561999244235:# Open up a connection to BETY
1561999244237:bety <-dplyr::src_postgres(host = "postgres",
1561999244239:user = "bety",
1561999244241:password = "bety",
1561999244243:dbname = "bety")
1561999450629:library(dplyr)
1561999451217:library(ggplot2)
1561999453088:library(gridExtra)
1561999454250:theme_set(theme_bw())
1561999455429:# Open up a connection to BETY
1561999455431:bety <-dplyr::src_postgres(host = "postgres",
1561999455434:user = "bety",
1561999455436:password = "bety",
1561999455438:dbname = "bety")
1561999457871:# Get all priors data for CLM50 PFTs
1561999457872:clm_pfts <- tbl(bety, 'pfts') %>%
1561999457874:filter(modeltype_id == 9000000001) %>%
1561999457876:select(id, name) %>%
1561999457878:collect()
1561999459591:pft_prior_link <- tbl(bety, 'pfts_priors') %>%
1561999459593:filter(pft_id %in% clm_pfts$id) %>%
1561999459595:collect()
1561999460523:pft_prior_combined <- left_join(pft_prior_link, clm_pfts, by = c("pft_id" = "id"))
1561999461353:clm_priors <- tbl(bety, 'priors') %>%
1561999461354:filter(id %in% pft_prior_link$prior_id) %>%
1561999461356:collect()
1561999462112:clm_priors_extended <- left_join(clm_priors, pft_prior_combined, by = c("id" = "prior_id"))
1561999462791:clm_variables <- tbl(bety, 'variables') %>%
1561999462793:select(id, name, units) %>%
1561999462795:collect()
1561999464101:clm_priors_full <- left_join(clm_priors_extended, clm_variables, by = c("variable_id" = "id")) %>%
1561999464103:mutate(distn_r = paste0("d", distn),
1561999464105:pft_col = case_when(name.x == "Setaria WT priors defaults" ~ "black",
1561999464107:name.x == "Setaria WT priors data" ~ "red"))
1561999466309:# check variable names matching (growth respiration, Vcmax)
1561999466311:var_plot <- list()
1561999483828:for(var_name in sort(unique(clm_priors_full$name.y))){
1561999483830:clm_priors_by_var <- filter(clm_priors_full, name.y == var_name)
1561999483832:plot_center <- mean(c(clm_priors_by_var$parama[1], clm_priors_by_var$parama[2]), na.rm = TRUE)
1561999483833:var_plot[[var_name]] <- ggplot(data = data.frame(x = c(plot_center + (5 * plot_center), 0)), aes(x)) +
1561999483835:stat_function(fun = clm_priors_by_var$distn_r[1], n = 101,
1561999483836:args = list(clm_priors_by_var$parama[1], clm_priors_by_var$paramb[1]),
1561999483837:col = clm_priors_by_var$pft_col[1]) +
1561999483838:stat_function(fun = clm_priors_by_var$distn_r[2], n = 101,
1561999483839:args = list(clm_priors_by_var$parama[2], clm_priors_by_var$paramb[2]),
1561999483840:color = clm_priors_by_var$pft_col[2]) +
1561999483842:labs(x = paste0(var_name, " (", clm_priors_by_var$units[1], ")"), y = "") +
1561999483843:theme(axis.title.y = element_blank(),
1561999483844:axis.text.y = element_blank(),
1561999483845:axis.ticks.y = element_blank())
1561999483846:}
1561999484731:do.call(grid.arrange, var_plot)
1561999698907:warnings()
1561999757099:View(clm_priors_full)
1561999917127:getwd()
1561999980313:#load("/your_own_path/to_the_prior_distns/prior.distns.Rdata")
1561999980315:load("clm_params_data_out/pft/Setaria WT priors data/prior.distns.Rdata")
1562000000015:#load("/your_own_path/to_the_prior_distns/prior.distns.Rdata")
1562000000017:load("clm_params_data_out/pft/Setaria WT priors data/prior.distns.Rdata")
1562000002962:View(prior.distns)
1562000011749:library(ggplot2)
1562000012449:library(ggridges)
1562000012451:library(RColorBrewer)
1562000012660:library(gridExtra)
1562000020254:install.packages("ggridges")
1562000036992:.libPaths()
1562000062554:.libPaths("R_libs/")
1562000066514:install.packages("ggridges")
1562000079069:library(ggridges)
1562000089369:#load("/your_own_path/to_the_prior_distns/prior.distns.Rdata")
1562000089372:load("clm_params_data_out/pft/Setaria WT priors data/prior.distns.Rdata")
1562000090213:library(ggplot2)
1562000090973:library(ggridges)
1562000090975:library(RColorBrewer)
1562000091251:library(gridExtra)
1562000119704:#load("/your_own_path/to_the_prior_distns/prior.distns.Rdata")
1562000119705:load("clm_params_data_out/pft/Setaria WT priors data/prior.distns.Rdata")
1562000120582:library(ggplot2)
1562000121331:.libPaths("~/R_libs/")
1562000122387:library(ggridges)
1562000123731:library(RColorBrewer)
1562000124104:library(gridExtra)
1562000126923:plot_db_distns <- function(prior.distns){
1562000126925:parnames <- rownames(prior.distns)
1562000126928:dist_matrix <- matrix(NA, nrow = 1000000, ncol = length(parnames))
1562000126930:colnames(dist_matrix) <- parnames
1562000126933:for(i in seq_along(parnames)){
1562000126934:post <- dist_matrix[rownames(dist_matrix) == parnames[i],]
1562000126935:dist_matrix[,i] <- eval(parse(text = paste0("r", prior.distns$distn[i],"(1000000,", prior.distns$parama[i], ",", prior.distns$paramb[i],")")))
1562000126936:}
1562000126939:dist_df <- reshape::melt(dist_matrix)
1562000126941:colnames(dist_df) <- c("dist", "parameter", "value")
1562000126942:dist_df$dist <- "prior"
1562000126945:n <- length(parnames)
1562000126946:qual_col_pals <- brewer.pal.info[brewer.pal.info$category == 'qual',]
1562000126947:col_vector <- unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
1562000126949:plot_colors =sample(col_vector, n)
1562000126952:plot.list <- list()
1562000126953:for(i in  seq_along(parnames)){
1562000126954:sub_df <- dist_df[dist_df$parameter == parnames[i],]
1562000126955:plot.list[[i]] <- ggplot(sub_df, aes(x = value, y = 0)) +
1562000126957:geom_density_ridges( fill=plot_colors[i]) +
1562000126958:theme(legend.position="none",
1562000126959:axis.title.y=element_blank(),
1562000126961:axis.text.y=element_blank(),
1562000126962:axis.ticks.y=element_blank()) + ggtitle(parnames[i])
1562000126963:}
1562000126966:nplots <- length(plot.list)
1562000126968:nCol <- floor(sqrt(nplots))
1562000126969:do.call("grid.arrange", c(plot.list, ncol=nCol))
1562000126970:}
1562000128788:plot_db_distns(prior.distns)
1562000197378:#load("/your_own_path/to_the_prior_distns/prior.distns.Rdata")
1562000197379:load("clm_params_data_out/pft/Setaria WT priors data/prior.distns.Rdata")
1562000197382:library(ggplot2)
1562000198136:.libPaths("~/R_libs/")
1562000198137:library(ggridges)
1562000198168:library(RColorBrewer)
1562000198180:library(gridExtra)
1562000205318:prior.distns
1562000209447:parnames <- rownames(prior.distns)
1562000216782:dist_matrix <- matrix(NA, nrow = 1000000, ncol = length(parnames))
1562000222404:View(dist_matrix)
1562000230708:colnames(dist_matrix) <- parnames
1562000233188:View(dist_matrix)
1562000277587:for(i in seq_along(parnames)){
1562000277588:post <- dist_matrix[rownames(dist_matrix) == parnames[i],]
1562000277590:dist_matrix[,i] <- eval(parse(text = paste0("r", prior.distns$distn[i],"(1000000,", prior.distns$parama[i], ",", prior.distns$paramb[i],")")))
1562000277591:}
1562009347090:View(dist_matrix)
1562009420493:#load("/your_own_path/to_the_prior_distns/prior.distns.Rdata")
1562009420495:load("clm_params_data_out/pft/Setaria WT priors data/prior.distns.Rdata")
1562009421489:library(ggplot2)
1562009422218:.libPaths("~/R_libs/")
1562009422978:library(ggridges)
1562009423701:library(RColorBrewer)
1562009424085:library(gridExtra)
1562009427189:parnames <- rownames(prior.distns)
1562009428077:dist_matrix <- matrix(NA, nrow = 1000000, ncol = length(parnames))
1562009428912:colnames(dist_matrix) <- parnames
1562009429924:for(i in seq_along(parnames)){
1562009429925:post <- dist_matrix[rownames(dist_matrix) == parnames[i],]
1562009429927:dist_matrix[,i] <- eval(parse(text = paste0("r", prior.distns$distn[i],"(1000000,", prior.distns$parama[i], ",", prior.distns$paramb[i],")")))
1562009429929:}
1562009440493:head(dist_matrix)
1562009460877:seq_along(parnames)
1562009473357:i <- 1
1562009495234:prior.distns$distn[i]
1562009505447:prior.distns$parama[i]
1562009520823:prior.distns$paramb[i]
1562009541942:paste0("r", prior.distns$distn[i],"(1000000,", prior.distns$parama[i], ",", prior.distns$paramb[i],")")
1562009576511:rlnorm(1000000,0.811,0.843)
1562009579824:paste0("r", prior.distns$distn[i],"(1000000,", prior.distns$parama[i], ",", prior.distns$paramb[i],")")
1562009585010:head(rlnorm(1000000,0.811,0.843))
1562009596767:View(prior.distns)
1562009694083:load("clm_params_data_out/pft/Setaria WT priors data/prior.distns.Rdata")
1562009694091:library(ggplot2)
1562009694822:.libPaths("~/R_libs/")
1562009694824:library(ggridges)
1562009694854:library(RColorBrewer)
1562009694865:library(gridExtra)
1562009697099:# set up empty matrix to hold values for each parameter from distribution
1562009697101:parnames <- rownames(prior.distns)
1562009698151:dist_matrix <- matrix(NA, nrow = 1000, ncol = length(parnames))
1562009699047:colnames(dist_matrix) <- parnames
1562009700412:# generate 1 million values for each parameter and put into matrix
1562009700414:for(i in seq_along(parnames)){
1562009700416:post <- dist_matrix[rownames(dist_matrix) == parnames[i],]
1562009700418:dist_matrix[,i] <- eval(parse(text = paste0("r", prior.distns$distn[i],"(1000000,",
1562009700420:prior.distns$parama[i], ",",
1562009700421:prior.distns$paramb[i],")")))
1562009700422:}
1562009710375:# generate 1 million values for each parameter and put into matrix
1562009710377:for(i in seq_along(parnames)){
1562009710379:post <- dist_matrix[rownames(dist_matrix) == parnames[i],]
1562009710380:dist_matrix[,i] <- eval(parse(text = paste0("r", prior.distns$distn[i],"(1000,",
1562009710382:prior.distns$parama[i], ",",
1562009710384:prior.distns$paramb[i],")")))
1562009710385:}
1562009714518:View(dist_matrix)
1562009747527:dist_df <- reshape::melt(dist_matrix)
1562009750260:View(dist_df)
1562009760897:colnames(dist_df) <- c("dist", "parameter", "value")
1562009762033:dist_df$dist <- "prior"
1562009764866:View(dist_df)
1562009812700:n <- length(parnames)
1562009816739:n
1562009819568:qual_col_pals <- brewer.pal.info[brewer.pal.info$category == 'qual',]
1562009829696:qual_col_pals
1562009837139:col_vector <- unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
1562009838010:plot_colors =sample(col_vector, n)
1562009842937:plot_colors
1562009858269:col_vector
1562009881621:plot.list <- list()
1562009914535:for(i in  seq_along(parnames)){
1562009914536:sub_df <- dist_df[dist_df$parameter == parnames[i],]
1562009914538:plot.list[[i]] <- ggplot(sub_df, aes(x = value, y = 0)) +
1562009914540:geom_density_ridges( fill=plot_colors[i]) +
1562009914542:theme(legend.position="none",
1562009914544:axis.title.y=element_blank(),
1562009914546:axis.text.y=element_blank(),
1562009914547:axis.ticks.y=element_blank()) + ggtitle(parnames[i])
1562009914548:}
1562009921736:plot.list[1]
1562009926256:plot.list
1562009942280:parnames
1562009958713:nplots <- length(plot.list)
1562009959867:nCol <- floor(sqrt(nplots))
1562009966641:nplots
1562009968963:nCol
1562009972341:do.call("grid.arrange", c(plot.list, ncol=nCol))
1562009995659:?geom_density_ridges
1562010023113:sub_df
1562010028456:head(sub_df)
1562010183079:# TODO: download parameters using pecanapi R package?
1562010183082:load("clm_params_data_out/pft/Setaria WT priors data/prior.distns.Rdata")
1562010220843:getwd()
1562010233733:source("sentinel-detection/parameter_dists/plot_priors_istem.R")
1562011264573:?geom_density_ridges
1562011329052:# set up empty matrix to hold values for each parameter from distribution
1562011329053:parnames <- rownames(prior.distns)
1562011330282:dist_matrix <- matrix(NA, nrow = 1000000, ncol = length(parnames))
1562011330446:colnames(dist_matrix) <- parnames
1562011330592:# generate 1 million values for each parameter and put into matrix
1562011330593:for(i in seq_along(parnames)){
1562011330594:post <- dist_matrix[rownames(dist_matrix) == parnames[i],]
1562011330595:dist_matrix[,i] <- eval(parse(text = paste0("r", prior.distns$distn[i],"(1000000,",
1562011330596:prior.distns$parama[i], ",",
1562011330597:prior.distns$paramb[i],")")))
1562011330598:}
1562011332121:# manipulate into long dataframe
1562011332122:dist_df <- reshape::melt(dist_matrix)
1562011333787:colnames(dist_df) <- c("dist", "parameter", "value")
1562011333788:# TODO: adapt name for prior + data/default
1562011333789:dist_df$dist <- "prior"
1562011334138:# get colors for each distribution
1562011334140:n <- length(parnames)
1562011334142:qual_col_pals <- brewer.pal.info[brewer.pal.info$category == 'qual',]
1562011334166:col_vector <- unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
1562011334172:plot_colors =sample(col_vector, n)
1562011334176:# plot distribution using dataframe of parameter values
1562011334177:# TODO: be able to input single color for all values
1562011334178:plot.list <- list()
1562011334180:for(i in  seq_along(parnames)){
1562011334181:sub_df <- dist_df[dist_df$parameter == parnames[i],]
1562011334182:plot.list[[i]] <- ggplot(sub_df, aes(x = value, y = 0)) +
1562011334183:geom_density_ridges( fill=plot_colors[i]) +
1562011334184:theme(legend.position="none",
1562011334185:axis.title.y=element_blank(),
1562011334186:axis.text.y=element_blank(),
1562011334187:axis.ticks.y=element_blank()) + ggtitle(parnames[i])
1562011334188:}
1562011335700:nplots <- length(plot.list)
1562011335701:nCol <- floor(sqrt(nplots))
1562011335702:do.call("grid.arrange", c(plot.list, ncol=nCol))
1562011377507:?geom_density
1562011408641:View(dist_df)
1562011441891:ggplot(dist_df, aes(value)) + geom_density() + facet_wrap(~parameter)
1562011499973:ggplot(dist_df, aes(value)) + geom_density() + facet_wrap(~parameter, scales = "free")
1562011564971:plot_db_distns(prior.distns)
1562079101497:con <- DBI::dbConnect(RPostgres::Postgres(), user = "bety", password = "bety", host = "postgres")
1562079194895:library(RPostgres)
1562079212715:.libPaths("~/R_libs/")
1562079216101:con <- DBI::dbConnect(RPostgres::Postgres(), user = "bety", password = "bety", host = "postgres")
1562079218647:DBI::dbListTables(con)
1562093769839:getwd()
1562093784521:list.files("../../data/")
1562170905554:library(dplyr)
1562170960006:.libPaths("~/R_libs/")
1562170964117:DBI::dbConnect(RPostgreSQL::PostgreSQL(),
1562170964118:user = "bety",
1562170964119:password = "bety",
1562170964120:host = "postgres")
1562170969820:con <- DBI::dbConnect(RPostgreSQL::PostgreSQL(),
1562170969823:user = "bety",
1562170969825:password = "bety",
1562170969826:host = "postgres")
1562170971990:tbl(con, "dbfiles") %>%
1562170971992:filter(file_name %like% "OGE%", file_path %like% "/data%") %>%
1562170971994:select(id, file_name, file_path, machine_id, container_type, container_id)
1562170995740:machine_values <- tbl(con, "dbfiles") %>%
1562170995742:filter(file_name %like% "OGE%", file_path %like% "/data%") %>%
1562170995744:select(id, file_name, file_path, machine_id, container_type, container_id)
1562170997642:View(machine_values)
1562171005561:machine_values$id
1562171028563:machine_values <- tbl(con, "dbfiles") %>%
1562171028566:filter(file_name %like% "OGE%", file_path %like% "/data%") %>%
1562171028568:select(id, file_name, file_path, machine_id, container_type, container_id) %>%
1562171028570:collect()
1562171032159:View(machine_values)
1562171134625:machine_id <- tbl(con, "dbfiles") %>%
1562171134627:filter(file_name == "OGE2_", file_path == "/data/oge2OLD") %>%
1562171134629:pull(machine_id)
1562171139933:machine_id
1562171149311:options(scipen = 999)
1562171150495:machine_id
1562171155705:tbl(con, "machines") %>%
1562171155707:filter(id == !!machine_id)
1562171170703:View(tbl(con, "machines") %>%
1562171170705:filter(id == !!machine_id))
1562171179759:View(tbl(con, "machines") %>%
1562171179761:filter(id == !!machine_id) %>%
1562171179762:collect())
1562174224667:options(scipen = 999)
1562174228658:library(dplyr)
1562174229290:con <- DBI::dbConnect(RPostgreSQL::PostgreSQL(), user = "bety", password = "bety", host = "postgres")
1562174229816:tbl(con, "dbfiles") %>%
1562174229817:filter(file_name %like% "OGE%", file_path %like% "/data%") %>%
1562174229819:select(id, file_name, file_path, machine_id, container_type, container_id)
1562174328630:machine_id <- tbl(con, "dbfiles") %>%
1562174328633:filter(file_name == "OGE2_", file_path == "/data/oge2OLD") %>%
1562174328634:pull(machine_id)
1562174331483:tbl(con, "machines") %>%
1562174331485:filter(id == !!machine_id)
1562174383096:machine_id
1562174387538:!!machine_id
1562174427171:source('~/.active-rstudio-document', echo=TRUE)
1562174460612:tbl(con, "machines") %>%
1562174460614:filter(id == !!machine_id) %>%
1562174460616:select(hostname)
1562174938710:machine_id2 <- "25"
1562174947629:machine_id
1562174949761:machine_id2
1562174961432:machine_id2 <- c(25)
1562174963612:machine_id2
1562174973779:tbl(con, "machines") %>%
1562174973780:filter(id == !!machine_id2) %>%
1562174973781:select(hostname)
1562174983237:tbl(con, "machines") %>%
1562174983238:filter(id == !!machine_id2)
1562176250168:# Retrieve the models associated with the "old" welsch.cyverse.org machine,
1562176250170:# which was machine ID 25
1562176250172:models <- tbl(con, "dbfiles") %>%
1562176250173:filter(machine_id == 25, container_type == "Model") %>%
1562176250176:collect()
1562176254044:models
1562176263916:View(models)
1562176305088:machine_id
1562176312312:models2 <- tbl(con, "dbfiles") %>%
1562176312313:filter(machine_id == 9000000003, container_type == "Model") %>%
1562176312314:collect()
1562176313851:models2
1562176355708:machine_id
1562176363485:# It should have ED2 and BioCro. If not, there's a problem.
1562176363486:# Assuming that worked OK, just create new identical records, but under the new machine ID
1562176363488:DBI::dbExecute(con, "INSERT INTO dbfiles (machine_id, file_name, file_path, container_type, container_id) VALUES ($1, $2, $3, $4, $5)",
1562176363490:list(machine_id, models$file_name, models$file_path, models$container_type, models$container_id))
1562176391852:models2 <- tbl(con, "dbfiles") %>%
1562176391854:filter(machine_id == 9000000003, container_type == "Model") %>%
1562176391856:collect()
1562176392154:models2
1562176409043:library(DBI)
1562176412889:# It should have ED2 and BioCro. If not, there's a problem.
1562176412890:# Assuming that worked OK, just create new identical records, but under the new machine ID
1562176412892:DBI::dbExecute(con, "INSERT INTO dbfiles (machine_id, file_name, file_path, container_type, container_id) VALUES ($1, $2, $3, $4, $5)",
1562176412894:list(machine_id, models$file_name, models$file_path, models$container_type, models$container_id))
1562176446295:list(machine_id, models$file_name, models$file_path, models$container_type, models$container_id)
1562176769682:machine_id
1562176979565:library(dplyr)
1562176980497:con <- DBI::dbConnect(RPostgre::Postgre(),
1562176980498:user = "bety",
1562176980499:password = "bety",
1562176980500:host = "postgres")
1562176996948:con <- DBI::dbConnect(RPostgres::Postgres(),
1562176996949:user = "bety",
1562176996950:password = "bety",
1562176996951:host = "postgres")
1562177024639:.libPaths("~/R_libs/")
1562177030796:.libPaths("~/R_libs/")
1562177032029:library(dplyr)
1562177033712:con <- DBI::dbConnect(RPostgres::Postgres(),
1562177033713:user = "bety",
1562177033714:password = "bety",
1562177033715:host = "postgres")
1562177036365:tbl(con, "dbfiles") %>%
1562177036366:filter(file_name %like% "OGE%", file_path %like% "/data%") %>%
1562177036367:select(id, file_name, file_path, machine_id, container_type, container_id)
1562177038176:machine_id <- tbl(con, "dbfiles") %>%
1562177038177:filter(file_name == "OGE2_", file_path == "/data/oge2OLD") %>%
1562177038178:pull(machine_id)
1562177039656:tbl(con, "machines") %>%
1562177039659:filter(id == !!machine_id) %>%
1562177039660:select(hostname)
1562177045106:machine_id2 <- c(25)
1562177046568:tbl(con, "machines") %>%
1562177046569:filter(id == !!machine_id2) %>%
1562177046570:select(hostname)
1562177048214:# Retrieve the models associated with the "old" welsch.cyverse.org machine,
1562177048215:# which was machine ID 25
1562177048216:models <- tbl(con, "dbfiles") %>%
1562177048217:filter(machine_id == 25, container_type == "Model") %>%
1562177048217:collect()
1562177049071:models
1562177050458:models2 <- tbl(con, "dbfiles") %>%
1562177050459:filter(machine_id == 9000000003, container_type == "Model") %>%
1562177050460:collect()
1562177051680:models2
1562177053791:# It should have ED2 and BioCro. If not, there's a problem.
1562177053792:# Assuming that worked OK, just create new identical records, but under the new machine ID
1562177053793:DBI::dbExecute(con, "INSERT INTO dbfiles (machine_id, file_name, file_path, container_type, container_id) VALUES ($1, $2, $3, $4, $5)",
1562177053793:list(machine_id, models$file_name, models$file_path, models$container_type, models$container_id))
1562177081728:list(machine_id, models$file_name, models$file_path, models$container_type, models$container_id)
1562177106427:models$file_name
1562177118070:list(machine_id, models$file_name[1], models$file_path, models$container_type, models$container_id)
1562177137108:list(machine_id, models$file_name[1], models$file_path[1], models$container_type[1], models$container_id[1])
1562177140664:# It should have ED2 and BioCro. If not, there's a problem.
1562177140667:# Assuming that worked OK, just create new identical records, but under the new machine ID
1562177140669:DBI::dbExecute(con, "INSERT INTO dbfiles (machine_id, file_name, file_path, container_type, container_id) VALUES ($1, $2, $3, $4, $5)",
1562177140671:list(machine_id, models$file_name[1], models$file_path[1], models$container_type[1], models$container_id[1]))
1562177147042:models2 <- tbl(con, "dbfiles") %>%
1562177147044:filter(machine_id == 9000000003, container_type == "Model") %>%
1562177147046:collect()
1562177147966:models2
1562177167351:# It should have ED2 and BioCro. If not, there's a problem.
1562177167352:# Assuming that worked OK, just create new identical records, but under the new machine ID
1562177167353:DBI::dbExecute(con, "INSERT INTO dbfiles (machine_id, file_name, file_path, container_type, container_id) VALUES ($1, $2, $3, $4, $5)",
1562177167355:list(machine_id, models$file_name[2], models$file_path[2], models$container_type[2], models$container_id[2]))
1562177171246:models2 <- tbl(con, "dbfiles") %>%
1562177171248:filter(machine_id == 9000000003, container_type == "Model") %>%
1562177171250:collect()
1562177171987:models2
1562177176459:models
1562177192089:# It should have ED2 and BioCro. If not, there's a problem.
1562177192091:# Assuming that worked OK, just create new identical records, but under the new machine ID
1562177192093:DBI::dbExecute(con, "INSERT INTO dbfiles (machine_id, file_name, file_path, container_type, container_id) VALUES ($1, $2, $3, $4, $5)",
1562177192095:list(machine_id, models$file_name[3], models$file_path[3], models$container_type[3], models$container_id[3]))
1562177195730:models2 <- tbl(con, "dbfiles") %>%
1562177195731:filter(machine_id == 9000000003, container_type == "Model") %>%
1562177195733:collect()
1562177197186:models2
1562179001566:getwd()
1562181283378:# ----------------------------------------------------------------------
1562181283380:# Load required libraries
1562181283381:# ----------------------------------------------------------------------
1562181283382:library(PEcAn.all)
1562181288119:library(PEcAn.utils)
1562181288121:library(RCurl)
1562181291403:# make sure always to call status.end
1562181291404:options(warn=1)
1562181292824:options(error=quote({
1562181292825:PEcAn.utils::status.end("ERROR")
1562181292826:PEcAn.remote::kill.tunnel(settings)
1562181292827:if (!interactive()) {
1562181292829:q(status = 1)
1562181292830:}
1562181292832:}))
1562181294414:# ----------------------------------------------------------------------
1562181294415:# PEcAn Workflow
1562181294416:# ----------------------------------------------------------------------
1562181294417:# Open and read in settings file for PEcAn run.
1562181294418:args <- commandArgs(trailingOnly = TRUE)
1562181295432:if (is.na(args[1])){
1562181295433:settings <- PEcAn.settings::read.settings("/data/test_files/ed2_files/pecan64.ed2.xml")
1562181295434:} else {
1562181295435:settings.file <- args[1]
1562181295436:settings <- PEcAn.settings::read.settings(settings.file)
1562181295437:}
1562181296622:# Check for additional modules that will require adding settings
1562181296624:if("benchmarking" %in% names(settings)){
1562181296625:library(PEcAn.benchmark)
1562181296627:settings <- papply(settings, read_settings_BRR)
1562181296629:}
1562181297834:if("sitegroup" %in% names(settings)){
1562181297835:if(is.null(settings$sitegroup$nSite)){
1562181297837:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1562181297838:sitegroupId = settings$sitegroup$id)
1562181297840:} else {
1562181297841:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1562181297843:sitegroupId = settings$sitegroup$id,
1562181297844:nSite = settings$sitegroup$nSite)
1562181297846:}
1562181297847:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1562181297849:}
1562181298940:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1562181298942:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1562181301892:# Write pecan.CHECKED.xml
1562181301894:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1562181303563:# start from scratch if no continue is passed in
1562181303564:statusFile <- file.path(settings$outdir, "STATUS")
1562181306343:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1562181306344:file.remove(statusFile)
1562181306345:}
1562181307535:# Do conversions
1562181307536:settings <- PEcAn.workflow::do_conversions(settings)
1562181309922:# Query the trait database for data and priors
1562181309924:if (PEcAn.utils::status.check("TRAIT") == 0){
1562181309926:PEcAn.utils::status.start("TRAIT")
1562181309928:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1562181309931:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1562181309932:PEcAn.utils::status.end()
1562181309934:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1562181309935:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1562181309936:}
1562181331571:# Run the PEcAn meta.analysis
1562181331573:if(!is.null(settings$meta.analysis)) {
1562181331575:if (PEcAn.utils::status.check("META") == 0){
1562181331577:PEcAn.utils::status.start("META")
1562181331579:PEcAn.MA::runModule.run.meta.analysis(settings)
1562181331580:PEcAn.utils::status.end()
1562181331581:}
1562181331582:}
1562181339803:# Write model specific configs
1562181339805:if (PEcAn.utils::status.check("CONFIG") == 0){
1562181339807:PEcAn.utils::status.start("CONFIG")
1562181339809:settings <- PEcAn.workflow::runModule.run.write.configs(settings)
1562181339811:PEcAn.settings::write.settings(settings, outputfile='pecan.CONFIGS.xml')
1562181339812:PEcAn.utils::status.end()
1562181339814:} else if (file.exists(file.path(settings$outdir, 'pecan.CONFIGS.xml'))) {
1562181339815:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.CONFIGS.xml'))
1562181339816:}
1562181675262:if ((length(which(commandArgs() == "--advanced")) != 0) && (PEcAn.utils::status.check("ADVANCED") == 0)) {
1562181675264:PEcAn.utils::status.start("ADVANCED")
1562181675265:q();
1562181675267:}
1562181679633:# Start ecosystem model runs
1562181679634:if (PEcAn.utils::status.check("MODEL") == 0) {
1562181679635:PEcAn.utils::status.start("MODEL")
1562181679636:PEcAn.remote::runModule.start.model.runs(settings, stop.on.error = FALSE)
1562181679637:PEcAn.utils::status.end()
1562181679638:}
1562181688095:traceback()
1562183763256:getOption("pecanapi.rabbitmq_user")
1562350053798:# TODO: download parameters using pecanapi R package?
1562350053861:load("clm_params_data_out/pft/Setaria WT priors data/prior.distns.Rdata")
1562350056583:View(prior.distns)
1562350108067:load("~/biocro_results/pft/salix/prior.distns.Rdata")
1562350112769:View(prior.distns)
1562350563869:# TODO: download parameters using pecanapi R package?
1562350563871:load("clm_params_data_out/pft/Setaria WT priors data/prior.distns.Rdata")
1562350567227:View(prior.distns)
1562350864636:source("sentinel-detection/parameter_dists/plot_priors_istem.R")
1562355937686:?create_status_page
1562355959624:library(PEcAn.visualization)
1562355965429:?create_status_page
1562356044312:load("clm_params_data_out/pft/Setaria WT priors data/prior.distns.Rdata")
1562356049236:load("clm_params_data_out/pft/Setaria WT priors data/prior.distns.Rdata")
1562356089143:View(prior.distns)
1562356123720:library(dplyr)
1562356135243:prior.distns
1562356154654:row.names(prior.distns)
1562356202136:single_param <- prior.distns %>%
1562356202138:filter(row.names == "fineroot2leaf")
1562356220605:single_param <- prior.distns %>%
1562356220608:filter(dist == "gamma")
1562356230925:single_param <- prior.distns[1]
1562356237475:single_param
1562356243626:single_param <- prior.distns[1,]
1562356245883:single_param
1562356301342:single_param <- data.frame(prior.distns[1,])
1562356304288:single_param
1562356767084:# TODO: download parameters using pecanapi R package?
1562356767086:load("clm_params_data_out/pft/Setaria WT priors data/prior.distns.Rdata")
1562356771004:library(ggplot2)
1562356771748:.libPaths("~/R_libs/")
1562356771749:library(ggridges)
1562356771780:library(RColorBrewer)
1562356772501:library(gridExtra)
1562356774414:# set up empty matrix to hold values for each parameter from distribution
1562356774415:parnames <- rownames(prior.distns)
1562356776072:dist_matrix <- matrix(NA, nrow = 1000000, ncol = length(parnames))
1562356777918:colnames(dist_matrix) <- parnames
1562356783086:# generate 1 million values for each parameter and put into matrix
1562356783088:for(i in seq_along(parnames)){
1562356783090:post <- dist_matrix[rownames(dist_matrix) == parnames[i],]
1562356783092:dist_matrix[,i] <- eval(parse(text = paste0("r", prior.distns$distn[i],"(1000000,",
1562356783094:prior.distns$parama[i], ",",
1562356783095:prior.distns$paramb[i],")")))
1562356783096:}
1562356787764:View(dist_matrix)
1562356800939:class(dist_matrix)
1562356811936:# manipulate into long dataframe
1562356811937:dist_df <- reshape::melt(dist_matrix)
1562356817922:colnames(dist_df) <- c("dist", "parameter", "value")
1562356821798:dist_df
1562356984940:# TODO: download parameters using pecanapi R package?
1562356984941:load("clm_params_data_out/pft/Setaria WT priors data/prior.distns.Rdata")
1562356985131:library(ggplot2)
1562356985963:.libPaths("~/R_libs/")
1562356985964:library(ggridges)
1562356985996:library(RColorBrewer)
1562356986040:library(gridExtra)
1562356987782:# set up empty matrix to hold values for each parameter from distribution
1562356987784:parnames <- rownames(prior.distns)
1562356988792:dist_matrix <- matrix(NA, nrow = 1000000, ncol = length(parnames))
1562356989968:colnames(dist_matrix) <- parnames
1562356991663:# generate 1 million values for each parameter and put into matrix
1562356991665:for(i in seq_along(parnames)){
1562356991666:post <- dist_matrix[rownames(dist_matrix) == parnames[i],]
1562356991668:dist_matrix[,i] <- eval(parse(text = paste0("r", prior.distns$distn[i],"(1000000,",
1562356991669:prior.distns$parama[i], ",",
1562356991671:prior.distns$paramb[i],")")))
1562356991672:}
1562357018031:# TODO: download parameters using pecanapi R package?
1562357018032:load("clm_params_data_out/pft/Setaria WT priors data/prior.distns.Rdata")
1562357018694:library(ggplot2)
1562357019514:.libPaths("~/R_libs/")
1562357019516:library(ggridges)
1562357019546:library(RColorBrewer)
1562357019558:library(gridExtra)
1562357021925:# set up empty matrix to hold values for each parameter from distribution
1562357021926:parnames <- rownames(prior.distns)
1562357022824:dist_matrix <- matrix(NA, nrow = 1000, ncol = length(parnames))
1562357023644:colnames(dist_matrix) <- parnames
1562357024824:# generate 1 million values for each parameter and put into matrix
1562357024825:for(i in seq_along(parnames)){
1562357024826:post <- dist_matrix[rownames(dist_matrix) == parnames[i],]
1562357024827:dist_matrix[,i] <- eval(parse(text = paste0("r", prior.distns$distn[i],"(1000,",
1562357024828:prior.distns$parama[i], ",",
1562357024829:prior.distns$paramb[i],")")))
1562357024830:}
1562357027134:# manipulate into long dataframe
1562357027135:dist_df <- reshape::melt(dist_matrix)
1562357029292:colnames(dist_df) <- c("dist", "parameter", "value")
1562357038299:head(dist_df)
1562357057650:# TODO: adapt name for prior + data/default
1562357057652:dist_df$dist <- "prior"
1562357059955:head(dist_df)
1562357191852:load("clm_params_data_out/pft/Setaria WT priors data/prior.distns.Rdata")
1562357192940:single_param <- prior.distns[1,]
1562357198166:single_param
1562357203881:class(single_param)
1562357233765:row.names(single_param)
1562357344336:single_param_values <- data.frame(values = eval(parse(text = paste0("r",
1562357348031:)
1562357361841:single_param_values <- data.frame(values = eval(parse(text = paste0("r",
1562357361843:single_param$distn,
1562357361844:"(1000,",
1562357361846:single_param$parama,
1562357361848:",",
1562357361850:single_param$paramb))))
1562357377713:paste0("r",
1562357377716:single_param$distn,
1562357377718:"(1000,",
1562357377720:single_param$parama,
1562357377722:",",
1562357377724:single_param$paramb)
1562357391807:single_param_values <- data.frame(values = eval(parse(text = paste0("r",
1562357391809:single_param$distn,
1562357391811:"(1000,",
1562357391813:single_param$parama,
1562357391815:",",
1562357391816:single_param$paramb,
1562357391818:")"))))
1562357396570:single_param_values
1562357420778:paste0("r",
1562357420779:single_param$distn,
1562357420780:"(1000,",
1562357420781:single_param$parama,
1562357420782:",",
1562357420783:single_param$paramb,
1562357420784:")")
1562357461065:expression <- paste0("r",
1562357461068:single_param$distn,
1562357461069:"(1000,",
1562357461071:single_param$parama,
1562357461073:",",
1562357461075:single_param$paramb,
1562357461076:")")
1562357465290:expression
1562357489670:parse(expression)
1562357497078:eval(parse(expression))
1562357553057:values = eval(parse(text = paste0("r",
1562357553059:single_param$distn,
1562357553061:"(1000,",
1562357553062:single_param$parama,
1562357553064:",",
1562357553065:single_param$paramb,
1562357553066:")")))
1562357558488:values
1562357583636:values <- eval(parse(text = expression))
1562357586842:values
1562357594689:?parse
1562357703313:num_values <- 1000
1562357704109:expression <- paste0("r", single_param$distn, "(,", num_values, single_param$parama, ",", single_param$paramb, ")")
1562357707659:expression
1562357729755:num_values <- 1000
1562357730076:expression <- paste0("r", single_param$distn, "(", num_values, ",", single_param$parama, ",", single_param$paramb, ")")
1562357733088:expression
1562357737682:values <- eval(parse(text = expression))
1562357740518:values
1562357868664:load("clm_params_data_out/pft/Setaria WT priors data/prior.distns.Rdata")
1562357869274:num_values <- 1000
1562357870384:single_param <- prior.distns[1,]
1562357871523:expression <- paste0("r", single_param$distn, "(", num_values, ",", single_param$parama, ",", single_param$paramb, ")")
1562357872507:single_param_values <- data.frame(values <- eval(parse(text = expression)))
1562357879552:single_param_values
1562357888686:head(single_param_values)
1562357903397:colnames(single_param_values)
1562357914008:single_param_values <- data.frame(values = eval(parse(text = expression)))
1562357916545:colnames(single_param_values)
1562357919532:head(single_param_values)
1562357972353:library(ggridges)
1562357981749:.libPaths("~/R_libs/")
1562357982820:library(ggridges)
1562358031913:row.names(single_param)
1562358051241:ggplot(single_param_values, aes(x = values, y = 0)) +
1562358051243:geom_density_ridges() +
1562358051245:theme(legend.position="none",
1562358051246:axis.title.y=element_blank(),
1562358051248:axis.text.y=element_blank(),
1562358051249:axis.ticks.y=element_blank())
1562358051255:ggtitle(row.names(single_param))
1562358067764:library(ggplot2)
1562358072312:ggplot(single_param_values, aes(x = values, y = 0)) +
1562358072314:geom_density_ridges() +
1562358072316:theme(legend.position="none",
1562358072318:axis.title.y=element_blank(),
1562358072320:axis.text.y=element_blank(),
1562358072321:axis.ticks.y=element_blank())
1562358072608:ggtitle(row.names(single_param))
1562358117932:ggplot(single_param_values, aes(x = values, y = 0)) +
1562358117934:geom_density_ridges()
1562358124671:ggplot(single_param_values, aes(x = values, y = 0)) +
1562358124673:geom_density_ridges() +
1562358124676:ggtitle(row.names(single_param))
1562358130287:single_param_plot <-
1562358130289:ggplot(single_param_values, aes(x = values, y = 0)) +
1562358130291:geom_density_ridges() +
1562358130293:ggtitle(row.names(single_param)) +
1562358130295:theme(legend.position="none",
1562358130297:axis.title.y=element_blank(),
1562358130298:axis.text.y=element_blank(),
1562358130299:axis.ticks.y=element_blank())
1562359883797:single_param_plot <- ggplot(single_param_values, aes(x = values, y = 0)) +
1562359883800:geom_density_ridges() +
1562359883802:ggtitle(row.names(single_param))
1562359890740:single_param_plot
1562360025732:plot_parameter_dist <- function(param_data, num_values = 1000000){
1562360025734:expression <- paste0("r", param_data$distn, "(", num_values, ",", param_data$parama, ",", param_data$paramb, ")")
1562360025736:print(expression)
1562360025738:}
1562360041806:library(ggplot2)
1562360042552:.libPaths("~/R_libs/")
1562360043081:library(ggridges)
1562360052101:load("clm_params_data_out/pft/Setaria WT priors data/prior.distns.Rdata")
1562360052678:num_values <- 1000
1562360055114:single_param <- prior.distns[1,]
1562360058796:expression <- paste0("r", single_param$distn, "(", num_values, ",", single_param$parama, ",", single_param$paramb, ")")
1562360060280:single_param_values <- data.frame(values = eval(parse(text = expression)))
1562360069718:ggplot(single_param_values, aes(x = values, y = 0)) +
1562360069720:geom_density_ridges() +
1562360069722:ggtitle(row.names(single_param))
1562360078122:ggplot(single_param_values, aes(x = values, y = 0)) +
1562360078124:geom_density() +
1562360078126:ggtitle(row.names(single_param))
1562360140119:ggplot(single_param_values, aes(x = values)) +
1562360140121:geom_density() +
1562360140123:ggtitle(row.names(single_param))
1562360231849:plot_parameter_dist <- function(param_data, num_values = 1000000){
1562360231851:expression <- paste0("r", param_data$distn, "(", num_values, ",", param_data$parama, ",", param_data$paramb, ")")
1562360231854:print(expression)
1562360231856:}
1562360232464:plot_parameter_dist(ex_single_param)
1562360236365:ex_single_param <- prior.distns[1,]
1562360237492:plot_parameter_dist <- function(param_data, num_values = 1000000){
1562360237494:expression <- paste0("r", param_data$distn, "(", num_values, ",", param_data$parama, ",", param_data$paramb, ")")
1562360237496:print(expression)
1562360237498:}
1562360238353:plot_parameter_dist(ex_single_param)
1562360252878:single_param_values <- data.frame(values = eval(parse(text = expression)))
1562360283544:plot_parameter_dist <- function(param_data, num_values = 1000000){
1562360283546:expression <- paste0("r", param_data$distn, "(", num_values, ",", param_data$parama, ",", param_data$paramb, ")")
1562360283549:single_param_values <- data.frame(values = eval(parse(text = expression)))
1562360283551:single_param_plot <- ggplot(single_param_values, aes(x = values)) +
1562360283553:geom_density() +
1562360283555:ggtitle(row.names(single_param))
1562360283556:print(single_param_plot)
1562360283557:}
1562360292256:plot_parameter_dist <- function(param_data, num_values = 1000000){
1562360292258:expression <- paste0("r", param_data$distn, "(", num_values, ",", param_data$parama, ",", param_data$paramb, ")")
1562360292261:single_param_values <- data.frame(values = eval(parse(text = expression)))
1562360292263:single_param_plot <- ggplot(single_param_values, aes(x = values)) +
1562360292265:geom_density() +
1562360292267:ggtitle(row.names(single_param))
1562360292268:print(single_param_plot)
1562360292269:}
1562360292865:plot_parameter_dist(ex_single_param)
1562360327899:library(ggplot2)
1562360330178:load("clm_params_data_out/pft/Setaria WT priors data/prior.distns.Rdata")
1562360333808:ex_single_param <- prior.distns[1,]
1562360335191:plot_parameter_dist <- function(param_data, num_values = 1000000){
1562360335193:expression <- paste0("r", param_data$distn, "(", num_values, ",", param_data$parama, ",", param_data$paramb, ")")
1562360335195:single_param_values <- data.frame(values = eval(parse(text = expression)))
1562360335197:single_param_plot <- ggplot(single_param_values, aes(x = values)) +
1562360335198:geom_density() +
1562360335199:ggtitle(row.names(single_param))
1562360335200:print(single_param_plot)
1562360335202:}
1562360336188:plot_parameter_dist(ex_single_param)
1562360376627:plot_parameter_dist <- function(param_data, num_values = 1000000){
1562360376629:expression <- paste0("r", param_data$distn, "(", num_values, ",", param_data$parama, ",", param_data$paramb, ")")
1562360376631:single_param_values <- data.frame(values = eval(parse(text = expression)))
1562360376633:single_param_plot <- ggplot(single_param_values, aes(x = values)) +
1562360376635:geom_density() +
1562360376637:ggtitle(row.names(param_data))
1562360376638:print(single_param_plot)
1562360376639:}
1562360377598:plot_parameter_dist(ex_single_param)
1562360470871:library(ggplot2)
1562360471514:load("clm_params_data_out/pft/Setaria WT priors data/prior.distns.Rdata")
1562360474536:single_param <- prior.distns[1,]
1562360475563:num_values <- 1000000
1562360476741:expression <- paste0("r", single_param$distn, "(", num_values, ",", single_param$parama, ",", single_param$paramb, ")")
1562360477741:single_param_values <- data.frame(values = eval(parse(text = expression)))
1562360478943:single_param_plot <- ggplot(single_param_values, aes(x = values)) +
1562360478944:geom_density() +
1562360478945:ggtitle(row.names(single_param))
1562360480143:single_param_plot
1562360492841:library(ggplot2)
1562360493637:load("clm_params_data_out/pft/Setaria WT priors data/prior.distns.Rdata")
1562360496759:single_param <- prior.distns[1,]
1562360499016:num_values <- 1000
1562360499857:expression <- paste0("r", single_param$distn, "(", num_values, ",", single_param$parama, ",", single_param$paramb, ")")
1562360500357:single_param_values <- data.frame(values = eval(parse(text = expression)))
1562360500808:single_param_plot <- ggplot(single_param_values, aes(x = values)) +
1562360500809:geom_density() +
1562360500810:ggtitle(row.names(single_param))
1562360501764:single_param_plot
1562360560736:library(ggplot2)
1562360561526:load("clm_params_data_out/pft/Setaria WT priors data/prior.distns.Rdata")
1562360566690:.libPaths("~/R_libs/")
1562360566693:library(ggridges)
1562360569697:single_param <- prior.distns[1,]
1562360570345:num_values <- 1000
1562360571073:expression <- paste0("r", single_param$distn, "(", num_values, ",", single_param$parama, ",", single_param$paramb, ")")
1562360571591:single_param_values <- data.frame(values = eval(parse(text = expression)))
1562360574663:single_param_plot <- ggplot(single_param_values, aes(x = values, y = 0)) +
1562360574664:geom_density_ridges() +
1562360574665:ggtitle(row.names(single_param))
1562360575670:single_param_plot
1562360622958:source("sentinel-detection/parameter_dists/plot_priors_istem.R")
1562360673141:library(ggplot2)
1562360673922:load("clm_params_data_out/pft/Setaria WT priors data/prior.distns.Rdata")
1562360676967:.libPaths("~/R_libs/")
1562360678524:library(ggridges)
1562360682047:single_param <- prior.distns[1,]
1562360683170:num_values <- 1000000
1562360685587:expression <- paste0("r", single_param$distn, "(", num_values, ",", single_param$parama, ",", single_param$paramb, ")")
1562360686539:single_param_values <- data.frame(values = eval(parse(text = expression)))
1562360691703:single_param_plot <- ggplot(single_param_values, aes(x = values, y = 0)) +
1562360691705:geom_density_ridges() +
1562360691707:ggtitle(row.names(single_param))
1562360696252:single_param_plot
1562360752482:single_param_plot <- ggplot(single_param_values, aes(x = values, y = 0)) +
1562360752484:geom_density_ridges() +
1562360752486:ggtitle(row.names(single_param)) +
1562360752487:theme(legend.position="none",
1562360752489:axis.title.y=element_blank(),
1562360752490:axis.text.y=element_blank(),
1562360752492:axis.ticks.y=element_blank())
1562360752624:single_param_plot
1562361133294:# TODO: download parameters using pecanapi R package?
1562361133296:load("clm_params_data_out/pft/Setaria WT priors data/prior.distns.Rdata")
1562361134515:library(ggplot2)
1562361135272:.libPaths("~/R_libs/")
1562361135273:library(ggridges)
1562361135305:library(RColorBrewer)
1562361135317:library(gridExtra)
1562361135331:plot_db_distns <- function(prior.distns){
1562361135332:# set up empty matrix to hold values for each parameter from distribution
1562361135333:parnames <- rownames(prior.distns)
1562361135334:dist_matrix <- matrix(NA, nrow = 1000, ncol = length(parnames))
1562361135335:colnames(dist_matrix) <- parnames
1562361135337:# generate 1 million values for each parameter and put into matrix
1562361135338:for(i in seq_along(parnames)){
1562361135339:post <- dist_matrix[rownames(dist_matrix) == parnames[i],]
1562361135340:dist_matrix[,i] <- eval(parse(text = paste0("r", prior.distns$distn[i],"(1000,",
1562361135341:prior.distns$parama[i], ",",
1562361135342:prior.distns$paramb[i],")")))
1562361135343:}
1562361135345:# manipulate into long dataframe
1562361135347:dist_df <- reshape::melt(dist_matrix)
1562361135348:colnames(dist_df) <- c("dist", "parameter", "value")
1562361135349:# TODO: adapt name for prior + data/default
1562361135350:dist_df$dist <- "prior"
1562361135352:# get colors for each distribution
1562361135353:n <- length(parnames)
1562361135354:qual_col_pals <- brewer.pal.info[brewer.pal.info$category == 'qual',]
1562361135355:col_vector <- unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
1562361135356:plot_colors =sample(col_vector, n)
1562361135358:# plot distribution using dataframe of parameter values
1562361135359:# TODO: be able to input single color for all values
1562361135361:# TODO: replace ggridges function with geom_density if possible
1562361135362:plot.list <- list()
1562361135363:for(i in  seq_along(parnames)){
1562361135364:sub_df <- dist_df[dist_df$parameter == parnames[i],]
1562361135365:plot.list[[i]] <- ggplot(sub_df, aes(x = value, y = 0)) +
1562361135366:geom_density_ridges( fill=plot_colors[i]) +
1562361135367:theme(legend.position="none",
1562361135369:axis.title.y=element_blank(),
1562361135370:axis.text.y=element_blank(),
1562361135371:axis.ticks.y=element_blank()) + ggtitle(parnames[i])
1562361135372:}
1562361135375:nplots <- length(plot.list)
1562361135377:nCol <- floor(sqrt(nplots))
1562361135378:do.call("grid.arrange", c(plot.list, ncol=nCol))
1562361135379:}
1562361136499:plot_db_distns(prior.distns)
1562361155861:plot.list
1562361310820:# TODO: download parameters using pecanapi R package?
1562361310822:load("clm_params_data_out/pft/Setaria WT priors data/prior.distns.Rdata")
1562361310938:library(ggplot2)
1562361311764:.libPaths("~/R_libs/")
1562361311766:library(ggridges)
1562361311796:library(RColorBrewer)
1562361312346:library(gridExtra)
1562361315288:# set up empty matrix to hold values for each parameter from distribution
1562361315290:parnames <- rownames(prior.distns)
1562361316048:dist_matrix <- matrix(NA, nrow = 1000, ncol = length(parnames))
1562361316772:colnames(dist_matrix) <- parnames
1562361317660:# generate 1 million values for each parameter and put into matrix
1562361317662:for(i in seq_along(parnames)){
1562361317664:post <- dist_matrix[rownames(dist_matrix) == parnames[i],]
1562361317666:dist_matrix[,i] <- eval(parse(text = paste0("r", prior.distns$distn[i],"(1000,",
1562361317668:prior.distns$parama[i], ",",
1562361317670:prior.distns$paramb[i],")")))
1562361317672:}
1562361318520:# manipulate into long dataframe
1562361318522:dist_df <- reshape::melt(dist_matrix)
1562361318949:colnames(dist_df) <- c("dist", "parameter", "value")
1562361319533:# TODO: adapt name for prior + data/default
1562361319536:dist_df$dist <- "prior"
1562361320339:# get colors for each distribution
1562361320341:n <- length(parnames)
1562361320682:qual_col_pals <- brewer.pal.info[brewer.pal.info$category == 'qual',]
1562361321078:col_vector <- unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
1562361321456:plot_colors =sample(col_vector, n)
1562361322128:# plot distribution using dataframe of parameter values
1562361322130:# TODO: be able to input single color for all values
1562361322132:# TODO: replace ggridges function with geom_density if possible
1562361322134:plot.list <- list()
1562361322993:for(i in  seq_along(parnames)){
1562361322995:sub_df <- dist_df[dist_df$parameter == parnames[i],]
1562361322997:plot.list[[i]] <- ggplot(sub_df, aes(x = value, y = 0)) +
1562361323000:geom_density_ridges( fill=plot_colors[i]) +
1562361323002:theme(legend.position="none",
1562361323004:axis.title.y=element_blank(),
1562361323006:axis.text.y=element_blank(),
1562361323007:axis.ticks.y=element_blank()) + ggtitle(parnames[i])
1562361323008:}
1562361324039:nplots <- length(plot.list)
1562361324832:nCol <- floor(sqrt(nplots))
1562361326215:do.call("grid.arrange", c(plot.list, ncol=nCol))
1562361339359:View(dist_df)
1562361389397:dist_df[dist_df$parameter == "fineroot2leaf",]
1562361401141:dist_df$values[dist_df$parameter == "fineroot2leaf"]
1562361412647:dist_df$value[dist_df$parameter == "fineroot2leaf"]
1562361420605:right_values <- dist_df$value[dist_df$parameter == "fineroot2leaf"]
1562361427260:hist(right_values)
1562361461011:library(ggplot2)
1562361461255:load("clm_params_data_out/pft/Setaria WT priors data/prior.distns.Rdata")
1562361465964:single_param <- prior.distns[1,]
1562361466340:num_values <- 1000000
1562361469106:expression <- paste0("r", single_param$distn, "(", num_values, ",", single_param$parama, ",", single_param$paramb, ")")
1562361469912:single_param_values <- data.frame(values = eval(parse(text = expression)))
1562361477245:head(single_param_values)
1562361490978:hist(single_param_values)
1562361497009:hist(single_param_values$values)
1562361521399:max(single_param_values$values)
1562361525300:max(right_values)
1562361587065:plot_db_distns <- function(prior.distns){
1562361587067:# set up empty matrix to hold values for each parameter from distribution
1562361587069:parnames <- rownames(prior.distns)
1562361587071:dist_matrix <- matrix(NA, nrow = 1000, ncol = length(parnames))
1562361587073:colnames(dist_matrix) <- parnames
1562361587075:# generate 1 million values for each parameter and put into matrix
1562361587076:for(i in seq_along(parnames)){
1562361587077:post <- dist_matrix[rownames(dist_matrix) == parnames[i],]
1562361587079:print(paste0("r", prior.distns$distn[i],"(1000,",
1562361587080:prior.distns$parama[i], ",",
1562361587081:prior.distns$paramb[i],")"))
1562361587082:dist_matrix[,i] <- eval(parse(text = paste0("r", prior.distns$distn[i],"(1000,",
1562361587083:prior.distns$parama[i], ",",
1562361587084:prior.distns$paramb[i],")")))
1562361587086:}
1562361587088:# manipulate into long dataframe
1562361587089:dist_df <- reshape::melt(dist_matrix)
1562361587091:colnames(dist_df) <- c("dist", "parameter", "value")
1562361587092:# TODO: adapt name for prior + data/default
1562361587093:dist_df$dist <- "prior"
1562361587095:# get colors for each distribution
1562361587096:n <- length(parnames)
1562361587098:qual_col_pals <- brewer.pal.info[brewer.pal.info$category == 'qual',]
1562361587099:col_vector <- unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
1562361587100:plot_colors =sample(col_vector, n)
1562361587103:# plot distribution using dataframe of parameter values
1562361587104:# TODO: be able to input single color for all values
1562361587105:# TODO: replace ggridges function with geom_density if possible
1562361587106:plot.list <- list()
1562361587108:for(i in  seq_along(parnames)){
1562361587109:sub_df <- dist_df[dist_df$parameter == parnames[i],]
1562361587111:plot.list[[i]] <- ggplot(sub_df, aes(x = value, y = 0)) +
1562361587112:geom_density_ridges( fill=plot_colors[i]) +
1562361587113:theme(legend.position="none",
1562361587114:axis.title.y=element_blank(),
1562361587116:axis.text.y=element_blank(),
1562361587117:axis.ticks.y=element_blank()) + ggtitle(parnames[i])
1562361587119:}
1562361587122:nplots <- length(plot.list)
1562361587124:nCol <- floor(sqrt(nplots))
1562361587125:do.call("grid.arrange", c(plot.list, ncol=nCol))
1562361587126:}
1562361588196:plot_db_distns(prior.distns)
1562361604769:prior.distns
1562361639998:expression
1562361664923:rlnorm(1000,0.811,0.843)
1562361681307:max(rlnorm(1000,0.811,0.843))
1562361704986:max(rlnorm(1e+06,0.811,0.843))
1562361719090:1e+06
1562361731472:max(rlnorm(1e+06,0.811,0.843))
1562361742956:options(scipen = 999)
1562361744403:1e+06
1562361758730:max(rlnorm(1e+06,0.811,0.843))
1562361769998:max(rlnorm(1000000,0.811,0.843))
1562361775194:max(rlnorm(1000,0.811,0.843))
1562361813753:source("sentinel-detection/parameter_dists/plot_priors_istem.R")
1562361900596:source("pecan_riemer_fork/pecan/base/visualization/R/plot_parameter_dists.R")
1562615699258:library(shiny)
1562615750910:shiny::shinyApp(ui, server)
1562615942980:library(shiny)
1562615956871:getwd()
1562615963113:setwd("~/pecan/shiny")
1562615965022:getwd()
1562615992628:runApp("workflowPlot")
1562616011359:library(plotly)
1562616025052:install.packages("plotly")
1562616062609:.libPaths("~/R_libs/")
1562616066371:install.packages("plotly")
1562616097086:library(plotly)
1562616111319:.libPaths("~/R_libs/")
1562616119451:library(shiny)
1562616126747:setwd("~/pecan/shiny")
1562616132189:runApp("workflowPlot")
1562616153398:install.packages("shinythemes")
1562616163984:runApp("workflowPlot")
1562616175282:runApp("workflowPlot")
1562616187904:install.packages("shinyjs")
1562616194907:runApp("workflowPlot")
1562683355824:getwd()
1562683385195:setwd("/home/kristinariemer/")
1562684071108:trait.mcmc <- load("biocro_results/pft/salix/trait.mcmc.Rdata")
1562684081429:trait.mcmc
1562684148926:head(trait.mcmc)
1562684179912:load("biocro_results/pft/salix/trait.mcmc.Rdata")
1562684183730:View(trait.mcmc)
1562684200642:head(trait.mcmc$stomatal_slope.BB)
1562684216329:trait.mcmc$stomatal_slope.BB[[1]]
1562684221550:head(trait.mcmc$stomatal_slope.BB[[1]])
1562684226730:head(trait.mcmc$stomatal_slope.BB[[2]])
1562684229209:head(trait.mcmc$stomatal_slope.BB[[3]])
1562684281098:load("biocro_results/pft/salix/prior.distns.Rdata")
1562684283974:View(prior.distns)
1562684310513:priors <- prior.distns
1562684428467:do.plot <- !is.null(outdir)
1562684437340:filename.flag = ""
1562684440595:outdir = NULL
1562684443606:trait.data = NULL
1562684447329:do.plot <- !is.null(outdir)
1562684448318:if (do.plot == TRUE) {
1562684448320:pdf(file.path(outdir, paste("posteriors", filename.flag, ".pdf", sep = "")))
1562684448322:}
1562684467385:do.plot
1562684476895:names(trait.mcmc)
1562684514456:names(trait.mcmc)[1]
1562684519268:trait <- names(trait.mcmc)[1]
1562684528645:dat <- trait.mcmc[[trait]]
1562684532001:vname <- colnames(dat[[1]])
1562684534985:dat
1562684540451:vname
1562684543825:if ("beta.o" %in% vname) {
1562684543827:dat <- as.matrix(dat)[, "beta.o"]
1562684543829:}
1562684558278:pdist <- priors[trait, "distn"]
1562684560206:pparm <- as.numeric(priors[trait, 2:3])
1562684561510:ptrait <- trait
1562684566476:## first determine the candidate set of models based on any range restrictions
1562684566496:zerobound <- c("exp", "gamma", "lnorm", "weibull")
1562684609106:pdist
1562684620443:if (pdist %in% "beta") {
1562684620445:m   <- mean(dat)
1562684620446:v   <- var(dat)
1562684620449:k   <- (1 - m)/m
1562684620450:a   <- (k / ((1 + k) ^ 2 * v) - 1) / (1 + k)
1562684620452:b   <- a * k
1562684620454:fit <- try(suppressWarnings(fitdistr(dat, "beta", list(shape1 = a, shape2 = b))), silent = TRUE)
1562684620456:if (do.plot) {
1562684620457:x <- seq(0, 1, length = 1000)
1562684620458:plot(density(dat), col = 2, lwd = 2, main = trait)
1562684620461:if (!is.null(trait.data)) {
1562684620462:rug(trait.data[[trait]]$Y, lwd = 2, col = "purple")
1562684620463:}
1562684620464:lines(x, dbeta(x, fit$estimate[1], fit$estimate[2]), lwd = 2, type = "l")
1562684620465:lines(x, dbeta(x, pparm[1], pparm[2]), lwd = 3, type = "l", col = 3)
1562684620466:legend("topleft",
1562684620467:legend = c("data", "prior", "post", "approx"),
1562684620468:col = c("purple", 3, 2, 1), lwd = 2)
1562684620470:}
1562684620471:posteriors[trait, "parama"] <- fit$estimate[1]
1562684620472:posteriors[trait, "paramb"] <- fit$estimate[2]
1562684620473:} else if (pdist %in% zerobound | (pdist == "unif" & pparm[1] > 0)) {
1562684620474:dist.names <- c("exp", "lnorm", "weibull", "norm")
1562684620475:fit <- list()
1562684620476:fit[[1]] <- try(suppressWarnings(fitdistr(dat, "exponential")), silent = TRUE)
1562684620478:## fit[[2]] <- fitdistr(dat,'f',list(df1=10,df2=2*mean(dat)/(max(mean(dat)-1,1))))
1562684620479:fit[[2]] <- try(suppressWarnings(fitdistr(dat, "lognormal")), silent = TRUE)
1562684620480:fit[[3]] <- try(suppressWarnings(fitdistr(dat, "weibull")), silent = TRUE)
1562684620481:fit[[4]] <- try(suppressWarnings(fitdistr(dat, "normal")), silent = TRUE)
1562684620484:if (!trait == "cuticular_cond") {
1562684620485:fit[[5]] <- try(suppressWarnings(fitdistr(dat, "gamma")), silent = TRUE)
1562684620486:dist.names <- c(dist.names, "gamma")
1562684620487:}
1562684620489:failfit.bool <- sapply(fit, class) == "try-error"
1562684620490:fit[failfit.bool] <- NULL
1562684620491:dist.names <- dist.names[!failfit.bool]
1562684620493:fparm <- lapply(fit, function(x) { as.numeric(x$estimate) })
1562684620495:fAIC <- lapply(fit, AIC)
1562684620497:bestfit <- which.min(fAIC)
1562684620499:posteriors[ptrait, "distn"] <- dist.names[bestfit]
1562684620500:posteriors[ptrait, "parama"] <- fit[[bestfit]]$estimate[1]
1562684620501:if (bestfit == 1) {
1562684620503:posteriors[ptrait, "paramb"] <- NA
1562684620504:} else {
1562684620505:posteriors[ptrait, "paramb"] <- fit[[bestfit]]$estimate[2]
1562684620507:}
1562684620509:if (do.plot) {
1562684620511:.dens_plot(posteriors, priors, ptrait, dat, trait, trait.data)
1562684620512:}
1562684620513:} else {
1562684620515:## default: NORMAL
1562684620516:posteriors[trait, "distn"] <- "norm"
1562684620518:posteriors[trait, "parama"] <- mean(dat)
1562684620519:posteriors[trait, "paramb"] <- sd(dat)
1562684620521:if (do.plot) {
1562684620522:.dens_plot(posteriors, priors, ptrait, dat, trait, trait.data)
1562684620524:}
1562684620525:}
1562684643646:posteriors
1562684647333:## initialization
1562684647334:posteriors <- priors
1562684650366:posteriors
1562684657490:if (pdist %in% "beta") {
1562684657492:m   <- mean(dat)
1562684657493:v   <- var(dat)
1562684657494:k   <- (1 - m)/m
1562684657495:a   <- (k / ((1 + k) ^ 2 * v) - 1) / (1 + k)
1562684657497:b   <- a * k
1562684657520:fit <- try(suppressWarnings(fitdistr(dat, "beta", list(shape1 = a, shape2 = b))), silent = TRUE)
1562684657522:if (do.plot) {
1562684657523:x <- seq(0, 1, length = 1000)
1562684657525:plot(density(dat), col = 2, lwd = 2, main = trait)
1562684657526:if (!is.null(trait.data)) {
1562684657527:rug(trait.data[[trait]]$Y, lwd = 2, col = "purple")
1562684657528:}
1562684657529:lines(x, dbeta(x, fit$estimate[1], fit$estimate[2]), lwd = 2, type = "l")
1562684657530:lines(x, dbeta(x, pparm[1], pparm[2]), lwd = 3, type = "l", col = 3)
1562684657531:legend("topleft",
1562684657532:legend = c("data", "prior", "post", "approx"),
1562684657533:col = c("purple", 3, 2, 1), lwd = 2)
1562684657534:}
1562684657535:posteriors[trait, "parama"] <- fit$estimate[1]
1562684657537:posteriors[trait, "paramb"] <- fit$estimate[2]
1562684657538:} else if (pdist %in% zerobound | (pdist == "unif" & pparm[1] > 0)) {
1562684657539:dist.names <- c("exp", "lnorm", "weibull", "norm")
1562684657540:fit <- list()
1562684657541:fit[[1]] <- try(suppressWarnings(fitdistr(dat, "exponential")), silent = TRUE)
1562684657542:## fit[[2]] <- fitdistr(dat,'f',list(df1=10,df2=2*mean(dat)/(max(mean(dat)-1,1))))
1562684657543:fit[[2]] <- try(suppressWarnings(fitdistr(dat, "lognormal")), silent = TRUE)
1562684657545:fit[[3]] <- try(suppressWarnings(fitdistr(dat, "weibull")), silent = TRUE)
1562684657546:fit[[4]] <- try(suppressWarnings(fitdistr(dat, "normal")), silent = TRUE)
1562684657548:if (!trait == "cuticular_cond") {
1562684657550:fit[[5]] <- try(suppressWarnings(fitdistr(dat, "gamma")), silent = TRUE)
1562684657551:dist.names <- c(dist.names, "gamma")
1562684657552:}
1562684657553:failfit.bool <- sapply(fit, class) == "try-error"
1562684657555:fit[failfit.bool] <- NULL
1562684657556:dist.names <- dist.names[!failfit.bool]
1562684657558:fparm <- lapply(fit, function(x) { as.numeric(x$estimate) })
1562684657560:fAIC <- lapply(fit, AIC)
1562684657562:bestfit <- which.min(fAIC)
1562684657564:posteriors[ptrait, "distn"] <- dist.names[bestfit]
1562684657565:posteriors[ptrait, "parama"] <- fit[[bestfit]]$estimate[1]
1562684657566:if (bestfit == 1) {
1562684657568:posteriors[ptrait, "paramb"] <- NA
1562684657569:} else {
1562684657571:posteriors[ptrait, "paramb"] <- fit[[bestfit]]$estimate[2]
1562684657572:}
1562684657575:if (do.plot) {
1562684657576:.dens_plot(posteriors, priors, ptrait, dat, trait, trait.data)
1562684657577:}
1562684657579:} else {
1562684657580:## default: NORMAL
1562684657581:posteriors[trait, "distn"] <- "norm"
1562684657583:posteriors[trait, "parama"] <- mean(dat)
1562684657584:posteriors[trait, "paramb"] <- sd(dat)
1562684657585:if (do.plot) {
1562684657587:.dens_plot(posteriors, priors, ptrait, dat, trait, trait.data)
1562684657588:}
1562684657590:}
1562684756821:if (do.plot) {
1562684756824:dev.off()
1562684756826:}
1562684765315:do.plot
1562684795829:!is.null(outdir)
1562684819207:outdir <- ""
1562684821896:do.plot <- !is.null(outdir)
1562684827815:do.plot
1562684832121:if (do.plot == TRUE) {
1562684832124:pdf(file.path(outdir, paste("posteriors", filename.flag, ".pdf", sep = "")))
1562684832126:}
1562771039394:# ----------------------------------------------------------------------
1562771039422:# Load required libraries
1562771039423:# ----------------------------------------------------------------------
1562771039424:library(PEcAn.all)
1562771043976:library(PEcAn.utils)
1562771044002:library(RCurl)
1562771044142:# make sure always to call status.end
1562771044143:options(warn=1)
1562771044144:options(error=quote({
1562771044145:PEcAn.utils::status.end("ERROR")
1562771044145:PEcAn.remote::kill.tunnel(settings)
1562771044146:if (!interactive()) {
1562771044147:q(status = 1)
1562771044148:}
1562771044149:}))
1562771047091:# ----------------------------------------------------------------------
1562771047093:# PEcAn Workflow
1562771047094:# ----------------------------------------------------------------------
1562771047097:# Open and read in settings file for PEcAn run.
1562771047099:args <- commandArgs(trailingOnly = TRUE)
1562771048074:if (is.na(args[1])){
1562771048076:settings <- PEcAn.settings::read.settings("pecan.xml")
1562771048078:} else {
1562771048080:settings.file <- args[1]
1562771048081:settings <- PEcAn.settings::read.settings(settings.file)
1562771048083:}
1562771079635:# ----------------------------------------------------------------------
1562771079636:# Load required libraries
1562771079637:# ----------------------------------------------------------------------
1562771079638:library(PEcAn.all)
1562771084880:library(PEcAn.utils)
1562771084881:library(RCurl)
1562771085077:# make sure always to call status.end
1562771085078:options(warn=1)
1562771085080:options(error=quote({
1562771085081:PEcAn.utils::status.end("ERROR")
1562771085081:PEcAn.remote::kill.tunnel(settings)
1562771085082:if (!interactive()) {
1562771085083:q(status = 1)
1562771085084:}
1562771085085:}))
1562771085087:# ----------------------------------------------------------------------
1562771085088:# PEcAn Workflow
1562771085089:# ----------------------------------------------------------------------
1562771085090:# Open and read in settings file for PEcAn run.
1562771085090:args <- commandArgs(trailingOnly = TRUE)
1562771085092:if (is.na(args[1])){
1562771085093:settings <- PEcAn.settings::read.settings("/data/test_files/ed2_files/pecan64.ed2.xml")
1562771085094:} else {
1562771085095:settings.file <- args[1]
1562771085096:settings <- PEcAn.settings::read.settings(settings.file)
1562771085097:}
1562771086949:# Check for additional modules that will require adding settings
1562771086950:if("benchmarking" %in% names(settings)){
1562771086953:library(PEcAn.benchmark)
1562771086954:settings <- papply(settings, read_settings_BRR)
1562771086957:}
1562771087714:if("sitegroup" %in% names(settings)){
1562771087716:if(is.null(settings$sitegroup$nSite)){
1562771087718:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1562771087720:sitegroupId = settings$sitegroup$id)
1562771087722:} else {
1562771087724:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1562771087725:sitegroupId = settings$sitegroup$id,
1562771087726:nSite = settings$sitegroup$nSite)
1562771087727:}
1562771087728:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1562771087729:}
1562771089076:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1562771089078:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1562771089969:# Write pecan.CHECKED.xml
1562771089970:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1562771092416:# start from scratch if no continue is passed in
1562771092418:statusFile <- file.path(settings$outdir, "STATUS")
1562771093359:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1562771093361:file.remove(statusFile)
1562771093363:}
1562771094373:# Do conversions
1562771094374:settings <- PEcAn.workflow::do_conversions(settings)
1562771095374:# Query the trait database for data and priors
1562771095376:if (PEcAn.utils::status.check("TRAIT") == 0){
1562771095378:PEcAn.utils::status.start("TRAIT")
1562771095380:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1562771095382:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1562771095384:PEcAn.utils::status.end()
1562771095386:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1562771095387:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1562771095388:}
1562771126014:library(PEcAn.all)
1562771131232:library(PEcAn.utils)
1562771131234:library(RCurl)
1562771131430:#system('rm -rf ~/ed2_results')
1562771131432:# make sure always to call status.end
1562771131433:options(warn=1)
1562771131434:options(error=quote({
1562771131435:PEcAn.utils::status.end("ERROR")
1562771131436:PEcAn.remote::kill.tunnel(settings)
1562771131437:if (!interactive()) {
1562771131437:q(status = 1)
1562771131438:}
1562771131439:}))
1562771131441:#options(warning.expression=status.end("ERROR"))
1562771131444:# ----------------------------------------------------------------------
1562771131445:# PEcAn Workflow
1562771131445:# ----------------------------------------------------------------------
1562771131446:# Open and read in settings file for PEcAn run.
1562771131447:args <- commandArgs(trailingOnly = TRUE)
1562771131449:if (is.na(args[1])){
1562771131450:settings <- PEcAn.settings::read.settings("/data/test_files/ed2_files/pecan64.ed2.xml")
1562771131450:} else {
1562771131451:settings.file <- args[1]
1562771131452:settings <- PEcAn.settings::read.settings(settings.file)
1562771131453:}
1562771131490:# Check for additional modules that will require adding settings
1562771131491:if("benchmarking" %in% names(settings)){
1562771131492:library(PEcAn.benchmark)
1562771131493:settings <- papply(settings, read_settings_BRR)
1562771131494:}
1562771131496:if("sitegroup" %in% names(settings)){
1562771131497:if(is.null(settings$sitegroup$nSite)){
1562771131498:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1562771131499:sitegroupId = settings$sitegroup$id)
1562771131500:} else {
1562771131501:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1562771131502:sitegroupId = settings$sitegroup$id,
1562771131502:nSite = settings$sitegroup$nSite)
1562771131503:}
1562771131504:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1562771131505:}
1562771131508:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1562771131508:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1562771132502:# Write pecan.CHECKED.xml
1562771132503:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1562771132601:# start from scratch if no continue is passed in
1562771132602:statusFile <- file.path(settings$outdir, "STATUS")
1562771132604:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1562771132605:file.remove(statusFile)
1562771132606:}
1562771132608:# Do conversions
1562771132609:settings <- PEcAn.workflow::do_conversions(settings)
1562771132720:# Query the trait database for data and priors
1562771132721:if (PEcAn.utils::status.check("TRAIT") == 0){
1562771132722:PEcAn.utils::status.start("TRAIT")
1562771132723:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1562771132724:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1562771132725:PEcAn.utils::status.end()
1562771132726:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1562771132727:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1562771132728:}
1562771150052:# Run the PEcAn meta.analysis
1562771150053:if(!is.null(settings$meta.analysis)) {
1562771150054:if (PEcAn.utils::status.check("META") == 0){
1562771150055:PEcAn.utils::status.start("META")
1562771150056:PEcAn.MA::runModule.run.meta.analysis(settings)
1562771150058:PEcAn.utils::status.end()
1562771150059:}
1562771150060:}
1562771161763:# Write model specific configs
1562771161765:if (PEcAn.utils::status.check("CONFIG") == 0){
1562771161767:PEcAn.utils::status.start("CONFIG")
1562771161769:settings <- PEcAn.workflow::runModule.run.write.configs(settings)
1562771161771:PEcAn.settings::write.settings(settings, outputfile='pecan.CONFIGS.xml')
1562771161773:PEcAn.utils::status.end()
1562771161774:} else if (file.exists(file.path(settings$outdir, 'pecan.CONFIGS.xml'))) {
1562771161775:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.CONFIGS.xml'))
1562771161776:}
1562771198994:if ((length(which(commandArgs() == "--advanced")) != 0) && (PEcAn.utils::status.check("ADVANCED") == 0)) {
1562771198997:PEcAn.utils::status.start("ADVANCED")
1562771198998:q();
1562771199001:}
1562771201008:# Start ecosystem model runs
1562771201010:if (PEcAn.utils::status.check("MODEL") == 0) {
1562771201012:PEcAn.utils::status.start("MODEL")
1562771201014:PEcAn.remote::runModule.start.model.runs(settings, stop.on.error = FALSE)
1562771201016:PEcAn.utils::status.end()
1562771201017:}
1562771223370:traceback()
1562773506392:library(ggplot2)
1562773507429:load("clm_params_data_out/pft/Setaria WT priors data/prior.distns.Rdata")
1562773509579:ex_single_param <- prior.distns[1,]
1562773510417:plot_parameter_dist <- function(param_data, num_values = 1000000){
1562773510419:expression <- paste0("r", param_data$distn, "(", num_values, ",", param_data$parama, ",", param_data$paramb, ")")
1562773510421:single_param_values <- data.frame(values = eval(parse(text = expression)))
1562773510423:single_param_plot <- ggplot(single_param_values, aes(x = values)) +
1562773510425:geom_density() +
1562773510428:ggtitle(row.names(param_data))
1562773510429:print(single_param_plot)
1562773510431:}
1562773511626:plot_parameter_dist(ex_single_param)
1562958541825:sessionInfo()
1564080809232:sessionInfo()
1565367482239:PEcAn.visualization::plot.netcdf("biocro_darpa_results/out/SA-salix-chi_leaf-0.159/2004.nc", "LAI")
1565367739746:PEcAn.visualization::plot.netcdf("biocro_darpa_results/out/SA-salix-chi_leaf-0.159/2004.nc", "LAI")
1566311066243:# ----------------------------------------------------------------------
1566311066435:# Load required libraries
1566311066436:# ----------------------------------------------------------------------
1566311066438:library(PEcAn.all)
1566311071211:library(PEcAn.utils)
1566311071212:library(RCurl)
1566311071381:# make sure always to call status.end
1566311071382:options(warn=1)
1566311071383:options(error=quote({
1566311071384:PEcAn.utils::status.end("ERROR")
1566311071384:PEcAn.remote::kill.tunnel(settings)
1566311071385:if (!interactive()) {
1566311071386:q(status = 1)
1566311071387:}
1566311071388:}))
1566311072502:# ----------------------------------------------------------------------
1566311072504:# PEcAn Workflow
1566311072505:# ----------------------------------------------------------------------
1566311072507:# Open and read in settings file for PEcAn run.
1566311072508:args <- commandArgs(trailingOnly = TRUE)
1566311074024:if (is.na(args[1])){
1566311074026:settings <- PEcAn.settings::read.settings("biocro_darpa_files/pecan.biocro.darpa.xml")
1566311074028:} else {
1566311074029:settings.file <- args[1]
1566311074031:settings <- PEcAn.settings::read.settings(settings.file)
1566311074033:}
1566311077613:# Check for additional modules that will require adding settings
1566311077615:if("benchmarking" %in% names(settings)){
1566311077617:library(PEcAn.benchmark)
1566311077618:settings <- papply(settings, read_settings_BRR)
1566311077620:}
1566311079000:if("sitegroup" %in% names(settings)){
1566311079002:if(is.null(settings$sitegroup$nSite)){
1566311079004:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1566311079005:sitegroupId = settings$sitegroup$id)
1566311079007:} else {
1566311079008:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1566311079009:sitegroupId = settings$sitegroup$id,
1566311079010:nSite = settings$sitegroup$nSite)
1566311079011:}
1566311079012:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1566311079013:}
1566311080427:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1566311080429:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1566311082734:# Write pecan.CHECKED.xml
1566311082736:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1566311086304:# start from scratch if no continue is passed in
1566311086305:statusFile <- file.path(settings$outdir, "STATUS")
1566311087324:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1566311087325:file.remove(statusFile)
1566311087327:}
1566311088811:# Do conversions
1566311088812:settings <- PEcAn.workflow::do_conversions(settings)
1566311094448:# Query the trait database for data and priors
1566311094449:if (PEcAn.utils::status.check("TRAIT") == 0){
1566311094451:PEcAn.utils::status.start("TRAIT")
1566311094452:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1566311094453:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1566311094455:PEcAn.utils::status.end()
1566311094456:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1566311094457:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1566311094458:}
1566311128651:# Run the PEcAn meta.analysis
1566311128653:if(!is.null(settings$meta.analysis)) {
1566311128655:if (PEcAn.utils::status.check("META") == 0){
1566311128656:PEcAn.utils::status.start("META")
1566311128657:PEcAn.MA::runModule.run.meta.analysis(settings)
1566311128658:PEcAn.utils::status.end()
1566311128659:}
1566311128660:}
1566311132185:# Write model specific configs
1566311132187:if (PEcAn.utils::status.check("CONFIG") == 0){
1566311132187:PEcAn.utils::status.start("CONFIG")
1566311132188:settings <- PEcAn.workflow::runModule.run.write.configs(settings)
1566311132189:PEcAn.settings::write.settings(settings, outputfile='pecan.CONFIGS.xml')
1566311132190:PEcAn.utils::status.end()
1566311132191:} else if (file.exists(file.path(settings$outdir, 'pecan.CONFIGS.xml'))) {
1566311132193:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.CONFIGS.xml'))
1566311132194:}
1566312417259:PEcAn.visualization::plot.netcdf("biocro_darpa_results/out/SA-salix-chi_leaf-0.159/2004.nc", "LAI")
1566314001086:# ----------------------------------------------------------------------
1566314001087:# Load required libraries
1566314001088:# ----------------------------------------------------------------------
1566314001089:library(PEcAn.all)
1566314006063:library(PEcAn.utils)
1566314006064:# make sure always to call status.end
1566314006065:options(warn=1)
1566314006066:library(RCurl)
1566314006211:options(error=quote({
1566314006212:PEcAn.utils::status.end("ERROR")
1566314006213:PEcAn.remote::kill.tunnel(settings)
1566314006214:if (!interactive()) {
1566314006215:q(status = 1)
1566314006216:}
1566314006217:}))
1566314012811:# ----------------------------------------------------------------------
1566314012813:# PEcAn Workflow
1566314012814:# ----------------------------------------------------------------------
1566314012816:# Open and read in settings file for PEcAn run.
1566314012817:args <- commandArgs(trailingOnly = TRUE)
1566314014068:if (is.na(args[1])){
1566314014070:settings <- PEcAn.settings::read.settings("biocro_darpa_files/pecan.biocro.darpa.xml")
1566314014072:} else {
1566314014073:settings.file <- args[1]
1566314014075:settings <- PEcAn.settings::read.settings(settings.file)
1566314014076:}
1566314015827:# Check for additional modules that will require adding settings
1566314015829:if("benchmarking" %in% names(settings)){
1566314015830:library(PEcAn.benchmark)
1566314015832:settings <- papply(settings, read_settings_BRR)
1566314015834:}
1566314017218:if("sitegroup" %in% names(settings)){
1566314017220:if(is.null(settings$sitegroup$nSite)){
1566314017221:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1566314017223:sitegroupId = settings$sitegroup$id)
1566314017224:} else {
1566314017224:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1566314017225:sitegroupId = settings$sitegroup$id,
1566314017227:nSite = settings$sitegroup$nSite)
1566314017228:}
1566314017229:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1566314017230:}
1566314018754:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1566314018756:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1566314029832:# Write pecan.CHECKED.xml
1566314029834:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1566314031480:# start from scratch if no continue is passed in
1566314031480:statusFile <- file.path(settings$outdir, "STATUS")
1566314033481:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1566314033483:file.remove(statusFile)
1566314033484:}
1566314034983:# Do conversions
1566314034985:settings <- PEcAn.workflow::do_conversions(settings)
1566314037502:# Query the trait database for data and priors
1566314037504:if (PEcAn.utils::status.check("TRAIT") == 0){
1566314037506:PEcAn.utils::status.start("TRAIT")
1566314037507:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1566314037508:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1566314037509:PEcAn.utils::status.end()
1566314037509:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1566314037510:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1566314037511:}
1566314128353:# Run the PEcAn meta.analysis
1566314128355:if(!is.null(settings$meta.analysis)) {
1566314128356:if (PEcAn.utils::status.check("META") == 0){
1566314128358:PEcAn.utils::status.start("META")
1566314128359:PEcAn.MA::runModule.run.meta.analysis(settings)
1566314128360:PEcAn.utils::status.end()
1566314128362:}
1566314128363:}
1566314132384:# Write model specific configs
1566314132385:if (PEcAn.utils::status.check("CONFIG") == 0){
1566314132387:PEcAn.utils::status.start("CONFIG")
1566314132388:settings <- PEcAn.workflow::runModule.run.write.configs(settings)
1566314132390:PEcAn.settings::write.settings(settings, outputfile='pecan.CONFIGS.xml')
1566314132391:PEcAn.utils::status.end()
1566314132393:} else if (file.exists(file.path(settings$outdir, 'pecan.CONFIGS.xml'))) {
1566314132394:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.CONFIGS.xml'))
1566314132395:}
1566314185031:traceback()
1566418960722:# ----------------------------------------------------------------------
1566418960727:# Load required libraries
1566418960729:# ----------------------------------------------------------------------
1566418960730:library(PEcAn.all)
1566418965740:debugonce(write.config.BIOCRO)
1566418965741:library(PEcAn.utils)
1566418965742:library(RCurl)
1566419011641:debugonce(PEcAn.BIOCRO::write.config.BIOCRO)
1566419013546:library(PEcAn.utils)
1566419014539:library(RCurl)
1566419030361:# make sure always to call status.end
1566419030362:options(warn=1)
1566419031009:options(error=quote({
1566419031011:PEcAn.utils::status.end("ERROR")
1566419031012:PEcAn.remote::kill.tunnel(settings)
1566419031014:if (!interactive()) {
1566419031016:q(status = 1)
1566419031017:}
1566419031019:}))
1566419041700:# ----------------------------------------------------------------------
1566419041702:# PEcAn Workflow
1566419041703:# ----------------------------------------------------------------------
1566419041704:# Open and read in settings file for PEcAn run.
1566419041705:args <- commandArgs(trailingOnly = TRUE)
1566419042817:if (is.na(args[1])){
1566419042819:settings <- PEcAn.settings::read.settings("biocro_darpa_files/pecan.biocro.darpa.xml")
1566419042820:} else {
1566419042821:settings.file <- args[1]
1566419042822:settings <- PEcAn.settings::read.settings(settings.file)
1566419042824:}
1566419044124:# Check for additional modules that will require adding settings
1566419044126:if("benchmarking" %in% names(settings)){
1566419044128:library(PEcAn.benchmark)
1566419044129:settings <- papply(settings, read_settings_BRR)
1566419044131:}
1566419045129:if("sitegroup" %in% names(settings)){
1566419045131:if(is.null(settings$sitegroup$nSite)){
1566419045132:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1566419045134:sitegroupId = settings$sitegroup$id)
1566419045136:} else {
1566419045137:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1566419045138:sitegroupId = settings$sitegroup$id,
1566419045139:nSite = settings$sitegroup$nSite)
1566419045140:}
1566419045141:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1566419045141:}
1566419046492:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1566419046493:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1566419048508:# Write pecan.CHECKED.xml
1566419048510:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1566419050215:# start from scratch if no continue is passed in
1566419050217:statusFile <- file.path(settings$outdir, "STATUS")
1566419051487:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1566419051489:file.remove(statusFile)
1566419051491:}
1566419052824:# Do conversions
1566419052825:settings <- PEcAn.workflow::do_conversions(settings)
1566419060122:# Query the trait database for data and priors
1566419060123:if (PEcAn.utils::status.check("TRAIT") == 0){
1566419060125:PEcAn.utils::status.start("TRAIT")
1566419060127:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1566419060128:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1566419060130:PEcAn.utils::status.end()
1566419060131:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1566419060133:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1566419060134:}
1566419067264:# Run the PEcAn meta.analysis
1566419067265:if(!is.null(settings$meta.analysis)) {
1566419067267:if (PEcAn.utils::status.check("META") == 0){
1566419067268:PEcAn.utils::status.start("META")
1566419067269:PEcAn.MA::runModule.run.meta.analysis(settings)
1566419067270:PEcAn.utils::status.end()
1566419067271:}
1566419067272:}
1566419175464:# ----------------------------------------------------------------------
1566419175465:# Load required libraries
1566419175466:# ----------------------------------------------------------------------
1566419175467:library(PEcAn.all)
1566419181121:debugonce(PEcAn.BIOCRO::write.config.BIOCRO)
1566419181305:library(PEcAn.utils)
1566419181307:library(RCurl)
1566419183843:# make sure always to call status.end
1566419183845:options(warn=1)
1566419184264:options(error=quote({
1566419184266:PEcAn.utils::status.end("ERROR")
1566419184268:PEcAn.remote::kill.tunnel(settings)
1566419184269:if (!interactive()) {
1566419184271:q(status = 1)
1566419184272:}
1566419184273:}))
1566419185654:# ----------------------------------------------------------------------
1566419185656:# PEcAn Workflow
1566419185657:# ----------------------------------------------------------------------
1566419185659:# Open and read in settings file for PEcAn run.
1566419185660:args <- commandArgs(trailingOnly = TRUE)
1566419186802:if (is.na(args[1])){
1566419186804:settings <- PEcAn.settings::read.settings("biocro_darpa_files/pecan.biocro.darpa.xml")
1566419186805:} else {
1566419186807:settings.file <- args[1]
1566419186808:settings <- PEcAn.settings::read.settings(settings.file)
1566419186809:}
1566419188444:# Check for additional modules that will require adding settings
1566419188446:if("benchmarking" %in% names(settings)){
1566419188447:library(PEcAn.benchmark)
1566419188449:settings <- papply(settings, read_settings_BRR)
1566419188449:}
1566419189315:if("sitegroup" %in% names(settings)){
1566419189317:if(is.null(settings$sitegroup$nSite)){
1566419189318:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1566419189320:sitegroupId = settings$sitegroup$id)
1566419189321:} else {
1566419189323:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1566419189324:sitegroupId = settings$sitegroup$id,
1566419189326:nSite = settings$sitegroup$nSite)
1566419189327:}
1566419189328:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1566419189329:}
1566419190430:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1566419190431:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1566419192559:# Write pecan.CHECKED.xml
1566419192561:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1566419193924:# start from scratch if no continue is passed in
1566419193926:statusFile <- file.path(settings$outdir, "STATUS")
1566419195511:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1566419195511:file.remove(statusFile)
1566419195512:}
1566419196732:# Do conversions
1566419196733:settings <- PEcAn.workflow::do_conversions(settings)
1566419198635:# Query the trait database for data and priors
1566419198637:if (PEcAn.utils::status.check("TRAIT") == 0){
1566419198638:PEcAn.utils::status.start("TRAIT")
1566419198639:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1566419198641:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1566419198642:PEcAn.utils::status.end()
1566419198644:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1566419198645:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1566419198647:}
1566419202019:# Run the PEcAn meta.analysis
1566419202020:if(!is.null(settings$meta.analysis)) {
1566419202021:if (PEcAn.utils::status.check("META") == 0){
1566419202023:PEcAn.utils::status.start("META")
1566419202024:PEcAn.MA::runModule.run.meta.analysis(settings)
1566419202025:PEcAn.utils::status.end()
1566419202025:}
1566419202026:}
1566419205885:# Write model specific configs
1566419205886:if (PEcAn.utils::status.check("CONFIG") == 0){
1566419205887:PEcAn.utils::status.start("CONFIG")
1566419205889:settings <- PEcAn.workflow::runModule.run.write.configs(settings)
1566419205890:PEcAn.settings::write.settings(settings, outputfile='pecan.CONFIGS.xml')
1566419205891:PEcAn.utils::status.end()
1566419205892:} else if (file.exists(file.path(settings$outdir, 'pecan.CONFIGS.xml'))) {
1566419205894:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.CONFIGS.xml'))
1566419205895:}
1566419303036:View(settings)
1566419338851:settings$pfts$pft$outdir
1566420032326:# ----------------------------------------------------------------------
1566420032327:# Load required libraries
1566420032328:# ----------------------------------------------------------------------
1566420032329:library(PEcAn.all)
1566420038368:debugonce(PEcAn.db::get.trait.data.pft)
1566484423316:# ----------------------------------------------------------------------
1566484423317:# Load required libraries
1566484423319:# ----------------------------------------------------------------------
1566484423320:library(PEcAn.all)
1566484428026:debugonce(PEcAn.DB::get.trait.data)
1566484429665:library(PEcAn.utils)
1566484430813:library(RCurl)
1566484432207:# make sure always to call status.end
1566484432208:options(warn=1)
1566484432948:options(error=quote({
1566484432950:PEcAn.utils::status.end("ERROR")
1566484432952:PEcAn.remote::kill.tunnel(settings)
1566484432953:if (!interactive()) {
1566484432955:q(status = 1)
1566484432957:}
1566484432958:}))
1566484434151:# ----------------------------------------------------------------------
1566484434153:# PEcAn Workflow
1566484434154:# ----------------------------------------------------------------------
1566484434156:# Open and read in settings file for PEcAn run.
1566484434158:args <- commandArgs(trailingOnly = TRUE)
1566484435420:if (is.na(args[1])){
1566484435421:settings <- PEcAn.settings::read.settings("biocro_darpa_files/pecan.biocro.darpa.xml")
1566484435423:} else {
1566484435425:settings.file <- args[1]
1566484435427:settings <- PEcAn.settings::read.settings(settings.file)
1566484435428:}
1566484437056:# Check for additional modules that will require adding settings
1566484437057:if("benchmarking" %in% names(settings)){
1566484437059:library(PEcAn.benchmark)
1566484437060:settings <- papply(settings, read_settings_BRR)
1566484437062:}
1566484438257:if("sitegroup" %in% names(settings)){
1566484438258:if(is.null(settings$sitegroup$nSite)){
1566484438259:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1566484438260:sitegroupId = settings$sitegroup$id)
1566484438261:} else {
1566484438262:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1566484438263:sitegroupId = settings$sitegroup$id,
1566484438264:nSite = settings$sitegroup$nSite)
1566484438265:}
1566484438266:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1566484438267:}
1566484439871:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1566484439873:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1566484442190:# Write pecan.CHECKED.xml
1566484442191:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1566484443970:# start from scratch if no continue is passed in
1566484443972:statusFile <- file.path(settings$outdir, "STATUS")
1566484446509:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1566484446511:file.remove(statusFile)
1566484446512:}
1566484447514:# Do conversions
1566484447515:settings <- PEcAn.workflow::do_conversions(settings)
1566484450760:# Query the trait database for data and priors
1566484450761:if (PEcAn.utils::status.check("TRAIT") == 0){
1566484450763:PEcAn.utils::status.start("TRAIT")
1566484450765:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1566484450767:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1566484450768:PEcAn.utils::status.end()
1566484450770:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1566484450771:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1566484450772:}
1566487100832:library(PEcAn.all)
1566487105993:debugonce(PEcAn.DB::get.trait.data)
1566487105995:library(PEcAn.utils)
1566487105996:library(RCurl)
1566487106196:# make sure always to call status.end
1566487106197:options(warn=1)
1566487106198:options(error=quote({
1566487106198:PEcAn.utils::status.end("ERROR")
1566487106199:PEcAn.remote::kill.tunnel(settings)
1566487106200:if (!interactive()) {
1566487106200:q(status = 1)
1566487106201:}
1566487106202:}))
1566487106203:#options(warning.expression=status.end("ERROR"))
1566487106205:# ----------------------------------------------------------------------
1566487106206:# PEcAn Workflow
1566487106206:# ----------------------------------------------------------------------
1566487106207:# Open and read in settings file for PEcAn run.
1566487106208:args <- commandArgs(trailingOnly = TRUE)
1566487106209:if (is.na(args[1])){
1566487106209:settings <- PEcAn.settings::read.settings("biocro_darpa_files/pecan.biocro.darpa.xml")
1566487106210:} else {
1566487106211:settings.file <- args[1]
1566487106211:settings <- PEcAn.settings::read.settings(settings.file)
1566487106212:}
1566487106240:# Check for additional modules that will require adding settings
1566487106241:if("benchmarking" %in% names(settings)){
1566487106242:library(PEcAn.benchmark)
1566487106243:settings <- papply(settings, read_settings_BRR)
1566487106243:}
1566487106245:if("sitegroup" %in% names(settings)){
1566487106246:if(is.null(settings$sitegroup$nSite)){
1566487106246:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1566487106247:sitegroupId = settings$sitegroup$id)
1566487106248:} else {
1566487106249:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1566487106250:sitegroupId = settings$sitegroup$id,
1566487106250:nSite = settings$sitegroup$nSite)
1566487106251:}
1566487106252:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1566487106253:}
1566487106254:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1566487106255:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1566487106799:# Write pecan.CHECKED.xml
1566487106800:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1566487106876:# start from scratch if no continue is passed in
1566487106877:statusFile <- file.path(settings$outdir, "STATUS")
1566487106878:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1566487106878:file.remove(statusFile)
1566487106879:}
1566487106881:# Do conversions
1566487106881:settings <- PEcAn.workflow::do_conversions(settings)
1566487110494:# Query the trait database for data and priors
1566487110495:if (PEcAn.utils::status.check("TRAIT") == 0){
1566487110497:PEcAn.utils::status.start("TRAIT")
1566487110498:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1566487110500:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1566487110501:PEcAn.utils::status.end()
1566487110503:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1566487110504:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1566487110505:}
1566487381351:trait.name
1566487390385:trait.names
1566487397795:result
1566487419012:#!/usr/bin/env Rscript
1566487419013:#-------------------------------------------------------------------------------
1566487419014:# Copyright (c) 2012 University of Illinois, NCSA.
1566487419014:# All rights reserved. This program and the accompanying materials
1566487419015:# are made available under the terms of the
1566487419016:# University of Illinois/NCSA Open Source License
1566487419016:# which accompanies this distribution, and is available at
1566487419017:# http://opensource.ncsa.illinois.edu/license.html
1566487419018:#-------------------------------------------------------------------------------
1566487419019:# ----------------------------------------------------------------------
1566487419019:# Load required libraries
1566487419020:# ----------------------------------------------------------------------
1566487419021:library(PEcAn.all)
1566487424266:debugonce(PEcAn.DB::get.trait.data)
1566487424268:library(PEcAn.utils)
1566487424269:library(RCurl)
1566487424467:# make sure always to call status.end
1566487424468:options(warn=1)
1566487424469:options(error=quote({
1566487424470:PEcAn.utils::status.end("ERROR")
1566487424471:PEcAn.remote::kill.tunnel(settings)
1566487424471:if (!interactive()) {
1566487424472:q(status = 1)
1566487424473:}
1566487424473:}))
1566487424475:#options(warning.expression=status.end("ERROR"))
1566487424477:# ----------------------------------------------------------------------
1566487424477:# PEcAn Workflow
1566487424478:# ----------------------------------------------------------------------
1566487424479:# Open and read in settings file for PEcAn run.
1566487424479:args <- commandArgs(trailingOnly = TRUE)
1566487424480:if (is.na(args[1])){
1566487424481:settings <- PEcAn.settings::read.settings("biocro_darpa_files/pecan.biocro.darpa.xml")
1566487424482:} else {
1566487424482:settings.file <- args[1]
1566487424483:settings <- PEcAn.settings::read.settings(settings.file)
1566487424484:}
1566487424512:# Check for additional modules that will require adding settings
1566487424513:if("benchmarking" %in% names(settings)){
1566487424514:library(PEcAn.benchmark)
1566487424514:settings <- papply(settings, read_settings_BRR)
1566487424515:}
1566487424517:if("sitegroup" %in% names(settings)){
1566487424518:if(is.null(settings$sitegroup$nSite)){
1566487424518:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1566487424519:sitegroupId = settings$sitegroup$id)
1566487424520:} else {
1566487424521:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1566487424521:sitegroupId = settings$sitegroup$id,
1566487424522:nSite = settings$sitegroup$nSite)
1566487424523:}
1566487424524:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1566487424524:}
1566487424526:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1566487424527:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1566487425070:# Write pecan.CHECKED.xml
1566487425071:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1566487425144:# start from scratch if no continue is passed in
1566487425145:statusFile <- file.path(settings$outdir, "STATUS")
1566487425146:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1566487425147:file.remove(statusFile)
1566487425147:}
1566487425149:# Do conversions
1566487425150:settings <- PEcAn.workflow::do_conversions(settings)
1566487427786:# Query the trait database for data and priors
1566487427787:if (PEcAn.utils::status.check("TRAIT") == 0){
1566487427788:PEcAn.utils::status.start("TRAIT")
1566487427789:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1566487427790:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1566487427791:PEcAn.utils::status.end()
1566487427792:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1566487427793:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1566487427795:}
1566487562703:result
1566487576414:traceback()
1566487628513:#!/usr/bin/env Rscript
1566487628513:#-------------------------------------------------------------------------------
1566487628514:# Copyright (c) 2012 University of Illinois, NCSA.
1566487628515:# All rights reserved. This program and the accompanying materials
1566487628516:# are made available under the terms of the
1566487628516:# University of Illinois/NCSA Open Source License
1566487628517:# which accompanies this distribution, and is available at
1566487628518:# http://opensource.ncsa.illinois.edu/license.html
1566487628519:#-------------------------------------------------------------------------------
1566487628520:# ----------------------------------------------------------------------
1566487628520:# Load required libraries
1566487628521:# ----------------------------------------------------------------------
1566487628522:library(PEcAn.all)
1566487633746:debugonce(PEcAn.DB::get.trait.data)
1566487633747:library(PEcAn.utils)
1566487633748:library(RCurl)
1566487633949:# make sure always to call status.end
1566487633949:options(warn=1)
1566487633950:options(error=quote({
1566487633951:PEcAn.utils::status.end("ERROR")
1566487633952:PEcAn.remote::kill.tunnel(settings)
1566487633952:if (!interactive()) {
1566487633953:q(status = 1)
1566487633954:}
1566487633954:}))
1566487633956:#options(warning.expression=status.end("ERROR"))
1566487633957:# ----------------------------------------------------------------------
1566487633958:# PEcAn Workflow
1566487633959:# ----------------------------------------------------------------------
1566487633959:# Open and read in settings file for PEcAn run.
1566487633960:args <- commandArgs(trailingOnly = TRUE)
1566487633961:if (is.na(args[1])){
1566487633962:settings <- PEcAn.settings::read.settings("biocro_darpa_files/pecan.biocro.darpa.xml")
1566487633962:} else {
1566487633963:settings.file <- args[1]
1566487633963:settings <- PEcAn.settings::read.settings(settings.file)
1566487633964:}
1566487633992:# Check for additional modules that will require adding settings
1566487633993:if("benchmarking" %in% names(settings)){
1566487633994:library(PEcAn.benchmark)
1566487633994:settings <- papply(settings, read_settings_BRR)
1566487633995:}
1566487633996:if("sitegroup" %in% names(settings)){
1566487633997:if(is.null(settings$sitegroup$nSite)){
1566487633998:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1566487633998:sitegroupId = settings$sitegroup$id)
1566487633999:} else {
1566487634000:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1566487634000:sitegroupId = settings$sitegroup$id,
1566487634001:nSite = settings$sitegroup$nSite)
1566487634002:}
1566487634003:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1566487634003:}
1566487634005:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1566487634005:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1566487634553:# Write pecan.CHECKED.xml
1566487634553:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1566487634628:# start from scratch if no continue is passed in
1566487634628:statusFile <- file.path(settings$outdir, "STATUS")
1566487634629:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1566487634630:file.remove(statusFile)
1566487634631:}
1566487634633:# Do conversions
1566487634633:settings <- PEcAn.workflow::do_conversions(settings)
1566487636848:# Query the trait database for data and priors
1566487636850:if (PEcAn.utils::status.check("TRAIT") == 0){
1566487636851:PEcAn.utils::status.start("TRAIT")
1566487636853:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1566487636854:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1566487636855:PEcAn.utils::status.end()
1566487636857:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1566487636858:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1566487636860:}
1566487676445:all_priors_list
1566487703234:unique(unlist(lapply(all_priors_list,
1566487703236:rownames)))
1566487725277:trait.names
1566487742097:lapply(pfts, get.trait.data.pft, modeltype = modeltype,
1566487742098:dbfiles = dbfiles, dbcon = dbcon, forceupdate = forceupdate,
1566487742099:trait.names = trait.names)
1566487754103:modeltype
1566487759395:dbfiles
1566487763844:dbcon
1566487768081:forceupdate
1566487772278:trait.names
1566487786385:pfts
1566487793857:get.trait.data.pft
1566488861655:lapply(pfts, get.trait.data.pft, modeltype = modeltype,
1566488861657:dbfiles = dbfiles, dbcon = dbcon, forceupdate = forceupdate,
1566488861658:trait.names = trait.names)
1566488866358:get.trait.data.pft
1566488918103:#!/usr/bin/env Rscript
1566488918105:#-------------------------------------------------------------------------------
1566488918107:# Copyright (c) 2012 University of Illinois, NCSA.
1566488918108:# All rights reserved. This program and the accompanying materials
1566488918110:# are made available under the terms of the
1566488918112:# University of Illinois/NCSA Open Source License
1566488918113:# which accompanies this distribution, and is available at
1566488918115:# http://opensource.ncsa.illinois.edu/license.html
1566488918115:#-------------------------------------------------------------------------------
1566488918117:# ----------------------------------------------------------------------
1566488918118:# Load required libraries
1566488918118:# ----------------------------------------------------------------------
1566488918119:library(PEcAn.all)
1566488918120:#debugonce(PEcAn.DB::get.trait.data)
1566488918121:library(PEcAn.utils)
1566488918122:library(RCurl)
1566488918124:# make sure always to call status.end
1566488918124:options(warn=1)
1566488918125:options(error=quote({
1566488918126:PEcAn.utils::status.end("ERROR")
1566488918126:PEcAn.remote::kill.tunnel(settings)
1566488918127:if (!interactive()) {
1566488918128:q(status = 1)
1566488918129:}
1566488918130:}))
1566488918131:#options(warning.expression=status.end("ERROR"))
1566488918133:# ----------------------------------------------------------------------
1566488918134:# PEcAn Workflow
1566488918135:# ----------------------------------------------------------------------
1566488918135:# Open and read in settings file for PEcAn run.
1566488918136:args <- commandArgs(trailingOnly = TRUE)
1566488918137:if (is.na(args[1])){
1566488918138:settings <- PEcAn.settings::read.settings("biocro_darpa_files/pecan.biocro.darpa.xml")
1566488918138:} else {
1566488918139:settings.file <- args[1]
1566488918140:settings <- PEcAn.settings::read.settings(settings.file)
1566488918141:}
1566488918165:# Check for additional modules that will require adding settings
1566488918166:if("benchmarking" %in% names(settings)){
1566488918167:library(PEcAn.benchmark)
1566488918168:settings <- papply(settings, read_settings_BRR)
1566488918168:}
1566488918170:if("sitegroup" %in% names(settings)){
1566488918170:if(is.null(settings$sitegroup$nSite)){
1566488918171:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1566488918172:sitegroupId = settings$sitegroup$id)
1566488918173:} else {
1566488918173:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1566488918174:sitegroupId = settings$sitegroup$id,
1566488918175:nSite = settings$sitegroup$nSite)
1566488918176:}
1566488918176:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1566488918177:}
1566488918179:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1566488918180:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1566488918386:# Write pecan.CHECKED.xml
1566488918386:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1566488918458:# start from scratch if no continue is passed in
1566488918459:statusFile <- file.path(settings$outdir, "STATUS")
1566488918460:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1566488918461:file.remove(statusFile)
1566488918461:}
1566488918463:# Do conversions
1566488918464:settings <- PEcAn.workflow::do_conversions(settings)
1566488925442:# Query the trait database for data and priors
1566488925443:if (PEcAn.utils::status.check("TRAIT") == 0){
1566488925444:PEcAn.utils::status.start("TRAIT")
1566488925445:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1566488925446:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1566488925447:PEcAn.utils::status.end()
1566488925447:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1566488925448:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1566488925449:}
1566488933296:traceback()
1566489068902:dplyr::tbl(dbcon, "posteriors") %>% dplyr::filter(pft_id == !!pftid) %>%
1566489068903:dplyr::arrange(dplyr::desc(created_at)) %>% head(1) %>% dplyr::pull(id)
1566489103974:dbcon <- db.open(database)
1566489245287:library(PEcAn.all)
1566489250414:debugonce(PEcAn.DB::get.trait.data)
1566489250416:library(PEcAn.utils)
1566489250417:library(RCurl)
1566489250615:# make sure always to call status.end
1566489250616:options(warn=1)
1566489250617:options(error=quote({
1566489250618:PEcAn.utils::status.end("ERROR")
1566489250618:PEcAn.remote::kill.tunnel(settings)
1566489250619:if (!interactive()) {
1566489250620:q(status = 1)
1566489250620:}
1566489250621:}))
1566489250623:#options(warning.expression=status.end("ERROR"))
1566489250624:# ----------------------------------------------------------------------
1566489250625:# PEcAn Workflow
1566489250626:# ----------------------------------------------------------------------
1566489250626:# Open and read in settings file for PEcAn run.
1566489250627:args <- commandArgs(trailingOnly = TRUE)
1566489250628:if (is.na(args[1])){
1566489250629:settings <- PEcAn.settings::read.settings("biocro_darpa_files/pecan.biocro.darpa.xml")
1566489250629:} else {
1566489250630:settings.file <- args[1]
1566489250631:settings <- PEcAn.settings::read.settings(settings.file)
1566489250631:}
1566489250659:# Check for additional modules that will require adding settings
1566489250660:if("benchmarking" %in% names(settings)){
1566489250661:library(PEcAn.benchmark)
1566489250661:settings <- papply(settings, read_settings_BRR)
1566489250662:}
1566489250664:if("sitegroup" %in% names(settings)){
1566489250664:if(is.null(settings$sitegroup$nSite)){
1566489250665:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1566489250666:sitegroupId = settings$sitegroup$id)
1566489250667:} else {
1566489250667:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1566489250668:sitegroupId = settings$sitegroup$id,
1566489250669:nSite = settings$sitegroup$nSite)
1566489250670:}
1566489250671:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1566489250671:}
1566489250673:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1566489250674:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1566489251216:# Write pecan.CHECKED.xml
1566489251216:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1566489251288:# start from scratch if no continue is passed in
1566489251288:statusFile <- file.path(settings$outdir, "STATUS")
1566489251289:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1566489251290:file.remove(statusFile)
1566489251291:}
1566489251292:# Do conversions
1566489251293:settings <- PEcAn.workflow::do_conversions(settings)
1566489253662:# Query the trait database for data and priors
1566489253663:if (PEcAn.utils::status.check("TRAIT") == 0){
1566489253664:PEcAn.utils::status.start("TRAIT")
1566489253665:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1566489253665:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1566489253666:PEcAn.utils::status.end()
1566489253667:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1566489253668:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1566489253669:}
1566489298807:dplyr::tbl(dbcon, "posteriors") %>% dplyr::filter(pft_id == !!pftid) %>%
1566489298808:dplyr::arrange(dplyr::desc(created_at)) %>% head(1) %>% dplyr::pull(id)
1566489312664:dplyr::tbl(dbcon, "posteriors")
1566489331886:dplyr::tbl(dbcon, "posteriors") %>% dplyr::filter(pft_id == !!pftid)
1566489386514:dplyr::tbl(dbcon, "posteriors") %>% dplyr::filter(pft_id == !!pftid) %>%
1566489386516:dplyr::arrange(dplyr::desc(created_at)) %>% head(1) %>% dplyr::pull(id)
1566489400501:dplyr::tbl(dbcon, "posteriors")
1566489403901:dplyr::tbl(dbcon, "posteriors") %>% dplyr::filter(pft_id == !!pftid)
1566489426216:pftid
1566489481471:get.id(table = "pfts", values = "name", colnames = pft, con = con)
1566489534482:get.id("pfts", "name", pft, con)
1566489586534:get.id("pfts", "name", pft_names, con)
1566489591723:get.id("pfts", "name", pft_names, dbcon)
1566489599944:options(scipen = 999)
1566489602556:get.id("pfts", "name", pft_names, dbcon)
1566489623928:dplyr::tbl(dbcon, "posteriors") %>% dplyr::filter(pft_id == !!9000000004)
1566489705013:!!9000000004
1566489726959:9000000004 == !!9000000004
1566489734399:9000000005 == !!9000000004
1566489745761:1000000001 == !!9000000004
1566489822594:pftid == 1000000001
1566489830243:pftid <- 1000000001
1566489842326:dplyr::tbl(dbcon, "posteriors") %>% dplyr::filter(pft_id == !!pftid)
1566489858990:dbcon
1566489892241:dplyr::tbl(dbcon, "priors")
1566491834683:forceupdate
1566492022413:pft$posteriorid
1566492103896:View(pfts)
1566492153814:pftid <- pftres[["id"]]
1566492164165:pftres <- query_pfts(dbcon, pft[["name"]], modeltype)
1566492216655:pfts
1566492283288:pfts$pft
1566492286750:pfts[1]
1566492289675:pfts[2]
1566492291936:pfts[1]
1566492313859:pfts[1][["name"]]
1566492325978:pfts$pft[["name"]]
1566492333737:pft <- pfts$pft
1566492338989:pftres <- query_pfts(dbcon, pft[["name"]], modeltype)
1566492345878:pftid <- pftres[["id"]]
1566492348928:pftid
1566492373501:pft$posterid
1566492386659:is.null(pft$posteriorid)
1566501160147:#!/usr/bin/env Rscript
1566501160149:#-------------------------------------------------------------------------------
1566501160150:# Copyright (c) 2012 University of Illinois, NCSA.
1566501160151:# All rights reserved. This program and the accompanying materials
1566501160152:# are made available under the terms of the
1566501160154:# University of Illinois/NCSA Open Source License
1566501160155:# which accompanies this distribution, and is available at
1566501160156:# http://opensource.ncsa.illinois.edu/license.html
1566501160157:#-------------------------------------------------------------------------------
1566501160158:# ----------------------------------------------------------------------
1566501160159:# Load required libraries
1566501160160:# ----------------------------------------------------------------------
1566501160161:library(PEcAn.all)
1566501164908:#debugonce(PEcAn.DB::get.trait.data)
1566501164909:library(PEcAn.utils)
1566501164910:library(RCurl)
1566501165081:# make sure always to call status.end
1566501165082:options(warn=1)
1566501165083:options(error=quote({
1566501165083:PEcAn.utils::status.end("ERROR")
1566501165084:PEcAn.remote::kill.tunnel(settings)
1566501165085:if (!interactive()) {
1566501165086:q(status = 1)
1566501165086:}
1566501165087:}))
1566501165088:#options(warning.expression=status.end("ERROR"))
1566501165090:# ----------------------------------------------------------------------
1566501165091:# PEcAn Workflow
1566501165092:# ----------------------------------------------------------------------
1566501165092:# Open and read in settings file for PEcAn run.
1566501165093:args <- commandArgs(trailingOnly = TRUE)
1566501165094:if (is.na(args[1])){
1566501165094:settings <- PEcAn.settings::read.settings("biocro_darpa_files/pecan.biocro.darpa.xml")
1566501165095:} else {
1566501165096:settings.file <- args[1]
1566501165096:settings <- PEcAn.settings::read.settings(settings.file)
1566501165097:}
1566501165125:# Check for additional modules that will require adding settings
1566501165126:if("benchmarking" %in% names(settings)){
1566501165126:library(PEcAn.benchmark)
1566501165127:settings <- papply(settings, read_settings_BRR)
1566501165128:}
1566501165130:if("sitegroup" %in% names(settings)){
1566501165130:if(is.null(settings$sitegroup$nSite)){
1566501165131:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1566501165132:sitegroupId = settings$sitegroup$id)
1566501165132:} else {
1566501165133:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1566501165135:sitegroupId = settings$sitegroup$id,
1566501165136:nSite = settings$sitegroup$nSite)
1566501165136:}
1566501165137:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1566501165138:}
1566501165140:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1566501165140:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1566501165695:# Write pecan.CHECKED.xml
1566501165696:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1566501165770:# start from scratch if no continue is passed in
1566501165771:statusFile <- file.path(settings$outdir, "STATUS")
1566501165772:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1566501165772:file.remove(statusFile)
1566501165773:}
1566501165775:# Do conversions
1566501165775:settings <- PEcAn.workflow::do_conversions(settings)
1566501231293:forceupdate <- TRUE
1566501232485:# Query the trait database for data and priors
1566501232487:if (PEcAn.utils::status.check("TRAIT") == 0){
1566501232489:PEcAn.utils::status.start("TRAIT")
1566501232490:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1566501232492:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1566501232494:PEcAn.utils::status.end()
1566501232495:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1566501232496:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1566501232497:}
1566504222668:library(BioCro)
1567006524413:# ----------------------------------------------------------------------
1567006524449:# Load required libraries
1567006524450:# ----------------------------------------------------------------------
1567006524451:library(PEcAn.all)
1567006529187:#debugonce(PEcAn.DB::get.trait.data)
1567006529187:library(PEcAn.utils)
1567006529188:library(RCurl)
1567006529382:# make sure always to call status.end
1567006529383:options(warn=1)
1567006529384:options(error=quote({
1567006529385:PEcAn.utils::status.end("ERROR")
1567006529386:PEcAn.remote::kill.tunnel(settings)
1567006529386:if (!interactive()) {
1567006529387:q(status = 1)
1567006529388:}
1567006529389:}))
1567006533302:# ----------------------------------------------------------------------
1567006533303:# PEcAn Workflow
1567006533305:# ----------------------------------------------------------------------
1567006533306:# Open and read in settings file for PEcAn run.
1567006533307:args <- commandArgs(trailingOnly = TRUE)
1567006534829:if (is.na(args[1])){
1567006534831:settings <- PEcAn.settings::read.settings("biocro_darpa_files/pecan.biocro.darpa.xml")
1567006534832:} else {
1567006534833:settings.file <- args[1]
1567006534834:settings <- PEcAn.settings::read.settings(settings.file)
1567006534835:}
1567006536277:# Check for additional modules that will require adding settings
1567006536278:if("benchmarking" %in% names(settings)){
1567006536279:library(PEcAn.benchmark)
1567006536279:settings <- papply(settings, read_settings_BRR)
1567006536280:}
1567006537339:if("sitegroup" %in% names(settings)){
1567006537341:if(is.null(settings$sitegroup$nSite)){
1567006537342:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567006537343:sitegroupId = settings$sitegroup$id)
1567006537344:} else {
1567006537346:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567006537347:sitegroupId = settings$sitegroup$id,
1567006537348:nSite = settings$sitegroup$nSite)
1567006537349:}
1567006537350:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1567006537351:}
1567006538281:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1567006538282:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1567006540988:# Write pecan.CHECKED.xml
1567006540989:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1567006542372:# start from scratch if no continue is passed in
1567006542374:statusFile <- file.path(settings$outdir, "STATUS")
1567006543230:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1567006543231:file.remove(statusFile)
1567006543232:}
1567006544228:# Do conversions
1567006544230:settings <- PEcAn.workflow::do_conversions(settings)
1567006555068:# Query the trait database for data and priors
1567006555069:if (PEcAn.utils::status.check("TRAIT") == 0){
1567006555070:PEcAn.utils::status.start("TRAIT")
1567006555070:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1567006555071:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1567006555072:PEcAn.utils::status.end()
1567006555073:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1567006555074:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1567006555074:}
1567006607301:#!/usr/bin/env Rscript
1567006607302:#-------------------------------------------------------------------------------
1567006607303:# Copyright (c) 2012 University of Illinois, NCSA.
1567006607305:# All rights reserved. This program and the accompanying materials
1567006607306:# are made available under the terms of the
1567006607307:# University of Illinois/NCSA Open Source License
1567006607309:# which accompanies this distribution, and is available at
1567006607310:# http://opensource.ncsa.illinois.edu/license.html
1567006607311:#-------------------------------------------------------------------------------
1567006607312:# ----------------------------------------------------------------------
1567006607313:# Load required libraries
1567006607314:# ----------------------------------------------------------------------
1567006607314:library(PEcAn.all)
1567006612512:#debugonce(PEcAn.DB::get.trait.data)
1567006612513:library(PEcAn.utils)
1567006612514:library(RCurl)
1567006612712:# make sure always to call status.end
1567006612713:options(warn=1)
1567006612714:options(error=quote({
1567006612714:PEcAn.utils::status.end("ERROR")
1567006612715:PEcAn.remote::kill.tunnel(settings)
1567006612716:if (!interactive()) {
1567006612717:q(status = 1)
1567006612717:}
1567006612718:}))
1567006612720:#options(warning.expression=status.end("ERROR"))
1567006612722:# ----------------------------------------------------------------------
1567006612722:# PEcAn Workflow
1567006612723:# ----------------------------------------------------------------------
1567006612724:# Open and read in settings file for PEcAn run.
1567006612725:args <- commandArgs(trailingOnly = TRUE)
1567006612726:if (is.na(args[1])){
1567006612726:settings <- PEcAn.settings::read.settings("biocro_darpa_files/pecan.biocro.darpa.xml")
1567006612727:} else {
1567006612728:settings.file <- args[1]
1567006612729:settings <- PEcAn.settings::read.settings(settings.file)
1567006612729:}
1567006612758:# Check for additional modules that will require adding settings
1567006612758:if("benchmarking" %in% names(settings)){
1567006612759:library(PEcAn.benchmark)
1567006612760:settings <- papply(settings, read_settings_BRR)
1567006612761:}
1567006612763:if("sitegroup" %in% names(settings)){
1567006612763:if(is.null(settings$sitegroup$nSite)){
1567006612764:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567006612765:sitegroupId = settings$sitegroup$id)
1567006612766:} else {
1567006612766:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567006612767:sitegroupId = settings$sitegroup$id,
1567006612768:nSite = settings$sitegroup$nSite)
1567006612769:}
1567006612770:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1567006612771:}
1567006612772:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1567006612773:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1567006613319:# Write pecan.CHECKED.xml
1567006613320:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1567006613392:# start from scratch if no continue is passed in
1567006613393:statusFile <- file.path(settings$outdir, "STATUS")
1567006613394:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1567006613395:file.remove(statusFile)
1567006613395:}
1567006613397:# Do conversions
1567006613398:settings <- PEcAn.workflow::do_conversions(settings)
1567007045905:forceupdate <- TRUE
1567007052220:forceupdate
1567007055740:# Query the trait database for data and priors
1567007055742:if (PEcAn.utils::status.check("TRAIT") == 0){
1567007055743:PEcAn.utils::status.start("TRAIT")
1567007055745:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1567007055746:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1567007055748:PEcAn.utils::status.end()
1567007055749:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1567007055751:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1567007055752:}
1567009746415:# ----------------------------------------------------------------------
1567009746416:# Load required libraries
1567009746416:# ----------------------------------------------------------------------
1567009746417:library(PEcAn.all)
1567009751279:debugonce(PEcAn.DB::get.trait.data)
1567009751281:library(PEcAn.utils)
1567009751282:library(RCurl)
1567009751450:# make sure always to call status.end
1567009751451:options(warn=1)
1567009751452:options(error=quote({
1567009751453:PEcAn.utils::status.end("ERROR")
1567009751453:PEcAn.remote::kill.tunnel(settings)
1567009751454:if (!interactive()) {
1567009751455:q(status = 1)
1567009751456:}
1567009751456:}))
1567009751457:# ----------------------------------------------------------------------
1567009751458:# PEcAn Workflow
1567009751459:# ----------------------------------------------------------------------
1567009751459:# Open and read in settings file for PEcAn run.
1567009751460:args <- commandArgs(trailingOnly = TRUE)
1567009751461:if (is.na(args[1])){
1567009751462:settings <- PEcAn.settings::read.settings("biocro_darpa_files/pecan.biocro.darpa.xml")
1567009751462:} else {
1567009751463:settings.file <- args[1]
1567009751464:settings <- PEcAn.settings::read.settings(settings.file)
1567009751464:}
1567009751827:# Check for additional modules that will require adding settings
1567009751828:if("benchmarking" %in% names(settings)){
1567009751829:library(PEcAn.benchmark)
1567009751830:settings <- papply(settings, read_settings_BRR)
1567009751831:}
1567009752886:if("sitegroup" %in% names(settings)){
1567009752888:if(is.null(settings$sitegroup$nSite)){
1567009752889:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567009752891:sitegroupId = settings$sitegroup$id)
1567009752892:} else {
1567009752894:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567009752895:sitegroupId = settings$sitegroup$id,
1567009752896:nSite = settings$sitegroup$nSite)
1567009752898:}
1567009752899:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1567009752900:}
1567009755099:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1567009755100:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1567009759673:# Write pecan.CHECKED.xml
1567009759674:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1567009760286:# start from scratch if no continue is passed in
1567009760288:statusFile <- file.path(settings$outdir, "STATUS")
1567009761001:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1567009761003:file.remove(statusFile)
1567009761004:}
1567009761578:# Do conversions
1567009761580:settings <- PEcAn.workflow::do_conversions(settings)
1567009768078:# Query the trait database for data and priors
1567009768079:if (PEcAn.utils::status.check("TRAIT") == 0){
1567009768081:PEcAn.utils::status.start("TRAIT")
1567009768083:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1567009768084:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1567009768086:PEcAn.utils::status.end()
1567009768088:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1567009768089:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1567009768090:}
1567009829186:pft_ids
1567009834525:all_priors_list
1567009845414:trait.names
1567009950277:traceback()
1567010104493:#!/usr/bin/env Rscript
1567010104495:#-------------------------------------------------------------------------------
1567010104496:# Copyright (c) 2012 University of Illinois, NCSA.
1567010104498:# All rights reserved. This program and the accompanying materials
1567010104500:# are made available under the terms of the
1567010104501:# University of Illinois/NCSA Open Source License
1567010104502:# which accompanies this distribution, and is available at
1567010104503:# http://opensource.ncsa.illinois.edu/license.html
1567010104503:#-------------------------------------------------------------------------------
1567010104505:# ----------------------------------------------------------------------
1567010104506:# Load required libraries
1567010104506:# ----------------------------------------------------------------------
1567010104507:library(PEcAn.all)
1567010109364:debugonce(PEcAn.DB::get.trait.data)
1567010109365:library(PEcAn.utils)
1567010109366:library(RCurl)
1567010109540:# make sure always to call status.end
1567010109541:options(warn=1)
1567010109542:options(error=quote({
1567010109543:PEcAn.utils::status.end("ERROR")
1567010109543:PEcAn.remote::kill.tunnel(settings)
1567010109544:if (!interactive()) {
1567010109545:q(status = 1)
1567010109545:}
1567010109546:}))
1567010109547:#options(warning.expression=status.end("ERROR"))
1567010109549:# ----------------------------------------------------------------------
1567010109550:# PEcAn Workflow
1567010109551:# ----------------------------------------------------------------------
1567010109551:# Open and read in settings file for PEcAn run.
1567010109552:args <- commandArgs(trailingOnly = TRUE)
1567010109553:if (is.na(args[1])){
1567010109553:settings <- PEcAn.settings::read.settings("biocro_darpa_files/pecan.biocro.darpa.xml")
1567010109554:} else {
1567010109555:settings.file <- args[1]
1567010109555:settings <- PEcAn.settings::read.settings(settings.file)
1567010109556:}
1567010109584:# Check for additional modules that will require adding settings
1567010109584:if("benchmarking" %in% names(settings)){
1567010109585:library(PEcAn.benchmark)
1567010109586:settings <- papply(settings, read_settings_BRR)
1567010109587:}
1567010109588:if("sitegroup" %in% names(settings)){
1567010109589:if(is.null(settings$sitegroup$nSite)){
1567010109589:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567010109590:sitegroupId = settings$sitegroup$id)
1567010109591:} else {
1567010109591:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567010109592:sitegroupId = settings$sitegroup$id,
1567010109593:nSite = settings$sitegroup$nSite)
1567010109593:}
1567010109594:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1567010109595:}
1567010109596:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1567010109597:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1567010110155:# Write pecan.CHECKED.xml
1567010110155:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1567010110227:# start from scratch if no continue is passed in
1567010110228:statusFile <- file.path(settings$outdir, "STATUS")
1567010110229:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1567010110229:file.remove(statusFile)
1567010110230:}
1567010110232:# Do conversions
1567010110233:settings <- PEcAn.workflow::do_conversions(settings)
1567010110312:# Query the trait database for data and priors
1567010110313:if (PEcAn.utils::status.check("TRAIT") == 0){
1567010110314:PEcAn.utils::status.start("TRAIT")
1567010110314:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1567010110315:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1567010110316:PEcAn.utils::status.end()
1567010110316:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1567010110317:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1567010110318:}
1567010169549:dplyr::tbl(dbcon, "posteriors")
1567010218634:#!/usr/bin/env Rscript
1567010218635:#-------------------------------------------------------------------------------
1567010218636:# Copyright (c) 2012 University of Illinois, NCSA.
1567010218637:# All rights reserved. This program and the accompanying materials
1567010218638:# are made available under the terms of the
1567010218639:# University of Illinois/NCSA Open Source License
1567010218640:# which accompanies this distribution, and is available at
1567010218640:# http://opensource.ncsa.illinois.edu/license.html
1567010218641:#-------------------------------------------------------------------------------
1567010218642:# ----------------------------------------------------------------------
1567010218643:# Load required libraries
1567010218644:# ----------------------------------------------------------------------
1567010218644:library(PEcAn.all)
1567010223795:debugonce(PEcAn.DB::get.trait.data.pft)
1567010223798:library(PEcAn.utils)
1567010223799:library(RCurl)
1567010223998:# make sure always to call status.end
1567010223999:options(warn=1)
1567010223999:options(error=quote({
1567010224000:PEcAn.utils::status.end("ERROR")
1567010224001:PEcAn.remote::kill.tunnel(settings)
1567010224002:if (!interactive()) {
1567010224002:q(status = 1)
1567010224003:}
1567010224004:}))
1567010224005:#options(warning.expression=status.end("ERROR"))
1567010224007:# ----------------------------------------------------------------------
1567010224008:# PEcAn Workflow
1567010224008:# ----------------------------------------------------------------------
1567010224009:# Open and read in settings file for PEcAn run.
1567010224010:args <- commandArgs(trailingOnly = TRUE)
1567010224011:if (is.na(args[1])){
1567010224011:settings <- PEcAn.settings::read.settings("biocro_darpa_files/pecan.biocro.darpa.xml")
1567010224012:} else {
1567010224013:settings.file <- args[1]
1567010224013:settings <- PEcAn.settings::read.settings(settings.file)
1567010224014:}
1567010224042:# Check for additional modules that will require adding settings
1567010224043:if("benchmarking" %in% names(settings)){
1567010224044:library(PEcAn.benchmark)
1567010224044:settings <- papply(settings, read_settings_BRR)
1567010224045:}
1567010224047:if("sitegroup" %in% names(settings)){
1567010224047:if(is.null(settings$sitegroup$nSite)){
1567010224048:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567010224049:sitegroupId = settings$sitegroup$id)
1567010224049:} else {
1567010224050:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567010224051:sitegroupId = settings$sitegroup$id,
1567010224052:nSite = settings$sitegroup$nSite)
1567010224052:}
1567010224053:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1567010224054:}
1567010224055:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1567010224056:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1567010224603:# Write pecan.CHECKED.xml
1567010224604:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1567010224677:# start from scratch if no continue is passed in
1567010224677:statusFile <- file.path(settings$outdir, "STATUS")
1567010224678:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1567010224679:file.remove(statusFile)
1567010224680:}
1567010224681:# Do conversions
1567010224682:settings <- PEcAn.workflow::do_conversions(settings)
1567010232161:# Query the trait database for data and priors
1567010232162:if (PEcAn.utils::status.check("TRAIT") == 0){
1567010232163:PEcAn.utils::status.start("TRAIT")
1567010232164:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1567010232164:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1567010232165:PEcAn.utils::status.end()
1567010232166:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1567010232167:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1567010232168:}
1567010298298:dplyr::tbl(dbcon, "posteriors")
1567010306848:dplyr::tbl(dbcon, "posteriors") %>% dplyr::filter(pft_id == !!pftid)
1567010311825:pftid
1567010564615:dplyr::tbl(dbcon, "posteriors") %>%
1567010564616:dplyr::filter(pft_id == !!pftid) %>% dplyr::arrange(dplyr::desc(created_at))
1567010574727:dplyr::tbl(dbcon, "posteriors") %>%
1567010574729:dplyr::filter(pft_id == !!pftid) %>% dplyr::arrange(dplyr::desc(created_at)) %>%
1567010574731:head(1)
1567010582874:dplyr::tbl(dbcon, "posteriors") %>%
1567010582875:dplyr::filter(pft_id == !!pftid) %>% dplyr::arrange(dplyr::desc(created_at)) %>%
1567010582876:head(1) %>% dplyr::pull(id)
1567024030360:#!/usr/bin/env Rscript
1567024030361:#-------------------------------------------------------------------------------
1567024030362:# Copyright (c) 2012 University of Illinois, NCSA.
1567024030363:# All rights reserved. This program and the accompanying materials
1567024030363:# are made available under the terms of the
1567024030364:# University of Illinois/NCSA Open Source License
1567024030365:# which accompanies this distribution, and is available at
1567024030366:# http://opensource.ncsa.illinois.edu/license.html
1567024030366:#-------------------------------------------------------------------------------
1567024030368:# ----------------------------------------------------------------------
1567024030368:# Load required libraries
1567024030369:# ----------------------------------------------------------------------
1567024030370:library(PEcAn.all)
1567024035736:debugonce(PEcAn.DB::get.trait.data.pft)
1567024035739:library(PEcAn.utils)
1567024035740:library(RCurl)
1567024035983:# make sure always to call status.end
1567024035983:options(warn=1)
1567024035984:options(error=quote({
1567024035985:PEcAn.utils::status.end("ERROR")
1567024035986:PEcAn.remote::kill.tunnel(settings)
1567024035987:if (!interactive()) {
1567024035988:q(status = 1)
1567024035988:}
1567024035989:}))
1567024035991:#options(warning.expression=status.end("ERROR"))
1567024035993:# ----------------------------------------------------------------------
1567024035993:# PEcAn Workflow
1567024035994:# ----------------------------------------------------------------------
1567024035995:# Open and read in settings file for PEcAn run.
1567024035996:args <- commandArgs(trailingOnly = TRUE)
1567024035997:if (is.na(args[1])){
1567024035997:settings <- PEcAn.settings::read.settings("biocro_darpa_files/pecan.biocro.darpa.xml")
1567024035998:} else {
1567024035999:settings.file <- args[1]
1567024035999:settings <- PEcAn.settings::read.settings(settings.file)
1567024036000:}
1567024036029:# Check for additional modules that will require adding settings
1567024036030:if("benchmarking" %in% names(settings)){
1567024036030:library(PEcAn.benchmark)
1567024036031:settings <- papply(settings, read_settings_BRR)
1567024036032:}
1567024036033:if("sitegroup" %in% names(settings)){
1567024036034:if(is.null(settings$sitegroup$nSite)){
1567024036035:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567024036035:sitegroupId = settings$sitegroup$id)
1567024036036:} else {
1567024036037:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567024036038:sitegroupId = settings$sitegroup$id,
1567024036038:nSite = settings$sitegroup$nSite)
1567024036039:}
1567024036040:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1567024036040:}
1567024036042:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1567024036043:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1567024036591:# Write pecan.CHECKED.xml
1567024036592:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1567024036665:# start from scratch if no continue is passed in
1567024036666:statusFile <- file.path(settings$outdir, "STATUS")
1567024036667:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1567024036668:file.remove(statusFile)
1567024036669:}
1567024036670:# Do conversions
1567024036671:settings <- PEcAn.workflow::do_conversions(settings)
1567024041092:# Query the trait database for data and priors
1567024041094:if (PEcAn.utils::status.check("TRAIT") == 0){
1567024041095:PEcAn.utils::status.start("TRAIT")
1567024041097:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1567024041099:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1567024041100:PEcAn.utils::status.end()
1567024041102:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1567024041103:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1567024041104:}
1567024201850:if (!forceupdate) {
1567024201852:if (is.null(pft$posteriorid)) {
1567024201853:recent_posterior <- dplyr::tbl(dbcon, "posteriors") %>%
1567024201855:dplyr::filter(pft_id == !!pftid) %>%
1567024201856:dplyr::arrange(dplyr::desc(created_at)) %>%
1567024201857:head(1) %>%
1567024201859:dplyr::pull(id)
1567024201860:if (length(recent_posterior) > 0) {
1567024201861:pft$posteriorid <- recent_posterior
1567024201862:} else {
1567024201863:PEcAn.logger::logger.info("No previous posterior found. Forcing update")
1567024201864:}     }
1567024335135:if (!forceupdate) {
1567024335137:if (is.null(pft$posteriorid)) {
1567024335138:# pft$posteriorid <- dplyr::tbl(dbcon, "posteriors") %>%
1567024335140:#   dplyr::filter(pft_id == !!pftid) %>% dplyr::arrange(dplyr::desc(created_at)) %>%
1567024335141:#   head(1) %>% dplyr::pull(id)
1567024335143:recent_posterior <- dplyr::tbl(dbcon, "posteriors") %>%
1567024335145:dplyr::filter(pft_id == !!pftid) %>%
1567024335146:dplyr::arrange(dplyr::desc(created_at)) %>%
1567024335147:head(1) %>%
1567024335148:dplyr::pull(id)
1567024335148:if (length(recent_posterior) > 0) {
1567024335149:pft$posteriorid <- recent_posterior
1567024335150:} else {
1567024335151:PEcAn.logger::logger.info("No previous posterior found. Forcing update")
1567024335152:}
1567024335153:}
1567024335153:if (!is.null(pft$posteriorid)) {
1567024335154:files <- dbfile.check(type = "Posterior", container.id = pft$posteriorid,
1567024335155:con = dbcon, return.all = TRUE)
1567024335156:need_files <- c(trait_data = "trait.data.Rdata",
1567024335157:priors = "prior.distns.Rdata", pft_membership = pft_member_filename)
1567024335158:ids <- match(need_files, files$file_name)
1567024335158:names(ids) <- names(need_files)
1567024335159:if (any(is.na(ids))) {
1567024335160:missing_files <- need_files[is.na(ids)]
1567024335161:PEcAn.logger::logger.info(paste0("Forcing meta-analysis update because ",
1567024335162:"the following files are missing from the posterior: ",
1567024335163:paste0(shQuote(missing_files), collapse = ", ")))
1567024335164:PEcAn.logger::logger.debug("\n `dbfile.check` returned the following output:\n",
1567024335165:PEcAn.logger::print2string(files), wrap = FALSE)
1567024335166:}
1567024335167:else {
1567024335168:PEcAn.logger::logger.debug("All posterior files are present. Performing additional checks ",
1567024335169:"to determine if meta-analysis needs to be updated.")
1567024335170:need_paths <- file.path(files$file_path[ids],
1567024335171:need_files)
1567024335172:names(need_paths) <- names(need_files)
1567024335173:files_exist <- file.exists(need_paths)
1567024335173:foundallfiles <- all(files_exist)
1567024335174:if (!foundallfiles) {
1567024335175:PEcAn.logger::logger.warn("The following files are in database but not found on disk: ",
1567024335176:paste(shQuote(need_files[!files_exist]),
1567024335177:collapse = ", "), ". ", "Re-running meta-analysis.")
1567024335178:}
1567024335179:else {
1567024335180:PEcAn.logger::logger.debug("Checking if PFT membership has changed.")
1567024335182:existing_membership <- utils::read.csv(need_paths[["pft_membership"]],
1567024335183:colClasses = c("double", "character", "character",
1567024335184:"character"), stringsAsFactors = FALSE,
1567024335185:na.strings = "")
1567024335186:diff_membership <- symmetric_setdiff(existing_membership,
1567024335187:pft_members, xname = "existing", yname = "current")
1567024335188:if (nrow(diff_membership) > 0) {
1567024335190:PEcAn.logger::logger.error("\n PFT membership has changed. \n",
1567024335191:"Difference is:\n", PEcAn.logger::print2string(diff_membership),
1567024335192:wrap = FALSE)
1567024335193:foundallfiles <- FALSE
1567024335194:}
1567024335195:PEcAn.logger::logger.debug("Checking if priors have changed")
1567024335196:existing_prior <- PEcAn.utils::load_local(need_paths[["priors"]])[["prior.distns"]]
1567024335198:diff_prior <- symmetric_setdiff(dplyr::as_tibble(prior.distns,
1567024335199:rownames = "trait"), dplyr::as_tibble(existing_prior,
1567024335200:rownames = "trait"))
1567024335201:if (nrow(diff_prior) > 0) {
1567024335202:PEcAn.logger::logger.error("\n Prior has changed. \n",
1567024335203:"Difference is:\n", PEcAn.logger::print2string(diff_prior),
1567024335205:wrap = FALSE)
1567024335206:foundallfiles <- FALSE
1567024335207:}
1567024335208:PEcAn.logger::logger.debug("Checking if trait data have changed")
1567024335209:existing_trait_data <- PEcAn.utils::load_local(need_paths[["trait_data"]])[["trait.data"]]
1567024335211:if (length(trait.data.check) != length(existing_trait_data)) {
1567024335212:PEcAn.logger::logger.warn("Lengths of new and existing `trait.data` differ. ",
1567024335213:"Re-running meta-analysis.")
1567024335214:foundallfiles <- FALSE
1567024335216:}
1567024335217:else if (length(trait.data.check) == 0) {
1567024335218:PEcAn.logger::logger.warn("New and existing trait data are both empty. Skipping this check.")
1567024335220:}
1567024335221:else {
1567024335222:current_traits <- dplyr::bind_rows(trait.data.check,
1567024335223:.id = "trait") %>% dplyr::select(-mean,
1567024335225:-stat)
1567024335226:existing_traits <- dplyr::bind_rows(existing_trait_data,
1567024335227:.id = "trait") %>% dplyr::select(-mean,
1567024335228:-stat)
1567024335230:diff_traits <- symmetric_setdiff(current_traits,
1567024335231:existing_traits)
1567024335232:if (nrow(diff_traits) > 0) {
1567024335234:diff_summary <- diff_traits %>% dplyr::count(source,
1567024335235:trait)
1567024335237:PEcAn.logger::logger.error("\n Prior has changed. \n",
1567024335238:"Here are the number of differing trait records by trait:\n",
1567024335239:PEcAn.logger::print2string(diff_summary),
1567024335241:wrap = FALSE)
1567024335242:foundallfiles <- FALSE
1567024335244:}
1567024335245:}
1567024335246:}
1567024335248:if (foundallfiles) {
1567024335249:PEcAn.logger::logger.info("Reusing existing files from posterior",
1567024335250:pft$posteriorid, "for PFT", shQuote(pft$name))
1567024335252:for (id in seq_len(nrow(files))) {
1567024335254:file.copy(from = file.path(files[[id, "file_path"]],
1567024335255:files[[id, "file_name"]]), to = file.path(pft$outdir,
1567024335257:files[[id, "file_name"]]))
1567024335258:}
1567024335260:done <- TRUE
1567024335261:if (length(list.files(pft$outdir, "post.distns.Rdata")) ==
1567024335263:0) {
1567024335264:all.files <- list.files(pft$outdir)
1567024335266:post.distn.file <- all.files[grep("post\\.distns\\..*\\.Rdata",
1567024335267:all.files)]
1567024335268:if (length(post.distn.file) > 1)
1567024335270:PEcAn.logger::logger.severe("get.trait.data.pft() doesn't know how to ",
1567024335271:"handle multiple `post.distns.*.Rdata` files.",
1567024335273:"Found the following files: ", paste(shQuote(post.distn.file),
1567024335275:collapse = ", "))
1567024335276:else if (length(post.distn.file) == 1) {
1567024335278:link_input <- file.path(pft[["outdir"]],
1567024335279:post.distn.file)
1567024335281:link_target <- file.path(pft[["outdir"]],
1567024335282:"post.distns.Rdata")
1567024335284:PEcAn.logger::logger.debug("Found exactly one posterior distribution file: ",
1567024335285:shQuote(link_input), ". Symlinking it to PFT output directory: ",
1567024335287:shQuote(link_target))
1567024335288:file.symlink(from = link_input, to = link_target)
1567024335290:}
1567024335292:else {
1567024335293:PEcAn.logger::logger.error("No previous posterior distribution file found. ",
1567024335295:"Most likely, trait data were retrieved, but meta-analysis ",
1567024335296:"was not run. Meta-analysis will be run.")
1567024335298:done <- FALSE
1567024335300:}
1567024335301:}
1567024335303:if (done)
1567024335304:return(pft)
1567024335306:}
1567024335308:}
1567024335309:}
1567024335311:}
1567024350690:recent_posterior
1567024367340:recent_posterior <- dplyr::tbl(dbcon, "posteriors") %>%
1567024367342:dplyr::filter(pft_id == !!pftid) %>%
1567024367343:dplyr::arrange(dplyr::desc(created_at)) %>%
1567024367344:head(1) %>%
1567024367346:dplyr::pull(id)
1567024397619:recent_posterior <- dplyr::tbl(dbcon, "posteriors") %>%
1567024397620:dplyr::filter(pft_id == !!pftid) %>%
1567024397622:dplyr::arrange(dplyr::desc(created_at)) %>%
1567024397623:head(1) %>%
1567024397625:dplyr::pull(id)
1567024397704:if (length(recent_posterior) > 0) {
1567024397705:pft$posteriorid <- recent_posterior
1567024397706:} else {
1567024397707:PEcAn.logger::logger.info("No previous posterior found. Forcing update")
1567024397708:}
1567024422168:exit()
1567024439640:PEcAn.DB::get.trait.data.pft
1567024851641:# ----------------------------------------------------------------------
1567024851642:# Load required libraries
1567024851643:# ----------------------------------------------------------------------
1567024851643:library(PEcAn.all)
1567024864829:PEcAn.DB::get.trait.data.pft
1567024888301:#debugonce(PEcAn.DB::get.trait.data.pft)
1567024888302:source("get.trait.data.R")
1567025008507:#debugonce(PEcAn.DB::get.trait.data.pft)
1567025008509:source("get.trait.data.R")
1567025017237:PEcAn.DB::get.trait.data.pft
1567029857953:.libPaths()
1567029975428:.libPaths("/home/kristinariemer/R/library")
1567029979209:.libPaths()
1567030009779:.libPaths("/home/kristinariemer/R_libs/")
1567030018274:.libPaths()
1567030192791:getwd()
1567030220034:library(devtools)
1567030228314:?load_all
1567093492106:.libPaths()
1567095506567:.libPaths()
1567095510947:.libPaths()
1567095678540:Sys.getenv('R_LIBS_USER')
1567096007378:library(cowplot)
1567096012986:install.packages(cowplot)
1567096019423:install.packages("cowplot")
1567104641893:.libPaths()
1567104816728:.libPaths()
1567104819766:.libPaths()
1567105373313:file.edit(".bash_profile")
1567105449770:.libPaths()
1567105454318:.libPaths()
1567106937634:library(scales)
1567106941675:library(ggplot2)
1567189191833:.libPaths()
1567189196047:.libPaths()
1567189273768:getwd()
1567189277039:list.files()
1567189282632:?list.files
1567189295053:list.files(all.files = TRUE)
1567189302061:.libPaths()
1567189572252:list.files(all.files = TRUE)
1567189574394:.libPaths()
1567189930520:.libPaths()
1567189949921:.libPaths()
1567519642790:.libPaths("R_libs/")
1567519649810:.libPaths()
1567519909453:.libPaths()
1567519921196:getwd()
1567519931286:setwd("pecan/")
1567519933014:.libPaths()
1567520064093:?.libPaths
1567531259346:library(PEcAn.DB)
1567531268290:get.trait.data.pft
1567531794255:library(PEcAn.all)
1567531802913:sessionInfo()
1567531822368:.libPaths()
1567531975403:# ----------------------------------------------------------------------
1567531975404:# Load required libraries
1567531975405:# ----------------------------------------------------------------------
1567531975405:.libPaths()
1567531977002:library(PEcAn.all)
1567531988587:library(PEcAn.utils)
1567531991139:library(RCurl)
1567531994083:# make sure always to call status.end
1567531994084:options(warn=1)
1567531994323:options(error=quote({
1567531994324:PEcAn.utils::status.end("ERROR")
1567531994325:PEcAn.remote::kill.tunnel(settings)
1567531994327:if (!interactive()) {
1567531994328:q(status = 1)
1567531994329:}
1567531994331:}))
1567534003757:library(devtools)
1567534017084:?load_all
1567534060459:get.trait.data.pft
1567534069625:library(PEcAn.all)
1567534076363:get.trait.data.pft
1567534125101:load_all("pecan/base/db/")
1567534147279:devtools::load_all("pecan/base/db/")
1567534163222:sessionInfo()
1567534169146:get.trait.data.pft
1567534192695:# ----------------------------------------------------------------------
1567534192696:# Load required libraries
1567534192698:# ----------------------------------------------------------------------
1567534192699:.libPaths()
1567534194679:library(PEcAn.all)
1567534239272:# ----------------------------------------------------------------------
1567534239273:# Load required libraries
1567534239274:# ----------------------------------------------------------------------
1567534239275:.libPaths()
1567534241330:library(PEcAn.DB)
1567534242544:library(PEcAn.all)
1567534271378:get.trait.data.pft()
1567534273464:get.trait.data.pft
1567534305046:# ----------------------------------------------------------------------
1567534305047:# Load required libraries
1567534305048:# ----------------------------------------------------------------------
1567534305049:.libPaths()
1567534306055:devtools::load_all(PEcAn.DB)
1567534341463:# ----------------------------------------------------------------------
1567534341464:# Load required libraries
1567534341465:# ----------------------------------------------------------------------
1567534341467:.libPaths()
1567534343671:devtools::load_all("pecan/base/db/")
1567534348368:library(PEcAn.all)
1567534364967:library(PEcAn.all)
1567534369453:library(PEcAn.utils)
1567534369454:library(RCurl)
1567534371583:devtools::load_all("pecan/base/db/")
1567534386951:get.trait.data.pft
1567534591093:devtools::load_all("pecan/base/db/")
1567534595436:library(PEcAn.all)
1567534619756:library(PEcAn.all)
1567534627844:devtools::load_all("pecan/base/db/")
1567534801309:sessionInfo()
1567534931978:devtools::load_all("pecan/base/db/")
1567534937586:devtools::load_all("pecan/base/all/")
1567534946027:#library(PEcAn.all)
1567534946028:library(PEcAn.utils)
1567534947918:library(RCurl)
1567534949468:# make sure always to call status.end
1567534949470:options(warn=1)
1567534949838:options(error=quote({
1567534949839:PEcAn.utils::status.end("ERROR")
1567534949841:PEcAn.remote::kill.tunnel(settings)
1567534949842:if (!interactive()) {
1567534949844:q(status = 1)
1567534949846:}
1567534949847:}))
1567534955238:# ----------------------------------------------------------------------
1567534955240:# PEcAn Workflow
1567534955242:# ----------------------------------------------------------------------
1567534955243:# Open and read in settings file for PEcAn run.
1567534955245:args <- commandArgs(trailingOnly = TRUE)
1567534956678:if (is.na(args[1])){
1567534956680:settings <- PEcAn.settings::read.settings("biocro_darpa_files/pecan.biocro.darpa.xml")
1567534956681:} else {
1567534956682:settings.file <- args[1]
1567534956683:settings <- PEcAn.settings::read.settings(settings.file)
1567534956684:}
1567534957711:# Check for additional modules that will require adding settings
1567534957713:if("benchmarking" %in% names(settings)){
1567534957714:library(PEcAn.benchmark)
1567534957716:settings <- papply(settings, read_settings_BRR)
1567534957717:}
1567534959659:if("sitegroup" %in% names(settings)){
1567534959660:if(is.null(settings$sitegroup$nSite)){
1567534959662:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567534959663:sitegroupId = settings$sitegroup$id)
1567534959665:} else {
1567534959666:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567534959666:sitegroupId = settings$sitegroup$id,
1567534959667:nSite = settings$sitegroup$nSite)
1567534959668:}
1567534959669:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1567534959670:}
1567534960925:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1567534960927:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1567534964647:# Write pecan.CHECKED.xml
1567534964649:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1567534966369:# start from scratch if no continue is passed in
1567534966369:statusFile <- file.path(settings$outdir, "STATUS")
1567535001090:# ----------------------------------------------------------------------
1567535001091:# Load required libraries
1567535001093:# ----------------------------------------------------------------------
1567535001095:#.libPaths()
1567535001096:devtools::load_all("pecan/base/db/")
1567535002775:devtools::load_all("pecan/base/all/")
1567535004053:#library(PEcAn.all)
1567535004054:library(PEcAn.utils)
1567535004653:library(RCurl)
1567535016321:# ----------------------------------------------------------------------
1567535016322:# Load required libraries
1567535016323:# ----------------------------------------------------------------------
1567535016324:#.libPaths()
1567535016325:devtools::load_all("pecan/base/db/")
1567535021443:devtools::load_all("pecan/base/all/")
1567535027781:#library(PEcAn.all)
1567535027783:library(PEcAn.utils)
1567535029403:library(RCurl)
1567535031666:# make sure always to call status.end
1567535031667:options(warn=1)
1567535032570:options(error=quote({
1567535032572:PEcAn.utils::status.end("ERROR")
1567535032573:PEcAn.remote::kill.tunnel(settings)
1567535032575:if (!interactive()) {
1567535032576:q(status = 1)
1567535032577:}
1567535032579:}))
1567535033831:# ----------------------------------------------------------------------
1567535033833:# PEcAn Workflow
1567535033835:# ----------------------------------------------------------------------
1567535033836:# Open and read in settings file for PEcAn run.
1567535033837:args <- commandArgs(trailingOnly = TRUE)
1567535035010:if (is.na(args[1])){
1567535035012:settings <- PEcAn.settings::read.settings("biocro_darpa_files/pecan.biocro.darpa.xml")
1567535035014:} else {
1567535035015:settings.file <- args[1]
1567535035017:settings <- PEcAn.settings::read.settings(settings.file)
1567535035018:}
1567535036718:# Check for additional modules that will require adding settings
1567535036719:if("benchmarking" %in% names(settings)){
1567535036721:library(PEcAn.benchmark)
1567535036723:settings <- papply(settings, read_settings_BRR)
1567535036724:}
1567535038236:if("sitegroup" %in% names(settings)){
1567535038238:if(is.null(settings$sitegroup$nSite)){
1567535038239:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567535038241:sitegroupId = settings$sitegroup$id)
1567535038242:} else {
1567535038244:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567535038246:sitegroupId = settings$sitegroup$id,
1567535038247:nSite = settings$sitegroup$nSite)
1567535038248:}
1567535038248:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1567535038249:}
1567535039595:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1567535039597:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1567535041465:# Write pecan.CHECKED.xml
1567535041466:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1567535043595:# start from scratch if no continue is passed in
1567535043596:statusFile <- file.path(settings$outdir, "STATUS")
1567535045317:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1567535045318:file.remove(statusFile)
1567535045320:}
1567535046875:# Do conversions
1567535046877:settings <- PEcAn.workflow::do_conversions(settings)
1567535049493:# Query the trait database for data and priors
1567535049495:if (PEcAn.utils::status.check("TRAIT") == 0){
1567535049496:PEcAn.utils::status.start("TRAIT")
1567535049498:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1567535049499:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1567535049501:PEcAn.utils::status.end()
1567535049503:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1567535049504:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1567535049505:}
1567535061780:get.trait.data.pft
1567535111250:# ----------------------------------------------------------------------
1567535111251:# Load required libraries
1567535111251:# ----------------------------------------------------------------------
1567535111252:#.libPaths()
1567535111253:devtools::load_all("pecan/base/db/")
1567535116261:devtools::load_all("pecan/base/all/")
1567535129749:#library(PEcAn.all)
1567535129751:debugonce(PEcAn.DB::get.trait.data.pft)
1567535131263:library(PEcAn.utils)
1567535131634:library(RCurl)
1567535132049:# make sure always to call status.end
1567535132051:options(warn=1)
1567535132386:options(error=quote({
1567535132388:PEcAn.utils::status.end("ERROR")
1567535132389:PEcAn.remote::kill.tunnel(settings)
1567535132391:if (!interactive()) {
1567535132392:q(status = 1)
1567535132392:}
1567535132393:}))
1567535133013:# ----------------------------------------------------------------------
1567535133015:# PEcAn Workflow
1567535133016:# ----------------------------------------------------------------------
1567535133018:# Open and read in settings file for PEcAn run.
1567535133019:args <- commandArgs(trailingOnly = TRUE)
1567535133489:if (is.na(args[1])){
1567535133490:settings <- PEcAn.settings::read.settings("biocro_darpa_files/pecan.biocro.darpa.xml")
1567535133492:} else {
1567535133494:settings.file <- args[1]
1567535133495:settings <- PEcAn.settings::read.settings(settings.file)
1567535133497:}
1567535134034:# Check for additional modules that will require adding settings
1567535134036:if("benchmarking" %in% names(settings)){
1567535134037:library(PEcAn.benchmark)
1567535134038:settings <- papply(settings, read_settings_BRR)
1567535134039:}
1567535134583:if("sitegroup" %in% names(settings)){
1567535134584:if(is.null(settings$sitegroup$nSite)){
1567535134586:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567535134587:sitegroupId = settings$sitegroup$id)
1567535134589:} else {
1567535134590:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567535134592:sitegroupId = settings$sitegroup$id,
1567535134593:nSite = settings$sitegroup$nSite)
1567535134594:}
1567535134595:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1567535134595:}
1567535135314:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1567535135315:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1567535135893:# Write pecan.CHECKED.xml
1567535135895:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1567535136624:# start from scratch if no continue is passed in
1567535136626:statusFile <- file.path(settings$outdir, "STATUS")
1567535137154:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1567535137156:file.remove(statusFile)
1567535137157:}
1567535137676:# Do conversions
1567535137684:settings <- PEcAn.workflow::do_conversions(settings)
1567535138633:# Query the trait database for data and priors
1567535138635:if (PEcAn.utils::status.check("TRAIT") == 0){
1567535138636:PEcAn.utils::status.start("TRAIT")
1567535138638:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1567535138639:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1567535138641:PEcAn.utils::status.end()
1567535138642:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1567535138643:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1567535138644:}
1567535204191:#!/usr/bin/env Rscript
1567535204192:#-------------------------------------------------------------------------------
1567535204194:# Copyright (c) 2012 University of Illinois, NCSA.
1567535204195:# All rights reserved. This program and the accompanying materials
1567535204197:# are made available under the terms of the
1567535204199:# University of Illinois/NCSA Open Source License
1567535204200:# which accompanies this distribution, and is available at
1567535204202:# http://opensource.ncsa.illinois.edu/license.html
1567535204203:#-------------------------------------------------------------------------------
1567535204204:# ----------------------------------------------------------------------
1567535204205:# Load required libraries
1567535204205:# ----------------------------------------------------------------------
1567535204206:#.libPaths()
1567535204207:devtools::load_all("pecan/base/db/")
1567535206929:devtools::load_all("pecan/base/all/")
1567535211613:#library(PEcAn.all)
1567535211614:debugonce(PEcAn.DB::get.trait.data.pft)
1567535211615:library(PEcAn.utils)
1567535211616:library(RCurl)
1567535211796:# make sure always to call status.end
1567535211797:options(warn=1)
1567535211798:options(error=quote({
1567535211798:PEcAn.utils::status.end("ERROR")
1567535211799:PEcAn.remote::kill.tunnel(settings)
1567535211800:if (!interactive()) {
1567535211801:q(status = 1)
1567535211801:}
1567535211802:}))
1567535211803:#options(warning.expression=status.end("ERROR"))
1567535211805:# ----------------------------------------------------------------------
1567535211806:# PEcAn Workflow
1567535211807:# ----------------------------------------------------------------------
1567535211808:# Open and read in settings file for PEcAn run.
1567535211808:args <- commandArgs(trailingOnly = TRUE)
1567535211809:if (is.na(args[1])){
1567535211810:settings <- PEcAn.settings::read.settings("biocro_darpa_files/pecan.biocro.darpa.xml")
1567535211811:} else {
1567535211811:settings.file <- args[1]
1567535211812:settings <- PEcAn.settings::read.settings(settings.file)
1567535211813:}
1567535211844:# Check for additional modules that will require adding settings
1567535211845:if("benchmarking" %in% names(settings)){
1567535211846:library(PEcAn.benchmark)
1567535211847:settings <- papply(settings, read_settings_BRR)
1567535211847:}
1567535211849:if("sitegroup" %in% names(settings)){
1567535211850:if(is.null(settings$sitegroup$nSite)){
1567535211851:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567535211851:sitegroupId = settings$sitegroup$id)
1567535211852:} else {
1567535211853:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567535211853:sitegroupId = settings$sitegroup$id,
1567535211854:nSite = settings$sitegroup$nSite)
1567535211855:}
1567535211855:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1567535211856:}
1567535211857:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1567535211858:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1567535212275:# Write pecan.CHECKED.xml
1567535212276:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1567535212358:# start from scratch if no continue is passed in
1567535212359:statusFile <- file.path(settings$outdir, "STATUS")
1567535212360:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1567535212360:file.remove(statusFile)
1567535212361:}
1567535212364:# Do conversions
1567535212365:settings <- PEcAn.workflow::do_conversions(settings)
1567535212454:# Query the trait database for data and priors
1567535212455:if (PEcAn.utils::status.check("TRAIT") == 0){
1567535212456:PEcAn.utils::status.start("TRAIT")
1567535212456:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1567535212457:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1567535212458:PEcAn.utils::status.end()
1567535212459:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1567535212460:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1567535212461:}
1567535580750:dplyr::tbl(dbcon, "posteriors") %>%
1567535580751:dplyr::filter(pft_id == !!pftid) %>%
1567535580752:dplyr::arrange(dplyr::desc(created_at)) %>%
1567535580754:head(1) %>%
1567535580755:dplyr::pull(id)
1567535596856:dplyr::tbl(dbcon, "posteriors") %>%
1567535596857:dplyr::filter(pft_id == !!pftid) %>%
1567535596858:dplyr::arrange(dplyr::desc(created_at)) %>%
1567535596860:head(1)
1567535626480:test <- dplyr::tbl(dbcon, "posteriors") %>%
1567535626482:dplyr::filter(pft_id == !!pftid) %>%
1567535626483:dplyr::arrange(dplyr::desc(created_at)) %>%
1567535626485:head(1)
1567535627874:test
1567535640838:tes %>% dplyr::pull(id)
1567535645432:test %>% dplyr::pull(id)
1567535654028:?pull
1567535679644:dplyr::tbl(dbcon, "posteriors")
1567535692389:dplyr::tbl(dbcon, "posteriors") %>% dplyr::pull(id)
1567535698573:test %>% dplyr::pull(id)
1567535750004:dplyr::tbl(dbcon, "posteriors")
1567535754813:test %>% dplyr::pull(1)
1567535811816:dplyr::tbl(dbcon, "posteriors") %>%
1567535811817:dplyr::filter(pft_id == !!pftid) %>%
1567535811819:dplyr::arrange(dplyr::desc(created_at)) %>%
1567535811820:head(1)
1567535824073:test2 <- dplyr::tbl(dbcon, "posteriors") %>%
1567535824075:dplyr::filter(pft_id == !!pftid) %>%
1567535824076:dplyr::arrange(dplyr::desc(created_at)) %>%
1567535824078:head(1)
1567535834189:length(test2)
1567535853220:test2
1567535859411:?length
1567535873709:nrow(test2)
1567535910088:dplyr::tbl(dbcon, "posteriors") %>%
1567535910090:dplyr::filter(pft_id == !!pftid)
1567535923355:test3 <- dplyr::tbl(dbcon, "posteriors") %>%
1567535923359:dplyr::filter(pft_id == !!pftid)
1567535927446:length(test3)
1567535931054:nrow(test3)
1567536044226:# ----------------------------------------------------------------------
1567536044227:# Load required libraries
1567536044229:# ----------------------------------------------------------------------
1567536044231:#.libPaths()
1567536044232:devtools::load_all("pecan/base/db/")
1567536048516:devtools::load_all("pecan/base/all/")
1567536065655:get.trait.data.pft()
1567536067595:get.trait.data.pft
1567536110286:#library(PEcAn.all)
1567536110287:debugonce(PEcAn.DB::get.trait.data.pft)
1567536110544:library(PEcAn.utils)
1567536110763:library(RCurl)
1567536110964:# make sure always to call status.end
1567536110965:options(warn=1)
1567536111134:options(error=quote({
1567536111135:PEcAn.utils::status.end("ERROR")
1567536111137:PEcAn.remote::kill.tunnel(settings)
1567536111138:if (!interactive()) {
1567536111139:q(status = 1)
1567536111141:}
1567536111142:}))
1567536112163:# ----------------------------------------------------------------------
1567536112165:# PEcAn Workflow
1567536112166:# ----------------------------------------------------------------------
1567536112167:# Open and read in settings file for PEcAn run.
1567536112169:args <- commandArgs(trailingOnly = TRUE)
1567536112493:if (is.na(args[1])){
1567536112495:settings <- PEcAn.settings::read.settings("biocro_darpa_files/pecan.biocro.darpa.xml")
1567536112496:} else {
1567536112498:settings.file <- args[1]
1567536112499:settings <- PEcAn.settings::read.settings(settings.file)
1567536112501:}
1567536112666:# Check for additional modules that will require adding settings
1567536112667:if("benchmarking" %in% names(settings)){
1567536112668:library(PEcAn.benchmark)
1567536112669:settings <- papply(settings, read_settings_BRR)
1567536112671:}
1567536112879:if("sitegroup" %in% names(settings)){
1567536112880:if(is.null(settings$sitegroup$nSite)){
1567536112881:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567536112882:sitegroupId = settings$sitegroup$id)
1567536112882:} else {
1567536112883:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567536112884:sitegroupId = settings$sitegroup$id,
1567536112884:nSite = settings$sitegroup$nSite)
1567536112885:}
1567536112886:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1567536112887:}
1567536113065:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1567536113066:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1567536113693:# Write pecan.CHECKED.xml
1567536113695:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1567536114389:# start from scratch if no continue is passed in
1567536114390:statusFile <- file.path(settings$outdir, "STATUS")
1567536114972:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1567536114973:file.remove(statusFile)
1567536114975:}
1567536115611:# Do conversions
1567536115612:settings <- PEcAn.workflow::do_conversions(settings)
1567536116390:# Query the trait database for data and priors
1567536116392:if (PEcAn.utils::status.check("TRAIT") == 0){
1567536116393:PEcAn.utils::status.start("TRAIT")
1567536116395:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1567536116396:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1567536116397:PEcAn.utils::status.end()
1567536116399:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1567536116400:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1567536116401:}
1567536175217:dplyr::tbl(dbcon, "posteriors") %>%
1567536175219:dplyr::filter(pft_id == !!pftid)
1567536188099:bla <- dplyr::tbl(dbcon, "posteriors") %>%
1567536188101:dplyr::filter(pft_id == !!pftid)
1567536193752:is.na(bla)
1567536222830:bla > 0
1567536231836:length(bla)
1567536385564:?dplyr::tbl
1567536472003:bla
1567536509255:?collect
1567536521705:bla %>% dplyr::collect()
1567536532782:length(bla %>% dplyr::collect())
1567536746199:# University of Illinois/NCSA Open Source License
1567536746200:# which accompanies this distribution, and is available at
1567536746201:# http://opensource.ncsa.illinois.edu/license.html
1567536746201:#-------------------------------------------------------------------------------
1567536746203:# ----------------------------------------------------------------------
1567536746204:# Load required libraries
1567536746204:# ----------------------------------------------------------------------
1567536746205:#.libPaths()
1567536746206:devtools::load_all("pecan/base/db/")
1567536748866:devtools::load_all("pecan/base/all/")
1567536753604:#library(PEcAn.all)
1567536753604:debugonce(PEcAn.DB::get.trait.data.pft)
1567536753605:library(PEcAn.utils)
1567536753606:library(RCurl)
1567536753786:# make sure always to call status.end
1567536753786:options(warn=1)
1567536753787:options(error=quote({
1567536753788:PEcAn.utils::status.end("ERROR")
1567536753789:PEcAn.remote::kill.tunnel(settings)
1567536753789:if (!interactive()) {
1567536753790:q(status = 1)
1567536753791:}
1567536753791:}))
1567536753793:#options(warning.expression=status.end("ERROR"))
1567536753794:# ----------------------------------------------------------------------
1567536753795:# PEcAn Workflow
1567536753796:# ----------------------------------------------------------------------
1567536753796:# Open and read in settings file for PEcAn run.
1567536753797:args <- commandArgs(trailingOnly = TRUE)
1567536753798:if (is.na(args[1])){
1567536753798:settings <- PEcAn.settings::read.settings("biocro_darpa_files/pecan.biocro.darpa.xml")
1567536753799:} else {
1567536753800:settings.file <- args[1]
1567536753800:settings <- PEcAn.settings::read.settings(settings.file)
1567536753801:}
1567536753833:# Check for additional modules that will require adding settings
1567536753833:if("benchmarking" %in% names(settings)){
1567536753834:library(PEcAn.benchmark)
1567536753835:settings <- papply(settings, read_settings_BRR)
1567536753836:}
1567536753837:if("sitegroup" %in% names(settings)){
1567536753838:if(is.null(settings$sitegroup$nSite)){
1567536753838:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567536753839:sitegroupId = settings$sitegroup$id)
1567536753840:} else {
1567536753840:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567536753841:sitegroupId = settings$sitegroup$id,
1567536753841:nSite = settings$sitegroup$nSite)
1567536753842:}
1567536753843:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1567536753843:}
1567536753845:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1567536753846:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1567536754274:# Write pecan.CHECKED.xml
1567536754275:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1567536754357:# start from scratch if no continue is passed in
1567536754358:statusFile <- file.path(settings$outdir, "STATUS")
1567536754359:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1567536754360:file.remove(statusFile)
1567536754360:}
1567536754362:# Do conversions
1567536754363:settings <- PEcAn.workflow::do_conversions(settings)
1567536754451:# Query the trait database for data and priors
1567536754452:if (PEcAn.utils::status.check("TRAIT") == 0){
1567536754453:PEcAn.utils::status.start("TRAIT")
1567536754454:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1567536754454:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1567536754455:PEcAn.utils::status.end()
1567536754456:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1567536754457:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1567536754457:}
1567536783685:devtools::load_all("pecan/base/db/")
1567536785341:devtools::load_all("pecan/base/all/")
1567536790060:#library(PEcAn.all)
1567536790060:#debugonce(PEcAn.DB::get.trait.data.pft)
1567536790061:library(PEcAn.utils)
1567536790062:library(RCurl)
1567536790256:# make sure always to call status.end
1567536790257:options(warn=1)
1567536790258:options(error=quote({
1567536790259:PEcAn.utils::status.end("ERROR")
1567536790259:PEcAn.remote::kill.tunnel(settings)
1567536790260:if (!interactive()) {
1567536790261:q(status = 1)
1567536790261:}
1567536790262:}))
1567536790264:#options(warning.expression=status.end("ERROR"))
1567536790266:# ----------------------------------------------------------------------
1567536790266:# PEcAn Workflow
1567536790267:# ----------------------------------------------------------------------
1567536790268:# Open and read in settings file for PEcAn run.
1567536790268:args <- commandArgs(trailingOnly = TRUE)
1567536790269:if (is.na(args[1])){
1567536790270:settings <- PEcAn.settings::read.settings("biocro_darpa_files/pecan.biocro.darpa.xml")
1567536790271:} else {
1567536790271:settings.file <- args[1]
1567536790272:settings <- PEcAn.settings::read.settings(settings.file)
1567536790273:}
1567536790305:# Check for additional modules that will require adding settings
1567536790305:if("benchmarking" %in% names(settings)){
1567536790306:library(PEcAn.benchmark)
1567536790307:settings <- papply(settings, read_settings_BRR)
1567536790307:}
1567536790309:if("sitegroup" %in% names(settings)){
1567536790309:if(is.null(settings$sitegroup$nSite)){
1567536790310:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567536790311:sitegroupId = settings$sitegroup$id)
1567536790311:} else {
1567536790312:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567536790313:sitegroupId = settings$sitegroup$id,
1567536790314:nSite = settings$sitegroup$nSite)
1567536790314:}
1567536790315:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1567536790316:}
1567536790317:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1567536790318:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1567536790727:# Write pecan.CHECKED.xml
1567536790728:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1567536790810:# start from scratch if no continue is passed in
1567536790811:statusFile <- file.path(settings$outdir, "STATUS")
1567536790812:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1567536790812:file.remove(statusFile)
1567536790813:}
1567536790815:# Do conversions
1567536790815:settings <- PEcAn.workflow::do_conversions(settings)
1567536790904:# Query the trait database for data and priors
1567536790905:if (PEcAn.utils::status.check("TRAIT") == 0){
1567536790906:PEcAn.utils::status.start("TRAIT")
1567536790906:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1567536790907:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1567536790908:PEcAn.utils::status.end()
1567536790908:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1567536790909:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1567536790910:}
1567536805982:# Run the PEcAn meta.analysis
1567536805983:if(!is.null(settings$meta.analysis)) {
1567536805984:if (PEcAn.utils::status.check("META") == 0){
1567536805984:PEcAn.utils::status.start("META")
1567536805985:PEcAn.MA::runModule.run.meta.analysis(settings)
1567536805986:PEcAn.utils::status.end()
1567536805987:}
1567536805988:}
1567536823398:# Write model specific configs
1567536823400:if (PEcAn.utils::status.check("CONFIG") == 0){
1567536823401:PEcAn.utils::status.start("CONFIG")
1567536823403:settings <- PEcAn.workflow::runModule.run.write.configs(settings)
1567536823404:PEcAn.settings::write.settings(settings, outputfile='pecan.CONFIGS.xml')
1567536823406:PEcAn.utils::status.end()
1567536823407:} else if (file.exists(file.path(settings$outdir, 'pecan.CONFIGS.xml'))) {
1567536823408:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.CONFIGS.xml'))
1567536823409:}
1567536847220:devtools::load_all("pecan/base/db/")
1567536849884:devtools::load_all("pecan/base/all/")
1567536854825:#library(PEcAn.all)
1567536854826:#debugonce(PEcAn.DB::get.trait.data.pft)
1567536854826:library(PEcAn.utils)
1567536854827:library(RCurl)
1567536855005:# make sure always to call status.end
1567536855006:options(warn=1)
1567536855006:options(error=quote({
1567536855007:PEcAn.utils::status.end("ERROR")
1567536855008:PEcAn.remote::kill.tunnel(settings)
1567536855009:if (!interactive()) {
1567536855009:q(status = 1)
1567536855010:}
1567536855011:}))
1567536855012:#options(warning.expression=status.end("ERROR"))
1567536855014:# ----------------------------------------------------------------------
1567536855015:# PEcAn Workflow
1567536855016:# ----------------------------------------------------------------------
1567536855016:# Open and read in settings file for PEcAn run.
1567536855017:args <- commandArgs(trailingOnly = TRUE)
1567536855018:if (is.na(args[1])){
1567536855019:settings <- PEcAn.settings::read.settings("biocro_darpa_files/pecan.biocro.darpa.xml")
1567536855019:} else {
1567536855020:settings.file <- args[1]
1567536855021:settings <- PEcAn.settings::read.settings(settings.file)
1567536855021:}
1567536855053:# Check for additional modules that will require adding settings
1567536855054:if("benchmarking" %in% names(settings)){
1567536855054:library(PEcAn.benchmark)
1567536855055:settings <- papply(settings, read_settings_BRR)
1567536855056:}
1567536855057:if("sitegroup" %in% names(settings)){
1567536855058:if(is.null(settings$sitegroup$nSite)){
1567536855059:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567536855059:sitegroupId = settings$sitegroup$id)
1567536855060:} else {
1567536855061:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567536855061:sitegroupId = settings$sitegroup$id,
1567536855062:nSite = settings$sitegroup$nSite)
1567536855063:}
1567536855063:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1567536855064:}
1567536855066:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1567536855066:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1567536855476:# Write pecan.CHECKED.xml
1567536855477:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1567536855557:# start from scratch if no continue is passed in
1567536855557:statusFile <- file.path(settings$outdir, "STATUS")
1567536855558:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1567536855559:file.remove(statusFile)
1567536855560:}
1567536855562:# Do conversions
1567536855562:settings <- PEcAn.workflow::do_conversions(settings)
1567536855651:# Query the trait database for data and priors
1567536855651:if (PEcAn.utils::status.check("TRAIT") == 0){
1567536855652:PEcAn.utils::status.start("TRAIT")
1567536855653:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1567536855653:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1567536855654:PEcAn.utils::status.end()
1567536855655:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1567536855656:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1567536855657:}
1567536893592:# Run the PEcAn meta.analysis
1567536893594:if(!is.null(settings$meta.analysis)) {
1567536893595:if (PEcAn.utils::status.check("META") == 0){
1567536893596:PEcAn.utils::status.start("META")
1567536893598:PEcAn.MA::runModule.run.meta.analysis(settings)
1567536893599:PEcAn.utils::status.end()
1567536893601:}
1567536893602:}
1567536895414:# Write model specific configs
1567536895415:if (PEcAn.utils::status.check("CONFIG") == 0){
1567536895416:PEcAn.utils::status.start("CONFIG")
1567536895418:settings <- PEcAn.workflow::runModule.run.write.configs(settings)
1567536895419:PEcAn.settings::write.settings(settings, outputfile='pecan.CONFIGS.xml')
1567536895420:PEcAn.utils::status.end()
1567536895421:} else if (file.exists(file.path(settings$outdir, 'pecan.CONFIGS.xml'))) {
1567536895423:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.CONFIGS.xml'))
1567536895424:}
1567536901071:if ((length(which(commandArgs() == "--advanced")) != 0) &&
1567536901073:(PEcAn.utils::status.check("ADVANCED") == 0)) {
1567536901075:PEcAn.utils::status.start("ADVANCED")
1567536901076:q();
1567536901078:}
1567536902664:# Start ecosystem model runs
1567536902666:if (PEcAn.utils::status.check("MODEL") == 0) {
1567536902668:PEcAn.utils::status.start("MODEL")
1567536902669:PEcAn.remote::runModule.start.model.runs(settings, stop.on.error = FALSE)
1567536902671:PEcAn.utils::status.end()
1567536902673:}
1567536920598:traceback()
1567536981987:?is.MultiSettings
1567537078358:PEcAn.settings::is.MultiSettings
1567537308238:# ----------------------------------------------------------------------
1567537308238:# Load required libraries
1567537308239:# ----------------------------------------------------------------------
1567537308240:#.libPaths()
1567537308241:devtools::load_all("pecan/base/db/")
1567537312880:devtools::load_all("pecan/base/all/")
1567537405354:#library(PEcAn.all)
1567537405355:#debugonce(PEcAn.DB::get.trait.data.pft)
1567537405356:debugonce(PEcAn.remote::runModule.start.model.runs)
1567537407369:library(PEcAn.utils)
1567537408267:library(RCurl)
1567537409092:# make sure always to call status.end
1567537409093:options(warn=1)
1567537409830:options(error=quote({
1567537409831:PEcAn.utils::status.end("ERROR")
1567537409832:PEcAn.remote::kill.tunnel(settings)
1567537409833:if (!interactive()) {
1567537409834:q(status = 1)
1567537409835:}
1567537409835:}))
1567537411067:# ----------------------------------------------------------------------
1567537411068:# PEcAn Workflow
1567537411068:# ----------------------------------------------------------------------
1567537411069:# Open and read in settings file for PEcAn run.
1567537411070:args <- commandArgs(trailingOnly = TRUE)
1567537412068:if (is.na(args[1])){
1567537412069:settings <- PEcAn.settings::read.settings("biocro_darpa_files/pecan.biocro.darpa.xml")
1567537412069:} else {
1567537412070:settings.file <- args[1]
1567537412071:settings <- PEcAn.settings::read.settings(settings.file)
1567537412072:}
1567537413339:# Check for additional modules that will require adding settings
1567537413340:if("benchmarking" %in% names(settings)){
1567537413341:library(PEcAn.benchmark)
1567537413342:settings <- papply(settings, read_settings_BRR)
1567537413343:}
1567537414585:if("sitegroup" %in% names(settings)){
1567537414586:if(is.null(settings$sitegroup$nSite)){
1567537414587:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567537414588:sitegroupId = settings$sitegroup$id)
1567537414589:} else {
1567537414590:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567537414590:sitegroupId = settings$sitegroup$id,
1567537414591:nSite = settings$sitegroup$nSite)
1567537414592:}
1567537414593:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1567537414594:}
1567537415854:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1567537415854:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1567537417433:# Write pecan.CHECKED.xml
1567537417434:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1567537418890:# start from scratch if no continue is passed in
1567537418891:statusFile <- file.path(settings$outdir, "STATUS")
1567537420000:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1567537420001:file.remove(statusFile)
1567537420002:}
1567537421228:# Do conversions
1567537421229:settings <- PEcAn.workflow::do_conversions(settings)
1567537422614:# Query the trait database for data and priors
1567537422615:if (PEcAn.utils::status.check("TRAIT") == 0){
1567537422616:PEcAn.utils::status.start("TRAIT")
1567537422617:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1567537422618:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1567537422619:PEcAn.utils::status.end()
1567537422619:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1567537422620:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1567537422621:}
1567537426394:# Run the PEcAn meta.analysis
1567537426395:if(!is.null(settings$meta.analysis)) {
1567537426396:if (PEcAn.utils::status.check("META") == 0){
1567537426397:PEcAn.utils::status.start("META")
1567537426398:PEcAn.MA::runModule.run.meta.analysis(settings)
1567537426399:PEcAn.utils::status.end()
1567537426399:}
1567537426400:}
1567537451183:#!/usr/bin/env Rscript
1567537451184:#-------------------------------------------------------------------------------
1567537451185:# Copyright (c) 2012 University of Illinois, NCSA.
1567537451186:# All rights reserved. This program and the accompanying materials
1567537451187:# are made available under the terms of the
1567537451188:# University of Illinois/NCSA Open Source License
1567537451189:# which accompanies this distribution, and is available at
1567537451190:# http://opensource.ncsa.illinois.edu/license.html
1567537451198:#-------------------------------------------------------------------------------
1567537451199:# ----------------------------------------------------------------------
1567537451199:# Load required libraries
1567537451200:# ----------------------------------------------------------------------
1567537451201:#.libPaths()
1567537451201:devtools::load_all("pecan/base/db/")
1567537453870:devtools::load_all("pecan/base/all/")
1567537458646:#library(PEcAn.all)
1567537458647:#debugonce(PEcAn.DB::get.trait.data.pft)
1567537458648:debugonce(PEcAn.remote::runModule.start.model.runs)
1567537458649:library(PEcAn.utils)
1567537458650:library(RCurl)
1567537458832:# make sure always to call status.end
1567537458832:options(warn=1)
1567537458833:options(error=quote({
1567537458834:PEcAn.utils::status.end("ERROR")
1567537458835:PEcAn.remote::kill.tunnel(settings)
1567537458835:if (!interactive()) {
1567537458836:q(status = 1)
1567537458837:}
1567537458838:}))
1567537458839:#options(warning.expression=status.end("ERROR"))
1567537458841:# ----------------------------------------------------------------------
1567537458841:# PEcAn Workflow
1567537458842:# ----------------------------------------------------------------------
1567537458843:# Open and read in settings file for PEcAn run.
1567537458843:args <- commandArgs(trailingOnly = TRUE)
1567537458844:if (is.na(args[1])){
1567537458845:settings <- PEcAn.settings::read.settings("biocro_darpa_files/pecan.biocro.darpa.xml")
1567537458846:} else {
1567537458846:settings.file <- args[1]
1567537458847:settings <- PEcAn.settings::read.settings(settings.file)
1567537458847:}
1567537458880:# Check for additional modules that will require adding settings
1567537458881:if("benchmarking" %in% names(settings)){
1567537458882:library(PEcAn.benchmark)
1567537458882:settings <- papply(settings, read_settings_BRR)
1567537458883:}
1567537458885:if("sitegroup" %in% names(settings)){
1567537458885:if(is.null(settings$sitegroup$nSite)){
1567537458886:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567537458887:sitegroupId = settings$sitegroup$id)
1567537458888:} else {
1567537458888:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567537458889:sitegroupId = settings$sitegroup$id,
1567537458890:nSite = settings$sitegroup$nSite)
1567537458891:}
1567537458891:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1567537458892:}
1567537458894:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1567537458894:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1567537459300:# Write pecan.CHECKED.xml
1567537459301:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1567537459388:# start from scratch if no continue is passed in
1567537459388:statusFile <- file.path(settings$outdir, "STATUS")
1567537459389:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1567537459390:file.remove(statusFile)
1567537459391:}
1567537459392:# Do conversions
1567537459393:settings <- PEcAn.workflow::do_conversions(settings)
1567537459486:# Query the trait database for data and priors
1567537459486:if (PEcAn.utils::status.check("TRAIT") == 0){
1567537459487:PEcAn.utils::status.start("TRAIT")
1567537459488:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1567537459488:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1567537459489:PEcAn.utils::status.end()
1567537459490:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1567537459490:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1567537459491:}
1567537467167:# Run the PEcAn meta.analysis
1567537467167:if(!is.null(settings$meta.analysis)) {
1567537467168:if (PEcAn.utils::status.check("META") == 0){
1567537467169:PEcAn.utils::status.start("META")
1567537467170:PEcAn.MA::runModule.run.meta.analysis(settings)
1567537467171:PEcAn.utils::status.end()
1567537467172:}
1567537467172:}
1567537468827:# Write model specific configs
1567537468828:if (PEcAn.utils::status.check("CONFIG") == 0){
1567537468829:PEcAn.utils::status.start("CONFIG")
1567537468830:settings <- PEcAn.workflow::runModule.run.write.configs(settings)
1567537468831:PEcAn.settings::write.settings(settings, outputfile='pecan.CONFIGS.xml')
1567537468831:PEcAn.utils::status.end()
1567537468832:} else if (file.exists(file.path(settings$outdir, 'pecan.CONFIGS.xml'))) {
1567537468833:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.CONFIGS.xml'))
1567537468834:}
1567537474227:if ((length(which(commandArgs() == "--advanced")) != 0) &&
1567537474228:(PEcAn.utils::status.check("ADVANCED") == 0)) {
1567537474229:PEcAn.utils::status.start("ADVANCED")
1567537474230:q();
1567537474231:}
1567537475358:# Start ecosystem model runs
1567537475358:if (PEcAn.utils::status.check("MODEL") == 0) {
1567537475359:PEcAn.utils::status.start("MODEL")
1567537475360:PEcAn.remote::runModule.start.model.runs(settings, stop.on.error = FALSE)
1567537475361:PEcAn.utils::status.end()
1567537475362:}
1567538197996:#!/usr/bin/env Rscript
1567538197997:#-------------------------------------------------------------------------------
1567538197998:# Copyright (c) 2012 University of Illinois, NCSA.
1567538197999:# All rights reserved. This program and the accompanying materials
1567538198000:# are made available under the terms of the
1567538198001:# University of Illinois/NCSA Open Source License
1567538198001:# which accompanies this distribution, and is available at
1567538198002:# http://opensource.ncsa.illinois.edu/license.html
1567538198003:#-------------------------------------------------------------------------------
1567538198004:# ----------------------------------------------------------------------
1567538198005:# Load required libraries
1567538198006:# ----------------------------------------------------------------------
1567538198006:#.libPaths()
1567538198007:devtools::load_all("pecan/base/db/")
1567538200680:devtools::load_all("pecan/base/all/")
1567538205377:#library(PEcAn.all)
1567538205378:#debugonce(PEcAn.DB::get.trait.data.pft)
1567538205378:debugonce(PEcAn.remote::runModule.start.model.runs)
1567538205380:library(PEcAn.utils)
1567538205381:library(RCurl)
1567538205561:# make sure always to call status.end
1567538205562:options(warn=1)
1567538205563:options(error=quote({
1567538205563:PEcAn.utils::status.end("ERROR")
1567538205564:PEcAn.remote::kill.tunnel(settings)
1567538205565:if (!interactive()) {
1567538205565:q(status = 1)
1567538205566:}
1567538205567:}))
1567538205568:#options(warning.expression=status.end("ERROR"))
1567538205570:# ----------------------------------------------------------------------
1567538205571:# PEcAn Workflow
1567538205571:# ----------------------------------------------------------------------
1567538205572:# Open and read in settings file for PEcAn run.
1567538205573:args <- commandArgs(trailingOnly = TRUE)
1567538205573:if (is.na(args[1])){
1567538205574:settings <- PEcAn.settings::read.settings("biocro_darpa_files/pecan.biocro.darpa.xml")
1567538205575:} else {
1567538205576:settings.file <- args[1]
1567538205576:settings <- PEcAn.settings::read.settings(settings.file)
1567538205577:}
1567538205609:# Check for additional modules that will require adding settings
1567538205610:if("benchmarking" %in% names(settings)){
1567538205610:library(PEcAn.benchmark)
1567538205611:settings <- papply(settings, read_settings_BRR)
1567538205612:}
1567538205613:if("sitegroup" %in% names(settings)){
1567538205614:if(is.null(settings$sitegroup$nSite)){
1567538205615:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567538205615:sitegroupId = settings$sitegroup$id)
1567538205616:} else {
1567538205617:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567538205618:sitegroupId = settings$sitegroup$id,
1567538205618:nSite = settings$sitegroup$nSite)
1567538205619:}
1567538205620:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1567538205620:}
1567538205622:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1567538205623:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1567538206030:# Write pecan.CHECKED.xml
1567538206031:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1567538206113:# start from scratch if no continue is passed in
1567538206114:statusFile <- file.path(settings$outdir, "STATUS")
1567538206115:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1567538206115:file.remove(statusFile)
1567538206116:}
1567538206118:# Do conversions
1567538206118:settings <- PEcAn.workflow::do_conversions(settings)
1567538206208:# Query the trait database for data and priors
1567538206209:if (PEcAn.utils::status.check("TRAIT") == 0){
1567538206209:PEcAn.utils::status.start("TRAIT")
1567538206210:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1567538206211:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1567538206212:PEcAn.utils::status.end()
1567538206212:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1567538206213:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1567538206214:}
1567538209026:# Run the PEcAn meta.analysis
1567538209027:if(!is.null(settings$meta.analysis)) {
1567538209028:if (PEcAn.utils::status.check("META") == 0){
1567538209029:PEcAn.utils::status.start("META")
1567538209029:PEcAn.MA::runModule.run.meta.analysis(settings)
1567538209030:PEcAn.utils::status.end()
1567538209031:}
1567538209032:}
1567538209059:# Write model specific configs
1567538209060:if (PEcAn.utils::status.check("CONFIG") == 0){
1567538209061:PEcAn.utils::status.start("CONFIG")
1567538209062:settings <- PEcAn.workflow::runModule.run.write.configs(settings)
1567538209063:PEcAn.settings::write.settings(settings, outputfile='pecan.CONFIGS.xml')
1567538209064:PEcAn.utils::status.end()
1567538209065:} else if (file.exists(file.path(settings$outdir, 'pecan.CONFIGS.xml'))) {
1567538209066:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.CONFIGS.xml'))
1567538209067:}
1567538213201:if ((length(which(commandArgs() == "--advanced")) != 0) &&
1567538213202:(PEcAn.utils::status.check("ADVANCED") == 0)) {
1567538213202:PEcAn.utils::status.start("ADVANCED")
1567538213203:q();
1567538213204:}
1567538213205:# Start ecosystem model runs
1567538213206:if (PEcAn.utils::status.check("MODEL") == 0) {
1567538213207:PEcAn.utils::status.start("MODEL")
1567538213208:PEcAn.remote::runModule.start.model.runs(settings, stop.on.error = FALSE)
1567538213208:PEcAn.utils::status.end()
1567538213209:}
1567538404396:settings
1567538426399:is.MultiSettings(settings)
1567538433692:is.Settings(settings)
1567538486379:PEcAn.settings::is.MultiSettings(settings)
1567538495624:PEcAn.settings::is.Settings(settings)
1567538515006:sessionInfo()
1567538570514:#!/usr/bin/env Rscript
1567538570515:#-------------------------------------------------------------------------------
1567538570515:# Copyright (c) 2012 University of Illinois, NCSA.
1567538570516:# All rights reserved. This program and the accompanying materials
1567538570517:# are made available under the terms of the
1567538570518:# University of Illinois/NCSA Open Source License
1567538570519:# which accompanies this distribution, and is available at
1567538570520:# http://opensource.ncsa.illinois.edu/license.html
1567538570520:#-------------------------------------------------------------------------------
1567538570522:# ----------------------------------------------------------------------
1567538570522:# Load required libraries
1567538570523:# ----------------------------------------------------------------------
1567538570524:#.libPaths()
1567538570524:devtools::load_all("pecan/base/db/")
1567538573226:devtools::load_all("pecan/base/all/")
1567538578551:#library(PEcAn.all)
1567538578552:#debugonce(PEcAn.DB::get.trait.data.pft)
1567538578553:debugonce(PEcAn.remote::runModule.start.model.runs)
1567538578555:library(PEcAn.utils)
1567538578556:library(RCurl)
1567538578735:# make sure always to call status.end
1567538578736:options(warn=1)
1567538578737:options(error=quote({
1567538578738:PEcAn.utils::status.end("ERROR")
1567538578739:PEcAn.remote::kill.tunnel(settings)
1567538578740:if (!interactive()) {
1567538578741:q(status = 1)
1567538578741:}
1567538578742:}))
1567538578744:#options(warning.expression=status.end("ERROR"))
1567538578746:# ----------------------------------------------------------------------
1567538578747:# PEcAn Workflow
1567538578748:# ----------------------------------------------------------------------
1567538578749:# Open and read in settings file for PEcAn run.
1567538578749:args <- commandArgs(trailingOnly = TRUE)
1567538578750:if (is.na(args[1])){
1567538578751:settings <- PEcAn.settings::read.settings("biocro_darpa_files/pecan.biocro.darpa.xml")
1567538578752:} else {
1567538578753:settings.file <- args[1]
1567538578754:settings <- PEcAn.settings::read.settings(settings.file)
1567538578755:}
1567538578787:# Check for additional modules that will require adding settings
1567538578788:if("benchmarking" %in% names(settings)){
1567538578788:library(PEcAn.benchmark)
1567538578789:settings <- papply(settings, read_settings_BRR)
1567538578790:}
1567538578792:if("sitegroup" %in% names(settings)){
1567538578793:if(is.null(settings$sitegroup$nSite)){
1567538578794:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567538578794:sitegroupId = settings$sitegroup$id)
1567538578795:} else {
1567538578796:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567538578797:sitegroupId = settings$sitegroup$id,
1567538578798:nSite = settings$sitegroup$nSite)
1567538578799:}
1567538578800:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1567538578800:}
1567538578802:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1567538578803:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1567538579219:# Write pecan.CHECKED.xml
1567538579220:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1567538579303:# start from scratch if no continue is passed in
1567538579304:statusFile <- file.path(settings$outdir, "STATUS")
1567538579305:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1567538579306:file.remove(statusFile)
1567538579307:}
1567538579309:# Do conversions
1567538579310:settings <- PEcAn.workflow::do_conversions(settings)
1567538579400:# Query the trait database for data and priors
1567538579401:if (PEcAn.utils::status.check("TRAIT") == 0){
1567538579402:PEcAn.utils::status.start("TRAIT")
1567538579403:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1567538579404:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1567538579404:PEcAn.utils::status.end()
1567538579405:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1567538579406:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1567538579407:}
1567538582196:# Run the PEcAn meta.analysis
1567538582223:if(!is.null(settings$meta.analysis)) {
1567538582224:if (PEcAn.utils::status.check("META") == 0){
1567538582225:PEcAn.utils::status.start("META")
1567538582226:PEcAn.MA::runModule.run.meta.analysis(settings)
1567538582227:PEcAn.utils::status.end()
1567538582229:}
1567538582230:}
1567538582258:# Write model specific configs
1567538582258:if (PEcAn.utils::status.check("CONFIG") == 0){
1567538582259:PEcAn.utils::status.start("CONFIG")
1567538582260:settings <- PEcAn.workflow::runModule.run.write.configs(settings)
1567538582261:PEcAn.settings::write.settings(settings, outputfile='pecan.CONFIGS.xml')
1567538582261:PEcAn.utils::status.end()
1567538582262:} else if (file.exists(file.path(settings$outdir, 'pecan.CONFIGS.xml'))) {
1567538582263:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.CONFIGS.xml'))
1567538582264:}
1567538586363:if ((length(which(commandArgs() == "--advanced")) != 0) &&
1567538586363:(PEcAn.utils::status.check("ADVANCED") == 0)) {
1567538586364:PEcAn.utils::status.start("ADVANCED")
1567538586365:q();
1567538586366:}
1567538598272:library(PEcAn.settings)
1567538632022:devtools::load_all("pecan/base/settings/")
1567538647000:# Start ecosystem model runs
1567538647001:if (PEcAn.utils::status.check("MODEL") == 0) {
1567538647003:PEcAn.utils::status.start("MODEL")
1567538647005:PEcAn.remote::runModule.start.model.runs(settings, stop.on.error = FALSE)
1567538647006:PEcAn.utils::status.end()
1567538647008:}
1567541905022:.libPaths
1567541907475:.libPaths()
1567607634287:library(PEcAn.all)
1567608132799:library(PEcAn.all)
1567608156585:get.trait.data.pft
1567608186183:# ----------------------------------------------------------------------
1567608186185:# Load required libraries
1567608186186:# ----------------------------------------------------------------------
1567608186188:#.libPaths()
1567608186190:devtools::load_all("pecan/base/db/")
1567624294870:library(PEcAn.all)
1567624306279:get.trait.data.pft
1567624362522:library(PEcAn.all)
1567624367374:library(PEcAn.all)
1567624384246:library(PEcAn.utils)
1567624385613:library(RCurl)
1567624386786:# make sure always to call status.end
1567624386788:options(warn=1)
1567624387079:options(error=quote({
1567624387081:PEcAn.utils::status.end("ERROR")
1567624387083:PEcAn.remote::kill.tunnel(settings)
1567624387084:if (!interactive()) {
1567624387086:q(status = 1)
1567624387087:}
1567624387088:}))
1567624390384:# ----------------------------------------------------------------------
1567624390385:# PEcAn Workflow
1567624390387:# ----------------------------------------------------------------------
1567624390388:# Open and read in settings file for PEcAn run.
1567624390389:args <- commandArgs(trailingOnly = TRUE)
1567624391543:if (is.na(args[1])){
1567624391545:settings <- PEcAn.settings::read.settings("biocro_darpa_files/pecan.biocro.darpa.xml")
1567624391547:} else {
1567624391548:settings.file <- args[1]
1567624391549:settings <- PEcAn.settings::read.settings(settings.file)
1567624391550:}
1567624392668:# Check for additional modules that will require adding settings
1567624392669:if("benchmarking" %in% names(settings)){
1567624392671:library(PEcAn.benchmark)
1567624392672:settings <- papply(settings, read_settings_BRR)
1567624392673:}
1567624393752:if("sitegroup" %in% names(settings)){
1567624393754:if(is.null(settings$sitegroup$nSite)){
1567624393755:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567624393757:sitegroupId = settings$sitegroup$id)
1567624393758:} else {
1567624393759:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567624393760:sitegroupId = settings$sitegroup$id,
1567624393761:nSite = settings$sitegroup$nSite)
1567624393761:}
1567624393762:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1567624393763:}
1567624394756:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1567624394758:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1567624396815:# Write pecan.CHECKED.xml
1567624396817:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1567624397944:# start from scratch if no continue is passed in
1567624397945:statusFile <- file.path(settings$outdir, "STATUS")
1567624399269:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1567624399271:file.remove(statusFile)
1567624399273:}
1567624400427:# Do conversions
1567624400428:settings <- PEcAn.workflow::do_conversions(settings)
1567624402713:# Query the trait database for data and priors
1567624402714:if (PEcAn.utils::status.check("TRAIT") == 0){
1567624402716:PEcAn.utils::status.start("TRAIT")
1567624402718:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1567624402719:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1567624402721:PEcAn.utils::status.end()
1567624402723:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1567624402724:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1567624402725:}
1567624409781:# Run the PEcAn meta.analysis
1567624409782:if(!is.null(settings$meta.analysis)) {
1567624409784:if (PEcAn.utils::status.check("META") == 0){
1567624409785:PEcAn.utils::status.start("META")
1567624409787:PEcAn.MA::runModule.run.meta.analysis(settings)
1567624409788:PEcAn.utils::status.end()
1567624409788:}
1567624409789:}
1567624419783:# Write model specific configs
1567624419784:if (PEcAn.utils::status.check("CONFIG") == 0){
1567624419786:PEcAn.utils::status.start("CONFIG")
1567624419787:settings <- PEcAn.workflow::runModule.run.write.configs(settings)
1567624419788:PEcAn.settings::write.settings(settings, outputfile='pecan.CONFIGS.xml')
1567624419790:PEcAn.utils::status.end()
1567624419791:} else if (file.exists(file.path(settings$outdir, 'pecan.CONFIGS.xml'))) {
1567624419792:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.CONFIGS.xml'))
1567624419794:}
1567624426962:if ((length(which(commandArgs() == "--advanced")) != 0) &&
1567624426963:(PEcAn.utils::status.check("ADVANCED") == 0)) {
1567624426964:PEcAn.utils::status.start("ADVANCED")
1567624426964:q();
1567624426966:}
1567624428194:library(PEcAn.settings)
1567624429203:# Start ecosystem model runs
1567624429205:if (PEcAn.utils::status.check("MODEL") == 0) {
1567624429206:PEcAn.utils::status.start("MODEL")
1567624429208:PEcAn.remote::runModule.start.model.runs(settings, stop.on.error = FALSE)
1567624429209:PEcAn.utils::status.end()
1567624429211:}
1567624446503:# Get results of model runs
1567624446504:if (PEcAn.utils::status.check("OUTPUT") == 0) {
1567624446505:PEcAn.utils::status.start("OUTPUT")
1567624446506:runModule.get.results(settings)
1567624446507:PEcAn.utils::status.end()
1567624446508:}
1567624449574:# Run ensemble analysis on model output.
1567624449575:if ('ensemble' %in% names(settings) & PEcAn.utils::status.check("ENSEMBLE") == 0) {
1567624449576:PEcAn.utils::status.start("ENSEMBLE")
1567624449577:runModule.run.ensemble.analysis(settings, TRUE)
1567624449578:PEcAn.utils::status.end()
1567624449579:}
1567624454158:# Run sensitivity analysis and variance decomposition on model output
1567624454159:if ('sensitivity.analysis' %in% names(settings) & PEcAn.utils::status.check("SENSITIVITY") == 0) {
1567624454161:PEcAn.utils::status.start("SENSITIVITY")
1567624454162:runModule.run.sensitivity.analysis(settings)
1567624454164:PEcAn.utils::status.end()
1567624454165:}
1567624456665:# Run parameter data assimilation
1567624456666:if ('assim.batch' %in% names(settings)) {
1567624456668:if (PEcAn.utils::status.check("PDA") == 0) {
1567624456670:PEcAn.utils::status.start("PDA")
1567624456671:settings <- PEcAn.assim.batch::runModule.assim.batch(settings)
1567624456673:PEcAn.utils::status.end()
1567624456674:}
1567624456676:}
1567624458751:# Run state data assimilation
1567624458752:if ('state.data.assimilation' %in% names(settings)) {
1567624458752:if (PEcAn.utils::status.check("SDA") == 0) {
1567624458753:PEcAn.utils::status.start("SDA")
1567624458754:settings <- sda.enfk(settings)
1567624458755:PEcAn.utils::status.end()
1567624458755:}
1567624458756:}
1567624460219:# Run benchmarking
1567624460220:if("benchmarking" %in% names(settings) & "benchmark" %in% names(settings$benchmarking)){
1567624460220:PEcAn.utils::status.start("BENCHMARKING")
1567624460221:results <- papply(settings, function(x) calc_benchmark(x, bety))
1567624460222:PEcAn.utils::status.end()
1567624460223:}
1567624461658:# Pecan workflow complete
1567624461659:if (PEcAn.utils::status.check("FINISHED") == 0) {
1567624461660:PEcAn.utils::status.start("FINISHED")
1567624461661:PEcAn.remote::kill.tunnel(settings)
1567624461662:db.query(paste("UPDATE workflows SET finished_at=NOW() WHERE id=",
1567624461662:settings$workflow$id, "AND finished_at IS NULL"),
1567624461663:params = settings$database$bety)
1567624461664:# Send email if configured
1567624461665:if (!is.null(settings$email) && !is.null(settings$email$to) && (settings$email$to != "")) {
1567624461666:sendmail(settings$email$from, settings$email$to,
1567624461667:paste0("Workflow has finished executing at ", base::date()),
1567624461667:paste0("You can find the results on ", settings$email$url))
1567624461668:}
1567624461669:PEcAn.utils::status.end()
1567624461670:}
1567624463450:db.print.connections()
1567624464646:print("---------- PEcAn Workflow Complete ----------")
1567624924548:PEcAn.visualization::plot.netcdf("biocro_darpa_results/out/ENS-00001-9000000000/2004.nc", "LAI")
1567624958268:load("~/biocro_darpa_results/samples.Rdata")
1567625045892:PEcAn.visualization::plot.netcdf("biocro_darpa_results/out/ENS-00001-9000000000/2004.nc", "LAI")
1567625078010:sessionInfo()
1567626932802:# ----------------------------------------------------------------------
1567626932804:# Load required libraries
1567626932805:# ----------------------------------------------------------------------
1567626932807:#.libPaths()
1567626932808:#devtools::load_all("pecan/base/db/")
1567626932809:#devtools::load_all("pecan/base/all/")
1567626932810:library(PEcAn.all)
1567626947389:get.trait.data.pft
1567626988743:#debugonce(PEcAn.DB::get.trait.data.pft)
1567626988744:#debugonce(PEcAn.remote::runModule.start.model.runs)
1567626988746:library(PEcAn.utils)
1567626995207:library(RCurl)
1567626996024:# make sure always to call status.end
1567626996025:options(warn=1)
1567626998462:options(error=quote({
1567626998463:PEcAn.utils::status.end("ERROR")
1567626998465:PEcAn.remote::kill.tunnel(settings)
1567626998466:if (!interactive()) {
1567626998468:q(status = 1)
1567626998469:}
1567626998469:}))
1567627000240:# ----------------------------------------------------------------------
1567627000241:# PEcAn Workflow
1567627000242:# ----------------------------------------------------------------------
1567627000243:# Open and read in settings file for PEcAn run.
1567627000243:args <- commandArgs(trailingOnly = TRUE)
1567627016248:if (is.na(args[1])){
1567627016250:settings <- PEcAn.settings::read.settings("biocro_darpa_files/pecan.biocro.darpa.xml")
1567627016251:} else {
1567627016253:settings.file <- args[1]
1567627016255:settings <- PEcAn.settings::read.settings(settings.file)
1567627016256:}
1567627018022:# Check for additional modules that will require adding settings
1567627018024:if("benchmarking" %in% names(settings)){
1567627018025:library(PEcAn.benchmark)
1567627018027:settings <- papply(settings, read_settings_BRR)
1567627018028:}
1567627020047:if("sitegroup" %in% names(settings)){
1567627020048:if(is.null(settings$sitegroup$nSite)){
1567627020050:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567627020052:sitegroupId = settings$sitegroup$id)
1567627020053:} else {
1567627020055:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567627020057:sitegroupId = settings$sitegroup$id,
1567627020058:nSite = settings$sitegroup$nSite)
1567627020060:}
1567627020061:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1567627020061:}
1567627021446:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1567627021448:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1567627025228:# Write pecan.CHECKED.xml
1567627025230:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1567627027555:# start from scratch if no continue is passed in
1567627027556:statusFile <- file.path(settings$outdir, "STATUS")
1567627028788:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1567627028789:file.remove(statusFile)
1567627028789:}
1567627030412:# Do conversions
1567627030414:settings <- PEcAn.workflow::do_conversions(settings)
1567627032317:# Query the trait database for data and priors
1567627032318:if (PEcAn.utils::status.check("TRAIT") == 0){
1567627032320:PEcAn.utils::status.start("TRAIT")
1567627032321:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1567627032323:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1567627032325:PEcAn.utils::status.end()
1567627032326:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1567627032327:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1567627032328:}
1567627036998:# Run the PEcAn meta.analysis
1567627037000:if(!is.null(settings$meta.analysis)) {
1567627037002:if (PEcAn.utils::status.check("META") == 0){
1567627037003:PEcAn.utils::status.start("META")
1567627037004:PEcAn.MA::runModule.run.meta.analysis(settings)
1567627037006:PEcAn.utils::status.end()
1567627037008:}
1567627037009:}
1567627043066:# Write model specific configs
1567627043068:if (PEcAn.utils::status.check("CONFIG") == 0){
1567627043069:PEcAn.utils::status.start("CONFIG")
1567627043071:settings <- PEcAn.workflow::runModule.run.write.configs(settings)
1567627043073:PEcAn.settings::write.settings(settings, outputfile='pecan.CONFIGS.xml')
1567627043074:PEcAn.utils::status.end()
1567627043076:} else if (file.exists(file.path(settings$outdir, 'pecan.CONFIGS.xml'))) {
1567627043077:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.CONFIGS.xml'))
1567627043078:}
1567627049430:if ((length(which(commandArgs() == "--advanced")) != 0) &&
1567627049433:(PEcAn.utils::status.check("ADVANCED") == 0)) {
1567627049434:PEcAn.utils::status.start("ADVANCED")
1567627049436:q();
1567627049438:}
1567627051049:library(PEcAn.settings)
1567627052291:# Start ecosystem model runs
1567627052293:if (PEcAn.utils::status.check("MODEL") == 0) {
1567627052295:PEcAn.utils::status.start("MODEL")
1567627052296:PEcAn.remote::runModule.start.model.runs(settings, stop.on.error = FALSE)
1567627052298:PEcAn.utils::status.end()
1567627052300:}
1567627085105:# Get results of model runs
1567627085106:if (PEcAn.utils::status.check("OUTPUT") == 0) {
1567627085108:PEcAn.utils::status.start("OUTPUT")
1567627085110:runModule.get.results(settings)
1567627085111:PEcAn.utils::status.end()
1567627085113:}
1567627093099:# Run ensemble analysis on model output.
1567627093100:if ('ensemble' %in% names(settings) & PEcAn.utils::status.check("ENSEMBLE") == 0) {
1567627093102:PEcAn.utils::status.start("ENSEMBLE")
1567627093104:runModule.run.ensemble.analysis(settings, TRUE)
1567627093105:PEcAn.utils::status.end()
1567627093107:}
1567627111906:# Run sensitivity analysis and variance decomposition on model output
1567627111908:if ('sensitivity.analysis' %in% names(settings) & PEcAn.utils::status.check("SENSITIVITY") == 0) {
1567627111909:PEcAn.utils::status.start("SENSITIVITY")
1567627111910:runModule.run.sensitivity.analysis(settings)
1567627111912:PEcAn.utils::status.end()
1567627111913:}
1567627114131:# Run parameter data assimilation
1567627114133:if ('assim.batch' %in% names(settings)) {
1567627114134:if (PEcAn.utils::status.check("PDA") == 0) {
1567627114136:PEcAn.utils::status.start("PDA")
1567627114137:settings <- PEcAn.assim.batch::runModule.assim.batch(settings)
1567627114139:PEcAn.utils::status.end()
1567627114140:}
1567627114141:}
1567627115952:# Run state data assimilation
1567627115954:if ('state.data.assimilation' %in% names(settings)) {
1567627115955:if (PEcAn.utils::status.check("SDA") == 0) {
1567627115957:PEcAn.utils::status.start("SDA")
1567627115959:settings <- sda.enfk(settings)
1567627115960:PEcAn.utils::status.end()
1567627115961:}
1567627115963:}
1567627117165:# Run benchmarking
1567627117166:if("benchmarking" %in% names(settings) & "benchmark" %in% names(settings$benchmarking)){
1567627117168:PEcAn.utils::status.start("BENCHMARKING")
1567627117169:results <- papply(settings, function(x) calc_benchmark(x, bety))
1567627117170:PEcAn.utils::status.end()
1567627117170:}
1567627118204:# Pecan workflow complete
1567627118206:if (PEcAn.utils::status.check("FINISHED") == 0) {
1567627118208:PEcAn.utils::status.start("FINISHED")
1567627118209:PEcAn.remote::kill.tunnel(settings)
1567627118210:db.query(paste("UPDATE workflows SET finished_at=NOW() WHERE id=",
1567627118212:settings$workflow$id, "AND finished_at IS NULL"),
1567627118212:params = settings$database$bety)
1567627118214:# Send email if configured
1567627118214:if (!is.null(settings$email) && !is.null(settings$email$to) && (settings$email$to != "")) {
1567627118215:sendmail(settings$email$from, settings$email$to,
1567627118216:paste0("Workflow has finished executing at ", base::date()),
1567627118216:paste0("You can find the results on ", settings$email$url))
1567627118217:}
1567627118218:PEcAn.utils::status.end()
1567627118219:}
1567627119625:db.print.connections()
1567627121050:print("---------- PEcAn Workflow Complete ----------")
1567627165048:PEcAn.visualization::plot.netcdf("biocro_darpa_results/out/SA-median/2004.nc", "LAI")
1567627229126:#!/usr/bin/env Rscript
1567627229127:#-------------------------------------------------------------------------------
1567627229128:# Copyright (c) 2012 University of Illinois, NCSA.
1567627229129:# All rights reserved. This program and the accompanying materials
1567627229129:# are made available under the terms of the
1567627229130:# University of Illinois/NCSA Open Source License
1567627229131:# which accompanies this distribution, and is available at
1567627229131:# http://opensource.ncsa.illinois.edu/license.html
1567627229132:#-------------------------------------------------------------------------------
1567627229133:# ----------------------------------------------------------------------
1567627229134:# Load required libraries
1567627229134:# ----------------------------------------------------------------------
1567627229135:#.libPaths()
1567627229136:#devtools::load_all("pecan/base/db/")
1567627229136:#devtools::load_all("pecan/base/all/")
1567627229137:library(PEcAn.all)
1567627234510:#debugonce(PEcAn.DB::get.trait.data.pft)
1567627234511:#debugonce(PEcAn.remote::runModule.start.model.runs)
1567627234512:library(PEcAn.utils)
1567627234513:library(RCurl)
1567627234682:# make sure always to call status.end
1567627234683:options(warn=1)
1567627234684:options(error=quote({
1567627234684:PEcAn.utils::status.end("ERROR")
1567627234685:PEcAn.remote::kill.tunnel(settings)
1567627234686:if (!interactive()) {
1567627234686:q(status = 1)
1567627234687:}
1567627234688:}))
1567627234689:#options(warning.expression=status.end("ERROR"))
1567627234691:# ----------------------------------------------------------------------
1567627234691:# PEcAn Workflow
1567627234692:# ----------------------------------------------------------------------
1567627234693:# Open and read in settings file for PEcAn run.
1567627234694:args <- commandArgs(trailingOnly = TRUE)
1567627234694:if (is.na(args[1])){
1567627234695:settings <- PEcAn.settings::read.settings("biocro_darpa_files/pecan.biocro.darpa.xml")
1567627234696:} else {
1567627234696:settings.file <- args[1]
1567627234697:settings <- PEcAn.settings::read.settings(settings.file)
1567627234698:}
1567627234725:# Check for additional modules that will require adding settings
1567627234726:if("benchmarking" %in% names(settings)){
1567627234727:library(PEcAn.benchmark)
1567627234728:settings <- papply(settings, read_settings_BRR)
1567627234728:}
1567627234730:if("sitegroup" %in% names(settings)){
1567627234731:if(is.null(settings$sitegroup$nSite)){
1567627234731:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567627234732:sitegroupId = settings$sitegroup$id)
1567627234733:} else {
1567627234734:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567627234734:sitegroupId = settings$sitegroup$id,
1567627234735:nSite = settings$sitegroup$nSite)
1567627234736:}
1567627234737:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1567627234737:}
1567627234739:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1567627234740:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1567627235295:# Write pecan.CHECKED.xml
1567627235296:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1567627235367:# start from scratch if no continue is passed in
1567627235368:statusFile <- file.path(settings$outdir, "STATUS")
1567627235369:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1567627235370:file.remove(statusFile)
1567627235370:}
1567627235372:# Do conversions
1567627235373:settings <- PEcAn.workflow::do_conversions(settings)
1567627235450:# Query the trait database for data and priors
1567627235451:if (PEcAn.utils::status.check("TRAIT") == 0){
1567627235452:PEcAn.utils::status.start("TRAIT")
1567627235453:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1567627235453:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1567627235454:PEcAn.utils::status.end()
1567627235455:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1567627235456:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1567627235456:}
1567627238193:# Run the PEcAn meta.analysis
1567627238194:if(!is.null(settings$meta.analysis)) {
1567627238195:if (PEcAn.utils::status.check("META") == 0){
1567627238195:PEcAn.utils::status.start("META")
1567627238196:PEcAn.MA::runModule.run.meta.analysis(settings)
1567627238197:PEcAn.utils::status.end()
1567627238198:}
1567627238198:}
1567627238223:# Write model specific configs
1567627238224:if (PEcAn.utils::status.check("CONFIG") == 0){
1567627238225:PEcAn.utils::status.start("CONFIG")
1567627238225:settings <- PEcAn.workflow::runModule.run.write.configs(settings)
1567627238226:PEcAn.settings::write.settings(settings, outputfile='pecan.CONFIGS.xml')
1567627238227:PEcAn.utils::status.end()
1567627238227:} else if (file.exists(file.path(settings$outdir, 'pecan.CONFIGS.xml'))) {
1567627238228:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.CONFIGS.xml'))
1567627238229:}
1567627242627:if ((length(which(commandArgs() == "--advanced")) != 0) &&
1567627242628:(PEcAn.utils::status.check("ADVANCED") == 0)) {
1567627242629:PEcAn.utils::status.start("ADVANCED")
1567627242630:q();
1567627242630:}
1567627242632:library(PEcAn.settings)
1567627242633:# Start ecosystem model runs
1567627242633:if (PEcAn.utils::status.check("MODEL") == 0) {
1567627242634:PEcAn.utils::status.start("MODEL")
1567627242635:PEcAn.remote::runModule.start.model.runs(settings, stop.on.error = FALSE)
1567627242635:PEcAn.utils::status.end()
1567627242636:}
1567627557752:# Get results of model runs
1567627557754:if (PEcAn.utils::status.check("OUTPUT") == 0) {
1567627557755:PEcAn.utils::status.start("OUTPUT")
1567627557756:runModule.get.results(settings)
1567627557757:PEcAn.utils::status.end()
1567627557758:}
1567698812510:# ----------------------------------------------------------------------
1567698812565:# Load required libraries
1567698812566:# ----------------------------------------------------------------------
1567698812568:#.libPaths()
1567698812570:#devtools::load_all("pecan/base/db/")
1567698812571:#devtools::load_all("pecan/base/all/")
1567698812572:library(PEcAn.all)
1567698819103:debugonce(PEcAn.DB::assign.treatments)
1567698821016:#debugonce(PEcAn.DB::get.trait.data.pft)
1567698821017:#debugonce(PEcAn.remote::runModule.start.model.runs)
1567698821019:library(PEcAn.utils)
1567698822016:library(RCurl)
1567698823024:# make sure always to call status.end
1567698823025:options(warn=1)
1567698823630:options(error=quote({
1567698823632:PEcAn.utils::status.end("ERROR")
1567698823633:PEcAn.remote::kill.tunnel(settings)
1567698823635:if (!interactive()) {
1567698823637:q(status = 1)
1567698823638:}
1567698823640:}))
1567698824411:# ----------------------------------------------------------------------
1567698824413:# PEcAn Workflow
1567698824414:# ----------------------------------------------------------------------
1567698824416:# Open and read in settings file for PEcAn run.
1567698824417:args <- commandArgs(trailingOnly = TRUE)
1567698825714:if (is.na(args[1])){
1567698825714:settings <- PEcAn.settings::read.settings("biocro_darpa_files/pecan.biocro.darpa.xml")
1567698825715:} else {
1567698825716:settings.file <- args[1]
1567698825717:settings <- PEcAn.settings::read.settings(settings.file)
1567698825717:}
1567698827140:# Check for additional modules that will require adding settings
1567698827140:if("benchmarking" %in% names(settings)){
1567698827141:library(PEcAn.benchmark)
1567698827142:settings <- papply(settings, read_settings_BRR)
1567698827143:}
1567698828152:if("sitegroup" %in% names(settings)){
1567698828153:if(is.null(settings$sitegroup$nSite)){
1567698828154:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567698828155:sitegroupId = settings$sitegroup$id)
1567698828156:} else {
1567698828157:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567698828158:sitegroupId = settings$sitegroup$id,
1567698828158:nSite = settings$sitegroup$nSite)
1567698828159:}
1567698828160:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1567698828161:}
1567698829153:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1567698829154:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1567698831221:# Write pecan.CHECKED.xml
1567698831222:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1567698832526:# start from scratch if no continue is passed in
1567698832527:statusFile <- file.path(settings$outdir, "STATUS")
1567698833367:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1567698833368:file.remove(statusFile)
1567698833369:}
1567698834375:# Do conversions
1567698834377:settings <- PEcAn.workflow::do_conversions(settings)
1567698835895:# Query the trait database for data and priors
1567698835897:if (PEcAn.utils::status.check("TRAIT") == 0){
1567698835898:PEcAn.utils::status.start("TRAIT")
1567698835899:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1567698835900:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1567698835901:PEcAn.utils::status.end()
1567698835902:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1567698835903:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1567698835904:}
1567698843579:# Run the PEcAn meta.analysis
1567698843580:if(!is.null(settings$meta.analysis)) {
1567698843582:if (PEcAn.utils::status.check("META") == 0){
1567698843584:PEcAn.utils::status.start("META")
1567698843585:PEcAn.MA::runModule.run.meta.analysis(settings)
1567698843587:PEcAn.utils::status.end()
1567698843589:}
1567698843590:}
1567698886255:data
1567698928712:data$trt_id[which(data$control == 1)]
1567699017741:length(unique(data$trt_id[site.i]))
1567699026381:data$trt_id[site.i]
1567699040074:si
1567699123211:data$trt_id[site.i]
1567699140649:!"control" %in% data$trt_id[site.i]
1567699209872:if (!"control" %in% data$trt_id[site.i]) {
1567699209873:PEcAn.logger::logger.severe(paste0("No control treatment set for site_id ",
1567699209874:unique(data$site_id[site.i]), " and citation id ", unique(data$citation_id[site.i]),
1567699209875:".\n", "Please set control treatment for this site / citation in database.\n"))
1567699209875:}
1567699244163:if (!"control" %in% data$trt_id[site.i]) {
1567699244164:PEcAn.logger::logger.severe(paste0("No control treatment set for site_id ",
1567699244165:unique(data$site_id[site.i]), " and citation id ", unique(data$citation_id[site.i]),
1567699244165:".\n", "Please set control treatment for this site / citation in database.\n"))
1567699244166:}if (!"control" %in% data$trt_id[site.i]) {
1567699244168:PEcAn.logger::logger.severe(paste0("No control treatment set for site_id ",
1567699244169:unique(data$site_id[site.i]), " and citation id ", unique(data$citation_id[site.i]),
1567699244170:".\n", "Please set control treatment for this site / citation in database.\n"))
1567699244174:}
1567699262024:!"control" %in% data$trt_id[site.i]
1567699268975:data$trt_id[site.i]
1567699371270:sites
1567699379298:options(scipen = 999)
1567699381194:sites
1567699416721:head(data)
1567699422399:tail(data)
1567699433676:table(data$site_id)
1567699741897:data$site_id[site.i]
1567699788483:#!/usr/bin/env Rscript
1567699788484:#-------------------------------------------------------------------------------
1567699788486:# Copyright (c) 2012 University of Illinois, NCSA.
1567699788487:# All rights reserved. This program and the accompanying materials
1567699788488:# are made available under the terms of the
1567699788490:# University of Illinois/NCSA Open Source License
1567699788491:# which accompanies this distribution, and is available at
1567699788493:# http://opensource.ncsa.illinois.edu/license.html
1567699788494:#-------------------------------------------------------------------------------
1567699788496:# ----------------------------------------------------------------------
1567699788496:# Load required libraries
1567699788497:# ----------------------------------------------------------------------
1567699788498:#.libPaths()
1567699788499:#devtools::load_all("pecan/base/db/")
1567699788499:#devtools::load_all("pecan/base/all/")
1567699788500:library(PEcAn.all)
1567699793722:debugonce(PEcAn.DB::assign.treatments)
1567699793723:#debugonce(PEcAn.DB::get.trait.data.pft)
1567699793724:#debugonce(PEcAn.remote::runModule.start.model.runs)
1567699793725:library(PEcAn.utils)
1567699793726:library(RCurl)
1567699793894:# make sure always to call status.end
1567699793895:options(warn=1)
1567699793895:options(error=quote({
1567699793896:PEcAn.utils::status.end("ERROR")
1567699793897:PEcAn.remote::kill.tunnel(settings)
1567699793897:if (!interactive()) {
1567699793898:q(status = 1)
1567699793899:}
1567699793899:}))
1567699793900:#options(warning.expression=status.end("ERROR"))
1567699793902:# ----------------------------------------------------------------------
1567699793903:# PEcAn Workflow
1567699793903:# ----------------------------------------------------------------------
1567699793904:# Open and read in settings file for PEcAn run.
1567699793904:args <- commandArgs(trailingOnly = TRUE)
1567699793905:if (is.na(args[1])){
1567699793906:settings <- PEcAn.settings::read.settings("biocro_darpa_files/pecan.biocro.darpa.xml")
1567699793906:} else {
1567699793907:settings.file <- args[1]
1567699793908:settings <- PEcAn.settings::read.settings(settings.file)
1567699793908:}
1567699793936:# Check for additional modules that will require adding settings
1567699793936:if("benchmarking" %in% names(settings)){
1567699793937:library(PEcAn.benchmark)
1567699793938:settings <- papply(settings, read_settings_BRR)
1567699793938:}
1567699793940:if("sitegroup" %in% names(settings)){
1567699793940:if(is.null(settings$sitegroup$nSite)){
1567699793941:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567699793941:sitegroupId = settings$sitegroup$id)
1567699793942:} else {
1567699793943:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567699793943:sitegroupId = settings$sitegroup$id,
1567699793944:nSite = settings$sitegroup$nSite)
1567699793945:}
1567699793945:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1567699793946:}
1567699793947:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1567699793948:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1567699794482:# Write pecan.CHECKED.xml
1567699794483:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1567699794555:# start from scratch if no continue is passed in
1567699794556:statusFile <- file.path(settings$outdir, "STATUS")
1567699794557:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1567699794558:file.remove(statusFile)
1567699794558:}
1567699794560:# Do conversions
1567699794560:settings <- PEcAn.workflow::do_conversions(settings)
1567699794638:# Query the trait database for data and priors
1567699794639:if (PEcAn.utils::status.check("TRAIT") == 0){
1567699794639:PEcAn.utils::status.start("TRAIT")
1567699794640:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1567699794641:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1567699794641:PEcAn.utils::status.end()
1567699794642:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1567699794643:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1567699794643:}
1567699797452:# Run the PEcAn meta.analysis
1567699797452:if(!is.null(settings$meta.analysis)) {
1567699797453:if (PEcAn.utils::status.check("META") == 0){
1567699797454:PEcAn.utils::status.start("META")
1567699797455:PEcAn.MA::runModule.run.meta.analysis(settings)
1567699797455:PEcAn.utils::status.end()
1567699797456:}
1567699797457:}
1567699848880:options(scipen = 999)
1567699851628:#!/usr/bin/env Rscript
1567699851630:#-------------------------------------------------------------------------------
1567699851631:# Copyright (c) 2012 University of Illinois, NCSA.
1567699851633:# All rights reserved. This program and the accompanying materials
1567699851635:# are made available under the terms of the
1567699851636:# University of Illinois/NCSA Open Source License
1567699851638:# which accompanies this distribution, and is available at
1567699851639:# http://opensource.ncsa.illinois.edu/license.html
1567699851640:#-------------------------------------------------------------------------------
1567699851642:# ----------------------------------------------------------------------
1567699851643:# Load required libraries
1567699851643:# ----------------------------------------------------------------------
1567699851644:#.libPaths()
1567699851645:#devtools::load_all("pecan/base/db/")
1567699851646:#devtools::load_all("pecan/base/all/")
1567699851647:library(PEcAn.all)
1567699856813:debugonce(PEcAn.DB::assign.treatments)
1567699856815:#debugonce(PEcAn.DB::get.trait.data.pft)
1567699856815:#debugonce(PEcAn.remote::runModule.start.model.runs)
1567699856816:library(PEcAn.utils)
1567699856817:library(RCurl)
1567699856986:# make sure always to call status.end
1567699856987:options(warn=1)
1567699856988:options(error=quote({
1567699856989:PEcAn.utils::status.end("ERROR")
1567699856990:PEcAn.remote::kill.tunnel(settings)
1567699856991:if (!interactive()) {
1567699856992:q(status = 1)
1567699856993:}
1567699856993:}))
1567699856995:#options(warning.expression=status.end("ERROR"))
1567699856998:# ----------------------------------------------------------------------
1567699856998:# PEcAn Workflow
1567699856999:# ----------------------------------------------------------------------
1567699857000:# Open and read in settings file for PEcAn run.
1567699857001:args <- commandArgs(trailingOnly = TRUE)
1567699857002:if (is.na(args[1])){
1567699857003:settings <- PEcAn.settings::read.settings("biocro_darpa_files/pecan.biocro.darpa.xml")
1567699857004:} else {
1567699857005:settings.file <- args[1]
1567699857006:settings <- PEcAn.settings::read.settings(settings.file)
1567699857006:}
1567699857035:# Check for additional modules that will require adding settings
1567699857036:if("benchmarking" %in% names(settings)){
1567699857037:library(PEcAn.benchmark)
1567699857038:settings <- papply(settings, read_settings_BRR)
1567699857038:}
1567699857040:if("sitegroup" %in% names(settings)){
1567699857041:if(is.null(settings$sitegroup$nSite)){
1567699857042:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567699857043:sitegroupId = settings$sitegroup$id)
1567699857043:} else {
1567699857044:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567699857045:sitegroupId = settings$sitegroup$id,
1567699857046:nSite = settings$sitegroup$nSite)
1567699857047:}
1567699857048:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1567699857048:}
1567699857050:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1567699857051:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1567699857604:# Write pecan.CHECKED.xml
1567699857605:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1567699857677:# start from scratch if no continue is passed in
1567699857678:statusFile <- file.path(settings$outdir, "STATUS")
1567699857679:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1567699857680:file.remove(statusFile)
1567699857681:}
1567699857683:# Do conversions
1567699857683:settings <- PEcAn.workflow::do_conversions(settings)
1567699857762:# Query the trait database for data and priors
1567699857763:if (PEcAn.utils::status.check("TRAIT") == 0){
1567699857764:PEcAn.utils::status.start("TRAIT")
1567699857765:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1567699857765:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1567699857766:PEcAn.utils::status.end()
1567699857767:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1567699857768:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1567699857769:}
1567699859842:# Run the PEcAn meta.analysis
1567699859843:if(!is.null(settings$meta.analysis)) {
1567699859844:if (PEcAn.utils::status.check("META") == 0){
1567699859845:PEcAn.utils::status.start("META")
1567699859845:PEcAn.MA::runModule.run.meta.analysis(settings)
1567699859846:PEcAn.utils::status.end()
1567699859847:}
1567699859848:}
1567700397523:options(scipen = 999)
1567700400672:#!/usr/bin/env Rscript
1567700400673:#-------------------------------------------------------------------------------
1567700400674:# Copyright (c) 2012 University of Illinois, NCSA.
1567700400675:# All rights reserved. This program and the accompanying materials
1567700400675:# are made available under the terms of the
1567700400676:# University of Illinois/NCSA Open Source License
1567700400677:# which accompanies this distribution, and is available at
1567700400677:# http://opensource.ncsa.illinois.edu/license.html
1567700400678:#-------------------------------------------------------------------------------
1567700400679:# ----------------------------------------------------------------------
1567700400680:# Load required libraries
1567700400681:# ----------------------------------------------------------------------
1567700400681:#.libPaths()
1567700400682:#devtools::load_all("pecan/base/db/")
1567700400683:#devtools::load_all("pecan/base/all/")
1567700400684:library(PEcAn.all)
1567700406023:debugonce(PEcAn.DB::assign.treatments)
1567700406025:#debugonce(PEcAn.DB::get.trait.data.pft)
1567700406026:#debugonce(PEcAn.remote::runModule.start.model.runs)
1567700406026:library(PEcAn.utils)
1567700406027:library(RCurl)
1567700406228:# make sure always to call status.end
1567700406229:options(warn=1)
1567700406230:options(error=quote({
1567700406231:PEcAn.utils::status.end("ERROR")
1567700406231:PEcAn.remote::kill.tunnel(settings)
1567700406232:if (!interactive()) {
1567700406233:q(status = 1)
1567700406233:}
1567700406234:}))
1567700406235:#options(warning.expression=status.end("ERROR"))
1567700406237:# ----------------------------------------------------------------------
1567700406237:# PEcAn Workflow
1567700406238:# ----------------------------------------------------------------------
1567700406239:# Open and read in settings file for PEcAn run.
1567700406239:args <- commandArgs(trailingOnly = TRUE)
1567700406240:if (is.na(args[1])){
1567700406241:settings <- PEcAn.settings::read.settings("biocro_darpa_files/pecan.biocro.darpa.xml")
1567700406241:} else {
1567700406242:settings.file <- args[1]
1567700406242:settings <- PEcAn.settings::read.settings(settings.file)
1567700406243:}
1567700406271:# Check for additional modules that will require adding settings
1567700406272:if("benchmarking" %in% names(settings)){
1567700406273:library(PEcAn.benchmark)
1567700406273:settings <- papply(settings, read_settings_BRR)
1567700406274:}
1567700406276:if("sitegroup" %in% names(settings)){
1567700406276:if(is.null(settings$sitegroup$nSite)){
1567700406277:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567700406278:sitegroupId = settings$sitegroup$id)
1567700406279:} else {
1567700406279:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567700406280:sitegroupId = settings$sitegroup$id,
1567700406281:nSite = settings$sitegroup$nSite)
1567700406282:}
1567700406282:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1567700406283:}
1567700406285:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1567700406285:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1567700406812:# Write pecan.CHECKED.xml
1567700406813:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1567700406905:# start from scratch if no continue is passed in
1567700406906:statusFile <- file.path(settings$outdir, "STATUS")
1567700406907:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1567700406908:file.remove(statusFile)
1567700406908:}
1567700406910:# Do conversions
1567700406911:settings <- PEcAn.workflow::do_conversions(settings)
1567700406990:# Query the trait database for data and priors
1567700406991:if (PEcAn.utils::status.check("TRAIT") == 0){
1567700406991:PEcAn.utils::status.start("TRAIT")
1567700406992:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1567700406993:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1567700406993:PEcAn.utils::status.end()
1567700406994:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1567700406995:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1567700406995:}
1567700409995:# Run the PEcAn meta.analysis
1567700409995:if(!is.null(settings$meta.analysis)) {
1567700409996:if (PEcAn.utils::status.check("META") == 0){
1567700409997:PEcAn.utils::status.start("META")
1567700409998:PEcAn.MA::runModule.run.meta.analysis(settings)
1567700409998:PEcAn.utils::status.end()
1567700409999:}
1567700410000:}
1567700429530:si
1567700435603:sites
1567700439598:site.i
1567700443320:site.i
1567700448500:site.i
1567700463101:ss
1567700470510:data$site_id
1567700489929:data$site_id
1567700498876:table(data$site_id)
1567700521390:data$site_id[site.i]
1567700534981:data$site_id[site.i]
1567700557066:data$trt_id[site.i]
1567700569277:head(data)
1567700584803:table(data$trt_id)
1567700685667:data
1567700749639:nrow(data)
1567700839704:#!/usr/bin/env Rscript
1567700839705:#-------------------------------------------------------------------------------
1567700839706:# Copyright (c) 2012 University of Illinois, NCSA.
1567700839707:# All rights reserved. This program and the accompanying materials
1567700839707:# are made available under the terms of the
1567700839708:# University of Illinois/NCSA Open Source License
1567700839709:# which accompanies this distribution, and is available at
1567700839710:# http://opensource.ncsa.illinois.edu/license.html
1567700839710:#-------------------------------------------------------------------------------
1567700839712:# ----------------------------------------------------------------------
1567700839712:# Load required libraries
1567700839713:# ----------------------------------------------------------------------
1567700839714:#.libPaths()
1567700839714:#devtools::load_all("pecan/base/db/")
1567700839715:#devtools::load_all("pecan/base/all/")
1567700839716:library(PEcAn.all)
1567700845140:debugonce(PEcAn.DB::assign.treatments)
1567700845146:#debugonce(PEcAn.DB::get.trait.data.pft)
1567700845147:#debugonce(PEcAn.remote::runModule.start.model.runs)
1567700845148:library(PEcAn.utils)
1567700845149:library(RCurl)
1567700845339:# make sure always to call status.end
1567700845340:options(warn=1)
1567700845341:options(error=quote({
1567700845342:PEcAn.utils::status.end("ERROR")
1567700845342:PEcAn.remote::kill.tunnel(settings)
1567700845343:if (!interactive()) {
1567700845344:q(status = 1)
1567700845344:}
1567700845345:}))
1567700845347:#options(warning.expression=status.end("ERROR"))
1567700845348:# ----------------------------------------------------------------------
1567700845349:# PEcAn Workflow
1567700845350:# ----------------------------------------------------------------------
1567700845350:# Open and read in settings file for PEcAn run.
1567700845351:args <- commandArgs(trailingOnly = TRUE)
1567700845352:if (is.na(args[1])){
1567700845352:settings <- PEcAn.settings::read.settings("biocro_darpa_files/pecan.biocro.darpa.xml")
1567700845353:} else {
1567700845354:settings.file <- args[1]
1567700845354:settings <- PEcAn.settings::read.settings(settings.file)
1567700845355:}
1567700845389:# Check for additional modules that will require adding settings
1567700845390:if("benchmarking" %in% names(settings)){
1567700845391:library(PEcAn.benchmark)
1567700845391:settings <- papply(settings, read_settings_BRR)
1567700845392:}
1567700845394:if("sitegroup" %in% names(settings)){
1567700845395:if(is.null(settings$sitegroup$nSite)){
1567700845395:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567700845396:sitegroupId = settings$sitegroup$id)
1567700845397:} else {
1567700845398:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567700845398:sitegroupId = settings$sitegroup$id,
1567700845399:nSite = settings$sitegroup$nSite)
1567700845400:}
1567700845401:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1567700845402:}
1567700845403:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1567700845404:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1567700845994:# Write pecan.CHECKED.xml
1567700845995:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1567700846072:# start from scratch if no continue is passed in
1567700846073:statusFile <- file.path(settings$outdir, "STATUS")
1567700846074:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1567700846075:file.remove(statusFile)
1567700846076:}
1567700846078:# Do conversions
1567700846078:settings <- PEcAn.workflow::do_conversions(settings)
1567700846166:# Query the trait database for data and priors
1567700846167:if (PEcAn.utils::status.check("TRAIT") == 0){
1567700846167:PEcAn.utils::status.start("TRAIT")
1567700846168:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1567700846169:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1567700846170:PEcAn.utils::status.end()
1567700846171:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1567700846172:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1567700846172:}
1567700848322:# Run the PEcAn meta.analysis
1567700848323:if(!is.null(settings$meta.analysis)) {
1567700848324:if (PEcAn.utils::status.check("META") == 0){
1567700848325:PEcAn.utils::status.start("META")
1567700848325:PEcAn.MA::runModule.run.meta.analysis(settings)
1567700848326:PEcAn.utils::status.end()
1567700848327:}
1567700848327:}
1567702738450:# ----------------------------------------------------------------------
1567702738451:# Load required libraries
1567702738453:# ----------------------------------------------------------------------
1567702738455:#.libPaths()
1567702738456:#devtools::load_all("pecan/base/db/")
1567702738458:#devtools::load_all("pecan/base/all/")
1567702738459:library(PEcAn.all)
1567702743698:#debugonce(PEcAn.DB::assign.treatments)
1567702743699:#debugonce(PEcAn.DB::get.trait.data.pft)
1567702743700:#debugonce(PEcAn.remote::runModule.start.model.runs)
1567702743701:library(PEcAn.utils)
1567702743702:library(RCurl)
1567702743874:# make sure always to call status.end
1567702743875:options(warn=1)
1567702743876:options(error=quote({
1567702743877:PEcAn.utils::status.end("ERROR")
1567702743878:PEcAn.remote::kill.tunnel(settings)
1567702743878:if (!interactive()) {
1567702743879:q(status = 1)
1567702743880:}
1567702743881:}))
1567702743881:# ----------------------------------------------------------------------
1567702743882:# PEcAn Workflow
1567702743883:# ----------------------------------------------------------------------
1567702743884:# Open and read in settings file for PEcAn run.
1567702743884:args <- commandArgs(trailingOnly = TRUE)
1567702743885:if (is.na(args[1])){
1567702743886:settings <- PEcAn.settings::read.settings("biocro_darpa_files/pecan.biocro.darpa.xml")
1567702743887:} else {
1567702743887:settings.file <- args[1]
1567702743888:settings <- PEcAn.settings::read.settings(settings.file)
1567702743889:}
1567702743916:# Check for additional modules that will require adding settings
1567702743917:if("benchmarking" %in% names(settings)){
1567702743918:library(PEcAn.benchmark)
1567702743918:settings <- papply(settings, read_settings_BRR)
1567702743919:}
1567702743920:if("sitegroup" %in% names(settings)){
1567702743921:if(is.null(settings$sitegroup$nSite)){
1567702743921:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567702743922:sitegroupId = settings$sitegroup$id)
1567702743923:} else {
1567702743924:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567702743925:sitegroupId = settings$sitegroup$id,
1567702743925:nSite = settings$sitegroup$nSite)
1567702743926:}
1567702743927:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1567702743927:}
1567702743928:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1567702743929:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1567702744474:# Write pecan.CHECKED.xml
1567702744475:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1567702744547:# start from scratch if no continue is passed in
1567702744548:statusFile <- file.path(settings$outdir, "STATUS")
1567702744549:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1567702744550:file.remove(statusFile)
1567702744551:}
1567702744552:# Do conversions
1567702744553:settings <- PEcAn.workflow::do_conversions(settings)
1567702744630:# Query the trait database for data and priors
1567702744631:if (PEcAn.utils::status.check("TRAIT") == 0){
1567702744631:PEcAn.utils::status.start("TRAIT")
1567702744632:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1567702744633:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1567702744634:PEcAn.utils::status.end()
1567702744634:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1567702744635:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1567702744636:}
1567702746377:# Run the PEcAn meta.analysis
1567702746378:if(!is.null(settings$meta.analysis)) {
1567702746379:if (PEcAn.utils::status.check("META") == 0){
1567702746380:PEcAn.utils::status.start("META")
1567702746380:PEcAn.MA::runModule.run.meta.analysis(settings)
1567702746381:PEcAn.utils::status.end()
1567702746382:}
1567702746382:}
1567702762532:#!/usr/bin/env Rscript
1567702762532:#-------------------------------------------------------------------------------
1567702762533:# Copyright (c) 2012 University of Illinois, NCSA.
1567702762534:# All rights reserved. This program and the accompanying materials
1567702762535:# are made available under the terms of the
1567702762536:# University of Illinois/NCSA Open Source License
1567702762536:# which accompanies this distribution, and is available at
1567702762537:# http://opensource.ncsa.illinois.edu/license.html
1567702762538:#-------------------------------------------------------------------------------
1567702762539:# ----------------------------------------------------------------------
1567702762540:# Load required libraries
1567702762541:# ----------------------------------------------------------------------
1567702762541:#.libPaths()
1567702762542:#devtools::load_all("pecan/base/db/")
1567702762543:#devtools::load_all("pecan/base/all/")
1567702762543:library(PEcAn.all)
1567702762545:#debugonce(PEcAn.DB::assign.treatments)
1567702762546:#debugonce(PEcAn.DB::get.trait.data.pft)
1567702762547:#debugonce(PEcAn.remote::runModule.start.model.runs)
1567702762547:library(PEcAn.utils)
1567702762548:library(RCurl)
1567702762550:# make sure always to call status.end
1567702762551:options(warn=1)
1567702762552:options(error=quote({
1567702762552:PEcAn.utils::status.end("ERROR")
1567702762553:PEcAn.remote::kill.tunnel(settings)
1567702762554:if (!interactive()) {
1567702762554:q(status = 1)
1567702762555:}
1567702762556:}))
1567702762557:#options(warning.expression=status.end("ERROR"))
1567702762559:# ----------------------------------------------------------------------
1567702762560:# PEcAn Workflow
1567702762560:# ----------------------------------------------------------------------
1567702762561:# Open and read in settings file for PEcAn run.
1567702762562:args <- commandArgs(trailingOnly = TRUE)
1567702762563:if (is.na(args[1])){
1567702762563:settings <- PEcAn.settings::read.settings("biocro_darpa_files/pecan.biocro.darpa.xml")
1567702762564:} else {
1567702762564:settings.file <- args[1]
1567702762565:settings <- PEcAn.settings::read.settings(settings.file)
1567702762566:}
1567702762590:# Check for additional modules that will require adding settings
1567702762591:if("benchmarking" %in% names(settings)){
1567702762591:library(PEcAn.benchmark)
1567702762592:settings <- papply(settings, read_settings_BRR)
1567702762593:}
1567702762594:if("sitegroup" %in% names(settings)){
1567702762595:if(is.null(settings$sitegroup$nSite)){
1567702762596:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567702762596:sitegroupId = settings$sitegroup$id)
1567702762597:} else {
1567702762598:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567702762598:sitegroupId = settings$sitegroup$id,
1567702762599:nSite = settings$sitegroup$nSite)
1567702762600:}
1567702762600:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1567702762601:}
1567702762603:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1567702762603:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1567702762798:# Write pecan.CHECKED.xml
1567702762799:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1567702762868:# start from scratch if no continue is passed in
1567702762869:statusFile <- file.path(settings$outdir, "STATUS")
1567702762870:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1567702762871:file.remove(statusFile)
1567702762871:}
1567702762873:# Do conversions
1567702762874:settings <- PEcAn.workflow::do_conversions(settings)
1567702762952:# Query the trait database for data and priors
1567702762952:if (PEcAn.utils::status.check("TRAIT") == 0){
1567702762953:PEcAn.utils::status.start("TRAIT")
1567702762954:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1567702762955:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1567702762955:PEcAn.utils::status.end()
1567702762956:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1567702762957:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1567702762958:}
1567702765549:# Run the PEcAn meta.analysis
1567702765549:if(!is.null(settings$meta.analysis)) {
1567702765550:if (PEcAn.utils::status.check("META") == 0){
1567702765551:PEcAn.utils::status.start("META")
1567702765552:PEcAn.MA::runModule.run.meta.analysis(settings)
1567702765552:PEcAn.utils::status.end()
1567702765553:}
1567702765554:}
1567702782103:# Write model specific configs
1567702782122:if (PEcAn.utils::status.check("CONFIG") == 0){
1567702782123:PEcAn.utils::status.start("CONFIG")
1567702782124:settings <- PEcAn.workflow::runModule.run.write.configs(settings)
1567702782124:PEcAn.settings::write.settings(settings, outputfile='pecan.CONFIGS.xml')
1567702782125:PEcAn.utils::status.end()
1567702782126:} else if (file.exists(file.path(settings$outdir, 'pecan.CONFIGS.xml'))) {
1567702782127:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.CONFIGS.xml'))
1567702782128:}
1567702787530:if ((length(which(commandArgs() == "--advanced")) != 0) &&
1567702787532:(PEcAn.utils::status.check("ADVANCED") == 0)) {
1567702787533:PEcAn.utils::status.start("ADVANCED")
1567702787535:q();
1567702787537:}
1567702788793:library(PEcAn.settings)
1567702795045:# Start ecosystem model runs
1567702795047:if (PEcAn.utils::status.check("MODEL") == 0) {
1567702795048:PEcAn.utils::status.start("MODEL")
1567702795049:PEcAn.remote::runModule.start.model.runs(settings, stop.on.error = FALSE)
1567702795051:PEcAn.utils::status.end()
1567702795052:}
1567702812182:# Get results of model runs
1567702812183:if (PEcAn.utils::status.check("OUTPUT") == 0) {
1567702812184:PEcAn.utils::status.start("OUTPUT")
1567702812185:runModule.get.results(settings)
1567702812186:PEcAn.utils::status.end()
1567702812187:}
1567702814985:# Run ensemble analysis on model output.
1567702814986:if ('ensemble' %in% names(settings) & PEcAn.utils::status.check("ENSEMBLE") == 0) {
1567702814987:PEcAn.utils::status.start("ENSEMBLE")
1567702814988:runModule.run.ensemble.analysis(settings, TRUE)
1567702814988:PEcAn.utils::status.end()
1567702814989:}
1567702820205:# Run sensitivity analysis and variance decomposition on model output
1567702820206:if ('sensitivity.analysis' %in% names(settings) & PEcAn.utils::status.check("SENSITIVITY") == 0) {
1567702820207:PEcAn.utils::status.start("SENSITIVITY")
1567702820208:runModule.run.sensitivity.analysis(settings)
1567702820208:PEcAn.utils::status.end()
1567702820209:}
1567702830666:traceback()
1567702923836:# ----------------------------------------------------------------------
1567702923836:# Load required libraries
1567702923837:# ----------------------------------------------------------------------
1567702923838:#.libPaths()
1567702923839:#devtools::load_all("pecan/base/db/")
1567702923839:#devtools::load_all("pecan/base/all/")
1567702923840:library(PEcAn.all)
1567702929492:#debugonce(PEcAn.DB::assign.treatments)
1567702929493:#debugonce(PEcAn.DB::get.trait.data.pft)
1567702929494:#debugonce(PEcAn.remote::runModule.start.model.runs)
1567702929495:library(PEcAn.utils)
1567702929496:library(RCurl)
1567702929675:# make sure always to call status.end
1567702929676:options(warn=1)
1567702929677:options(error=quote({
1567702929678:PEcAn.utils::status.end("ERROR")
1567702929678:PEcAn.remote::kill.tunnel(settings)
1567702929679:if (!interactive()) {
1567702929680:q(status = 1)
1567702929681:}
1567702929681:}))
1567702929682:# ----------------------------------------------------------------------
1567702929683:# PEcAn Workflow
1567702929684:# ----------------------------------------------------------------------
1567702929684:# Open and read in settings file for PEcAn run.
1567702929685:args <- commandArgs(trailingOnly = TRUE)
1567702929686:if (is.na(args[1])){
1567702929706:settings <- PEcAn.settings::read.settings("biocro_darpa_files/pecan.biocro.darpa.xml")
1567702929707:} else {
1567702929708:settings.file <- args[1]
1567702929708:settings <- PEcAn.settings::read.settings(settings.file)
1567702929709:}
1567702932915:# Check for additional modules that will require adding settings
1567702932916:if("benchmarking" %in% names(settings)){
1567702932916:library(PEcAn.benchmark)
1567702932917:settings <- papply(settings, read_settings_BRR)
1567702932918:}
1567702933898:if("sitegroup" %in% names(settings)){
1567702933899:if(is.null(settings$sitegroup$nSite)){
1567702933900:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567702933900:sitegroupId = settings$sitegroup$id)
1567702933901:} else {
1567702933902:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567702933903:sitegroupId = settings$sitegroup$id,
1567702933904:nSite = settings$sitegroup$nSite)
1567702933904:}
1567702933905:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1567702933906:}
1567702934905:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1567702934906:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1567702936544:# Write pecan.CHECKED.xml
1567702936544:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1567702938197:# start from scratch if no continue is passed in
1567702938198:statusFile <- file.path(settings$outdir, "STATUS")
1567702956434:#!/usr/bin/env Rscript
1567702956434:#-------------------------------------------------------------------------------
1567702956435:# Copyright (c) 2012 University of Illinois, NCSA.
1567702956436:# All rights reserved. This program and the accompanying materials
1567702956437:# are made available under the terms of the
1567702956437:# University of Illinois/NCSA Open Source License
1567702956438:# which accompanies this distribution, and is available at
1567702956438:# http://opensource.ncsa.illinois.edu/license.html
1567702956439:#-------------------------------------------------------------------------------
1567702956440:# ----------------------------------------------------------------------
1567702956441:# Load required libraries
1567702956442:# ----------------------------------------------------------------------
1567702956442:#.libPaths()
1567702956443:#devtools::load_all("pecan/base/db/")
1567702956444:#devtools::load_all("pecan/base/all/")
1567702956444:library(PEcAn.all)
1567702961883:#debugonce(PEcAn.DB::assign.treatments)
1567702961884:#debugonce(PEcAn.DB::get.trait.data.pft)
1567702961885:#debugonce(PEcAn.remote::runModule.start.model.runs)
1567702961885:library(PEcAn.utils)
1567702961886:library(RCurl)
1567702962057:# make sure always to call status.end
1567702962058:options(warn=1)
1567702962059:options(error=quote({
1567702962059:PEcAn.utils::status.end("ERROR")
1567702962060:PEcAn.remote::kill.tunnel(settings)
1567702962061:if (!interactive()) {
1567702962061:q(status = 1)
1567702962062:}
1567702962062:}))
1567702962064:#options(warning.expression=status.end("ERROR"))
1567702962065:# ----------------------------------------------------------------------
1567702962066:# PEcAn Workflow
1567702962067:# ----------------------------------------------------------------------
1567702962067:# Open and read in settings file for PEcAn run.
1567702962068:args <- commandArgs(trailingOnly = TRUE)
1567702962069:if (is.na(args[1])){
1567702962069:settings <- PEcAn.settings::read.settings("biocro_darpa_files/pecan.biocro.darpa.xml")
1567702962070:} else {
1567702962070:settings.file <- args[1]
1567702962071:settings <- PEcAn.settings::read.settings(settings.file)
1567702962072:}
1567702962097:# Check for additional modules that will require adding settings
1567702962097:if("benchmarking" %in% names(settings)){
1567702962098:library(PEcAn.benchmark)
1567702962099:settings <- papply(settings, read_settings_BRR)
1567702962099:}
1567702962101:if("sitegroup" %in% names(settings)){
1567702962102:if(is.null(settings$sitegroup$nSite)){
1567702962102:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567702962103:sitegroupId = settings$sitegroup$id)
1567702962103:} else {
1567702962104:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567702962105:sitegroupId = settings$sitegroup$id,
1567702962105:nSite = settings$sitegroup$nSite)
1567702962106:}
1567702962107:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1567702962107:}
1567702962109:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1567702962110:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1567702962669:# Write pecan.CHECKED.xml
1567702962670:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1567702962735:# start from scratch if no continue is passed in
1567702962736:statusFile <- file.path(settings$outdir, "STATUS")
1567702962737:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1567702962738:file.remove(statusFile)
1567702962738:}
1567702963859:# Do conversions
1567702963860:settings <- PEcAn.workflow::do_conversions(settings)
1567702965164:# Query the trait database for data and priors
1567702965165:if (PEcAn.utils::status.check("TRAIT") == 0){
1567702965166:PEcAn.utils::status.start("TRAIT")
1567702965167:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1567702965168:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1567702965169:PEcAn.utils::status.end()
1567702965169:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1567702965170:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1567702965171:}
1567702967875:# Run the PEcAn meta.analysis
1567702967876:if(!is.null(settings$meta.analysis)) {
1567702967877:if (PEcAn.utils::status.check("META") == 0){
1567702967877:PEcAn.utils::status.start("META")
1567702967878:PEcAn.MA::runModule.run.meta.analysis(settings)
1567702967879:PEcAn.utils::status.end()
1567702967880:}
1567702967880:}
1567702972208:# Write model specific configs
1567702972209:if (PEcAn.utils::status.check("CONFIG") == 0){
1567702972210:PEcAn.utils::status.start("CONFIG")
1567702972211:settings <- PEcAn.workflow::runModule.run.write.configs(settings)
1567702972212:PEcAn.settings::write.settings(settings, outputfile='pecan.CONFIGS.xml')
1567702972212:PEcAn.utils::status.end()
1567702972213:} else if (file.exists(file.path(settings$outdir, 'pecan.CONFIGS.xml'))) {
1567702972214:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.CONFIGS.xml'))
1567702972215:}
1567702975333:if ((length(which(commandArgs() == "--advanced")) != 0) &&
1567702975334:(PEcAn.utils::status.check("ADVANCED") == 0)) {
1567702975335:PEcAn.utils::status.start("ADVANCED")
1567702975336:q();
1567702975336:}
1567702976882:# Start ecosystem model runs
1567702976883:if (PEcAn.utils::status.check("MODEL") == 0) {
1567702976884:PEcAn.utils::status.start("MODEL")
1567702976884:PEcAn.remote::runModule.start.model.runs(settings, stop.on.error = FALSE)
1567702976885:PEcAn.utils::status.end()
1567702976886:}
1567702982402:# Get results of model runs
1567702982403:if (PEcAn.utils::status.check("OUTPUT") == 0) {
1567702982405:PEcAn.utils::status.start("OUTPUT")
1567702982406:runModule.get.results(settings)
1567702982406:PEcAn.utils::status.end()
1567702982407:}
1567702984525:# Run ensemble analysis on model output.
1567702984526:if ('ensemble' %in% names(settings) & PEcAn.utils::status.check("ENSEMBLE") == 0) {
1567702984526:PEcAn.utils::status.start("ENSEMBLE")
1567702984527:runModule.run.ensemble.analysis(settings, TRUE)
1567702984528:PEcAn.utils::status.end()
1567702984529:}
1567702988989:# Run sensitivity analysis and variance decomposition on model output
1567702988990:if ('sensitivity.analysis' %in% names(settings) & PEcAn.utils::status.check("SENSITIVITY") == 0) {
1567702988991:PEcAn.utils::status.start("SENSITIVITY")
1567702988992:runModule.run.sensitivity.analysis(settings)
1567702988992:PEcAn.utils::status.end()
1567702988993:}
1567702990227:# Run parameter data assimilation
1567702990227:if ('assim.batch' %in% names(settings)) {
1567702990228:if (PEcAn.utils::status.check("PDA") == 0) {
1567702990229:PEcAn.utils::status.start("PDA")
1567702990230:settings <- PEcAn.assim.batch::runModule.assim.batch(settings)
1567702990231:PEcAn.utils::status.end()
1567702990231:}
1567702990232:}
1567702992196:# Run state data assimilation
1567702992196:if ('state.data.assimilation' %in% names(settings)) {
1567702992197:if (PEcAn.utils::status.check("SDA") == 0) {
1567702992198:PEcAn.utils::status.start("SDA")
1567702992199:settings <- sda.enfk(settings)
1567702992199:PEcAn.utils::status.end()
1567702992200:}
1567702992201:}
1567702993509:# Run benchmarking
1567702993510:if("benchmarking" %in% names(settings) & "benchmark" %in% names(settings$benchmarking)){
1567702993510:PEcAn.utils::status.start("BENCHMARKING")
1567702993511:results <- papply(settings, function(x) calc_benchmark(x, bety))
1567702993512:PEcAn.utils::status.end()
1567702993513:}
1567702994692:# Pecan workflow complete
1567702994693:if (PEcAn.utils::status.check("FINISHED") == 0) {
1567702994693:PEcAn.utils::status.start("FINISHED")
1567702994694:PEcAn.remote::kill.tunnel(settings)
1567702994695:db.query(paste("UPDATE workflows SET finished_at=NOW() WHERE id=",
1567702994696:settings$workflow$id, "AND finished_at IS NULL"),
1567702994696:params = settings$database$bety)
1567702994698:# Send email if configured
1567702994698:if (!is.null(settings$email) && !is.null(settings$email$to) && (settings$email$to != "")) {
1567702994699:sendmail(settings$email$from, settings$email$to,
1567702994700:paste0("Workflow has finished executing at ", base::date()),
1567702994701:paste0("You can find the results on ", settings$email$url))
1567702994701:}
1567702994702:PEcAn.utils::status.end()
1567702994703:}
1567702995708:db.print.connections()
1567702996548:print("---------- PEcAn Workflow Complete ----------")
1567703159928:#!/usr/bin/env Rscript
1567703159929:#-------------------------------------------------------------------------------
1567703159931:# Copyright (c) 2012 University of Illinois, NCSA.
1567703159932:# All rights reserved. This program and the accompanying materials
1567703159934:# are made available under the terms of the
1567703159935:# University of Illinois/NCSA Open Source License
1567703159937:# which accompanies this distribution, and is available at
1567703159938:# http://opensource.ncsa.illinois.edu/license.html
1567703159939:#-------------------------------------------------------------------------------
1567703159940:# ----------------------------------------------------------------------
1567703159941:# Load required libraries
1567703159942:# ----------------------------------------------------------------------
1567703159943:#.libPaths()
1567703159943:#devtools::load_all("pecan/base/db/")
1567703159944:#devtools::load_all("pecan/base/all/")
1567703159945:library(PEcAn.all)
1567703165148:#debugonce(PEcAn.DB::assign.treatments)
1567703165149:#debugonce(PEcAn.DB::get.trait.data.pft)
1567703165150:#debugonce(PEcAn.remote::runModule.start.model.runs)
1567703165151:library(PEcAn.utils)
1567703165152:library(RCurl)
1567703165321:# make sure always to call status.end
1567703165322:options(warn=1)
1567703165322:options(error=quote({
1567703165323:PEcAn.utils::status.end("ERROR")
1567703165324:PEcAn.remote::kill.tunnel(settings)
1567703165325:if (!interactive()) {
1567703165326:q(status = 1)
1567703165326:}
1567703165327:}))
1567703165328:#options(warning.expression=status.end("ERROR"))
1567703165330:# ----------------------------------------------------------------------
1567703165331:# PEcAn Workflow
1567703165332:# ----------------------------------------------------------------------
1567703165332:# Open and read in settings file for PEcAn run.
1567703165333:args <- commandArgs(trailingOnly = TRUE)
1567703165334:if (is.na(args[1])){
1567703165334:settings <- PEcAn.settings::read.settings("biocro_darpa_files/pecan.biocro.darpa.xml")
1567703165335:} else {
1567703165336:settings.file <- args[1]
1567703165336:settings <- PEcAn.settings::read.settings(settings.file)
1567703165337:}
1567703165365:# Check for additional modules that will require adding settings
1567703165366:if("benchmarking" %in% names(settings)){
1567703165366:library(PEcAn.benchmark)
1567703165367:settings <- papply(settings, read_settings_BRR)
1567703165368:}
1567703165369:if("sitegroup" %in% names(settings)){
1567703165370:if(is.null(settings$sitegroup$nSite)){
1567703165371:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567703165371:sitegroupId = settings$sitegroup$id)
1567703165372:} else {
1567703165373:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567703165374:sitegroupId = settings$sitegroup$id,
1567703165374:nSite = settings$sitegroup$nSite)
1567703165375:}
1567703165376:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1567703165376:}
1567703165378:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1567703165379:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1567703165928:# Write pecan.CHECKED.xml
1567703165928:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1567703166002:# start from scratch if no continue is passed in
1567703166002:statusFile <- file.path(settings$outdir, "STATUS")
1567703166003:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1567703166004:file.remove(statusFile)
1567703166005:}
1567703166006:# Do conversions
1567703166007:settings <- PEcAn.workflow::do_conversions(settings)
1567703166088:# Query the trait database for data and priors
1567703166088:if (PEcAn.utils::status.check("TRAIT") == 0){
1567703166089:PEcAn.utils::status.start("TRAIT")
1567703166090:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1567703166090:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1567703166091:PEcAn.utils::status.end()
1567703166092:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1567703166093:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1567703166093:}
1567703168866:# Run the PEcAn meta.analysis
1567703168867:if(!is.null(settings$meta.analysis)) {
1567703168868:if (PEcAn.utils::status.check("META") == 0){
1567703168869:PEcAn.utils::status.start("META")
1567703168870:PEcAn.MA::runModule.run.meta.analysis(settings)
1567703168870:PEcAn.utils::status.end()
1567703168871:}
1567703168872:}
1567703170686:# Write model specific configs
1567703170687:if (PEcAn.utils::status.check("CONFIG") == 0){
1567703170687:PEcAn.utils::status.start("CONFIG")
1567703170688:settings <- PEcAn.workflow::runModule.run.write.configs(settings)
1567703170689:PEcAn.settings::write.settings(settings, outputfile='pecan.CONFIGS.xml')
1567703170690:PEcAn.utils::status.end()
1567703170691:} else if (file.exists(file.path(settings$outdir, 'pecan.CONFIGS.xml'))) {
1567703170692:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.CONFIGS.xml'))
1567703170693:}
1567703175065:if ((length(which(commandArgs() == "--advanced")) != 0) &&
1567703175066:(PEcAn.utils::status.check("ADVANCED") == 0)) {
1567703175067:PEcAn.utils::status.start("ADVANCED")
1567703175068:q();
1567703175069:}
1567703175071:# Start ecosystem model runs
1567703175071:if (PEcAn.utils::status.check("MODEL") == 0) {
1567703175072:PEcAn.utils::status.start("MODEL")
1567703175073:PEcAn.remote::runModule.start.model.runs(settings, stop.on.error = FALSE)
1567703175074:PEcAn.utils::status.end()
1567703175074:}
1567703188942:# Get results of model runs
1567703188943:if (PEcAn.utils::status.check("OUTPUT") == 0) {
1567703188944:PEcAn.utils::status.start("OUTPUT")
1567703188945:runModule.get.results(settings)
1567703188946:PEcAn.utils::status.end()
1567703188947:}
1567703189281:# Run ensemble analysis on model output.
1567703189282:if ('ensemble' %in% names(settings) & PEcAn.utils::status.check("ENSEMBLE") == 0) {
1567703189282:PEcAn.utils::status.start("ENSEMBLE")
1567703189283:runModule.run.ensemble.analysis(settings, TRUE)
1567703189284:PEcAn.utils::status.end()
1567703189284:}
1567703191756:# Run sensitivity analysis and variance decomposition on model output
1567703191757:if ('sensitivity.analysis' %in% names(settings) & PEcAn.utils::status.check("SENSITIVITY") == 0) {
1567703191757:PEcAn.utils::status.start("SENSITIVITY")
1567703191758:runModule.run.sensitivity.analysis(settings)
1567703191759:PEcAn.utils::status.end()
1567703191760:}
1567703275979:traceback()
1567703303025:#!/usr/bin/env Rscript
1567703303026:#-------------------------------------------------------------------------------
1567703303028:# Copyright (c) 2012 University of Illinois, NCSA.
1567703303029:# All rights reserved. This program and the accompanying materials
1567703303031:# are made available under the terms of the
1567703303032:# University of Illinois/NCSA Open Source License
1567703303033:# which accompanies this distribution, and is available at
1567703303034:# http://opensource.ncsa.illinois.edu/license.html
1567703303035:#-------------------------------------------------------------------------------
1567703303036:# ----------------------------------------------------------------------
1567703303037:# Load required libraries
1567703303038:# ----------------------------------------------------------------------
1567703303039:#.libPaths()
1567703303040:#devtools::load_all("pecan/base/db/")
1567703303040:#devtools::load_all("pecan/base/all/")
1567703303041:library(PEcAn.all)
1567703308258:debug(sensitivity.analysis)
1567703308259:#debugonce(PEcAn.DB::assign.treatments)
1567703308260:#debugonce(PEcAn.DB::get.trait.data.pft)
1567703308260:#debugonce(PEcAn.remote::runModule.start.model.runs)
1567703308261:library(PEcAn.utils)
1567703308262:library(RCurl)
1567703308431:# make sure always to call status.end
1567703308432:options(warn=1)
1567703308432:options(error=quote({
1567703308433:PEcAn.utils::status.end("ERROR")
1567703308434:PEcAn.remote::kill.tunnel(settings)
1567703308434:if (!interactive()) {
1567703308435:q(status = 1)
1567703308436:}
1567703308436:}))
1567703308438:#options(warning.expression=status.end("ERROR"))
1567703308440:# ----------------------------------------------------------------------
1567703308440:# PEcAn Workflow
1567703308441:# ----------------------------------------------------------------------
1567703308442:# Open and read in settings file for PEcAn run.
1567703308442:args <- commandArgs(trailingOnly = TRUE)
1567703308443:if (is.na(args[1])){
1567703308444:settings <- PEcAn.settings::read.settings("biocro_darpa_files/pecan.biocro.darpa.xml")
1567703308444:} else {
1567703308445:settings.file <- args[1]
1567703308446:settings <- PEcAn.settings::read.settings(settings.file)
1567703308446:}
1567703308474:# Check for additional modules that will require adding settings
1567703308474:if("benchmarking" %in% names(settings)){
1567703308475:library(PEcAn.benchmark)
1567703308475:settings <- papply(settings, read_settings_BRR)
1567703308476:}
1567703308478:if("sitegroup" %in% names(settings)){
1567703308478:if(is.null(settings$sitegroup$nSite)){
1567703308479:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567703308479:sitegroupId = settings$sitegroup$id)
1567703308480:} else {
1567703308481:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567703308481:sitegroupId = settings$sitegroup$id,
1567703308482:nSite = settings$sitegroup$nSite)
1567703308483:}
1567703308483:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1567703308484:}
1567703308485:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1567703308486:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1567703309035:# Write pecan.CHECKED.xml
1567703309036:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1567703309107:# start from scratch if no continue is passed in
1567703309108:statusFile <- file.path(settings$outdir, "STATUS")
1567703309109:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1567703309110:file.remove(statusFile)
1567703309110:}
1567703309112:# Do conversions
1567703309112:settings <- PEcAn.workflow::do_conversions(settings)
1567703309190:# Query the trait database for data and priors
1567703309191:if (PEcAn.utils::status.check("TRAIT") == 0){
1567703309192:PEcAn.utils::status.start("TRAIT")
1567703309192:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1567703309193:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1567703309194:PEcAn.utils::status.end()
1567703309195:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1567703309195:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1567703309196:}
1567703312087:# Run the PEcAn meta.analysis
1567703312088:if(!is.null(settings$meta.analysis)) {
1567703312089:if (PEcAn.utils::status.check("META") == 0){
1567703312090:PEcAn.utils::status.start("META")
1567703312090:PEcAn.MA::runModule.run.meta.analysis(settings)
1567703312091:PEcAn.utils::status.end()
1567703312092:}
1567703312093:}
1567703313818:# Write model specific configs
1567703313819:if (PEcAn.utils::status.check("CONFIG") == 0){
1567703313820:PEcAn.utils::status.start("CONFIG")
1567703313821:settings <- PEcAn.workflow::runModule.run.write.configs(settings)
1567703313822:PEcAn.settings::write.settings(settings, outputfile='pecan.CONFIGS.xml')
1567703313823:PEcAn.utils::status.end()
1567703313824:} else if (file.exists(file.path(settings$outdir, 'pecan.CONFIGS.xml'))) {
1567703313824:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.CONFIGS.xml'))
1567703313825:}
1567703318062:if ((length(which(commandArgs() == "--advanced")) != 0) &&
1567703318063:(PEcAn.utils::status.check("ADVANCED") == 0)) {
1567703318064:PEcAn.utils::status.start("ADVANCED")
1567703318065:q();
1567703318065:}
1567703318067:# Start ecosystem model runs
1567703318067:if (PEcAn.utils::status.check("MODEL") == 0) {
1567703318068:PEcAn.utils::status.start("MODEL")
1567703318069:PEcAn.remote::runModule.start.model.runs(settings, stop.on.error = FALSE)
1567703318069:PEcAn.utils::status.end()
1567703318070:}
1567703332099:# Get results of model runs
1567703332100:if (PEcAn.utils::status.check("OUTPUT") == 0) {
1567703332101:PEcAn.utils::status.start("OUTPUT")
1567703332102:runModule.get.results(settings)
1567703332103:PEcAn.utils::status.end()
1567703332104:}
1567703332431:# Run ensemble analysis on model output.
1567703332432:if ('ensemble' %in% names(settings) & PEcAn.utils::status.check("ENSEMBLE") == 0) {
1567703332432:PEcAn.utils::status.start("ENSEMBLE")
1567703332433:runModule.run.ensemble.analysis(settings, TRUE)
1567703332434:PEcAn.utils::status.end()
1567703332434:}
1567703334855:# Run sensitivity analysis and variance decomposition on model output
1567703334856:if ('sensitivity.analysis' %in% names(settings) & PEcAn.utils::status.check("SENSITIVITY") == 0) {
1567703334856:PEcAn.utils::status.start("SENSITIVITY")
1567703334857:runModule.run.sensitivity.analysis(settings)
1567703334858:PEcAn.utils::status.end()
1567703334859:}
1567703398159:trait.samples
1567703404983:head(trait.samples)
1567703460454:#!/usr/bin/env Rscript
1567703460456:#-------------------------------------------------------------------------------
1567703460457:# Copyright (c) 2012 University of Illinois, NCSA.
1567703460459:# All rights reserved. This program and the accompanying materials
1567703460460:# are made available under the terms of the
1567703460462:# University of Illinois/NCSA Open Source License
1567703460463:# which accompanies this distribution, and is available at
1567703460464:# http://opensource.ncsa.illinois.edu/license.html
1567703460466:#-------------------------------------------------------------------------------
1567703460467:# ----------------------------------------------------------------------
1567703460468:# Load required libraries
1567703460469:# ----------------------------------------------------------------------
1567703460469:#.libPaths()
1567703460470:#devtools::load_all("pecan/base/db/")
1567703460471:#devtools::load_all("pecan/base/all/")
1567703460472:library(PEcAn.all)
1567703465688:debug(sensitivity.analysis)
1567703465689:#debugonce(PEcAn.DB::assign.treatments)
1567703465690:#debugonce(PEcAn.DB::get.trait.data.pft)
1567703465690:#debugonce(PEcAn.remote::runModule.start.model.runs)
1567703465691:library(PEcAn.utils)
1567703465692:library(RCurl)
1567703465861:# make sure always to call status.end
1567703465862:options(warn=1)
1567703465863:options(error=quote({
1567703465863:PEcAn.utils::status.end("ERROR")
1567703465864:PEcAn.remote::kill.tunnel(settings)
1567703465865:if (!interactive()) {
1567703465866:q(status = 1)
1567703465866:}
1567703465867:}))
1567703465869:#options(warning.expression=status.end("ERROR"))
1567703465870:# ----------------------------------------------------------------------
1567703465871:# PEcAn Workflow
1567703465872:# ----------------------------------------------------------------------
1567703465872:# Open and read in settings file for PEcAn run.
1567703465873:args <- commandArgs(trailingOnly = TRUE)
1567703465874:if (is.na(args[1])){
1567703465874:settings <- PEcAn.settings::read.settings("biocro_darpa_files/pecan.biocro.darpa.xml")
1567703465875:} else {
1567703465876:settings.file <- args[1]
1567703465876:settings <- PEcAn.settings::read.settings(settings.file)
1567703465877:}
1567703465905:# Check for additional modules that will require adding settings
1567703465906:if("benchmarking" %in% names(settings)){
1567703465907:library(PEcAn.benchmark)
1567703465907:settings <- papply(settings, read_settings_BRR)
1567703465908:}
1567703465910:if("sitegroup" %in% names(settings)){
1567703465910:if(is.null(settings$sitegroup$nSite)){
1567703465911:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567703465912:sitegroupId = settings$sitegroup$id)
1567703465912:} else {
1567703465913:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567703465914:sitegroupId = settings$sitegroup$id,
1567703465915:nSite = settings$sitegroup$nSite)
1567703465946:}
1567703465947:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1567703465948:}
1567703465951:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1567703465952:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1567703466512:# Write pecan.CHECKED.xml
1567703466512:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1567703466583:# start from scratch if no continue is passed in
1567703466583:statusFile <- file.path(settings$outdir, "STATUS")
1567703466584:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1567703466585:file.remove(statusFile)
1567703466586:}
1567703466587:# Do conversions
1567703466588:settings <- PEcAn.workflow::do_conversions(settings)
1567703466666:# Query the trait database for data and priors
1567703466666:if (PEcAn.utils::status.check("TRAIT") == 0){
1567703466667:PEcAn.utils::status.start("TRAIT")
1567703466668:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1567703466668:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1567703466669:PEcAn.utils::status.end()
1567703466670:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1567703466671:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1567703466671:}
1567703469478:# Run the PEcAn meta.analysis
1567703469479:if(!is.null(settings$meta.analysis)) {
1567703469480:if (PEcAn.utils::status.check("META") == 0){
1567703469480:PEcAn.utils::status.start("META")
1567703469481:PEcAn.MA::runModule.run.meta.analysis(settings)
1567703469482:PEcAn.utils::status.end()
1567703469483:}
1567703469483:}
1567703472285:# Write model specific configs
1567703472285:if (PEcAn.utils::status.check("CONFIG") == 0){
1567703472286:PEcAn.utils::status.start("CONFIG")
1567703472287:settings <- PEcAn.workflow::runModule.run.write.configs(settings)
1567703472288:PEcAn.settings::write.settings(settings, outputfile='pecan.CONFIGS.xml')
1567703472289:PEcAn.utils::status.end()
1567703472290:} else if (file.exists(file.path(settings$outdir, 'pecan.CONFIGS.xml'))) {
1567703472290:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.CONFIGS.xml'))
1567703472291:}
1567703476583:if ((length(which(commandArgs() == "--advanced")) != 0) &&
1567703476584:(PEcAn.utils::status.check("ADVANCED") == 0)) {
1567703476585:PEcAn.utils::status.start("ADVANCED")
1567703476586:q();
1567703476586:}
1567703476588:# Start ecosystem model runs
1567703476589:if (PEcAn.utils::status.check("MODEL") == 0) {
1567703476589:PEcAn.utils::status.start("MODEL")
1567703476590:PEcAn.remote::runModule.start.model.runs(settings, stop.on.error = FALSE)
1567703476591:PEcAn.utils::status.end()
1567703476591:}
1567703490560:# Get results of model runs
1567703490562:if (PEcAn.utils::status.check("OUTPUT") == 0) {
1567703490562:PEcAn.utils::status.start("OUTPUT")
1567703490563:runModule.get.results(settings)
1567703490564:PEcAn.utils::status.end()
1567703490565:}
1567703490899:# Run ensemble analysis on model output.
1567703490900:if ('ensemble' %in% names(settings) & PEcAn.utils::status.check("ENSEMBLE") == 0) {
1567703490901:PEcAn.utils::status.start("ENSEMBLE")
1567703490901:runModule.run.ensemble.analysis(settings, TRUE)
1567703490902:PEcAn.utils::status.end()
1567703490903:}
1567703493309:# Run sensitivity analysis and variance decomposition on model output
1567703493310:if ('sensitivity.analysis' %in% names(settings) & PEcAn.utils::status.check("SENSITIVITY") == 0) {
1567703493311:PEcAn.utils::status.start("SENSITIVITY")
1567703493311:runModule.run.sensitivity.analysis(settings)
1567703493312:PEcAn.utils::status.end()
1567703493313:}
1567703551063:sapply(traits, function(trait) sa.splinefun(sa.samples[[trait]],
1567703551065:sa.output[[trait]]))
1567703562817:sapply(traits, function(trait) sa.splinefun(sa.samples[[trait]],
1567703562819:sa.output[[trait]]))
1567703597018:trait
1567703608300:sa.samples[[trait]]
1567704193450:?sapply
1567704222421:?sa.splinefun
1567704242480:View(trait.samples)
1567704285869:head(traits[["Vcmax"]])
1567704293395:traits[["Vcmax"]]
1567704328121:traits
1567704345167:sa.samples[["Vcmax"]]
1567704350283:?sa.samples
1567704368481:View(sa.samples)
1567704393792:sa.samples[["Vcmax"]]
1567704401458:sa.output[["Vcmax"]]
1567704422088:sa.splinefun(sa.samples[["Vcmax"]], sa.output[["Vcmax"]])
1567704430333:traceback()
1567704503499:View(sa.output)
1567704759246:#!/usr/bin/env Rscript
1567704759247:#-------------------------------------------------------------------------------
1567704759248:# Copyright (c) 2012 University of Illinois, NCSA.
1567704759248:# All rights reserved. This program and the accompanying materials
1567704759249:# are made available under the terms of the
1567704759250:# University of Illinois/NCSA Open Source License
1567704759251:# which accompanies this distribution, and is available at
1567704759252:# http://opensource.ncsa.illinois.edu/license.html
1567704759253:#-------------------------------------------------------------------------------
1567704759254:# ----------------------------------------------------------------------
1567704759255:# Load required libraries
1567704759256:# ----------------------------------------------------------------------
1567704759256:#.libPaths()
1567704759257:#devtools::load_all("pecan/base/db/")
1567704759258:#devtools::load_all("pecan/base/all/")
1567704759262:library(PEcAn.all)
1567704764531:debug(sensitivity.analysis)
1567704764532:#debugonce(PEcAn.DB::assign.treatments)
1567704764533:#debugonce(PEcAn.DB::get.trait.data.pft)
1567704764534:#debugonce(PEcAn.remote::runModule.start.model.runs)
1567704764535:library(PEcAn.utils)
1567704764536:library(RCurl)
1567704764706:# make sure always to call status.end
1567704764707:options(warn=1)
1567704764708:options(error=quote({
1567704764709:PEcAn.utils::status.end("ERROR")
1567704764709:PEcAn.remote::kill.tunnel(settings)
1567704764710:if (!interactive()) {
1567704764711:q(status = 1)
1567704764711:}
1567704764712:}))
1567704764714:#options(warning.expression=status.end("ERROR"))
1567704764715:# ----------------------------------------------------------------------
1567704764716:# PEcAn Workflow
1567704764717:# ----------------------------------------------------------------------
1567704764717:# Open and read in settings file for PEcAn run.
1567704764718:args <- commandArgs(trailingOnly = TRUE)
1567704764719:if (is.na(args[1])){
1567704764719:settings <- PEcAn.settings::read.settings("biocro_darpa_files/pecan.biocro.darpa.xml")
1567704764720:} else {
1567704764721:settings.file <- args[1]
1567704764721:settings <- PEcAn.settings::read.settings(settings.file)
1567704764722:}
1567704764750:# Check for additional modules that will require adding settings
1567704764750:if("benchmarking" %in% names(settings)){
1567704764751:library(PEcAn.benchmark)
1567704764752:settings <- papply(settings, read_settings_BRR)
1567704764753:}
1567704764754:if("sitegroup" %in% names(settings)){
1567704764755:if(is.null(settings$sitegroup$nSite)){
1567704764755:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567704764756:sitegroupId = settings$sitegroup$id)
1567704764757:} else {
1567704764757:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567704764758:sitegroupId = settings$sitegroup$id,
1567704764759:nSite = settings$sitegroup$nSite)
1567704764759:}
1567704764760:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1567704764761:}
1567704764762:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1567704764763:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1567704765322:# Write pecan.CHECKED.xml
1567704765323:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1567704765395:# start from scratch if no continue is passed in
1567704765395:statusFile <- file.path(settings$outdir, "STATUS")
1567704765396:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1567704765397:file.remove(statusFile)
1567704765398:}
1567704765399:# Do conversions
1567704765400:settings <- PEcAn.workflow::do_conversions(settings)
1567704765479:# Query the trait database for data and priors
1567704765480:if (PEcAn.utils::status.check("TRAIT") == 0){
1567704765481:PEcAn.utils::status.start("TRAIT")
1567704765481:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1567704765482:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1567704765483:PEcAn.utils::status.end()
1567704765484:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1567704765484:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1567704765485:}
1567704768193:# Run the PEcAn meta.analysis
1567704768194:if(!is.null(settings$meta.analysis)) {
1567704768195:if (PEcAn.utils::status.check("META") == 0){
1567704768196:PEcAn.utils::status.start("META")
1567704768196:PEcAn.MA::runModule.run.meta.analysis(settings)
1567704768197:PEcAn.utils::status.end()
1567704768198:}
1567704768199:}
1567704770000:# Write model specific configs
1567704770001:if (PEcAn.utils::status.check("CONFIG") == 0){
1567704770002:PEcAn.utils::status.start("CONFIG")
1567704770003:settings <- PEcAn.workflow::runModule.run.write.configs(settings)
1567704770004:PEcAn.settings::write.settings(settings, outputfile='pecan.CONFIGS.xml')
1567704770005:PEcAn.utils::status.end()
1567704770005:} else if (file.exists(file.path(settings$outdir, 'pecan.CONFIGS.xml'))) {
1567704770006:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.CONFIGS.xml'))
1567704770007:}
1567704774323:if ((length(which(commandArgs() == "--advanced")) != 0) &&
1567704774324:(PEcAn.utils::status.check("ADVANCED") == 0)) {
1567704774325:PEcAn.utils::status.start("ADVANCED")
1567704774325:q();
1567704774326:}
1567704774328:# Start ecosystem model runs
1567704774329:if (PEcAn.utils::status.check("MODEL") == 0) {
1567704774330:PEcAn.utils::status.start("MODEL")
1567704774330:PEcAn.remote::runModule.start.model.runs(settings, stop.on.error = FALSE)
1567704774331:PEcAn.utils::status.end()
1567704774332:}
1567704788460:# Get results of model runs
1567704788461:if (PEcAn.utils::status.check("OUTPUT") == 0) {
1567704788461:PEcAn.utils::status.start("OUTPUT")
1567704788462:runModule.get.results(settings)
1567704788463:PEcAn.utils::status.end()
1567704788464:}
1567704788795:# Run ensemble analysis on model output.
1567704788796:if ('ensemble' %in% names(settings) & PEcAn.utils::status.check("ENSEMBLE") == 0) {
1567704788797:PEcAn.utils::status.start("ENSEMBLE")
1567704788798:runModule.run.ensemble.analysis(settings, TRUE)
1567704788798:PEcAn.utils::status.end()
1567704788799:}
1567704791259:# Run sensitivity analysis and variance decomposition on model output
1567704791259:if ('sensitivity.analysis' %in% names(settings) & PEcAn.utils::status.check("SENSITIVITY") == 0) {
1567704791260:PEcAn.utils::status.start("SENSITIVITY")
1567704791261:runModule.run.sensitivity.analysis(settings)
1567704791262:PEcAn.utils::status.end()
1567704791263:}
1567704808858:traits
1567704811933:trait.samples
1567704816146:View(sa.output)
1567704820303:View(sa.output)
1567704909927:#!/usr/bin/env Rscript
1567704909928:#-------------------------------------------------------------------------------
1567704909929:# Copyright (c) 2012 University of Illinois, NCSA.
1567704909930:# All rights reserved. This program and the accompanying materials
1567704909931:# are made available under the terms of the
1567704909932:# University of Illinois/NCSA Open Source License
1567704909933:# which accompanies this distribution, and is available at
1567704909934:# http://opensource.ncsa.illinois.edu/license.html
1567704909934:#-------------------------------------------------------------------------------
1567704909936:# ----------------------------------------------------------------------
1567704909936:# Load required libraries
1567704909937:# ----------------------------------------------------------------------
1567704909938:#.libPaths()
1567704909939:#devtools::load_all("pecan/base/db/")
1567704909939:#devtools::load_all("pecan/base/all/")
1567704909940:library(PEcAn.all)
1567704915205:debug(sensitivity.analysis)
1567704915206:#debugonce(PEcAn.DB::assign.treatments)
1567704915208:#debugonce(PEcAn.DB::get.trait.data.pft)
1567704915209:#debugonce(PEcAn.remote::runModule.start.model.runs)
1567704915211:library(PEcAn.utils)
1567704915212:library(RCurl)
1567704915386:# make sure always to call status.end
1567704915386:options(warn=1)
1567704915387:options(error=quote({
1567704915388:PEcAn.utils::status.end("ERROR")
1567704915389:PEcAn.remote::kill.tunnel(settings)
1567704915389:if (!interactive()) {
1567704915390:q(status = 1)
1567704915391:}
1567704915391:}))
1567704915393:#options(warning.expression=status.end("ERROR"))
1567704915394:# ----------------------------------------------------------------------
1567704915395:# PEcAn Workflow
1567704915396:# ----------------------------------------------------------------------
1567704915396:# Open and read in settings file for PEcAn run.
1567704915397:args <- commandArgs(trailingOnly = TRUE)
1567704915398:if (is.na(args[1])){
1567704915399:settings <- PEcAn.settings::read.settings("biocro_darpa_files/pecan.biocro.darpa.xml")
1567704915399:} else {
1567704915400:settings.file <- args[1]
1567704915400:settings <- PEcAn.settings::read.settings(settings.file)
1567704915401:}
1567704915429:# Check for additional modules that will require adding settings
1567704915430:if("benchmarking" %in% names(settings)){
1567704915430:library(PEcAn.benchmark)
1567704915431:settings <- papply(settings, read_settings_BRR)
1567704915432:}
1567704915433:if("sitegroup" %in% names(settings)){
1567704915434:if(is.null(settings$sitegroup$nSite)){
1567704915435:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567704915435:sitegroupId = settings$sitegroup$id)
1567704915436:} else {
1567704915437:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567704915437:sitegroupId = settings$sitegroup$id,
1567704915438:nSite = settings$sitegroup$nSite)
1567704915439:}
1567704915440:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1567704915440:}
1567704915442:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1567704915442:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1567704916008:# Write pecan.CHECKED.xml
1567704916009:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1567704916081:# start from scratch if no continue is passed in
1567704916081:statusFile <- file.path(settings$outdir, "STATUS")
1567704916082:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1567704916083:file.remove(statusFile)
1567704916084:}
1567704916085:# Do conversions
1567704916086:settings <- PEcAn.workflow::do_conversions(settings)
1567704916166:# Query the trait database for data and priors
1567704916167:if (PEcAn.utils::status.check("TRAIT") == 0){
1567704916168:PEcAn.utils::status.start("TRAIT")
1567704916169:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1567704916169:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1567704916170:PEcAn.utils::status.end()
1567704916171:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1567704916172:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1567704916172:}
1567704918858:# Run the PEcAn meta.analysis
1567704918859:if(!is.null(settings$meta.analysis)) {
1567704918859:if (PEcAn.utils::status.check("META") == 0){
1567704918860:PEcAn.utils::status.start("META")
1567704918861:PEcAn.MA::runModule.run.meta.analysis(settings)
1567704918862:PEcAn.utils::status.end()
1567704918863:}
1567704918863:}
1567704920595:# Write model specific configs
1567704920596:if (PEcAn.utils::status.check("CONFIG") == 0){
1567704920597:PEcAn.utils::status.start("CONFIG")
1567704920598:settings <- PEcAn.workflow::runModule.run.write.configs(settings)
1567704920599:PEcAn.settings::write.settings(settings, outputfile='pecan.CONFIGS.xml')
1567704920600:PEcAn.utils::status.end()
1567704920601:} else if (file.exists(file.path(settings$outdir, 'pecan.CONFIGS.xml'))) {
1567704920602:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.CONFIGS.xml'))
1567704920603:}
1567704924832:if ((length(which(commandArgs() == "--advanced")) != 0) &&
1567704924833:(PEcAn.utils::status.check("ADVANCED") == 0)) {
1567704924834:PEcAn.utils::status.start("ADVANCED")
1567704924834:q();
1567704924835:}
1567704924836:# Start ecosystem model runs
1567704924837:if (PEcAn.utils::status.check("MODEL") == 0) {
1567704924838:PEcAn.utils::status.start("MODEL")
1567704924838:PEcAn.remote::runModule.start.model.runs(settings, stop.on.error = FALSE)
1567704924839:PEcAn.utils::status.end()
1567704924840:}
1567704938827:# Get results of model runs
1567704938828:if (PEcAn.utils::status.check("OUTPUT") == 0) {
1567704938830:PEcAn.utils::status.start("OUTPUT")
1567704938831:runModule.get.results(settings)
1567704938832:PEcAn.utils::status.end()
1567704938833:}
1567704939163:# Run ensemble analysis on model output.
1567704939164:if ('ensemble' %in% names(settings) & PEcAn.utils::status.check("ENSEMBLE") == 0) {
1567704939165:PEcAn.utils::status.start("ENSEMBLE")
1567704939166:runModule.run.ensemble.analysis(settings, TRUE)
1567704939166:PEcAn.utils::status.end()
1567704939167:}
1567704941598:# Run sensitivity analysis and variance decomposition on model output
1567704941598:if ('sensitivity.analysis' %in% names(settings) & PEcAn.utils::status.check("SENSITIVITY") == 0) {
1567704941599:PEcAn.utils::status.start("SENSITIVITY")
1567704941600:runModule.run.sensitivity.analysis(settings)
1567704941601:PEcAn.utils::status.end()
1567704941602:}
1567705054088:traits
1567705058378:View(trait.samples)
1567705085341:#!/usr/bin/env Rscript
1567705085343:#-------------------------------------------------------------------------------
1567705085344:# Copyright (c) 2012 University of Illinois, NCSA.
1567705085346:# All rights reserved. This program and the accompanying materials
1567705085347:# are made available under the terms of the
1567705085348:# University of Illinois/NCSA Open Source License
1567705085348:# which accompanies this distribution, and is available at
1567705085349:# http://opensource.ncsa.illinois.edu/license.html
1567705085350:#-------------------------------------------------------------------------------
1567705085351:# ----------------------------------------------------------------------
1567705085352:# Load required libraries
1567705085352:# ----------------------------------------------------------------------
1567705085353:#.libPaths()
1567705085354:#devtools::load_all("pecan/base/db/")
1567705085354:#devtools::load_all("pecan/base/all/")
1567705085355:library(PEcAn.all)
1567705090567:debug(sensitivity.analysis)
1567705090568:#debugonce(PEcAn.DB::assign.treatments)
1567705090569:#debugonce(PEcAn.DB::get.trait.data.pft)
1567705090569:#debugonce(PEcAn.remote::runModule.start.model.runs)
1567705090570:library(PEcAn.utils)
1567705090571:library(RCurl)
1567705090740:# make sure always to call status.end
1567705090741:options(warn=1)
1567705090742:options(error=quote({
1567705090742:PEcAn.utils::status.end("ERROR")
1567705090743:PEcAn.remote::kill.tunnel(settings)
1567705090744:if (!interactive()) {
1567705090745:q(status = 1)
1567705090745:}
1567705090746:}))
1567705090748:#options(warning.expression=status.end("ERROR"))
1567705090749:# ----------------------------------------------------------------------
1567705090750:# PEcAn Workflow
1567705090751:# ----------------------------------------------------------------------
1567705090751:# Open and read in settings file for PEcAn run.
1567705090752:args <- commandArgs(trailingOnly = TRUE)
1567705090753:if (is.na(args[1])){
1567705090754:settings <- PEcAn.settings::read.settings("biocro_darpa_files/pecan.biocro.darpa.xml")
1567705090754:} else {
1567705090755:settings.file <- args[1]
1567705090756:settings <- PEcAn.settings::read.settings(settings.file)
1567705090756:}
1567705090783:# Check for additional modules that will require adding settings
1567705090784:if("benchmarking" %in% names(settings)){
1567705090785:library(PEcAn.benchmark)
1567705090786:settings <- papply(settings, read_settings_BRR)
1567705090786:}
1567705090788:if("sitegroup" %in% names(settings)){
1567705090789:if(is.null(settings$sitegroup$nSite)){
1567705090789:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567705090790:sitegroupId = settings$sitegroup$id)
1567705090791:} else {
1567705090791:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567705090792:sitegroupId = settings$sitegroup$id,
1567705090793:nSite = settings$sitegroup$nSite)
1567705090793:}
1567705090794:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1567705090795:}
1567705090796:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1567705090797:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1567705091347:# Write pecan.CHECKED.xml
1567705091347:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1567705091419:# start from scratch if no continue is passed in
1567705091420:statusFile <- file.path(settings$outdir, "STATUS")
1567705091421:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1567705091421:file.remove(statusFile)
1567705091422:}
1567705091424:# Do conversions
1567705091424:settings <- PEcAn.workflow::do_conversions(settings)
1567705091503:# Query the trait database for data and priors
1567705091503:if (PEcAn.utils::status.check("TRAIT") == 0){
1567705091504:PEcAn.utils::status.start("TRAIT")
1567705091505:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1567705091506:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1567705091506:PEcAn.utils::status.end()
1567705091507:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1567705091508:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1567705091509:}
1567705094171:# Run the PEcAn meta.analysis
1567705094172:if(!is.null(settings$meta.analysis)) {
1567705094173:if (PEcAn.utils::status.check("META") == 0){
1567705094173:PEcAn.utils::status.start("META")
1567705094174:PEcAn.MA::runModule.run.meta.analysis(settings)
1567705094175:PEcAn.utils::status.end()
1567705094176:}
1567705094176:}
1567705095859:# Write model specific configs
1567705095860:if (PEcAn.utils::status.check("CONFIG") == 0){
1567705095861:PEcAn.utils::status.start("CONFIG")
1567705095862:settings <- PEcAn.workflow::runModule.run.write.configs(settings)
1567705095862:PEcAn.settings::write.settings(settings, outputfile='pecan.CONFIGS.xml')
1567705095863:PEcAn.utils::status.end()
1567705095864:} else if (file.exists(file.path(settings$outdir, 'pecan.CONFIGS.xml'))) {
1567705095865:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.CONFIGS.xml'))
1567705095865:}
1567705100069:if ((length(which(commandArgs() == "--advanced")) != 0) &&
1567705100069:(PEcAn.utils::status.check("ADVANCED") == 0)) {
1567705100070:PEcAn.utils::status.start("ADVANCED")
1567705100071:q();
1567705100072:}
1567705100073:# Start ecosystem model runs
1567705100074:if (PEcAn.utils::status.check("MODEL") == 0) {
1567705100074:PEcAn.utils::status.start("MODEL")
1567705100075:PEcAn.remote::runModule.start.model.runs(settings, stop.on.error = FALSE)
1567705100076:PEcAn.utils::status.end()
1567705100077:}
1567705114104:# Get results of model runs
1567705114105:if (PEcAn.utils::status.check("OUTPUT") == 0) {
1567705114105:PEcAn.utils::status.start("OUTPUT")
1567705114106:runModule.get.results(settings)
1567705114107:PEcAn.utils::status.end()
1567705114108:}
1567705114436:# Run ensemble analysis on model output.
1567705114437:if ('ensemble' %in% names(settings) & PEcAn.utils::status.check("ENSEMBLE") == 0) {
1567705114437:PEcAn.utils::status.start("ENSEMBLE")
1567705114438:runModule.run.ensemble.analysis(settings, TRUE)
1567705114439:PEcAn.utils::status.end()
1567705114440:}
1567705116889:# Run sensitivity analysis and variance decomposition on model output
1567705116890:if ('sensitivity.analysis' %in% names(settings) & PEcAn.utils::status.check("SENSITIVITY") == 0) {
1567705116891:PEcAn.utils::status.start("SENSITIVITY")
1567705116891:runModule.run.sensitivity.analysis(settings)
1567705116892:PEcAn.utils::status.end()
1567705116893:}
1567705142592:View(sa.output)
1567705213335:#!/usr/bin/env Rscript
1567705213335:#-------------------------------------------------------------------------------
1567705213336:# Copyright (c) 2012 University of Illinois, NCSA.
1567705213337:# All rights reserved. This program and the accompanying materials
1567705213338:# are made available under the terms of the
1567705213338:# University of Illinois/NCSA Open Source License
1567705213339:# which accompanies this distribution, and is available at
1567705213340:# http://opensource.ncsa.illinois.edu/license.html
1567705213340:#-------------------------------------------------------------------------------
1567705213342:# ----------------------------------------------------------------------
1567705213342:# Load required libraries
1567705213343:# ----------------------------------------------------------------------
1567705213344:#.libPaths()
1567705213344:#devtools::load_all("pecan/base/db/")
1567705213345:#devtools::load_all("pecan/base/all/")
1567705213346:library(PEcAn.all)
1567705218704:debug(sensitivity.analysis)
1567705218705:#debugonce(PEcAn.DB::assign.treatments)
1567705218706:#debugonce(PEcAn.DB::get.trait.data.pft)
1567705218707:#debugonce(PEcAn.remote::runModule.start.model.runs)
1567705218708:library(PEcAn.utils)
1567705218709:library(RCurl)
1567705218877:# make sure always to call status.end
1567705218878:options(warn=1)
1567705218879:options(error=quote({
1567705218880:PEcAn.utils::status.end("ERROR")
1567705218880:PEcAn.remote::kill.tunnel(settings)
1567705218881:if (!interactive()) {
1567705218882:q(status = 1)
1567705218882:}
1567705218883:}))
1567705218885:#options(warning.expression=status.end("ERROR"))
1567705218886:# ----------------------------------------------------------------------
1567705218887:# PEcAn Workflow
1567705218888:# ----------------------------------------------------------------------
1567705218888:# Open and read in settings file for PEcAn run.
1567705218889:args <- commandArgs(trailingOnly = TRUE)
1567705218890:if (is.na(args[1])){
1567705218891:settings <- PEcAn.settings::read.settings("biocro_darpa_files/pecan.biocro.darpa.xml")
1567705218891:} else {
1567705218892:settings.file <- args[1]
1567705218893:settings <- PEcAn.settings::read.settings(settings.file)
1567705218893:}
1567705218920:# Check for additional modules that will require adding settings
1567705218921:if("benchmarking" %in% names(settings)){
1567705218922:library(PEcAn.benchmark)
1567705218922:settings <- papply(settings, read_settings_BRR)
1567705218923:}
1567705218925:if("sitegroup" %in% names(settings)){
1567705218925:if(is.null(settings$sitegroup$nSite)){
1567705218926:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567705218927:sitegroupId = settings$sitegroup$id)
1567705218927:} else {
1567705218928:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567705218929:sitegroupId = settings$sitegroup$id,
1567705218930:nSite = settings$sitegroup$nSite)
1567705218930:}
1567705218931:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1567705218932:}
1567705218933:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1567705218934:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1567705219483:# Write pecan.CHECKED.xml
1567705219484:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1567705219558:# start from scratch if no continue is passed in
1567705219559:statusFile <- file.path(settings$outdir, "STATUS")
1567705219560:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1567705219561:file.remove(statusFile)
1567705219562:}
1567705219563:# Do conversions
1567705219564:settings <- PEcAn.workflow::do_conversions(settings)
1567705219643:# Query the trait database for data and priors
1567705219644:if (PEcAn.utils::status.check("TRAIT") == 0){
1567705219644:PEcAn.utils::status.start("TRAIT")
1567705219645:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1567705219646:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1567705219647:PEcAn.utils::status.end()
1567705219647:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1567705219648:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1567705219649:}
1567705222323:# Run the PEcAn meta.analysis
1567705222324:if(!is.null(settings$meta.analysis)) {
1567705222325:if (PEcAn.utils::status.check("META") == 0){
1567705222326:PEcAn.utils::status.start("META")
1567705222326:PEcAn.MA::runModule.run.meta.analysis(settings)
1567705222327:PEcAn.utils::status.end()
1567705222328:}
1567705222329:}
1567705224232:# Write model specific configs
1567705224233:if (PEcAn.utils::status.check("CONFIG") == 0){
1567705224234:PEcAn.utils::status.start("CONFIG")
1567705224235:settings <- PEcAn.workflow::runModule.run.write.configs(settings)
1567705224236:PEcAn.settings::write.settings(settings, outputfile='pecan.CONFIGS.xml')
1567705224237:PEcAn.utils::status.end()
1567705224238:} else if (file.exists(file.path(settings$outdir, 'pecan.CONFIGS.xml'))) {
1567705224239:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.CONFIGS.xml'))
1567705224240:}
1567705228565:if ((length(which(commandArgs() == "--advanced")) != 0) &&
1567705228566:(PEcAn.utils::status.check("ADVANCED") == 0)) {
1567705228567:PEcAn.utils::status.start("ADVANCED")
1567705228568:q();
1567705228569:}
1567705228570:# Start ecosystem model runs
1567705228571:if (PEcAn.utils::status.check("MODEL") == 0) {
1567705228571:PEcAn.utils::status.start("MODEL")
1567705228572:PEcAn.remote::runModule.start.model.runs(settings, stop.on.error = FALSE)
1567705228573:PEcAn.utils::status.end()
1567705228573:}
1567705242620:# Get results of model runs
1567705242621:if (PEcAn.utils::status.check("OUTPUT") == 0) {
1567705242623:PEcAn.utils::status.start("OUTPUT")
1567705242624:runModule.get.results(settings)
1567705242656:PEcAn.utils::status.end()
1567705242657:}
1567705242993:# Run ensemble analysis on model output.
1567705242993:if ('ensemble' %in% names(settings) & PEcAn.utils::status.check("ENSEMBLE") == 0) {
1567705242994:PEcAn.utils::status.start("ENSEMBLE")
1567705242995:runModule.run.ensemble.analysis(settings, TRUE)
1567705242996:PEcAn.utils::status.end()
1567705242996:}
1567705245439:# Run sensitivity analysis and variance decomposition on model output
1567705245440:if ('sensitivity.analysis' %in% names(settings) & PEcAn.utils::status.check("SENSITIVITY") == 0) {
1567705245440:PEcAn.utils::status.start("SENSITIVITY")
1567705245441:runModule.run.sensitivity.analysis(settings)
1567705245442:PEcAn.utils::status.end()
1567705245443:}
1567705278365:#!/usr/bin/env Rscript
1567705278366:#-------------------------------------------------------------------------------
1567705278367:# Copyright (c) 2012 University of Illinois, NCSA.
1567705278367:# All rights reserved. This program and the accompanying materials
1567705278368:# are made available under the terms of the
1567705278369:# University of Illinois/NCSA Open Source License
1567705278370:# which accompanies this distribution, and is available at
1567705278370:# http://opensource.ncsa.illinois.edu/license.html
1567705278371:#-------------------------------------------------------------------------------
1567705278372:# ----------------------------------------------------------------------
1567705278373:# Load required libraries
1567705278374:# ----------------------------------------------------------------------
1567705278374:#.libPaths()
1567705278375:#devtools::load_all("pecan/base/db/")
1567705278375:#devtools::load_all("pecan/base/all/")
1567705278376:library(PEcAn.all)
1567705283698:debug(sensitivity.analysis)
1567705283699:#debugonce(PEcAn.DB::assign.treatments)
1567705283700:#debugonce(PEcAn.DB::get.trait.data.pft)
1567705283700:#debugonce(PEcAn.remote::runModule.start.model.runs)
1567705283701:library(PEcAn.utils)
1567705283702:library(RCurl)
1567705283875:# make sure always to call status.end
1567705283876:options(warn=1)
1567705283877:options(error=quote({
1567705283878:PEcAn.utils::status.end("ERROR")
1567705283878:PEcAn.remote::kill.tunnel(settings)
1567705283879:if (!interactive()) {
1567705283880:q(status = 1)
1567705283880:}
1567705283881:}))
1567705283882:#options(warning.expression=status.end("ERROR"))
1567705283884:# ----------------------------------------------------------------------
1567705283885:# PEcAn Workflow
1567705283885:# ----------------------------------------------------------------------
1567705283886:# Open and read in settings file for PEcAn run.
1567705283887:args <- commandArgs(trailingOnly = TRUE)
1567705283888:if (is.na(args[1])){
1567705283888:settings <- PEcAn.settings::read.settings("biocro_darpa_files/pecan.biocro.darpa.xml")
1567705283889:} else {
1567705283890:settings.file <- args[1]
1567705283890:settings <- PEcAn.settings::read.settings(settings.file)
1567705283891:}
1567705283919:# Check for additional modules that will require adding settings
1567705283919:if("benchmarking" %in% names(settings)){
1567705283920:library(PEcAn.benchmark)
1567705283921:settings <- papply(settings, read_settings_BRR)
1567705283922:}
1567705283923:if("sitegroup" %in% names(settings)){
1567705283924:if(is.null(settings$sitegroup$nSite)){
1567705283925:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567705283925:sitegroupId = settings$sitegroup$id)
1567705283926:} else {
1567705283927:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1567705283927:sitegroupId = settings$sitegroup$id,
1567705283928:nSite = settings$sitegroup$nSite)
1567705283929:}
1567705283930:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1567705283930:}
1567705283932:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1567705283932:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1567705284489:# Write pecan.CHECKED.xml
1567705284490:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1567705284562:# start from scratch if no continue is passed in
1567705284563:statusFile <- file.path(settings$outdir, "STATUS")
1567705284564:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1567705284565:file.remove(statusFile)
1567705284566:}
1567705284567:# Do conversions
1567705284568:settings <- PEcAn.workflow::do_conversions(settings)
1567705284647:# Query the trait database for data and priors
1567705284648:if (PEcAn.utils::status.check("TRAIT") == 0){
1567705284649:PEcAn.utils::status.start("TRAIT")
1567705284649:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1567705284650:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1567705284651:PEcAn.utils::status.end()
1567705284652:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1567705284653:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1567705284653:}
1567705287524:# Run the PEcAn meta.analysis
1567705287524:if(!is.null(settings$meta.analysis)) {
1567705287525:if (PEcAn.utils::status.check("META") == 0){
1567705287526:PEcAn.utils::status.start("META")
1567705287527:PEcAn.MA::runModule.run.meta.analysis(settings)
1567705287528:PEcAn.utils::status.end()
1567705287528:}
1567705287529:}
1567705289209:# Write model specific configs
1567705289210:if (PEcAn.utils::status.check("CONFIG") == 0){
1567705289211:PEcAn.utils::status.start("CONFIG")
1567705289212:settings <- PEcAn.workflow::runModule.run.write.configs(settings)
1567705289213:PEcAn.settings::write.settings(settings, outputfile='pecan.CONFIGS.xml')
1567705289213:PEcAn.utils::status.end()
1567705289214:} else if (file.exists(file.path(settings$outdir, 'pecan.CONFIGS.xml'))) {
1567705289215:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.CONFIGS.xml'))
1567705289216:}
1567705293481:if ((length(which(commandArgs() == "--advanced")) != 0) &&
1567705293482:(PEcAn.utils::status.check("ADVANCED") == 0)) {
1567705293483:PEcAn.utils::status.start("ADVANCED")
1567705293484:q();
1567705293484:}
1567705293486:# Start ecosystem model runs
1567705293487:if (PEcAn.utils::status.check("MODEL") == 0) {
1567705293488:PEcAn.utils::status.start("MODEL")
1567705293488:PEcAn.remote::runModule.start.model.runs(settings, stop.on.error = FALSE)
1567705293489:PEcAn.utils::status.end()
1567705293490:}
1567705307591:# Get results of model runs
1567705307591:if (PEcAn.utils::status.check("OUTPUT") == 0) {
1567705307592:PEcAn.utils::status.start("OUTPUT")
1567705307593:runModule.get.results(settings)
1567705307594:PEcAn.utils::status.end()
1567705307595:}
1567705307928:# Run ensemble analysis on model output.
1567705307929:if ('ensemble' %in% names(settings) & PEcAn.utils::status.check("ENSEMBLE") == 0) {
1567705307930:PEcAn.utils::status.start("ENSEMBLE")
1567705307931:runModule.run.ensemble.analysis(settings, TRUE)
1567705307931:PEcAn.utils::status.end()
1567705307932:}
1567705310360:# Run sensitivity analysis and variance decomposition on model output
1567705310361:if ('sensitivity.analysis' %in% names(settings) & PEcAn.utils::status.check("SENSITIVITY") == 0) {
1567705310362:PEcAn.utils::status.start("SENSITIVITY")
1567705310362:runModule.run.sensitivity.analysis(settings)
1567705310363:PEcAn.utils::status.end()
1567705310364:}
1567705327115:sa.samples
1567705335118:sa.samples
1567705359319:sensitivity.output
1567705372532:sensitivity.output[[pft$name]]
1567705375571:pft$names
1567706577500:PEcAn.visualization::plot.netcdf("biocro_darpa_results/out/ENS-00001-9000000000/2004.nc", "LAI")
1568054893668:# ----------------------------------------------------------------------
1568054893675:# Load required libraries
1568054893677:# ----------------------------------------------------------------------
1568054893679:library(PEcAn.all)
1568054927091:debugonce(PEcAn.DB::get.trait.data.pft)
1568054928140:library(PEcAn.utils)
1568054928340:library(RCurl)
1568054928927:# make sure always to call status.end
1568054928929:options(warn=1)
1568054929128:options(error=quote({
1568054929129:PEcAn.utils::status.end("ERROR")
1568054929131:PEcAn.remote::kill.tunnel(settings)
1568054929132:if (!interactive()) {
1568054929133:q(status = 1)
1568054929135:}
1568054929137:}))
1568054930568:# ----------------------------------------------------------------------
1568054930569:# PEcAn Workflow
1568054930570:# ----------------------------------------------------------------------
1568054930570:# Open and read in settings file for PEcAn run.
1568054930571:args <- commandArgs(trailingOnly = TRUE)
1568054931195:if (is.na(args[1])){
1568054931197:settings <- PEcAn.settings::read.settings("pecan.xml")
1568054931198:} else {
1568054931199:settings.file <- args[1]
1568054931200:settings <- PEcAn.settings::read.settings(settings.file)
1568054931202:}
1568054931406:# Check for additional modules that will require adding settings
1568054931407:if("benchmarking" %in% names(settings)){
1568054931409:library(PEcAn.benchmark)
1568054931410:settings <- papply(settings, read_settings_BRR)
1568054931412:}
1568054931930:if("sitegroup" %in% names(settings)){
1568054931931:if(is.null(settings$sitegroup$nSite)){
1568054931932:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1568054931934:sitegroupId = settings$sitegroup$id)
1568054931935:} else {
1568054931937:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1568054931938:sitegroupId = settings$sitegroup$id,
1568054931940:nSite = settings$sitegroup$nSite)
1568054931941:}
1568054931943:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1568054931943:}
1568054951153:# ----------------------------------------------------------------------
1568054951154:# Load required libraries
1568054951155:# ----------------------------------------------------------------------
1568054951156:library(PEcAn.all)
1568054958624:debugonce(PEcAn.DB::get.trait.data.pft)
1568054958815:library(PEcAn.utils)
1568054959051:library(RCurl)
1568054960209:# make sure always to call status.end
1568054960210:options(warn=1)
1568054960422:options(error=quote({
1568054960424:PEcAn.utils::status.end("ERROR")
1568054960425:PEcAn.remote::kill.tunnel(settings)
1568054960426:if (!interactive()) {
1568054960427:q(status = 1)
1568054960429:}
1568054960430:}))
1568054960977:# ----------------------------------------------------------------------
1568054960978:# PEcAn Workflow
1568054960979:# ----------------------------------------------------------------------
1568054960980:# Open and read in settings file for PEcAn run.
1568054960981:args <- commandArgs(trailingOnly = TRUE)
1568054961315:if (is.na(args[1])){
1568054961317:settings <- PEcAn.settings::read.settings("biocro_darpa_files/pecan.biocro.darpa.xml")
1568054961318:} else {
1568054961320:settings.file <- args[1]
1568054961322:settings <- PEcAn.settings::read.settings(settings.file)
1568054961324:}
1568054961534:# Check for additional modules that will require adding settings
1568054961535:if("benchmarking" %in% names(settings)){
1568054961536:library(PEcAn.benchmark)
1568054961537:settings <- papply(settings, read_settings_BRR)
1568054961538:}
1568054961774:if("sitegroup" %in% names(settings)){
1568054961776:if(is.null(settings$sitegroup$nSite)){
1568054961777:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1568054961778:sitegroupId = settings$sitegroup$id)
1568054961779:} else {
1568054961780:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1568054961782:sitegroupId = settings$sitegroup$id,
1568054961783:nSite = settings$sitegroup$nSite)
1568054961784:}
1568054961785:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1568054961786:}
1568054963472:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1568054963473:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1568054965039:# Write pecan.CHECKED.xml
1568054965041:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1568054965111:# start from scratch if no continue is passed in
1568054965112:statusFile <- file.path(settings$outdir, "STATUS")
1568054965168:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1568054965168:file.remove(statusFile)
1568054965169:}
1568054965600:# Do conversions
1568054965601:settings <- PEcAn.workflow::do_conversions(settings)
1568054966338:# Query the trait database for data and priors
1568054966339:if (PEcAn.utils::status.check("TRAIT") == 0){
1568054966341:PEcAn.utils::status.start("TRAIT")
1568054966342:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1568054966344:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1568054966345:PEcAn.utils::status.end()
1568054966347:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1568054966348:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1568054966350:}
1568055021814:dplyr::tbl(dbcon, "posteriors")
1568055029552:dplyr::tbl(dbcon, "posteriors") %>%
1568055029553:dplyr::filter(pft_id == !!pftid)
1568055043500:dplyr::tbl(dbcon, "posteriors") %>%
1568055043501:dplyr::filter(pft_id == !!pftid) %>% dplyr::collect()
1568055840610:#!/usr/bin/env Rscript
1568055840610:#-------------------------------------------------------------------------------
1568055840611:# Copyright (c) 2012 University of Illinois, NCSA.
1568055840612:# All rights reserved. This program and the accompanying materials
1568055840613:# are made available under the terms of the
1568055840614:# University of Illinois/NCSA Open Source License
1568055840614:# which accompanies this distribution, and is available at
1568055840615:# http://opensource.ncsa.illinois.edu/license.html
1568055840616:#-------------------------------------------------------------------------------
1568055840617:# ----------------------------------------------------------------------
1568055840618:# Load required libraries
1568055840618:# ----------------------------------------------------------------------
1568055840619:library(PEcAn.all)
1568055845270:debugonce(PEcAn.DB::get.trait.data.pft)
1568055845272:library(PEcAn.utils)
1568055845273:library(RCurl)
1568055845432:# make sure always to call status.end
1568055845433:options(warn=1)
1568055845434:options(error=quote({
1568055845435:PEcAn.utils::status.end("ERROR")
1568055845435:PEcAn.remote::kill.tunnel(settings)
1568055845436:if (!interactive()) {
1568055845437:q(status = 1)
1568055845437:}
1568055845438:}))
1568055845439:#options(warning.expression=status.end("ERROR"))
1568055845441:# ----------------------------------------------------------------------
1568055845441:# PEcAn Workflow
1568055845442:# ----------------------------------------------------------------------
1568055845443:# Open and read in settings file for PEcAn run.
1568055845443:args <- commandArgs(trailingOnly = TRUE)
1568055845444:if (is.na(args[1])){
1568055845445:settings <- PEcAn.settings::read.settings("biocro_darpa_files/pecan.biocro.darpa.xml")
1568055845445:} else {
1568055845446:settings.file <- args[1]
1568055845447:settings <- PEcAn.settings::read.settings(settings.file)
1568055845447:}
1568055845468:# Check for additional modules that will require adding settings
1568055845469:if("benchmarking" %in% names(settings)){
1568055845470:library(PEcAn.benchmark)
1568055845470:settings <- papply(settings, read_settings_BRR)
1568055845471:}
1568055845472:if("sitegroup" %in% names(settings)){
1568055845473:if(is.null(settings$sitegroup$nSite)){
1568055845474:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1568055845474:sitegroupId = settings$sitegroup$id)
1568055845475:} else {
1568055845476:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1568055845476:sitegroupId = settings$sitegroup$id,
1568055845477:nSite = settings$sitegroup$nSite)
1568055845478:}
1568055845478:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1568055845479:}
1568055845480:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1568055845481:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1568055845958:# Write pecan.CHECKED.xml
1568055845958:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1568055846024:# start from scratch if no continue is passed in
1568055846025:statusFile <- file.path(settings$outdir, "STATUS")
1568055846026:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1568055846027:file.remove(statusFile)
1568055846027:}
1568055846029:# Do conversions
1568055846030:settings <- PEcAn.workflow::do_conversions(settings)
1568055846107:# Query the trait database for data and priors
1568055846108:if (PEcAn.utils::status.check("TRAIT") == 0){
1568055846109:PEcAn.utils::status.start("TRAIT")
1568055846110:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1568055846110:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1568055846111:PEcAn.utils::status.end()
1568055846112:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1568055846113:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1568055846114:}
1568055888144:recent_posterior
1568055894205:recent_posterior
1568055911551:pft$posteriorid
1568055913980:if (length(recent_posterior) > 0) {
1568055913981:pft$posteriorid <- dplyr::tbl(dbcon, "posteriors") %>%
1568055913983:dplyr::filter(pft_id == !!pftid) %>% dplyr::arrange(dplyr::desc(created_at)) %>%
1568055913984:head(1) %>% dplyr::pull(id)
1568055917921:}
1568055929182:pft$posteriorid
1568055997938:length(recent_posterior)
1568056006812:recent_posterior
1568056059881:dplyr::tbl(dbcon, "posteriors") %>%
1568056059882:dplyr::filter(pft_id == !!pftid) %>% dplyr::arrange(dplyr::desc(created_at)) %>%
1568056059884:head(1) %>% dplyr::pull(id)
1568129015649:library(PEcAn.all)
1568129042254:test-get.trait.data.pft.R
1568129114209:library(PEcAn.all)
1568129143249:get.trait.data.pft()
1568129145281:get.trait.data.pft
1568131711999:# ----------------------------------------------------------------------
1568131712001:# Load required libraries
1568131712002:# ----------------------------------------------------------------------
1568131712004:library(PEcAn.all)
1568131718333:debugonce(runModule.run.sensitivity.analysis)
1568131719332:library(PEcAn.utils)
1568131720275:library(RCurl)
1568131720972:# make sure always to call status.end
1568131720974:options(warn=1)
1568131721833:options(error=quote({
1568131721835:PEcAn.utils::status.end("ERROR")
1568131721836:PEcAn.remote::kill.tunnel(settings)
1568131721838:if (!interactive()) {
1568131721840:q(status = 1)
1568131721842:}
1568131721843:}))
1568131722727:# ----------------------------------------------------------------------
1568131722728:# PEcAn Workflow
1568131722730:# ----------------------------------------------------------------------
1568131722732:# Open and read in settings file for PEcAn run.
1568131722734:args <- commandArgs(trailingOnly = TRUE)
1568131723876:if (is.na(args[1])){
1568131723877:settings <- PEcAn.settings::read.settings("biocro_darpa_files/sa_test.xml")
1568131723879:} else {
1568131723880:settings.file <- args[1]
1568131723882:settings <- PEcAn.settings::read.settings(settings.file)
1568131723883:}
1568131725068:# Check for additional modules that will require adding settings
1568131725069:if("benchmarking" %in% names(settings)){
1568131725071:library(PEcAn.benchmark)
1568131725072:settings <- papply(settings, read_settings_BRR)
1568131725073:}
1568131726022:if("sitegroup" %in% names(settings)){
1568131726023:if(is.null(settings$sitegroup$nSite)){
1568131726024:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1568131726025:sitegroupId = settings$sitegroup$id)
1568131726027:} else {
1568131726028:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1568131726029:sitegroupId = settings$sitegroup$id,
1568131726030:nSite = settings$sitegroup$nSite)
1568131726031:}
1568131726032:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1568131726033:}
1568131727017:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1568131727019:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1568131728640:# Write pecan.CHECKED.xml
1568131728641:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1568131730336:# start from scratch if no continue is passed in
1568131730337:statusFile <- file.path(settings$outdir, "STATUS")
1568131731555:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1568131731557:file.remove(statusFile)
1568131731558:}
1568131732563:# Do conversions
1568131732564:settings <- PEcAn.workflow::do_conversions(settings)
1568131734884:# Query the trait database for data and priors
1568131734886:if (PEcAn.utils::status.check("TRAIT") == 0){
1568131734887:PEcAn.utils::status.start("TRAIT")
1568131734888:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1568131734889:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1568131734891:PEcAn.utils::status.end()
1568131734892:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1568131734894:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1568131734895:}
1568131736596:# Run the PEcAn meta.analysis
1568131736597:if(!is.null(settings$meta.analysis)) {
1568131736598:if (PEcAn.utils::status.check("META") == 0){
1568131736599:PEcAn.utils::status.start("META")
1568131736600:PEcAn.MA::runModule.run.meta.analysis(settings)
1568131736601:PEcAn.utils::status.end()
1568131736601:}
1568131736602:}
1568131741251:# Write model specific configs
1568131741252:if (PEcAn.utils::status.check("CONFIG") == 0){
1568131741254:PEcAn.utils::status.start("CONFIG")
1568131741255:settings <- PEcAn.workflow::runModule.run.write.configs(settings)
1568131741257:PEcAn.settings::write.settings(settings, outputfile='pecan.CONFIGS.xml')
1568131741258:PEcAn.utils::status.end()
1568131741259:} else if (file.exists(file.path(settings$outdir, 'pecan.CONFIGS.xml'))) {
1568131741261:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.CONFIGS.xml'))
1568131741262:}
1568131749221:if ((length(which(commandArgs() == "--advanced")) != 0) &&
1568131749222:(PEcAn.utils::status.check("ADVANCED") == 0)) {
1568131749224:PEcAn.utils::status.start("ADVANCED")
1568131749226:q();
1568131749228:}
1568131751234:# Start ecosystem model runs
1568131751236:if (PEcAn.utils::status.check("MODEL") == 0) {
1568131751237:PEcAn.utils::status.start("MODEL")
1568131751239:PEcAn.remote::runModule.start.model.runs(settings, stop.on.error = FALSE)
1568131751240:PEcAn.utils::status.end()
1568131751240:}
1568131764239:# Get results of model runs
1568131764240:if (PEcAn.utils::status.check("OUTPUT") == 0) {
1568131764241:PEcAn.utils::status.start("OUTPUT")
1568131764242:runModule.get.results(settings)
1568131764243:PEcAn.utils::status.end()
1568131764244:}
1568131775147:# Run ensemble analysis on model output.
1568131775148:if ('ensemble' %in% names(settings) & PEcAn.utils::status.check("ENSEMBLE") == 0) {
1568131775149:PEcAn.utils::status.start("ENSEMBLE")
1568131775149:runModule.run.ensemble.analysis(settings, TRUE)
1568131775150:PEcAn.utils::status.end()
1568131775151:}
1568131778048:# Run sensitivity analysis and variance decomposition on model output
1568131778050:if ('sensitivity.analysis' %in% names(settings) & PEcAn.utils::status.check("SENSITIVITY") == 0) {
1568131778051:PEcAn.utils::status.start("SENSITIVITY")
1568131778053:runModule.run.sensitivity.analysis(settings)
1568131778054:PEcAn.utils::status.end()
1568131778056:}
1568131824301:#!/usr/bin/env Rscript
1568131824303:#-------------------------------------------------------------------------------
1568131824305:# Copyright (c) 2012 University of Illinois, NCSA.
1568131824306:# All rights reserved. This program and the accompanying materials
1568131824308:# are made available under the terms of the
1568131824308:# University of Illinois/NCSA Open Source License
1568131824309:# which accompanies this distribution, and is available at
1568131824310:# http://opensource.ncsa.illinois.edu/license.html
1568131824311:#-------------------------------------------------------------------------------
1568131824312:# ----------------------------------------------------------------------
1568131824313:# Load required libraries
1568131824314:# ----------------------------------------------------------------------
1568131824315:library(PEcAn.all)
1568131829552:debugonce(runModule.run.sensitivity.analysis)
1568131829553:library(PEcAn.utils)
1568131829554:library(RCurl)
1568131829758:# make sure always to call status.end
1568131829758:options(warn=1)
1568131829759:options(error=quote({
1568131829760:PEcAn.utils::status.end("ERROR")
1568131829761:PEcAn.remote::kill.tunnel(settings)
1568131829761:if (!interactive()) {
1568131829762:q(status = 1)
1568131829763:}
1568131829763:}))
1568131829765:#options(warning.expression=status.end("ERROR"))
1568131829767:# ----------------------------------------------------------------------
1568131829767:# PEcAn Workflow
1568131829768:# ----------------------------------------------------------------------
1568131829769:# Open and read in settings file for PEcAn run.
1568131829769:args <- commandArgs(trailingOnly = TRUE)
1568131829770:if (is.na(args[1])){
1568131829771:settings <- PEcAn.settings::read.settings("biocro_darpa_files/sa_test.xml")
1568131829771:} else {
1568131829772:settings.file <- args[1]
1568131829773:settings <- PEcAn.settings::read.settings(settings.file)
1568131829773:}
1568131829801:# Check for additional modules that will require adding settings
1568131829802:if("benchmarking" %in% names(settings)){
1568131829803:library(PEcAn.benchmark)
1568131829804:settings <- papply(settings, read_settings_BRR)
1568131829815:}
1568131829818:if("sitegroup" %in% names(settings)){
1568131829819:if(is.null(settings$sitegroup$nSite)){
1568131829820:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1568131829820:sitegroupId = settings$sitegroup$id)
1568131829822:} else {
1568131829823:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1568131829824:sitegroupId = settings$sitegroup$id,
1568131829825:nSite = settings$sitegroup$nSite)
1568131829826:}
1568131829827:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1568131829828:}
1568131829829:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1568131829830:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1568131830390:# Write pecan.CHECKED.xml
1568131830391:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1568131830464:# start from scratch if no continue is passed in
1568131830465:statusFile <- file.path(settings$outdir, "STATUS")
1568131830466:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1568131830466:file.remove(statusFile)
1568131830467:}
1568131830468:# Do conversions
1568131830469:settings <- PEcAn.workflow::do_conversions(settings)
1568131830547:# Query the trait database for data and priors
1568131830548:if (PEcAn.utils::status.check("TRAIT") == 0){
1568131830549:PEcAn.utils::status.start("TRAIT")
1568131830550:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1568131830550:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1568131830551:PEcAn.utils::status.end()
1568131830552:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1568131830552:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1568131830553:}
1568131832329:# Run the PEcAn meta.analysis
1568131832330:if(!is.null(settings$meta.analysis)) {
1568131832331:if (PEcAn.utils::status.check("META") == 0){
1568131832332:PEcAn.utils::status.start("META")
1568131832332:PEcAn.MA::runModule.run.meta.analysis(settings)
1568131832333:PEcAn.utils::status.end()
1568131832334:}
1568131832334:}
1568131832349:# Write model specific configs
1568131832350:if (PEcAn.utils::status.check("CONFIG") == 0){
1568131832351:PEcAn.utils::status.start("CONFIG")
1568131832351:settings <- PEcAn.workflow::runModule.run.write.configs(settings)
1568131832352:PEcAn.settings::write.settings(settings, outputfile='pecan.CONFIGS.xml')
1568131832353:PEcAn.utils::status.end()
1568131832353:} else if (file.exists(file.path(settings$outdir, 'pecan.CONFIGS.xml'))) {
1568131832354:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.CONFIGS.xml'))
1568131832355:}
1568131836597:if ((length(which(commandArgs() == "--advanced")) != 0) &&
1568131836598:(PEcAn.utils::status.check("ADVANCED") == 0)) {
1568131836598:PEcAn.utils::status.start("ADVANCED")
1568131836599:q();
1568131836600:}
1568131836601:# Start ecosystem model runs
1568131836602:if (PEcAn.utils::status.check("MODEL") == 0) {
1568131836603:PEcAn.utils::status.start("MODEL")
1568131836603:PEcAn.remote::runModule.start.model.runs(settings, stop.on.error = FALSE)
1568131836604:PEcAn.utils::status.end()
1568131836604:}
1568131851117:# Get results of model runs
1568131851118:if (PEcAn.utils::status.check("OUTPUT") == 0) {
1568131851119:PEcAn.utils::status.start("OUTPUT")
1568131851120:runModule.get.results(settings)
1568131851120:PEcAn.utils::status.end()
1568131851121:}
1568131851452:# Run ensemble analysis on model output.
1568131851453:if ('ensemble' %in% names(settings) & PEcAn.utils::status.check("ENSEMBLE") == 0) {
1568131851454:PEcAn.utils::status.start("ENSEMBLE")
1568131851454:runModule.run.ensemble.analysis(settings, TRUE)
1568131851455:PEcAn.utils::status.end()
1568131851456:}
1568131853997:# Run sensitivity analysis and variance decomposition on model output
1568131853998:if ('sensitivity.analysis' %in% names(settings) & PEcAn.utils::status.check("SENSITIVITY") == 0) {
1568131853998:PEcAn.utils::status.start("SENSITIVITY")
1568131853999:runModule.run.sensitivity.analysis(settings)
1568131854000:PEcAn.utils::status.end()
1568131854001:}
1568131942157:#!/usr/bin/env Rscript
1568131942158:#-------------------------------------------------------------------------------
1568131942160:# Copyright (c) 2012 University of Illinois, NCSA.
1568131942161:# All rights reserved. This program and the accompanying materials
1568131942162:# are made available under the terms of the
1568131942163:# University of Illinois/NCSA Open Source License
1568131942164:# which accompanies this distribution, and is available at
1568131942165:# http://opensource.ncsa.illinois.edu/license.html
1568131942165:#-------------------------------------------------------------------------------
1568131942167:# ----------------------------------------------------------------------
1568131942168:# Load required libraries
1568131942169:# ----------------------------------------------------------------------
1568131942170:library(PEcAn.all)
1568131947392:debugonce(run.sensitivity.analysis)
1568131947394:library(PEcAn.utils)
1568131947395:library(RCurl)
1568131947594:# make sure always to call status.end
1568131947595:options(warn=1)
1568131947595:options(error=quote({
1568131947596:PEcAn.utils::status.end("ERROR")
1568131947597:PEcAn.remote::kill.tunnel(settings)
1568131947598:if (!interactive()) {
1568131947598:q(status = 1)
1568131947599:}
1568131947600:}))
1568131947602:#options(warning.expression=status.end("ERROR"))
1568131947603:# ----------------------------------------------------------------------
1568131947604:# PEcAn Workflow
1568131947605:# ----------------------------------------------------------------------
1568131947606:# Open and read in settings file for PEcAn run.
1568131947606:args <- commandArgs(trailingOnly = TRUE)
1568131947607:if (is.na(args[1])){
1568131947608:settings <- PEcAn.settings::read.settings("biocro_darpa_files/sa_test.xml")
1568131947608:} else {
1568131947609:settings.file <- args[1]
1568131947610:settings <- PEcAn.settings::read.settings(settings.file)
1568131947610:}
1568131947639:# Check for additional modules that will require adding settings
1568131947640:if("benchmarking" %in% names(settings)){
1568131947641:library(PEcAn.benchmark)
1568131947642:settings <- papply(settings, read_settings_BRR)
1568131947642:}
1568131947644:if("sitegroup" %in% names(settings)){
1568131947645:if(is.null(settings$sitegroup$nSite)){
1568131947645:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1568131947646:sitegroupId = settings$sitegroup$id)
1568131947647:} else {
1568131947647:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1568131947648:sitegroupId = settings$sitegroup$id,
1568131947649:nSite = settings$sitegroup$nSite)
1568131947649:}
1568131947650:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1568131947651:}
1568131947653:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1568131947653:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1568131948205:# Write pecan.CHECKED.xml
1568131948206:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1568131948278:# start from scratch if no continue is passed in
1568131948279:statusFile <- file.path(settings$outdir, "STATUS")
1568131948280:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1568131948280:file.remove(statusFile)
1568131948281:}
1568131948283:# Do conversions
1568131948284:settings <- PEcAn.workflow::do_conversions(settings)
1568131948362:# Query the trait database for data and priors
1568131948363:if (PEcAn.utils::status.check("TRAIT") == 0){
1568131948364:PEcAn.utils::status.start("TRAIT")
1568131948364:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1568131948365:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1568131948366:PEcAn.utils::status.end()
1568131948366:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1568131948367:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1568131948368:}
1568131950149:# Run the PEcAn meta.analysis
1568131950150:if(!is.null(settings$meta.analysis)) {
1568131950150:if (PEcAn.utils::status.check("META") == 0){
1568131950151:PEcAn.utils::status.start("META")
1568131950152:PEcAn.MA::runModule.run.meta.analysis(settings)
1568131950153:PEcAn.utils::status.end()
1568131950154:}
1568131950154:}
1568131950169:# Write model specific configs
1568131950170:if (PEcAn.utils::status.check("CONFIG") == 0){
1568131950170:PEcAn.utils::status.start("CONFIG")
1568131950171:settings <- PEcAn.workflow::runModule.run.write.configs(settings)
1568131950172:PEcAn.settings::write.settings(settings, outputfile='pecan.CONFIGS.xml')
1568131950173:PEcAn.utils::status.end()
1568131950173:} else if (file.exists(file.path(settings$outdir, 'pecan.CONFIGS.xml'))) {
1568131950174:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.CONFIGS.xml'))
1568131950175:}
1568131954440:if ((length(which(commandArgs() == "--advanced")) != 0) &&
1568131954441:(PEcAn.utils::status.check("ADVANCED") == 0)) {
1568131954442:PEcAn.utils::status.start("ADVANCED")
1568131954443:q();
1568131954444:}
1568131954445:# Start ecosystem model runs
1568131954446:if (PEcAn.utils::status.check("MODEL") == 0) {
1568131954447:PEcAn.utils::status.start("MODEL")
1568131954447:PEcAn.remote::runModule.start.model.runs(settings, stop.on.error = FALSE)
1568131954479:PEcAn.utils::status.end()
1568131954481:}
1568131968981:# Get results of model runs
1568131968982:if (PEcAn.utils::status.check("OUTPUT") == 0) {
1568131968983:PEcAn.utils::status.start("OUTPUT")
1568131968984:runModule.get.results(settings)
1568131968985:PEcAn.utils::status.end()
1568131968986:}
1568131969327:# Run ensemble analysis on model output.
1568131969328:if ('ensemble' %in% names(settings) & PEcAn.utils::status.check("ENSEMBLE") == 0) {
1568131969329:PEcAn.utils::status.start("ENSEMBLE")
1568131969330:runModule.run.ensemble.analysis(settings, TRUE)
1568131969331:PEcAn.utils::status.end()
1568131969332:}
1568131971672:# Run sensitivity analysis and variance decomposition on model output
1568131971673:if ('sensitivity.analysis' %in% names(settings) & PEcAn.utils::status.check("SENSITIVITY") == 0) {
1568131971674:PEcAn.utils::status.start("SENSITIVITY")
1568131971675:runModule.run.sensitivity.analysis(settings)
1568131971675:PEcAn.utils::status.end()
1568131971676:}
