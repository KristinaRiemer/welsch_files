file.path(local.rundir, paste0("ctsm_params.", run.id, ".nc"))
file.copy(ctsm.param.default, ctsm.param.file)
ctsm.param.nc <- ncdf4::nc_open(ctsm.param.file, write = TRUE)
## Loop over PFTS
npft <- length(trait.values)
PEcAn.logger::logger.debug('there are ',
npft,
'PFTs in this run, they are named:',
names(trait.values))
ctsm_pftnames <-
trimws(tolower(ncdf4::ncvar_get(ctsm.param.nc, "pftname")))
i <- 1
pft.name <- names(trait.values)[[i]]
if (is.null(pft.name) || is.na(pft.name)) {
PEcAn.logger::logger.error("pft.name missing")
} else {
PEcAn.logger::logger.info(paste("PFT =", pft.name))
PEcAn.logger::logger.debug(paste0("ctsm PFT number: ", which(ctsm_pftnames == pft.name)))
}
if (pft.name == 'env')
next   ## HACK, need to remove env from default
## Match PFT name to COLUMN
ipft <- match(tolower(pft.name), ctsm_pftnames)
PEcAn.logger::logger.debug(paste0("CTSM pft index number: ", ipft))
if (is.na(ipft)) {
PEcAn.logger::logger.severe(
paste(
"Unmatched PFT",
pft.name,
"in CTSM PEcAn does not yet support non-default PFTs for this model"
)
)
}
## Loop over VARIABLES
pft_pecan_vals <- trait.values[[i]]
for (v in seq_along(pft_pecan_vals)) {
pecan_var <- names(pft_pecan_vals)[v]
### ----- Leaf physiological parameters
update_vars <- function(ctsm_var, ctsm_vals, nc = ctsm.param.nc, start = ipft, count = 1){
ncdf4::ncvar_put(nc, varid = ctsm_var, vals = ctsm_vals, start, count)
}
if (pecan_var == "sla") {update_vars("slatop", udunits2::ud.convert(pft_pecan_vals[v], "m2 kg-1", "m2 g-1") / leafC)} ## default 0.03846
if (pecan_var == "c2n_leaf") {update_vars("leafcn", pft_pecan_vals[v])} ## default 35.36068
if (pecan_var == "stom_slope") {update_vars("mbbopt", pft_pecan_vals[v])} ## default 9.757532
if (pecan_var == "fineroot2leaf") {update_vars("froot_leaf", pft_pecan_vals[v])} ## default 1.5
if (pecan_var == "vcmax") {update_vars("flnr", as.numeric(pft_pecan_vals[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar))} ## default 0.09
}
sla_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")
c2n_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")
sto_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "mbbopt")
frl_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "froot_leaf")
flnr_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "flnr")
sla_old[15]
sla_new[15]
c2n_old[15]
c2n_new[15]
sto_old[15]
sto_new[15]
frl_old[15]
frl_new[15]
flnr_old[15]
flnr_new[15]
# ----------------------------------------------------------------------
# Load required libraries
# ----------------------------------------------------------------------
library(PEcAn.all)
library(PEcAn.utils)
library(RCurl)
# make sure always to call status.end
options(warn=1)
options(error=quote({
PEcAn.utils::status.end("ERROR")
PEcAn.remote::kill.tunnel(settings)
if (!interactive()) {
q(status = 1)
}
}))
# ----------------------------------------------------------------------
# PEcAn Workflow
# ----------------------------------------------------------------------
# Open and read in settings file for PEcAn run.
args <- commandArgs(trailingOnly = TRUE)
if (is.na(args[1])){
settings <- PEcAn.settings::read.settings("pecan.xml")
} else {
settings.file <- args[1]
settings <- PEcAn.settings::read.settings(settings.file)
}
getwd()
setwd("/home/kristinariemer/")
getwd()
# ----------------------------------------------------------------------
# Load required libraries
# ----------------------------------------------------------------------
library(PEcAn.all)
library(PEcAn.utils)
library(RCurl)
# make sure always to call status.end
options(warn=1)
options(error=quote({
PEcAn.utils::status.end("ERROR")
PEcAn.remote::kill.tunnel(settings)
if (!interactive()) {
q(status = 1)
}
}))
# ----------------------------------------------------------------------
# PEcAn Workflow
# ----------------------------------------------------------------------
# Open and read in settings file for PEcAn run.
args <- commandArgs(trailingOnly = TRUE)
if (is.na(args[1])){
settings <- PEcAn.settings::read.settings("ed2_files/pecan64.ed2.xml")
} else {
settings.file <- args[1]
settings <- PEcAn.settings::read.settings(settings.file)
}
# Check for additional modules that will require adding settings
if("benchmarking" %in% names(settings)){
library(PEcAn.benchmark)
settings <- papply(settings, read_settings_BRR)
}
if("sitegroup" %in% names(settings)){
if(is.null(settings$sitegroup$nSite)){
settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
sitegroupId = settings$sitegroup$id)
} else {
settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
sitegroupId = settings$sitegroup$id,
nSite = settings$sitegroup$nSite)
}
settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
}
# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
# Write pecan.CHECKED.xml
PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
# start from scratch if no continue is passed in
statusFile <- file.path(settings$outdir, "STATUS")
if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
file.remove(statusFile)
}
# Do conversions
settings <- PEcAn.workflow::do_conversions(settings)
# Query the trait database for data and priors
if (PEcAn.utils::status.check("TRAIT") == 0){
PEcAn.utils::status.start("TRAIT")
settings <- PEcAn.workflow::runModule.get.trait.data(settings)
PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
PEcAn.utils::status.end()
} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
}
# Run the PEcAn meta.analysis
if(!is.null(settings$meta.analysis)) {
if (PEcAn.utils::status.check("META") == 0){
PEcAn.utils::status.start("META")
PEcAn.MA::runModule.run.meta.analysis(settings)
PEcAn.utils::status.end()
}
}
# Write model specific configs
if (PEcAn.utils::status.check("CONFIG") == 0){
PEcAn.utils::status.start("CONFIG")
settings <- PEcAn.workflow::runModule.run.write.configs(settings)
PEcAn.settings::write.settings(settings, outputfile='pecan.CONFIGS.xml')
PEcAn.utils::status.end()
} else if (file.exists(file.path(settings$outdir, 'pecan.CONFIGS.xml'))) {
settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.CONFIGS.xml'))
}
traceback()
traceback()
library(reticulate)
install.packages("reticulate")
.libPaths("~/R_libs/")
install.packages("reticulate")
library(reticulate)
# ----------------------------------------------------------------------
# Load required libraries
# ----------------------------------------------------------------------
library(PEcAn.all)
library(PEcAn.utils)
library(RCurl)
# make sure always to call status.end
options(warn=1)
options(error=quote({
PEcAn.utils::status.end("ERROR")
PEcAn.remote::kill.tunnel(settings)
if (!interactive()) {
q(status = 1)
}
}))
# ----------------------------------------------------------------------
# PEcAn Workflow
# ----------------------------------------------------------------------
# Open and read in settings file for PEcAn run.
args <- commandArgs(trailingOnly = TRUE)
if (is.na(args[1])){
settings <- PEcAn.settings::read.settings("ed2_files/pecan64.ed2.xml")
} else {
settings.file <- args[1]
settings <- PEcAn.settings::read.settings(settings.file)
}
# Check for additional modules that will require adding settings
if("benchmarking" %in% names(settings)){
library(PEcAn.benchmark)
settings <- papply(settings, read_settings_BRR)
}
if("sitegroup" %in% names(settings)){
if(is.null(settings$sitegroup$nSite)){
settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
sitegroupId = settings$sitegroup$id)
} else {
settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
sitegroupId = settings$sitegroup$id,
nSite = settings$sitegroup$nSite)
}
settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
}
# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
# Write pecan.CHECKED.xml
PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
# start from scratch if no continue is passed in
statusFile <- file.path(settings$outdir, "STATUS")
if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
file.remove(statusFile)
}
# Do conversions
settings <- PEcAn.workflow::do_conversions(settings)
# Query the trait database for data and priors
if (PEcAn.utils::status.check("TRAIT") == 0){
PEcAn.utils::status.start("TRAIT")
settings <- PEcAn.workflow::runModule.get.trait.data(settings)
PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
PEcAn.utils::status.end()
} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
}
# Run the PEcAn meta.analysis
if(!is.null(settings$meta.analysis)) {
if (PEcAn.utils::status.check("META") == 0){
PEcAn.utils::status.start("META")
PEcAn.MA::runModule.run.meta.analysis(settings)
PEcAn.utils::status.end()
}
}
# Write model specific configs
if (PEcAn.utils::status.check("CONFIG") == 0){
PEcAn.utils::status.start("CONFIG")
settings <- PEcAn.workflow::runModule.run.write.configs(settings)
PEcAn.settings::write.settings(settings, outputfile='pecan.CONFIGS.xml')
PEcAn.utils::status.end()
} else if (file.exists(file.path(settings$outdir, 'pecan.CONFIGS.xml'))) {
settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.CONFIGS.xml'))
}
if ((length(which(commandArgs() == "--advanced")) != 0) && (PEcAn.utils::status.check("ADVANCED") == 0)) {
PEcAn.utils::status.start("ADVANCED")
q();
}
# Start ecosystem model runs
if (PEcAn.utils::status.check("MODEL") == 0) {
PEcAn.utils::status.start("MODEL")
PEcAn.remote::runModule.start.model.runs(settings, stop.on.error = FALSE)
PEcAn.utils::status.end()
}
traceback()
?start.model.runs
settings$host
start_serial()
?start_serial()
settings$rundir
settings$host$rundir
run_list
run_file <- file.path(settings$rundir, "runs.txt")
run_file
run_list <- readLines(con = run_file)
run_list
for(run in run_list){print(run)}
run = run_list[1]
run
start_serial(run = run, host = settings$host, rundir = settings$rundir,
host_rundir = settings$host$rundir, job_script = "job.sh")
traceback()
settings$host
settings$rundir
settings$host$rundir
# ----------------------------------------------------------------------
# Load required libraries
# ----------------------------------------------------------------------
library(PEcAn.all)
library(PEcAn.utils)
library(RCurl)
# make sure always to call status.end
options(warn=1)
options(error=quote({
PEcAn.utils::status.end("ERROR")
PEcAn.remote::kill.tunnel(settings)
if (!interactive()) {
q(status = 1)
}
}))
# ----------------------------------------------------------------------
# PEcAn Workflow
# ----------------------------------------------------------------------
# Open and read in settings file for PEcAn run.
args <- commandArgs(trailingOnly = TRUE)
if (is.na(args[1])){
settings <- PEcAn.settings::read.settings("ed2_files/pecan64.ed2.xml")
} else {
settings.file <- args[1]
settings <- PEcAn.settings::read.settings(settings.file)
}
# Check for additional modules that will require adding settings
if("benchmarking" %in% names(settings)){
library(PEcAn.benchmark)
settings <- papply(settings, read_settings_BRR)
}
if("sitegroup" %in% names(settings)){
if(is.null(settings$sitegroup$nSite)){
settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
sitegroupId = settings$sitegroup$id)
} else {
settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
sitegroupId = settings$sitegroup$id,
nSite = settings$sitegroup$nSite)
}
settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
}
# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
# Write pecan.CHECKED.xml
PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
# start from scratch if no continue is passed in
statusFile <- file.path(settings$outdir, "STATUS")
if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
file.remove(statusFile)
}
# Do conversions
settings <- PEcAn.workflow::do_conversions(settings)
# Query the trait database for data and priors
if (PEcAn.utils::status.check("TRAIT") == 0){
PEcAn.utils::status.start("TRAIT")
settings <- PEcAn.workflow::runModule.get.trait.data(settings)
PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
PEcAn.utils::status.end()
} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
}
# Run the PEcAn meta.analysis
if(!is.null(settings$meta.analysis)) {
if (PEcAn.utils::status.check("META") == 0){
PEcAn.utils::status.start("META")
PEcAn.MA::runModule.run.meta.analysis(settings)
PEcAn.utils::status.end()
}
}
# Write model specific configs
if (PEcAn.utils::status.check("CONFIG") == 0){
PEcAn.utils::status.start("CONFIG")
settings <- PEcAn.workflow::runModule.run.write.configs(settings)
PEcAn.settings::write.settings(settings, outputfile='pecan.CONFIGS.xml')
PEcAn.utils::status.end()
} else if (file.exists(file.path(settings$outdir, 'pecan.CONFIGS.xml'))) {
settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.CONFIGS.xml'))
}
if ((length(which(commandArgs() == "--advanced")) != 0) && (PEcAn.utils::status.check("ADVANCED") == 0)) {
PEcAn.utils::status.start("ADVANCED")
q();
}
# Start ecosystem model runs
if (PEcAn.utils::status.check("MODEL") == 0) {
PEcAn.utils::status.start("MODEL")
PEcAn.remote::runModule.start.model.runs(settings, stop.on.error = FALSE)
PEcAn.utils::status.end()
}
traceback()
settings$host
host
library(dplyr)
library(ggplot2)
library(gridExtra)
theme_set(theme_bw())
# Open up a connection to BETY
bety <-dplyr::src_postgres(host = "postgres",
user = "bety",
password = "bety",
dbname = "bety")
library(dplyr)
library(ggplot2)
library(gridExtra)
theme_set(theme_bw())
# Open up a connection to BETY
bety <-dplyr::src_postgres(host = "postgres",
user = "bety",
password = "bety",
dbname = "bety")
# Get all priors data for CLM50 PFTs
clm_pfts <- tbl(bety, 'pfts') %>%
filter(modeltype_id == 9000000001) %>%
select(id, name) %>%
collect()
pft_prior_link <- tbl(bety, 'pfts_priors') %>%
filter(pft_id %in% clm_pfts$id) %>%
collect()
pft_prior_combined <- left_join(pft_prior_link, clm_pfts, by = c("pft_id" = "id"))
clm_priors <- tbl(bety, 'priors') %>%
filter(id %in% pft_prior_link$prior_id) %>%
collect()
clm_priors_extended <- left_join(clm_priors, pft_prior_combined, by = c("id" = "prior_id"))
clm_variables <- tbl(bety, 'variables') %>%
select(id, name, units) %>%
collect()
clm_priors_full <- left_join(clm_priors_extended, clm_variables, by = c("variable_id" = "id")) %>%
mutate(distn_r = paste0("d", distn),
pft_col = case_when(name.x == "Setaria WT priors defaults" ~ "black",
name.x == "Setaria WT priors data" ~ "red"))
# check variable names matching (growth respiration, Vcmax)
var_plot <- list()
for(var_name in sort(unique(clm_priors_full$name.y))){
clm_priors_by_var <- filter(clm_priors_full, name.y == var_name)
plot_center <- mean(c(clm_priors_by_var$parama[1], clm_priors_by_var$parama[2]), na.rm = TRUE)
var_plot[[var_name]] <- ggplot(data = data.frame(x = c(plot_center + (5 * plot_center), 0)), aes(x)) +
stat_function(fun = clm_priors_by_var$distn_r[1], n = 101,
args = list(clm_priors_by_var$parama[1], clm_priors_by_var$paramb[1]),
col = clm_priors_by_var$pft_col[1]) +
stat_function(fun = clm_priors_by_var$distn_r[2], n = 101,
args = list(clm_priors_by_var$parama[2], clm_priors_by_var$paramb[2]),
color = clm_priors_by_var$pft_col[2]) +
labs(x = paste0(var_name, " (", clm_priors_by_var$units[1], ")"), y = "") +
theme(axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
}
do.call(grid.arrange, var_plot)
warnings()
View(clm_priors_full)
getwd()
#load("/your_own_path/to_the_prior_distns/prior.distns.Rdata")
load("clm_params_data_out/pft/Setaria WT priors data/prior.distns.Rdata")
#load("/your_own_path/to_the_prior_distns/prior.distns.Rdata")
load("clm_params_data_out/pft/Setaria WT priors data/prior.distns.Rdata")
View(prior.distns)
library(ggplot2)
library(ggridges)
library(RColorBrewer)
library(gridExtra)
install.packages("ggridges")
.libPaths()
.libPaths("R_libs/")
install.packages("ggridges")
library(ggridges)
#load("/your_own_path/to_the_prior_distns/prior.distns.Rdata")
load("clm_params_data_out/pft/Setaria WT priors data/prior.distns.Rdata")
library(ggplot2)
library(ggridges)
library(RColorBrewer)
library(gridExtra)
#load("/your_own_path/to_the_prior_distns/prior.distns.Rdata")
load("clm_params_data_out/pft/Setaria WT priors data/prior.distns.Rdata")
library(ggplot2)
.libPaths("~/R_libs/")
library(ggridges)
library(RColorBrewer)
library(gridExtra)
plot_db_distns <- function(prior.distns){
parnames <- rownames(prior.distns)
dist_matrix <- matrix(NA, nrow = 1000000, ncol = length(parnames))
colnames(dist_matrix) <- parnames
for(i in seq_along(parnames)){
post <- dist_matrix[rownames(dist_matrix) == parnames[i],]
dist_matrix[,i] <- eval(parse(text = paste0("r", prior.distns$distn[i],"(1000000,", prior.distns$parama[i], ",", prior.distns$paramb[i],")")))
}
dist_df <- reshape::melt(dist_matrix)
colnames(dist_df) <- c("dist", "parameter", "value")
dist_df$dist <- "prior"
n <- length(parnames)
qual_col_pals <- brewer.pal.info[brewer.pal.info$category == 'qual',]
col_vector <- unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
plot_colors =sample(col_vector, n)
plot.list <- list()
for(i in  seq_along(parnames)){
sub_df <- dist_df[dist_df$parameter == parnames[i],]
plot.list[[i]] <- ggplot(sub_df, aes(x = value, y = 0)) +
geom_density_ridges( fill=plot_colors[i]) +
theme(legend.position="none",
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()) + ggtitle(parnames[i])
}
nplots <- length(plot.list)
nCol <- floor(sqrt(nplots))
do.call("grid.arrange", c(plot.list, ncol=nCol))
}
plot_db_distns(prior.distns)
#load("/your_own_path/to_the_prior_distns/prior.distns.Rdata")
load("clm_params_data_out/pft/Setaria WT priors data/prior.distns.Rdata")
library(ggplot2)
.libPaths("~/R_libs/")
library(ggridges)
library(RColorBrewer)
library(gridExtra)
prior.distns
parnames <- rownames(prior.distns)
dist_matrix <- matrix(NA, nrow = 1000000, ncol = length(parnames))
View(dist_matrix)
colnames(dist_matrix) <- parnames
View(dist_matrix)
for(i in seq_along(parnames)){
post <- dist_matrix[rownames(dist_matrix) == parnames[i],]
dist_matrix[,i] <- eval(parse(text = paste0("r", prior.distns$distn[i],"(1000000,", prior.distns$parama[i], ",", prior.distns$paramb[i],")")))
}
