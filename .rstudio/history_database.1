1550768518139:library(PEcAn.all)
1550769316630:# ----------------------------------------------------------------------
1550769316632:# Load required libraries
1550769316633:# ----------------------------------------------------------------------
1550769316634:library(PEcAn.all)
1550769323925:library(PEcAn.utils)
1550769325422:library(RCurl)
1550769327899:# make sure always to call status.end
1550769327901:options(warn=1)
1550769330743:options(error=quote({
1550769330744:PEcAn.utils::status.end("ERROR")
1550769330745:PEcAn.remote::kill.tunnel(settings)
1550769330746:if (!interactive()) {
1550769330747:q(status = 1)
1550769330748:}
1550769330749:}))
1550769344518:?commandArgs
1550769359455:# ----------------------------------------------------------------------
1550769359456:# PEcAn Workflow
1550769359458:# ----------------------------------------------------------------------
1550769359460:# Open and read in settings file for PEcAn run.
1550769359462:args <- commandArgs(trailingOnly = TRUE)
1550769369256:if (is.na(args[1])){
1550769369258:settings <- PEcAn.settings::read.settings("pecan.xml")
1550769369260:} else {
1550769369262:settings.file = args[1]
1550769369264:settings <- PEcAn.settings::read.settings(settings.file)
1550769369266:}
1550769631318:if (is.na(args[1])){
1550769631320:settings <- PEcAn.settings::read.settings("pecan/tests/pecan64.sipnet.xml")
1550769631322:} else {
1550769631324:settings.file = args[1]
1550769631326:settings <- PEcAn.settings::read.settings(settings.file)
1550769631327:}
1550769641537:View(settings)
1550769653712:settings
1550769760928:# Check for additional modules that will require adding settings
1550769760930:if("benchmarking" %in% names(settings)){
1550769760932:library(PEcAn.benchmark)
1550769760934:settings <- papply(settings, read_settings_BRR)
1550769760936:}
1550769778817:names(settings)
1550769786242:if("benchmarking" %in% names(settings))
1550769798326:"benchmarking" %in% names(settings)
1550769894117:if("sitegroup" %in% names(settings)){
1550769894119:if(is.null(settings$sitegroup$nSite)){
1550769894121:settings <- PEcAn.settings::createSitegroupMultiSettings(settings, sitegroupId = settings$sitegroup$id)
1550769894123:} else {
1550769894125:settings <- PEcAn.settings::createSitegroupMultiSettings(settings, sitegroupId = settings$sitegroup$id,nSite = settings$sitegroup$nSite)
1550769894127:}
1550769894129:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1550769894131:}
1550769903522:?prepare.settings
1550769921259:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1550769921260:settings <- PEcAn.settings::prepare.settings(settings, force=FALSE)
1550770202519:?write.settings
1550770259484:# start from scratch if no continue is passed in
1550770259486:statusFile <- file.path(settings$outdir, "STATUS")
1550770265288:# Do conversions
1550770265291:settings <- PEcAn.workflow::do_conversions(settings)
1550770285189:# Query the trait database for data and priors
1550770285191:if (PEcAn.utils::status.check("TRAIT") == 0){
1550770285193:PEcAn.utils::status.start("TRAIT")
1550770285195:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1550770285197:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1550770285199:PEcAn.utils::status.end()
1550770285200:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1550770285201:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1550770285202:}
1550770288667:# Run the PEcAn meta.analysis
1550770288670:if(!is.null(settings$meta.analysis)) {
1550770288672:if (PEcAn.utils::status.check("META") == 0){
1550770288674:PEcAn.utils::status.start("META")
1550770288675:PEcAn.MA::runModule.run.meta.analysis(settings)
1550770288676:PEcAn.utils::status.end()
1550770288677:}
1550770288678:}
1550770431205:# ----------------------------------------------------------------------
1550770431206:# Load required libraries
1550770431207:# ----------------------------------------------------------------------
1550770431208:library(PEcAn.all)
1550770435855:library(PEcAn.utils)
1550770435856:library(RCurl)
1550770437238:# make sure always to call status.end
1550770437240:options(warn=1)
1550770437685:options(error=quote({
1550770437687:PEcAn.utils::status.end("ERROR")
1550770437689:PEcAn.remote::kill.tunnel(settings)
1550770437691:if (!interactive()) {
1550770437693:q(status = 1)
1550770437695:}
1550770437697:}))
1550770439237:# ----------------------------------------------------------------------
1550770439239:# PEcAn Workflow
1550770439241:# ----------------------------------------------------------------------
1550770439243:# Open and read in settings file for PEcAn run.
1550770439245:args <- commandArgs(trailingOnly = TRUE)
1550770440312:if (is.na(args[1])){
1550770440315:settings <- PEcAn.settings::read.settings("pecan/tests/pecan64.sipnet.xml")
1550770440317:} else {
1550770440319:settings.file = args[1]
1550770440321:settings <- PEcAn.settings::read.settings(settings.file)
1550770440323:}
1550770443153:# Check for additional modules that will require adding settings
1550770443155:if("benchmarking" %in% names(settings)){
1550770443156:library(PEcAn.benchmark)
1550770443158:settings <- papply(settings, read_settings_BRR)
1550770443160:}
1550770444158:if("sitegroup" %in% names(settings)){
1550770444160:if(is.null(settings$sitegroup$nSite)){
1550770444163:settings <- PEcAn.settings::createSitegroupMultiSettings(settings, sitegroupId = settings$sitegroup$id)
1550770444165:} else {
1550770444167:settings <- PEcAn.settings::createSitegroupMultiSettings(settings, sitegroupId = settings$sitegroup$id,nSite = settings$sitegroup$nSite)
1550770444169:}
1550770444171:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1550770444172:}
1550770445938:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1550770445940:settings <- PEcAn.settings::prepare.settings(settings, force=FALSE)
1550770476243:# Write pecan.CHECKED.xml
1550770476244:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1550770524232:# start from scratch if no continue is passed in
1550770524235:statusFile <- file.path(settings$outdir, "STATUS")
1550770525248:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1550770525250:file.remove(statusFile)
1550770525252:}
1550770527890:# Do conversions
1550770527892:settings <- PEcAn.workflow::do_conversions(settings)
1550770537085:# Query the trait database for data and priors
1550770537087:if (PEcAn.utils::status.check("TRAIT") == 0){
1550770537089:PEcAn.utils::status.start("TRAIT")
1550770537091:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1550770537093:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1550770537095:PEcAn.utils::status.end()
1550770537097:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1550770537098:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1550770537099:}
1550770539326:# Run the PEcAn meta.analysis
1550770539328:if(!is.null(settings$meta.analysis)) {
1550770539330:if (PEcAn.utils::status.check("META") == 0){
1550770539332:PEcAn.utils::status.start("META")
1550770539334:PEcAn.MA::runModule.run.meta.analysis(settings)
1550770539335:PEcAn.utils::status.end()
1550770539336:}
1550770539337:}
1550770847551:#!/usr/bin/env Rscript
1550770847552:#-------------------------------------------------------------------------------
1550770847553:# Copyright (c) 2012 University of Illinois, NCSA.
1550770847554:# All rights reserved. This program and the accompanying materials
1550770847555:# are made available under the terms of the
1550770847556:# University of Illinois/NCSA Open Source License
1550770847557:# which accompanies this distribution, and is available at
1550770847558:# http://opensource.ncsa.illinois.edu/license.html
1550770847559:#-------------------------------------------------------------------------------
1550770847561:# ----------------------------------------------------------------------
1550770847562:# Load required libraries
1550770847563:# ----------------------------------------------------------------------
1550770847564:library(PEcAn.all)
1550770852384:library(PEcAn.utils)
1550770852385:library(RCurl)
1550770852555:# make sure always to call status.end
1550770852556:options(warn=1)
1550770852557:options(error=quote({
1550770852559:PEcAn.utils::status.end("ERROR")
1550770852559:PEcAn.remote::kill.tunnel(settings)
1550770852560:if (!interactive()) {
1550770852561:q(status = 1)
1550770852562:}
1550770852563:}))
1550770852566:#options(warning.expression=status.end("ERROR"))
1550770852568:# ----------------------------------------------------------------------
1550770852569:# PEcAn Workflow
1550770852570:# ----------------------------------------------------------------------
1550770852571:# Open and read in settings file for PEcAn run.
1550770852572:args <- commandArgs(trailingOnly = TRUE)
1550770852573:if (is.na(args[1])){
1550770852574:settings <- PEcAn.settings::read.settings("pecan/tests/pecan64.sipnet.xml")
1550770852575:} else {
1550770852576:settings.file = args[1]
1550770852577:settings <- PEcAn.settings::read.settings(settings.file)
1550770852578:}
1550770852606:# Check for additional modules that will require adding settings
1550770852607:if("benchmarking" %in% names(settings)){
1550770852608:library(PEcAn.benchmark)
1550770852609:settings <- papply(settings, read_settings_BRR)
1550770852610:}
1550770852612:if("sitegroup" %in% names(settings)){
1550770852613:if(is.null(settings$sitegroup$nSite)){
1550770852614:settings <- PEcAn.settings::createSitegroupMultiSettings(settings, sitegroupId = settings$sitegroup$id)
1550770852615:} else {
1550770852616:settings <- PEcAn.settings::createSitegroupMultiSettings(settings, sitegroupId = settings$sitegroup$id,nSite = settings$sitegroup$nSite)
1550770852617:}
1550770852618:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1550770852619:}
1550770857863:library(RPostgres)
1550770864212:install.packages("RPostgres")
1550770902371:prepare.settings()
1550770904249:prepare.settings
1550770923227:PEcAn.settings::prepare.settings
1550771203283:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1550771203284:settings <- PEcAn.settings::prepare.settings(settings, force=FALSE)
1550772393948:update.settings
1550772462845:check.settings
1550772890799:# ----------------------------------------------------------------------
1550772890800:# Load required libraries
1550772890801:# ----------------------------------------------------------------------
1550772890802:library(PEcAn.all)
1550772895980:library(PEcAn.utils)
1550772895982:library(RCurl)
1550772896149:# make sure always to call status.end
1550772896151:options(warn=1)
1550772896152:options(error=quote({
1550772896153:PEcAn.utils::status.end("ERROR")
1550772896154:PEcAn.remote::kill.tunnel(settings)
1550772896156:if (!interactive()) {
1550772896157:q(status = 1)
1550772896158:}
1550772896159:}))
1550772909652:# ----------------------------------------------------------------------
1550772909654:# PEcAn Workflow
1550772909656:# ----------------------------------------------------------------------
1550772909658:# Open and read in settings file for PEcAn run.
1550772909661:args <- commandArgs(trailingOnly = TRUE)
1550772911960:if (is.na(args[1])){
1550772911962:settings <- PEcAn.settings::read.settings("pecan/tests/ebi-forecast.igb.illinois.edu.sipnet.xml")
1550772911964:} else {
1550772911966:settings.file = args[1]
1550772911967:settings <- PEcAn.settings::read.settings(settings.file)
1550772911968:}
1550772914490:# Check for additional modules that will require adding settings
1550772914493:if("benchmarking" %in% names(settings)){
1550772914495:library(PEcAn.benchmark)
1550772914497:settings <- papply(settings, read_settings_BRR)
1550772914499:}
1550772915691:if("sitegroup" %in% names(settings)){
1550772915693:if(is.null(settings$sitegroup$nSite)){
1550772915695:settings <- PEcAn.settings::createSitegroupMultiSettings(settings, sitegroupId = settings$sitegroup$id)
1550772915697:} else {
1550772915699:settings <- PEcAn.settings::createSitegroupMultiSettings(settings, sitegroupId = settings$sitegroup$id,nSite = settings$sitegroup$nSite)
1550772915701:}
1550772915702:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1550772915703:}
1550772917011:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1550772917013:settings <- PEcAn.settings::prepare.settings(settings, force=FALSE)
1550772954750:# ----------------------------------------------------------------------
1550772954751:# Load required libraries
1550772954752:# ----------------------------------------------------------------------
1550772954753:library(PEcAn.all)
1550772959552:library(PEcAn.utils)
1550772959554:library(RCurl)
1550772960461:# make sure always to call status.end
1550772960462:options(warn=1)
1550772960945:options(error=quote({
1550772960947:PEcAn.utils::status.end("ERROR")
1550772960948:PEcAn.remote::kill.tunnel(settings)
1550772960950:if (!interactive()) {
1550772960952:q(status = 1)
1550772960954:}
1550772960955:}))
1550772962290:# ----------------------------------------------------------------------
1550772962293:# PEcAn Workflow
1550772962295:# ----------------------------------------------------------------------
1550772962297:# Open and read in settings file for PEcAn run.
1550772962299:args <- commandArgs(trailingOnly = TRUE)
1550772963239:if (is.na(args[1])){
1550772963241:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.geo.sipnet.xml")
1550772963243:} else {
1550772963245:settings.file = args[1]
1550772963247:settings <- PEcAn.settings::read.settings(settings.file)
1550772963249:}
1550772964376:# Check for additional modules that will require adding settings
1550772964377:if("benchmarking" %in% names(settings)){
1550772964378:library(PEcAn.benchmark)
1550772964379:settings <- papply(settings, read_settings_BRR)
1550772964380:}
1550772965166:if("sitegroup" %in% names(settings)){
1550772965168:if(is.null(settings$sitegroup$nSite)){
1550772965169:settings <- PEcAn.settings::createSitegroupMultiSettings(settings, sitegroupId = settings$sitegroup$id)
1550772965170:} else {
1550772965171:settings <- PEcAn.settings::createSitegroupMultiSettings(settings, sitegroupId = settings$sitegroup$id,nSite = settings$sitegroup$nSite)
1550772965172:}
1550772965173:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1550772965175:}
1550772965998:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1550772966000:settings <- PEcAn.settings::prepare.settings(settings, force=FALSE)
1550772997324:# ----------------------------------------------------------------------
1550772997325:# Load required libraries
1550772997326:# ----------------------------------------------------------------------
1550772997327:library(PEcAn.all)
1550773002125:library(PEcAn.utils)
1550773002126:library(RCurl)
1550773003407:# make sure always to call status.end
1550773003408:options(warn=1)
1550773003815:options(error=quote({
1550773003817:PEcAn.utils::status.end("ERROR")
1550773003818:PEcAn.remote::kill.tunnel(settings)
1550773003820:if (!interactive()) {
1550773003821:q(status = 1)
1550773003823:}
1550773003824:}))
1550773005523:# ----------------------------------------------------------------------
1550773005525:# PEcAn Workflow
1550773005526:# ----------------------------------------------------------------------
1550773005528:# Open and read in settings file for PEcAn run.
1550773005530:args <- commandArgs(trailingOnly = TRUE)
1550773006093:if (is.na(args[1])){
1550773006095:settings <- PEcAn.settings::read.settings("pecan/tests/pecan32.sipnet.xml")
1550773006096:} else {
1550773006098:settings.file = args[1]
1550773006099:settings <- PEcAn.settings::read.settings(settings.file)
1550773006100:}
1550773006608:# Check for additional modules that will require adding settings
1550773006609:if("benchmarking" %in% names(settings)){
1550773006610:library(PEcAn.benchmark)
1550773006611:settings <- papply(settings, read_settings_BRR)
1550773006612:}
1550773007650:if("sitegroup" %in% names(settings)){
1550773007652:if(is.null(settings$sitegroup$nSite)){
1550773007654:settings <- PEcAn.settings::createSitegroupMultiSettings(settings, sitegroupId = settings$sitegroup$id)
1550773007656:} else {
1550773007659:settings <- PEcAn.settings::createSitegroupMultiSettings(settings, sitegroupId = settings$sitegroup$id,nSite = settings$sitegroup$nSite)
1550773007661:}
1550773007662:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1550773007664:}
1550773008618:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1550773008620:settings <- PEcAn.settings::prepare.settings(settings, force=FALSE)
1550773034876:# ----------------------------------------------------------------------
1550773034877:# Load required libraries
1550773034879:# ----------------------------------------------------------------------
1550773034880:library(PEcAn.all)
1550773039749:library(PEcAn.utils)
1550773039750:library(RCurl)
1550773039921:# make sure always to call status.end
1550773039922:options(warn=1)
1550773039923:options(error=quote({
1550773039924:PEcAn.utils::status.end("ERROR")
1550773039925:PEcAn.remote::kill.tunnel(settings)
1550773039926:if (!interactive()) {
1550773039927:q(status = 1)
1550773039928:}
1550773039929:}))
1550773039931:# ----------------------------------------------------------------------
1550773039932:# PEcAn Workflow
1550773039933:# ----------------------------------------------------------------------
1550773039934:# Open and read in settings file for PEcAn run.
1550773039934:args <- commandArgs(trailingOnly = TRUE)
1550773039936:if (is.na(args[1])){
1550773039937:settings <- PEcAn.settings::read.settings("pecan/tests/pecan64.sipnet.xml")
1550773039938:} else {
1550773039939:settings.file = args[1]
1550773039940:settings <- PEcAn.settings::read.settings(settings.file)
1550773039941:}
1550773039968:# Check for additional modules that will require adding settings
1550773039969:if("benchmarking" %in% names(settings)){
1550773039970:library(PEcAn.benchmark)
1550773039971:settings <- papply(settings, read_settings_BRR)
1550773039972:}
1550773040007:if("sitegroup" %in% names(settings)){
1550773040008:if(is.null(settings$sitegroup$nSite)){
1550773040009:settings <- PEcAn.settings::createSitegroupMultiSettings(settings, sitegroupId = settings$sitegroup$id)
1550773040010:} else {
1550773040011:settings <- PEcAn.settings::createSitegroupMultiSettings(settings, sitegroupId = settings$sitegroup$id,nSite = settings$sitegroup$nSite)
1550773040012:}
1550773040013:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1550773040014:}
1550773040712:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1550773040713:settings <- PEcAn.settings::prepare.settings(settings, force=FALSE)
1550773146057:prepare.settings
1550773157765:site.pft.link.settings
1550773181160:fix.deprecated.settings
1550773452948:addSecrets
1550773509169:update.settings
1550773635032:check.settings
1550773680665:db.open
1550773898116:# ----------------------------------------------------------------------
1550773898118:# Load required libraries
1550773898120:# ----------------------------------------------------------------------
1550773898121:library(PEcAn.all)
1550773902852:library(PEcAn.utils)
1550773902854:library(RCurl)
1550773903021:# make sure always to call status.end
1550773903022:options(warn=1)
1550773903023:options(error=quote({
1550773903024:PEcAn.utils::status.end("ERROR")
1550773903026:PEcAn.remote::kill.tunnel(settings)
1550773903027:if (!interactive()) {
1550773903027:q(status = 1)
1550773903028:}
1550773903030:}))
1550773903031:# ----------------------------------------------------------------------
1550773903032:# PEcAn Workflow
1550773903033:# ----------------------------------------------------------------------
1550773903034:# Open and read in settings file for PEcAn run.
1550773903035:args <- commandArgs(trailingOnly = TRUE)
1550773903036:if (is.na(args[1])){
1550773903037:settings <- PEcAn.settings::read.settings("pecan/tests/pecan64.sipnet.xml")
1550773903038:} else {
1550773903039:settings.file = args[1]
1550773903040:settings <- PEcAn.settings::read.settings(settings.file)
1550773903041:}
1550773903068:# Check for additional modules that will require adding settings
1550773903069:if("benchmarking" %in% names(settings)){
1550773903070:library(PEcAn.benchmark)
1550773903071:settings <- papply(settings, read_settings_BRR)
1550773903072:}
1550773903073:if("sitegroup" %in% names(settings)){
1550773903074:if(is.null(settings$sitegroup$nSite)){
1550773903075:settings <- PEcAn.settings::createSitegroupMultiSettings(settings, sitegroupId = settings$sitegroup$id)
1550773903076:} else {
1550773903077:settings <- PEcAn.settings::createSitegroupMultiSettings(settings, sitegroupId = settings$sitegroup$id,nSite = settings$sitegroup$nSite)
1550773903078:}
1550773903079:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1550773903080:}
1550773903082:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1550773903083:settings <- PEcAn.settings::prepare.settings(settings, force=FALSE)
1550773913184:settings$database$bety
1550773916731:settings$database
1550773937399:PEcAn.DB::db.open(settings$database$bety)
1550774027096:?dbDriver
1550774050194:DBI::dbDriver("PostgreSQL")
1550774123383:params = settings$database$bety
1550774147551:is.null(params$driver)
1550774154745:params$driver
1550774165360:args <- c(drv = DBI::dbDriver("PostgreSQL"), params,
1550774165362:recursive = TRUE)
1550774167503:args
1550774190213:do.call(DBI::dbConnect, as.list(args))
1550774208554:?dbConnect
1550774256951:if (is.null(params$driver)) {
1550774256953:args <- c(drv = DBI::dbDriver("PostgreSQL"), params,
1550774256954:recursive = TRUE)
1550774256955:}
1550774256956:else {
1550774256958:args <- c(drv = DBI::dbDriver(params$driver), params,
1550774256959:recursive = TRUE)
1550774256961:args[["driver"]] <- NULL
1550774256962:}
1550774305885:args <- NULL
1550774309055:if (is.null(params$driver)) {
1550774309057:args <- c(drv = DBI::dbDriver("PostgreSQL"), params,
1550774309059:recursive = TRUE)
1550774309060:}
1550774309063:else {
1550774309066:args <- c(drv = DBI::dbDriver(params$driver), params,
1550774309067:recursive = TRUE)
1550774309069:args[["driver"]] <- NULL
1550774309071:}
1550774317783:if (is.null(params$driver)) {
1550774317785:args <- c(drv = DBI::dbDriver("PostgreSQL"), params,
1550774317787:recursive = TRUE)
1550774317789:} else {
1550774317791:args <- c(drv = DBI::dbDriver(params$driver), params,
1550774317792:recursive = TRUE)
1550774317793:args[["driver"]] <- NULL
1550774317794:}
1550774320684:args
1550774328521:params
1550774378399:c <- do.call(DBI::dbConnect, as.list(args))
1550774387848:as.list(args)
1550774531431:PEcAn.DB::db.open(settings$database$bety)
1550775241948:?db.open
1550775269198:db.open(settings$database$bety)
1550775411470:db.open(settings$database$bety)
1550775412169:db.open(settings$database$bety)
1550775412737:db.open(settings$database$bety)
1550775413206:db.open(settings$database$bety)
1550775413695:db.open(settings$database$bety)
1550775414299:db.open(settings$database$bety)
1550775415048:db.open(settings$database$bety)
1550775572382:settings$database$bety
1550776809166:params = settings$database$bety
1550776812537:params$dbfiles <- NULL
1550776813848:params$write <- NULL
1550776816548:if (is.null(params$driver) || params$driver == "PostgreSQL") {
1550776816550:requireNamespace("RPostgreSQL")
1550776816553:}
1550776820101:if (is.null(params$driver)) {
1550776820102:args <- c(drv = DBI::dbDriver("PostgreSQL"), params,
1550776820103:recursive = TRUE)
1550776820104:}
1550776822823:else {
1550776822827:args <- c(drv = DBI::dbDriver(params$driver), params,
1550776822829:recursive = TRUE)
1550776822832:args[["driver"]] <- NULL
1550776822834:}
1550776830318:if (is.null(params$driver)) {
1550776830320:args <- c(drv = DBI::dbDriver("PostgreSQL"), params,
1550776830322:recursive = TRUE)
1550776830324:} else {
1550776830326:args <- c(drv = DBI::dbDriver(params$driver), params,
1550776830328:recursive = TRUE)
1550776830330:args[["driver"]] <- NULL
1550776830331:}
1550776831998:c <- do.call(DBI::dbConnect, as.list(args))
1550776999010:# ----------------------------------------------------------------------
1550776999012:# Load required libraries
1550776999014:# ----------------------------------------------------------------------
1550776999016:library(PEcAn.all)
1550777003535:library(PEcAn.utils)
1550777003536:library(RCurl)
1550777003703:# make sure always to call status.end
1550777003704:options(warn=1)
1550777003706:options(error=quote({
1550777003707:PEcAn.utils::status.end("ERROR")
1550777003708:PEcAn.remote::kill.tunnel(settings)
1550777003709:if (!interactive()) {
1550777003710:q(status = 1)
1550777003711:}
1550777003712:}))
1550777006655:# ----------------------------------------------------------------------
1550777006657:# PEcAn Workflow
1550777006659:# ----------------------------------------------------------------------
1550777006661:# Open and read in settings file for PEcAn run.
1550777006664:args <- commandArgs(trailingOnly = TRUE)
1550777007388:if (is.na(args[1])){
1550777007390:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.biocro.xml")
1550777007393:} else {
1550777007395:settings.file = args[1]
1550777007397:settings <- PEcAn.settings::read.settings(settings.file)
1550777007399:}
1550777009279:# Check for additional modules that will require adding settings
1550777009280:if("benchmarking" %in% names(settings)){
1550777009282:library(PEcAn.benchmark)
1550777009284:settings <- papply(settings, read_settings_BRR)
1550777009286:}
1550777009929:if("sitegroup" %in% names(settings)){
1550777009931:if(is.null(settings$sitegroup$nSite)){
1550777009933:settings <- PEcAn.settings::createSitegroupMultiSettings(settings, sitegroupId = settings$sitegroup$id)
1550777009935:} else {
1550777009936:settings <- PEcAn.settings::createSitegroupMultiSettings(settings, sitegroupId = settings$sitegroup$id,nSite = settings$sitegroup$nSite)
1550777009937:}
1550777009939:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1550777009940:}
1550777010820:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1550777010823:settings <- PEcAn.settings::prepare.settings(settings, force=FALSE)
1550777661054:library(PEcAn.all)
1550777665856:library(PEcAn.utils)
1550777665857:library(RCurl)
1550777666025:# make sure always to call status.end
1550777666026:options(warn=1)
1550777666027:options(error=quote({
1550777666029:PEcAn.utils::status.end("ERROR")
1550777666030:PEcAn.remote::kill.tunnel(settings)
1550777666031:if (!interactive()) {
1550777666032:q(status = 1)
1550777666033:}
1550777666034:}))
1550777666036:#options(warning.expression=status.end("ERROR"))
1550777666039:# ----------------------------------------------------------------------
1550777666040:# PEcAn Workflow
1550777666041:# ----------------------------------------------------------------------
1550777666042:# Open and read in settings file for PEcAn run.
1550777666043:args <- commandArgs(trailingOnly = TRUE)
1550777666044:if (is.na(args[1])){
1550777666045:settings <- PEcAn.settings::read.settings("pecan/tests/pecan64.sipnet.xml")
1550777666046:} else {
1550777666047:settings.file = args[1]
1550777666048:settings <- PEcAn.settings::read.settings(settings.file)
1550777666049:}
1550777666077:# Check for additional modules that will require adding settings
1550777666078:if("benchmarking" %in% names(settings)){
1550777666079:library(PEcAn.benchmark)
1550777666080:settings <- papply(settings, read_settings_BRR)
1550777666081:}
1550777666084:if("sitegroup" %in% names(settings)){
1550777666085:if(is.null(settings$sitegroup$nSite)){
1550777666086:settings <- PEcAn.settings::createSitegroupMultiSettings(settings, sitegroupId = settings$sitegroup$id)
1550777666087:} else {
1550777666088:settings <- PEcAn.settings::createSitegroupMultiSettings(settings, sitegroupId = settings$sitegroup$id,nSite = settings$sitegroup$nSite)
1550777666089:}
1550777666090:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1550777666091:}
1550777666093:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1550777666094:settings <- PEcAn.settings::prepare.settings(settings, force=FALSE)
1550777934364:prepare.settings
1550777941081:check.settings
1550777967314:params
1550777974473:db.open(params)
1550778001819:settings$database$bety
1550778008996:params = settings$database$bety
1550778011783:db.open(params)
1550778083039:# Write pecan.CHECKED.xml
1550778083042:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1550778130594:library(PEcAn.all)
1550778135418:library(PEcAn.utils)
1550778135420:library(RCurl)
1550778135587:# make sure always to call status.end
1550778135588:options(warn=1)
1550778135590:options(error=quote({
1550778135591:PEcAn.utils::status.end("ERROR")
1550778135592:PEcAn.remote::kill.tunnel(settings)
1550778135593:if (!interactive()) {
1550778135594:q(status = 1)
1550778135595:}
1550778135596:}))
1550778135598:#options(warning.expression=status.end("ERROR"))
1550778135601:# ----------------------------------------------------------------------
1550778135602:# PEcAn Workflow
1550778135603:# ----------------------------------------------------------------------
1550778135604:# Open and read in settings file for PEcAn run.
1550778135605:args <- commandArgs(trailingOnly = TRUE)
1550778135607:if (is.na(args[1])){
1550778135608:settings <- PEcAn.settings::read.settings("pecan/tests/pecan64.sipnet.xml")
1550778135609:} else {
1550778135610:settings.file = args[1]
1550778135611:settings <- PEcAn.settings::read.settings(settings.file)
1550778135612:}
1550778135639:# Check for additional modules that will require adding settings
1550778135640:if("benchmarking" %in% names(settings)){
1550778135641:library(PEcAn.benchmark)
1550778135642:settings <- papply(settings, read_settings_BRR)
1550778135643:}
1550778135645:if("sitegroup" %in% names(settings)){
1550778135646:if(is.null(settings$sitegroup$nSite)){
1550778135647:settings <- PEcAn.settings::createSitegroupMultiSettings(settings, sitegroupId = settings$sitegroup$id)
1550778135648:} else {
1550778135649:settings <- PEcAn.settings::createSitegroupMultiSettings(settings, sitegroupId = settings$sitegroup$id,nSite = settings$sitegroup$nSite)
1550778135650:}
1550778135651:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1550778135652:}
1550778135655:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1550778135656:settings <- PEcAn.settings::prepare.settings(settings, force=FALSE)
1550778450146:prepare.settings
1550778459066:update.settings
1550778486465:check.settings
1550778523819:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1550778523821:settings <- PEcAn.settings::prepare.settings(settings, force=FALSE)
1550780174874:settings$model$type
1550780637819:db.query
1550780655249:1:length(settings$pfts
1550780661353:)
1550780691195:paste0("SELECT pfts.id FROM pfts",
1550780691197:" WHERE pfts.name = '", settings$pfts[i]$pft$name,
1550780691199:"'")
1550780695434:paste0("SELECT pfts.id FROM pfts",
1550780695437:" WHERE pfts.name = '", settings$pfts[1]$pft$name,
1550780695439:"'")
1550780706457:PEcAn.DB::db.query(paste0("SELECT pfts.id FROM pfts",
1550780706460:" WHERE pfts.name = '", settings$pfts[i]$pft$name,
1550780706462:"'"), con = dbcon)
1550780721069:dbcon <- PEcAn.DB::db.open(settings$database$bety)
1550780725853:View(dbcon)
1550780730583:dbcon
1550780765064:x <- PEcAn.DB::db.query(paste0("SELECT pfts.id FROM pfts",
1550780765066:" WHERE pfts.name = '", settings$pfts[i]$pft$name,
1550780765068:"'"), con = dbcon)
1550780772975:x <- PEcAn.DB::db.query(paste0("SELECT pfts.id FROM pfts",
1550780772977:" WHERE pfts.name = '", settings$pfts[1]$pft$name,
1550780772980:"'"), con = dbcon)
1550780777478:x
1550780931548:!is.null(dbcon)
1550780941178:is.null(settings$model$type
1550780944131:)
1550780960127:x <- PEcAn.DB::db.query(paste0("SELECT pfts.id FROM pfts, modeltypes",
1550780960129:" WHERE pfts.name = '", settings$pfts[i]$pft$name,
1550780960131:"'", " AND modeltypes.name='", settings$model$type,
1550780960133:"'", " AND modeltypes.id=pfts.modeltype_id;"),
1550780960135:con = dbcon)
1550781067315:paste0("SELECT pfts.id FROM pfts, modeltypes",
1550781067317:" WHERE pfts.name = '", settings$pfts[i]$pft$name,
1550781067319:"'", " AND modeltypes.name='", settings$model$type,
1550781067321:"'", " AND modeltypes.id=pfts.modeltype_id;")
1550781072430:paste0("SELECT pfts.id FROM pfts, modeltypes",
1550781072433:" WHERE pfts.name = '", settings$pfts[1]$pft$name,
1550781072435:"'", " AND modeltypes.name='", settings$model$type,
1550781072437:"'", " AND modeltypes.id=pfts.modeltype_id;")
1550781181509:x <- PEcAn.DB::db.query(paste0("SELECT pfts.id FROM pfts, modeltypes",
1550781181511:" WHERE pfts.name = '", settings$pfts[1]$pft$name,
1550781181512:"'", " AND modeltypes.name='", settings$model$type,
1550781181514:"'", " AND modeltypes.id=pfts.modeltype_id;"),
1550781181516:con = dbcon)
1550781183771:x
1550781195005:nrow(x)
1550781577001:# ----------------------------------------------------------------------
1550781577002:# Load required libraries
1550781577003:# ----------------------------------------------------------------------
1550781577005:library(PEcAn.all)
1550781581767:library(PEcAn.utils)
1550781581768:library(RCurl)
1550781581961:# make sure always to call status.end
1550781581962:options(warn=1)
1550781581963:options(error=quote({
1550781581964:PEcAn.utils::status.end("ERROR")
1550781581965:PEcAn.remote::kill.tunnel(settings)
1550781581967:if (!interactive()) {
1550781581968:q(status = 1)
1550781581969:}
1550781581970:}))
1550781581972:# ----------------------------------------------------------------------
1550781581973:# PEcAn Workflow
1550781581974:# ----------------------------------------------------------------------
1550781581975:# Open and read in settings file for PEcAn run.
1550781581977:args <- commandArgs(trailingOnly = TRUE)
1550781581978:if (is.na(args[1])){
1550781581980:settings <- PEcAn.settings::read.settings("pecan/tests/pecan64.sipnet.xml")
1550781581981:} else {
1550781581982:settings.file = args[1]
1550781581983:settings <- PEcAn.settings::read.settings(settings.file)
1550781581984:}
1550781582015:# Check for additional modules that will require adding settings
1550781582016:if("benchmarking" %in% names(settings)){
1550781582017:library(PEcAn.benchmark)
1550781582018:settings <- papply(settings, read_settings_BRR)
1550781582019:}
1550781582021:if("sitegroup" %in% names(settings)){
1550781582022:if(is.null(settings$sitegroup$nSite)){
1550781582023:settings <- PEcAn.settings::createSitegroupMultiSettings(settings, sitegroupId = settings$sitegroup$id)
1550781582024:} else {
1550781582025:settings <- PEcAn.settings::createSitegroupMultiSettings(settings, sitegroupId = settings$sitegroup$id,nSite = settings$sitegroup$nSite)
1550781582026:}
1550781582027:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1550781582028:}
1550781582166:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1550781582167:settings <- PEcAn.settings::prepare.settings(settings, force=FALSE)
1550781642914:#!/usr/bin/env Rscript
1550781642915:#-------------------------------------------------------------------------------
1550781642916:# Copyright (c) 2012 University of Illinois, NCSA.
1550781642917:# All rights reserved. This program and the accompanying materials
1550781642918:# are made available under the terms of the
1550781642919:# University of Illinois/NCSA Open Source License
1550781642920:# which accompanies this distribution, and is available at
1550781642921:# http://opensource.ncsa.illinois.edu/license.html
1550781642922:#-------------------------------------------------------------------------------
1550781642924:# ----------------------------------------------------------------------
1550781642925:# Load required libraries
1550781642926:# ----------------------------------------------------------------------
1550781642927:library(PEcAn.all)
1550781647514:library(PEcAn.utils)
1550781647515:library(RCurl)
1550781647742:# make sure always to call status.end
1550781647743:options(warn=1)
1550781647744:options(error=quote({
1550781647745:PEcAn.utils::status.end("ERROR")
1550781647746:PEcAn.remote::kill.tunnel(settings)
1550781647747:if (!interactive()) {
1550781647748:q(status = 1)
1550781647749:}
1550781647750:}))
1550781647753:#options(warning.expression=status.end("ERROR"))
1550781647755:# ----------------------------------------------------------------------
1550781647756:# PEcAn Workflow
1550781647757:# ----------------------------------------------------------------------
1550781647759:# Open and read in settings file for PEcAn run.
1550781647760:args <- commandArgs(trailingOnly = TRUE)
1550781647761:if (is.na(args[1])){
1550781647762:settings <- PEcAn.settings::read.settings("pecan/tests/pecan64.sipnet.xml")
1550781647763:} else {
1550781647764:settings.file = args[1]
1550781647765:settings <- PEcAn.settings::read.settings(settings.file)
1550781647766:}
1550781647794:# Check for additional modules that will require adding settings
1550781647795:if("benchmarking" %in% names(settings)){
1550781647796:library(PEcAn.benchmark)
1550781647797:settings <- papply(settings, read_settings_BRR)
1550781647798:}
1550781647800:if("sitegroup" %in% names(settings)){
1550781647801:if(is.null(settings$sitegroup$nSite)){
1550781647802:settings <- PEcAn.settings::createSitegroupMultiSettings(settings, sitegroupId = settings$sitegroup$id)
1550781647803:} else {
1550781647804:settings <- PEcAn.settings::createSitegroupMultiSettings(settings, sitegroupId = settings$sitegroup$id,nSite = settings$sitegroup$nSite)
1550781647805:}
1550781647806:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1550781647807:}
1550781647810:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1550781647811:settings <- PEcAn.settings::prepare.settings(settings, force=FALSE)
1550781736278:#!/usr/bin/env Rscript
1550781736280:#-------------------------------------------------------------------------------
1550781736281:# Copyright (c) 2012 University of Illinois, NCSA.
1550781736282:# All rights reserved. This program and the accompanying materials
1550781736283:# are made available under the terms of the
1550781736284:# University of Illinois/NCSA Open Source License
1550781736285:# which accompanies this distribution, and is available at
1550781736286:# http://opensource.ncsa.illinois.edu/license.html
1550781736288:#-------------------------------------------------------------------------------
1550781736289:# ----------------------------------------------------------------------
1550781736290:# Load required libraries
1550781736291:# ----------------------------------------------------------------------
1550781736293:library(PEcAn.all)
1550781741113:library(PEcAn.utils)
1550781741114:library(RCurl)
1550781741402:# make sure always to call status.end
1550781741403:options(warn=1)
1550781741405:options(error=quote({
1550781741407:PEcAn.utils::status.end("ERROR")
1550781741408:PEcAn.remote::kill.tunnel(settings)
1550781741409:if (!interactive()) {
1550781741411:q(status = 1)
1550781741412:}
1550781741413:}))
1550781741415:#options(warning.expression=status.end("ERROR"))
1550781741418:# ----------------------------------------------------------------------
1550781741419:# PEcAn Workflow
1550781741420:# ----------------------------------------------------------------------
1550781741421:# Open and read in settings file for PEcAn run.
1550781741422:args <- commandArgs(trailingOnly = TRUE)
1550781741424:if (is.na(args[1])){
1550781741425:settings <- PEcAn.settings::read.settings("pecan/tests/pecan64.sipnet.xml")
1550781741426:} else {
1550781741427:settings.file = args[1]
1550781741428:settings <- PEcAn.settings::read.settings(settings.file)
1550781741429:}
1550781741460:# Check for additional modules that will require adding settings
1550781741462:if("benchmarking" %in% names(settings)){
1550781741463:library(PEcAn.benchmark)
1550781741465:settings <- papply(settings, read_settings_BRR)
1550781741466:}
1550781741469:if("sitegroup" %in% names(settings)){
1550781741470:if(is.null(settings$sitegroup$nSite)){
1550781741472:settings <- PEcAn.settings::createSitegroupMultiSettings(settings, sitegroupId = settings$sitegroup$id)
1550781741473:} else {
1550781741474:settings <- PEcAn.settings::createSitegroupMultiSettings(settings, sitegroupId = settings$sitegroup$id,nSite = settings$sitegroup$nSite)
1550781741475:}
1550781741477:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1550781741478:}
1550781741480:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1550781741482:settings <- PEcAn.settings::prepare.settings(settings, force=FALSE)
1550782026158:#!/usr/bin/env Rscript
1550782026159:#-------------------------------------------------------------------------------
1550782026160:# Copyright (c) 2012 University of Illinois, NCSA.
1550782026161:# All rights reserved. This program and the accompanying materials
1550782026162:# are made available under the terms of the
1550782026164:# University of Illinois/NCSA Open Source License
1550782026165:# which accompanies this distribution, and is available at
1550782026166:# http://opensource.ncsa.illinois.edu/license.html
1550782026167:#-------------------------------------------------------------------------------
1550782026169:# ----------------------------------------------------------------------
1550782026170:# Load required libraries
1550782026171:# ----------------------------------------------------------------------
1550782026172:library(PEcAn.all)
1550782030803:library(PEcAn.utils)
1550782030805:library(RCurl)
1550782031037:# make sure always to call status.end
1550782031038:options(warn=1)
1550782031039:options(error=quote({
1550782031041:PEcAn.utils::status.end("ERROR")
1550782031042:PEcAn.remote::kill.tunnel(settings)
1550782031043:if (!interactive()) {
1550782031044:q(status = 1)
1550782031045:}
1550782031046:}))
1550782031048:#options(warning.expression=status.end("ERROR"))
1550782031050:# ----------------------------------------------------------------------
1550782031051:# PEcAn Workflow
1550782031052:# ----------------------------------------------------------------------
1550782031053:# Open and read in settings file for PEcAn run.
1550782031054:args <- commandArgs(trailingOnly = TRUE)
1550782031056:if (is.na(args[1])){
1550782031057:settings <- PEcAn.settings::read.settings("pecan/tests/pecan64.sipnet.xml")
1550782031058:} else {
1550782031059:settings.file = args[1]
1550782031060:settings <- PEcAn.settings::read.settings(settings.file)
1550782031061:}
1550782031092:# Check for additional modules that will require adding settings
1550782031093:if("benchmarking" %in% names(settings)){
1550782031094:library(PEcAn.benchmark)
1550782031095:settings <- papply(settings, read_settings_BRR)
1550782031096:}
1550782031098:if("sitegroup" %in% names(settings)){
1550782031099:if(is.null(settings$sitegroup$nSite)){
1550782031100:settings <- PEcAn.settings::createSitegroupMultiSettings(settings, sitegroupId = settings$sitegroup$id)
1550782031101:} else {
1550782031102:settings <- PEcAn.settings::createSitegroupMultiSettings(settings, sitegroupId = settings$sitegroup$id,nSite = settings$sitegroup$nSite)
1550782031103:}
1550782031104:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1550782031105:}
1550782031107:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1550782031108:settings <- PEcAn.settings::prepare.settings(settings, force=FALSE)
1550782037782:traceback()
1550782241302:check.inputs
1550782265995:traceback()
1550782388750:?dbfile.id
1550782483004:settings$run$inputs[[tag]][["path"]]
1550782512562:names(settings$run$inputs)
1550782541252:inputs <- PEcAn.DB::db.query(paste0("SELECT tag, format_id, required FROM modeltypes, modeltypes_formats ",
1550782541254:"WHERE modeltypes_formats.modeltype_id = modeltypes.id ",
1550782541256:"AND modeltypes.name='", settings$model$type, "' ", "AND modeltypes_formats.input"),
1550782541258:con = dbcon)
1550782612834:dbListConnections (PostgreSQL ())
1550782623193:dbListConnections(PostgreSQL())
1550782632294:traceback()
1550782654623:#!/usr/bin/env Rscript
1550782654624:#-------------------------------------------------------------------------------
1550782654625:# Copyright (c) 2012 University of Illinois, NCSA.
1550782654627:# All rights reserved. This program and the accompanying materials
1550782654628:# are made available under the terms of the
1550782654629:# University of Illinois/NCSA Open Source License
1550782654630:# which accompanies this distribution, and is available at
1550782654631:# http://opensource.ncsa.illinois.edu/license.html
1550782654632:#-------------------------------------------------------------------------------
1550782654634:# ----------------------------------------------------------------------
1550782654634:# Load required libraries
1550782654635:# ----------------------------------------------------------------------
1550782654636:library(PEcAn.all)
1550782659187:library(PEcAn.utils)
1550782659188:library(RCurl)
1550782659413:# make sure always to call status.end
1550782659414:options(warn=1)
1550782659415:options(error=quote({
1550782659416:PEcAn.utils::status.end("ERROR")
1550782659417:PEcAn.remote::kill.tunnel(settings)
1550782659418:if (!interactive()) {
1550782659419:q(status = 1)
1550782659421:}
1550782659421:}))
1550782659424:#options(warning.expression=status.end("ERROR"))
1550782659426:# ----------------------------------------------------------------------
1550782659427:# PEcAn Workflow
1550782659428:# ----------------------------------------------------------------------
1550782659429:# Open and read in settings file for PEcAn run.
1550782659430:args <- commandArgs(trailingOnly = TRUE)
1550782659432:if (is.na(args[1])){
1550782659433:settings <- PEcAn.settings::read.settings("pecan/tests/pecan64.sipnet.xml")
1550782659434:} else {
1550782659435:settings.file = args[1]
1550782659436:settings <- PEcAn.settings::read.settings(settings.file)
1550782659437:}
1550782659465:# Check for additional modules that will require adding settings
1550782659465:if("benchmarking" %in% names(settings)){
1550782659466:library(PEcAn.benchmark)
1550782659467:settings <- papply(settings, read_settings_BRR)
1550782659468:}
1550782659470:if("sitegroup" %in% names(settings)){
1550782659471:if(is.null(settings$sitegroup$nSite)){
1550782659472:settings <- PEcAn.settings::createSitegroupMultiSettings(settings, sitegroupId = settings$sitegroup$id)
1550782659473:} else {
1550782659474:settings <- PEcAn.settings::createSitegroupMultiSettings(settings, sitegroupId = settings$sitegroup$id,nSite = settings$sitegroup$nSite)
1550782659475:}
1550782659476:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1550782659477:}
1550782659479:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1550782659480:settings <- PEcAn.settings::prepare.settings(settings, force=FALSE)
1550782666901:traceback()
1550782717554:paste0("SELECT container_id FROM dbfiles WHERE container_type='",
1550782717557:type, "' AND file_path='", file_path, "' AND file_name='",
1550782717559:file_name, "' AND machine_id=", hostid)
1550782751959:paste0("SELECT container_id FROM dbfiles WHERE container_type='",
1550782751961:type, "' AND file_path='", file_path, "' AND file_name='",
1550782751962:file_name, "' AND machine_id=", hostid)
1550783008125:type=10
1550783010906:paste0("SELECT container_id FROM dbfiles WHERE container_type='",
1550783010911:type, "' AND file_path='", file_path, "' AND file_name='",
1550783010918:file_name, "' AND machine_id=", hostid)
1550783044107:paste0("SELECT container_id FROM dbfiles WHERE container_type='", type)
1550783097709:type <- anon_container
1550783098167:file_path <- anon_path
1550783098223:file_name <- anon_name
1550783098852:hostid <- anon_id
1550783122956:type <- "anon_container"
1550783123289:file_path <- "anon_path"
1550783123596:file_name <- "anon_name"
1550783123975:hostid <- "anon_id"
1550783124562:paste0("SELECT container_id FROM dbfiles WHERE container_type='",
1550783124564:type, "' AND file_path='", file_path, "' AND file_name='",
1550783124567:file_name, "' AND machine_id=", hostid)
1550783263086:type <- "anon_container"
1550783263220:file_path <- "anon_path"
1550783263359:file_name <- "anon_name"
1550783263515:hostid <- 10
1550783264018:paste0("SELECT container_id FROM dbfiles WHERE container_type='",
1550783264020:type, "' AND file_path='", file_path, "' AND file_name='",
1550783264023:file_name, "' AND machine_id=", hostid)
1550784674364:?check.settings
1550855908909:# Open and read in settings file for PEcAn run.
1550855908911:if (is.na(args[1])){
1550855908913:settings <- PEcAn.settings::read.settings("pecan/tests/pecan64.sipnet.xml")
1550855908915:} else {
1550855908916:settings.file = args[1]
1550855908917:settings <- PEcAn.settings::read.settings(settings.file)
1550855908918:}
1550855933148:# Open and read in settings file for PEcAn run.
1550855933151:args <- commandArgs(trailingOnly = TRUE)
1550855934048:if (is.na(args[1])){
1550855934049:settings <- PEcAn.settings::read.settings("pecan/tests/pecan64.sipnet.xml")
1550855934051:} else {
1550855934052:settings.file = args[1]
1550855934053:settings <- PEcAn.settings::read.settings(settings.file)
1550855934054:}
1550855936315:## Open up a connection to The Bety Database
1550855936317:bety <-dplyr::src_postgres(host = settings$database$bety$host, user = settings$database$bety$user, password = settings$database$bety$password, dbname = settings$database$bety$dbname)
1550855941620:View(bety)
1550856032749:File_format<-PEcAn.DB::query.format.vars(bety = bety, format.id = 5000000002) #This matches the file with a premade "format" or a template that describes how the information in the file is organized
1550856041800:site<-PEcAn.DB::query.site(site.id,bety$con) #This tells PEcAn where the data comes from
1550856069424:site.id<-settings$run$site$id
1550856069934:site<-PEcAn.DB::query.site(site.id,bety$con) #This tells PEcAn where the data comes from
1550856075482:observations<-PEcAn.benchmark::load_data(data.path = File_path, format= File_format, time.row = File_format$time.row,  site = site, start_year = start.year, end_year = end.year)
1550856278177:View(bety)
1550856294028:settings
1550856478031:species <- tbl(bety, 'species') %>%
1550856478032:select(id, scientificname, genus) %>%
1550856478033:filter(genus == "Miscanthus") %>%
1550856478036:mutate(specie_id = id)
1550856480962:View(species)
1550856510840:?tbl
1550856623221:tbl(bety)
1550856634498:tbl(bety, 'species')
1550856661273:tbl(bety, 'pfts')
1550856677051:all_pfts <- table(bety, 'pfts')
1550856681313:all_pfts <- table(bety, 'pfts')
1550856699136:species <- tbl(bety, 'species')
1550856713739:View(tbl(bety, 'pfts'))
1550856725769:View(tbl(bety, 'species'))
1550856827714:all_pfts <- table(bety, 'pfts') %>%
1550856827716:select(id, pft_type, modeltype_id)
1550856888028:table(bety, 'priors')
1550856890811:table(bety, 'priors')
1550856901304:table(bety, 'pfts')
1550856930260:# Open and read in settings file for PEcAn run.
1550856930262:args <- commandArgs(trailingOnly = TRUE)
1550856930267:if (is.na(args[1])){
1550856930269:settings <- PEcAn.settings::read.settings("pecan/tests/pecan64.sipnet.xml")
1550856930270:} else {
1550856930271:settings.file = args[1]
1550856930272:settings <- PEcAn.settings::read.settings(settings.file)
1550856930273:}
1550856930299:# Open up a connection to BETY
1550856930300:bety <-dplyr::src_postgres(host = settings$database$bety$host,
1550856930301:user = settings$database$bety$user,
1550856930302:password = settings$database$bety$password,
1550856930303:dbname = settings$database$bety$dbname)
1550856933222:all_pfts <- table(bety, 'pfts') %>%
1550856933225:select(id, pft_type, modeltype_id)
1550856943859:library(dplyr)
1550856947126:all_pfts <- table(bety, 'pfts') %>%
1550856947128:select(id, pft_type, modeltype_id)
1550856950544:species <- tbl(bety, 'species') %>%
1550856950545:select(id, scientificname, genus) %>%
1550856950547:filter(genus == "Miscanthus") %>%
1550856950548:mutate(specie_id = id)
1550857022022:?tbl
1550857060979:View(tbl(bety, "pfts"))
1550857069283:View(tbl(bety, "species"))
1550857088169:tbl(bety, "species")
1550857093899:tbl(bety, "pfts")
1550857097769:tbl(bety, "species")
1550857139308:data.table(tbl(bety, "pfts"))
1550857149777:data_frame(tbl(bety, "pfts"))
1550857183281:sites <- tbl(bety, 'sites') %>%
1550857183283:select(id, sitename, city, country) %>%
1550857183285:mutate(site_id = id)
1550857224260:all_pfts <- tbl(bety, 'pfts') %>%
1550857224262:select(id, pft_type, modeltype_id)
1550857230295:all_pfts
1550857287608:unique(all_pfts$modeltype_id)
1550857304008:data.frame(all_pfts)
1550857331425:new_pft <- data.frame(tbl(bety, 'pfts'))
1550857336792:View(new_pft)
1550857354855:unique(new_pft$modeltype_id)
1550857387141:# Pull down parameters distribution from BETY
1550857387143:options(scipen=999)
1550857388437:new_pft <- data.frame(tbl(bety, 'pfts'))
1550857391098:unique(new_pft$modeltype_id)
1550857428924:all_pfts <- tbl(bety, 'pfts') %>%
1550857428927:filter(modeltype_id == 99000000001)
1550857437761:all_pfts
1550857463894:class(all_pfts)
1550857480326:all_pfts <- tbl(bety, 'pfts') %>%
1550857480328:filter(modeltype_id == 99000000001) %>%
1550857480330:data.frame()
1550857485058:class(all_pfts)
1550857489023:all_pfts
1550857538965:new_priors <- tbl(bety, 'priors')
1550857543062:new_priors
1550857642689:args
1550857650467:args[1]
1550857724228:new_priors <- data.frame(tbl(bety, 'priors'))
1550857732809:unique(new_priors$id)
1550857801662:new_priors <- tbl(bety, 'priors') %>%
1550857801664:filter(id > 99000000001 & id < 99000000016) %>%
1550857801667:data.frame()
1550857807529:new_priors
1550857875159:library(dplyr)
1550857875848:# Open and read in settings file for PEcAn run.
1550857875850:args <- commandArgs(trailingOnly = TRUE)
1550857876636:if (is.na(args[1])){
1550857876638:settings <- PEcAn.settings::read.settings("pecan/tests/pecan64.sipnet.xml")
1550857876640:} else {
1550857876642:settings.file = args[1]
1550857876644:settings <- PEcAn.settings::read.settings(settings.file)
1550857876646:}
1550857879293:# Open up a connection to BETY
1550857879295:bety <-dplyr::src_postgres(host = settings$database$bety$host,
1550857879297:user = settings$database$bety$user,
1550857879298:password = settings$database$bety$password,
1550857879300:dbname = settings$database$bety$dbname)
1550857881288:# Pull down parameters distribution from BETY
1550857881290:new_pfts <- tbl(bety, 'pfts') %>%
1550857881292:filter(modeltype_id == 99000000001) %>%
1550857881294:data.frame()
1550857883367:new_priors <- tbl(bety, 'priors') %>%
1550857883369:filter(id >= 99000000001 & id <= 99000000016) %>%
1550857883371:data.frame()
1550857887029:View(new_pfts)
1550857888285:View(new_priors)
1550858207341:new_pfts
1550858210057:new_priors
1550863802915:library(PEcAn.all)
1550863807087:library(PEcAn.utils)
1550863807089:library(RCurl)
1550863807258:# make sure always to call status.end
1550863807259:options(warn=1)
1550863807260:options(error=quote({
1550863807261:PEcAn.utils::status.end("ERROR")
1550863807262:PEcAn.remote::kill.tunnel(settings)
1550863807263:if (!interactive()) {
1550863807264:q(status = 1)
1550863807265:}
1550863807266:}))
1550863807269:#options(warning.expression=status.end("ERROR"))
1550863807271:# ----------------------------------------------------------------------
1550863807272:# PEcAn Workflow
1550863807274:# ----------------------------------------------------------------------
1550863807275:# Open and read in settings file for PEcAn run.
1550863807276:args <- commandArgs(trailingOnly = TRUE)
1550863807277:if (is.na(args[1])){
1550863807278:settings <- PEcAn.settings::read.settings("pecan/tests/pecan64.sipnet.xml")
1550863807279:} else {
1550863807280:settings.file = args[1]
1550863807281:settings <- PEcAn.settings::read.settings(settings.file)
1550863807282:}
1550863807310:# Check for additional modules that will require adding settings
1550863807311:if("benchmarking" %in% names(settings)){
1550863807312:library(PEcAn.benchmark)
1550863807313:settings <- papply(settings, read_settings_BRR)
1550863807314:}
1550863807316:if("sitegroup" %in% names(settings)){
1550863807317:if(is.null(settings$sitegroup$nSite)){
1550863807318:settings <- PEcAn.settings::createSitegroupMultiSettings(settings, sitegroupId = settings$sitegroup$id)
1550863807319:} else {
1550863807320:settings <- PEcAn.settings::createSitegroupMultiSettings(settings, sitegroupId = settings$sitegroup$id,nSite = settings$sitegroup$nSite)
1550863807321:}
1550863807322:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1550863807323:}
1550863807325:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1550863807326:settings <- PEcAn.settings::prepare.settings(settings, force=FALSE)
1550863860613:#!/usr/bin/env Rscript
1550863860614:#-------------------------------------------------------------------------------
1550863860615:# Copyright (c) 2012 University of Illinois, NCSA.
1550863860616:# All rights reserved. This program and the accompanying materials
1550863860617:# are made available under the terms of the
1550863860618:# University of Illinois/NCSA Open Source License
1550863860619:# which accompanies this distribution, and is available at
1550863860621:# http://opensource.ncsa.illinois.edu/license.html
1550863860622:#-------------------------------------------------------------------------------
1550863860624:# ----------------------------------------------------------------------
1550863860625:# Load required libraries
1550863860626:# ----------------------------------------------------------------------
1550863860627:library(PEcAn.all)
1550863864682:library(PEcAn.utils)
1550863864684:library(RCurl)
1550863864915:# make sure always to call status.end
1550863864916:options(warn=1)
1550863864918:options(error=quote({
1550863864919:PEcAn.utils::status.end("ERROR")
1550863864920:PEcAn.remote::kill.tunnel(settings)
1550863864921:if (!interactive()) {
1550863864922:q(status = 1)
1550863864923:}
1550863864924:}))
1550863864927:#options(warning.expression=status.end("ERROR"))
1550863864930:# ----------------------------------------------------------------------
1550863864931:# PEcAn Workflow
1550863864932:# ----------------------------------------------------------------------
1550863864933:# Open and read in settings file for PEcAn run.
1550863864934:args <- commandArgs(trailingOnly = TRUE)
1550863864935:if (is.na(args[1])){
1550863864936:settings <- PEcAn.settings::read.settings("pecan/tests/pecan64.biocro.xml")
1550863864937:} else {
1550863864939:settings.file = args[1]
1550863864940:settings <- PEcAn.settings::read.settings(settings.file)
1550863864941:}
1550863864970:# Check for additional modules that will require adding settings
1550863864971:if("benchmarking" %in% names(settings)){
1550863864972:library(PEcAn.benchmark)
1550863864973:settings <- papply(settings, read_settings_BRR)
1550863864975:}
1550863864977:if("sitegroup" %in% names(settings)){
1550863864978:if(is.null(settings$sitegroup$nSite)){
1550863864979:settings <- PEcAn.settings::createSitegroupMultiSettings(settings, sitegroupId = settings$sitegroup$id)
1550863864980:} else {
1550863864982:settings <- PEcAn.settings::createSitegroupMultiSettings(settings, sitegroupId = settings$sitegroup$id,nSite = settings$sitegroup$nSite)
1550863864983:}
1550863864984:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1550863864985:}
1550863864987:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1550863864989:settings <- PEcAn.settings::prepare.settings(settings, force=FALSE)
1550864012472:#!/usr/bin/env Rscript
1550864012473:#-------------------------------------------------------------------------------
1550864012474:# Copyright (c) 2012 University of Illinois, NCSA.
1550864012475:# All rights reserved. This program and the accompanying materials
1550864012476:# are made available under the terms of the
1550864012477:# University of Illinois/NCSA Open Source License
1550864012478:# which accompanies this distribution, and is available at
1550864012479:# http://opensource.ncsa.illinois.edu/license.html
1550864012481:#-------------------------------------------------------------------------------
1550864012482:# ----------------------------------------------------------------------
1550864012483:# Load required libraries
1550864012484:# ----------------------------------------------------------------------
1550864012485:library(PEcAn.all)
1550864016602:library(PEcAn.utils)
1550864016604:library(RCurl)
1550864016774:# make sure always to call status.end
1550864016775:options(warn=1)
1550864016776:options(error=quote({
1550864016777:PEcAn.utils::status.end("ERROR")
1550864016778:PEcAn.remote::kill.tunnel(settings)
1550864016779:if (!interactive()) {
1550864016780:q(status = 1)
1550864016781:}
1550864016783:}))
1550864016785:#options(warning.expression=status.end("ERROR"))
1550864016788:# ----------------------------------------------------------------------
1550864016789:# PEcAn Workflow
1550864016790:# ----------------------------------------------------------------------
1550864016791:# Open and read in settings file for PEcAn run.
1550864016792:args <- commandArgs(trailingOnly = TRUE)
1550864016793:if (is.na(args[1])){
1550864016794:settings <- PEcAn.settings::read.settings("pecan/tests/pecan64.biocro.xml")
1550864016795:} else {
1550864016796:settings.file = args[1]
1550864016797:settings <- PEcAn.settings::read.settings(settings.file)
1550864016798:}
1550864016828:# Check for additional modules that will require adding settings
1550864016829:if("benchmarking" %in% names(settings)){
1550864016830:library(PEcAn.benchmark)
1550864016831:settings <- papply(settings, read_settings_BRR)
1550864016832:}
1550864016834:if("sitegroup" %in% names(settings)){
1550864016835:if(is.null(settings$sitegroup$nSite)){
1550864016836:settings <- PEcAn.settings::createSitegroupMultiSettings(settings, sitegroupId = settings$sitegroup$id)
1550864016837:} else {
1550864016838:settings <- PEcAn.settings::createSitegroupMultiSettings(settings, sitegroupId = settings$sitegroup$id,nSite = settings$sitegroup$nSite)
1550864016839:}
1550864016840:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1550864016841:}
1550864016843:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1550864016844:settings <- PEcAn.settings::prepare.settings(settings, force=FALSE)
1551811639275:library(PEcAn.photosynthesis)
1551811667662:## Get list of LI-COR 6400 file names (ASCII not xls)
1551811667664:filenames <- system.file("extdata", paste0("flux-course-",rep(1:6,each=2),c("aci","aq")), package = "PEcAn.photosynthesis")
1551811671796:filenames
1551811675248:## Load files to a list
1551811675252:master = lapply(filenames, read_Licor)
1551811686381:master
1551811697841:View(master)
1551811707388:filenames
1551811724424:master[[1]] <- Licor_QC(master[[1]])
1551811776144:master[[1]]
1551811787161:master[[2]]
1551811830688:fit1 <- fitA(master[[1]])
1551811836816:fit1
1551811845517:View(fit1)
1551811888968:dat <- do.call("rbind", master)
1551811919279:library(PEcAn.photosynthesis)
1551811920987:## Get list of LI-COR 6400 file names (ASCII not xls)
1551811920988:filenames <- system.file("extdata", paste0("flux-course-",rep(1:6,each=2),c("aci","aq")), package = "PEcAn.photosynthesis")
1551811922535:## Load files to a list
1551811922536:master = lapply(filenames, read_Licor)
1551811926682:dat <- do.call("rbind", master)
1551811929132:## if QC was done, remove both unchecked points and those that fail QC
1551811929133:if("QC" %in% colnames(dat)){
1551811929134:dat <- dat[-which(dat$QC < 1),]
1551811929135:} else {
1551811929136:QC <- rep(1, nrow(dat))
1551811929137:dat <- cbind(dat, QC)
1551811929138:}
1551811934714:View(dat)
1551811959764:if(file.exists("fit.RData")){
1551811959765:load("fit.RData")
1551811959766:} else{
1551811959767:fit <- fitA(dat)
1551811959768:save(fit, file = "fit.RData")
1551811959769:}
1551812025468:writeLines(fit$model)
1551812141601:View(fit)
1551812179063:par(mfrow = c(2, 1))
1551812180710:plot(fit$params, auto.layout = FALSE)    ## MCMC diagnostic plots
1551812201916:summary(fit$params) ## parameter estimates
1551812214676:gelman.plot(fit$params, auto.layout = FALSE)
1551812243769:par(mfrow = c(1, 1))
1551812245073:mstats <- summary(fit$predict)
1551812250393:pmean <- mstats$statistics[grep("pmean", rownames(mstats$statistics)), 1]
1551812253323:plot(pmean, dat$Photo, pch = "+", xlab = "Predicted A", ylab = "Observed A")
1551812254955:abline(0, 1, col = 2, lwd = 2)
1551812260673:##
1551812260674:plot_photo(dat, fit)
1551812273704:?plot_photo
1551812795989:?read_Licor
1551824161178:read_Licor
1552068881776:# ----------------------------------------------------------------------
1552068881778:# Load required libraries
1552068881780:# ----------------------------------------------------------------------
1552068881782:library(PEcAn.all)
1552068886831:library(PEcAn.utils)
1552068886833:library(RCurl)
1552068889568:# make sure always to call status.end
1552068889570:options(warn=1)
1552068891929:options(error=quote({
1552068891931:PEcAn.utils::status.end("ERROR")
1552068891932:PEcAn.remote::kill.tunnel(settings)
1552068891933:if (!interactive()) {
1552068891934:q(status = 1)
1552068891936:}
1552068891937:}))
1552068891988:# ----------------------------------------------------------------------
1552068891990:# PEcAn Workflow
1552068891992:# ----------------------------------------------------------------------
1552068891994:# Open and read in settings file for PEcAn run.
1552068891996:args <- commandArgs(trailingOnly = TRUE)
1552068896476:if (is.na(args[1])){
1552068896478:settings <- PEcAn.settings::read.settings("pecan/tests/pecan64.biocro.xml")
1552068896480:} else {
1552068896482:settings.file = args[1]
1552068896484:settings <- PEcAn.settings::read.settings(settings.file)
1552068896486:}
1552068900266:View(settings)
1552068909331:settings
1552068922283:# Check for additional modules that will require adding settings
1552068922285:if("benchmarking" %in% names(settings)){
1552068922287:library(PEcAn.benchmark)
1552068922289:settings <- papply(settings, read_settings_BRR)
1552068922291:}
1552068924245:if("sitegroup" %in% names(settings)){
1552068924247:if(is.null(settings$sitegroup$nSite)){
1552068924250:settings <- PEcAn.settings::createSitegroupMultiSettings(settings, sitegroupId = settings$sitegroup$id)
1552068924252:} else {
1552068924254:settings <- PEcAn.settings::createSitegroupMultiSettings(settings, sitegroupId = settings$sitegroup$id,nSite = settings$sitegroup$nSite)
1552068924255:}
1552068924257:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1552068924258:}
1552068926289:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1552068926291:settings <- PEcAn.settings::prepare.settings(settings, force=FALSE)
1552068988508:# ----------------------------------------------------------------------
1552068988510:# Load required libraries
1552068988512:# ----------------------------------------------------------------------
1552068988514:library(PEcAn.all)
1552068993105:library(PEcAn.utils)
1552068993106:library(RCurl)
1552068993235:# make sure always to call status.end
1552068993236:options(warn=1)
1552068993237:options(error=quote({
1552068993238:PEcAn.utils::status.end("ERROR")
1552068993239:PEcAn.remote::kill.tunnel(settings)
1552068993240:if (!interactive()) {
1552068993241:q(status = 1)
1552068993242:}
1552068993243:}))
1552068993747:# ----------------------------------------------------------------------
1552068993749:# PEcAn Workflow
1552068993751:# ----------------------------------------------------------------------
1552068993753:# Open and read in settings file for PEcAn run.
1552068993755:args <- commandArgs(trailingOnly = TRUE)
1552068997803:if (is.na(args[1])){
1552068997805:settings <- PEcAn.settings::read.settings("pecan/tests/pecan64.biocro.xml")
1552068997807:} else {
1552068997808:settings.file = args[1]
1552068997810:settings <- PEcAn.settings::read.settings(settings.file)
1552068997811:}
1552069003021:# Check for additional modules that will require adding settings
1552069003024:if("benchmarking" %in% names(settings)){
1552069003026:library(PEcAn.benchmark)
1552069003028:settings <- papply(settings, read_settings_BRR)
1552069003030:}
1552069005210:if("sitegroup" %in% names(settings)){
1552069005213:if(is.null(settings$sitegroup$nSite)){
1552069005215:settings <- PEcAn.settings::createSitegroupMultiSettings(settings, sitegroupId = settings$sitegroup$id)
1552069005217:} else {
1552069005219:settings <- PEcAn.settings::createSitegroupMultiSettings(settings, sitegroupId = settings$sitegroup$id,nSite = settings$sitegroup$nSite)
1552069005221:}
1552069005222:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1552069005223:}
1552069007112:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1552069007115:settings <- PEcAn.settings::prepare.settings(settings, force=FALSE)
1552069156332:library(PEcAn.all)
1552069161518:library(PEcAn.utils)
1552069161520:library(RCurl)
1552069161701:# make sure always to call status.end
1552069161702:options(warn=1)
1552069161704:options(error=quote({
1552069161705:PEcAn.utils::status.end("ERROR")
1552069161706:PEcAn.remote::kill.tunnel(settings)
1552069161708:if (!interactive()) {
1552069161709:q(status = 1)
1552069161716:}
1552069161718:}))
1552069161720:#options(warning.expression=status.end("ERROR"))
1552069161724:# ----------------------------------------------------------------------
1552069161725:# PEcAn Workflow
1552069161727:# ----------------------------------------------------------------------
1552069161728:# Open and read in settings file for PEcAn run.
1552069161730:args <- commandArgs(trailingOnly = TRUE)
1552069182079:if (is.na(args[1])){
1552069182082:settings <- PEcAn.settings::read.settings("pecan/tests/pecan64.biocro.xml")
1552069182084:} else {
1552069182085:settings.file = args[1]
1552069182086:settings <- PEcAn.settings::read.settings(settings.file)
1552069182088:}
1552069223405:#!/usr/bin/env Rscript
1552069223406:#-------------------------------------------------------------------------------
1552069223407:# Copyright (c) 2012 University of Illinois, NCSA.
1552069223408:# All rights reserved. This program and the accompanying materials
1552069223409:# are made available under the terms of the
1552069223410:# University of Illinois/NCSA Open Source License
1552069223411:# which accompanies this distribution, and is available at
1552069223413:# http://opensource.ncsa.illinois.edu/license.html
1552069223414:#-------------------------------------------------------------------------------
1552069223415:# ----------------------------------------------------------------------
1552069223416:# Load required libraries
1552069223418:# ----------------------------------------------------------------------
1552069223419:library(PEcAn.all)
1552069227200:library(PEcAn.utils)
1552069227201:library(RCurl)
1552069227332:# make sure always to call status.end
1552069227333:options(warn=1)
1552069227334:options(error=quote({
1552069227335:PEcAn.utils::status.end("ERROR")
1552069227336:PEcAn.remote::kill.tunnel(settings)
1552069227337:if (!interactive()) {
1552069227338:q(status = 1)
1552069227339:}
1552069227341:}))
1552069227343:#options(warning.expression=status.end("ERROR"))
1552069227346:# ----------------------------------------------------------------------
1552069227347:# PEcAn Workflow
1552069227348:# ----------------------------------------------------------------------
1552069227349:# Open and read in settings file for PEcAn run.
1552069227351:args <- commandArgs(trailingOnly = TRUE)
1552069235419:if (is.na(args[1])){
1552069235421:settings <- PEcAn.settings::read.settings("pecan.xml")
1552069235423:} else {
1552069235425:settings.file = args[1]
1552069235427:settings <- PEcAn.settings::read.settings(settings.file)
1552069235428:}
1552069388821:if (is.na(args[1])){
1552069388823:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.biocro.xml")
1552069388825:} else {
1552069388827:settings.file = args[1]
1552069388829:settings <- PEcAn.settings::read.settings(settings.file)
1552069388830:}
1552069392382:# Check for additional modules that will require adding settings
1552069392384:if("benchmarking" %in% names(settings)){
1552069392386:library(PEcAn.benchmark)
1552069392387:settings <- papply(settings, read_settings_BRR)
1552069392388:}
1552069394117:if("sitegroup" %in% names(settings)){
1552069394119:if(is.null(settings$sitegroup$nSite)){
1552069394121:settings <- PEcAn.settings::createSitegroupMultiSettings(settings, sitegroupId = settings$sitegroup$id)
1552069394123:} else {
1552069394124:settings <- PEcAn.settings::createSitegroupMultiSettings(settings, sitegroupId = settings$sitegroup$id,nSite = settings$sitegroup$nSite)
1552069394125:}
1552069394126:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1552069394127:}
1552069395717:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1552069395719:settings <- PEcAn.settings::prepare.settings(settings, force=FALSE)
1552069503684:library(PEcAn.all)
1552069508664:library(PEcAn.utils)
1552069508666:library(RCurl)
1552069508839:# make sure always to call status.end
1552069508840:options(warn=1)
1552069508842:options(error=quote({
1552069508843:PEcAn.utils::status.end("ERROR")
1552069508844:PEcAn.remote::kill.tunnel(settings)
1552069508845:if (!interactive()) {
1552069508846:q(status = 1)
1552069508848:}
1552069508849:}))
1552069508852:#options(warning.expression=status.end("ERROR"))
1552069508855:# ----------------------------------------------------------------------
1552069508856:# PEcAn Workflow
1552069508857:# ----------------------------------------------------------------------
1552069508859:# Open and read in settings file for PEcAn run.
1552069508860:args <- commandArgs(trailingOnly = TRUE)
1552069512140:if (is.na(args[1])){
1552069512142:settings <- PEcAn.settings::read.settings("pecan.biocro.xml")
1552069512143:} else {
1552069512145:settings.file = args[1]
1552069512146:settings <- PEcAn.settings::read.settings(settings.file)
1552069512148:}
1552069683698:if (is.na(args[1])){
1552069683700:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.biocro.xml")
1552069683702:} else {
1552069683704:settings.file = args[1]
1552069683706:settings <- PEcAn.settings::read.settings(settings.file)
1552069683708:}
1552069687243:# Check for additional modules that will require adding settings
1552069687244:if("benchmarking" %in% names(settings)){
1552069687245:library(PEcAn.benchmark)
1552069687246:settings <- papply(settings, read_settings_BRR)
1552069687248:}
1552069688286:if("sitegroup" %in% names(settings)){
1552069688288:if(is.null(settings$sitegroup$nSite)){
1552069688289:settings <- PEcAn.settings::createSitegroupMultiSettings(settings, sitegroupId = settings$sitegroup$id)
1552069688290:} else {
1552069688292:settings <- PEcAn.settings::createSitegroupMultiSettings(settings, sitegroupId = settings$sitegroup$id,nSite = settings$sitegroup$nSite)
1552069688293:}
1552069688294:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1552069688296:}
1552070404083:library(dplyr)
1552070406034:# Open and read in settings file for PEcAn run.
1552070406035:args <- commandArgs(trailingOnly = TRUE)
1552070407710:if (is.na(args[1])){
1552070407712:settings <- PEcAn.settings::read.settings("pecan/tests/pecan64.sipnet.xml")
1552070407714:} else {
1552070407716:settings.file = args[1]
1552070407718:settings <- PEcAn.settings::read.settings(settings.file)
1552070407719:}
1552070409153:# Open up a connection to BETY
1552070409155:bety <-dplyr::src_postgres(host = settings$database$bety$host,
1552070409156:user = settings$database$bety$user,
1552070409158:password = settings$database$bety$password,
1552070409159:dbname = settings$database$bety$dbname)
1552070444129:library(dplyr)
1552070445052:# Open and read in settings file for PEcAn run.
1552070445055:args <- commandArgs(trailingOnly = TRUE)
1552070446192:if (is.na(args[1])){
1552070446194:settings <- PEcAn.settings::read.settings("pecan/tests/pecan64.sipnet.xml")
1552070446196:} else {
1552070446197:settings.file = args[1]
1552070446199:settings <- PEcAn.settings::read.settings(settings.file)
1552070446200:}
1552070448259:# Open up a connection to BETY
1552070448260:bety <-dplyr::src_postgres(host = settings$database$bety$host,
1552070448261:user = settings$database$bety$user,
1552070448262:password = settings$database$bety$password,
1552070448264:dbname = settings$database$bety$dbname)
1552070450434:# Pull down new parameters distribution from BETY
1552070450436:new_pfts <- tbl(bety, 'pfts') %>%
1552070450438:filter(modeltype_id == 99000000001) %>%
1552070450440:data.frame()
1552070467236:View(new_pfts)
1552070473178:new_priors <- tbl(bety, 'priors') %>%
1552070473179:filter(id >= 99000000001 & id <= 99000000016) %>%
1552070473180:data.frame()
1552070514047:# ----------------------------------------------------------------------
1552070514048:# Load required libraries
1552070514050:# ----------------------------------------------------------------------
1552070514051:library(PEcAn.all)
1552070518323:library(PEcAn.utils)
1552070518324:library(RCurl)
1552070521791:# make sure always to call status.end
1552070521793:options(warn=1)
1552070523531:options(error=quote({
1552070523533:PEcAn.utils::status.end("ERROR")
1552070523535:PEcAn.remote::kill.tunnel(settings)
1552070523536:if (!interactive()) {
1552070523538:q(status = 1)
1552070523539:}
1552070523541:}))
1552070532524:# ----------------------------------------------------------------------
1552070532525:# PEcAn Workflow
1552070532526:# ----------------------------------------------------------------------
1552070532528:# Open and read in settings file for PEcAn run.
1552070532529:args <- commandArgs(trailingOnly = TRUE)
1552070534315:if (is.na(args[1])){
1552070534316:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.biocro.xml")
1552070534318:} else {
1552070534320:settings.file = args[1]
1552070534321:settings <- PEcAn.settings::read.settings(settings.file)
1552070534323:}
1552070539491:# Check for additional modules that will require adding settings
1552070539492:if("benchmarking" %in% names(settings)){
1552070539493:library(PEcAn.benchmark)
1552070539495:settings <- papply(settings, read_settings_BRR)
1552070539496:}
1552070540578:if("sitegroup" %in% names(settings)){
1552070540580:if(is.null(settings$sitegroup$nSite)){
1552070540581:settings <- PEcAn.settings::createSitegroupMultiSettings(settings, sitegroupId = settings$sitegroup$id)
1552070540583:} else {
1552070540584:settings <- PEcAn.settings::createSitegroupMultiSettings(settings, sitegroupId = settings$sitegroup$id,nSite = settings$sitegroup$nSite)
1552070540586:}
1552070540587:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1552070540589:}
1552070542709:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1552070542711:settings <- PEcAn.settings::prepare.settings(settings, force=FALSE)
1552080202936:# ----------------------------------------------------------------------
1552080202937:# Load required libraries
1552080202939:# ----------------------------------------------------------------------
1552080202941:library(PEcAn.all)
1552080207924:library(PEcAn.utils)
1552080207926:library(RCurl)
1552080208096:# make sure always to call status.end
1552080208098:options(warn=1)
1552080208099:options(error=quote({
1552080208101:PEcAn.utils::status.end("ERROR")
1552080208102:PEcAn.remote::kill.tunnel(settings)
1552080208103:if (!interactive()) {
1552080208105:q(status = 1)
1552080208106:}
1552080208107:}))
1552080208109:# ----------------------------------------------------------------------
1552080208110:# PEcAn Workflow
1552080208111:# ----------------------------------------------------------------------
1552080208112:# Open and read in settings file for PEcAn run.
1552080208113:args <- commandArgs(trailingOnly = TRUE)
1552080210618:if (is.na(args[1])){
1552080210619:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.biocro.xml")
1552080210621:} else {
1552080210623:settings.file = args[1]
1552080210624:settings <- PEcAn.settings::read.settings(settings.file)
1552080210626:}
1552080213005:# Check for additional modules that will require adding settings
1552080213006:if("benchmarking" %in% names(settings)){
1552080213008:library(PEcAn.benchmark)
1552080213009:settings <- papply(settings, read_settings_BRR)
1552080213010:}
1552080213922:if("sitegroup" %in% names(settings)){
1552080213923:if(is.null(settings$sitegroup$nSite)){
1552080213925:settings <- PEcAn.settings::createSitegroupMultiSettings(settings, sitegroupId = settings$sitegroup$id)
1552080213927:} else {
1552080213928:settings <- PEcAn.settings::createSitegroupMultiSettings(settings, sitegroupId = settings$sitegroup$id,nSite = settings$sitegroup$nSite)
1552080213930:}
1552080213932:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1552080213933:}
1552080214686:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1552080214688:settings <- PEcAn.settings::prepare.settings(settings, force=FALSE)
1552080278225:#!/usr/bin/env Rscript
1552080278226:#-------------------------------------------------------------------------------
1552080278227:# Copyright (c) 2012 University of Illinois, NCSA.
1552080278228:# All rights reserved. This program and the accompanying materials
1552080278229:# are made available under the terms of the
1552080278230:# University of Illinois/NCSA Open Source License
1552080278231:# which accompanies this distribution, and is available at
1552080278232:# http://opensource.ncsa.illinois.edu/license.html
1552080278233:#-------------------------------------------------------------------------------
1552080278235:# ----------------------------------------------------------------------
1552080278236:# Load required libraries
1552080278237:# ----------------------------------------------------------------------
1552080278238:library(PEcAn.all)
1552080283182:library(PEcAn.utils)
1552080283184:library(RCurl)
1552080283359:# make sure always to call status.end
1552080283361:options(warn=1)
1552080283362:options(error=quote({
1552080283365:PEcAn.utils::status.end("ERROR")
1552080283366:PEcAn.remote::kill.tunnel(settings)
1552080283367:if (!interactive()) {
1552080283369:q(status = 1)
1552080283370:}
1552080283371:}))
1552080283374:#options(warning.expression=status.end("ERROR"))
1552080283377:# ----------------------------------------------------------------------
1552080283377:# PEcAn Workflow
1552080283378:# ----------------------------------------------------------------------
1552080283379:# Open and read in settings file for PEcAn run.
1552080283380:args <- commandArgs(trailingOnly = TRUE)
1552080287107:if (is.na(args[1])){
1552080287108:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.biocro.xml")
1552080287110:} else {
1552080287111:settings.file = args[1]
1552080287112:settings <- PEcAn.settings::read.settings(settings.file)
1552080287113:}
1552080288574:# Check for additional modules that will require adding settings
1552080288578:if("benchmarking" %in% names(settings)){
1552080288579:library(PEcAn.benchmark)
1552080288580:settings <- papply(settings, read_settings_BRR)
1552080288582:}
1552080289525:if("sitegroup" %in% names(settings)){
1552080289527:if(is.null(settings$sitegroup$nSite)){
1552080289528:settings <- PEcAn.settings::createSitegroupMultiSettings(settings, sitegroupId = settings$sitegroup$id)
1552080289529:} else {
1552080289531:settings <- PEcAn.settings::createSitegroupMultiSettings(settings, sitegroupId = settings$sitegroup$id,nSite = settings$sitegroup$nSite)
1552080289532:}
1552080289533:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1552080289534:}
1552080290422:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1552080290424:settings <- PEcAn.settings::prepare.settings(settings, force=FALSE)
1552080352284:# Write pecan.CHECKED.xml
1552080352286:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1552080355329:# start from scratch if no continue is passed in
1552080355331:statusFile <- file.path(settings$outdir, "STATUS")
1552080356721:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1552080356722:file.remove(statusFile)
1552080356724:}
1552080358032:# Do conversions
1552080358034:settings <- PEcAn.workflow::do_conversions(settings)
1552080359955:# Query the trait database for data and priors
1552080359956:if (PEcAn.utils::status.check("TRAIT") == 0){
1552080359957:PEcAn.utils::status.start("TRAIT")
1552080359959:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1552080359960:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1552080359961:PEcAn.utils::status.end()
1552080359962:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1552080359963:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1552080359964:}
1552080361884:# Run the PEcAn meta.analysis
1552080361886:if(!is.null(settings$meta.analysis)) {
1552080361887:if (PEcAn.utils::status.check("META") == 0){
1552080361888:PEcAn.utils::status.start("META")
1552080361890:PEcAn.MA::runModule.run.meta.analysis(settings)
1552080361891:PEcAn.utils::status.end()
1552080361892:}
1552080361893:}
1552080364205:# Write model specific configs
1552080364207:if (PEcAn.utils::status.check("CONFIG") == 0){
1552080364208:PEcAn.utils::status.start("CONFIG")
1552080364209:settings <- PEcAn.workflow::runModule.run.write.configs(settings)
1552080364211:PEcAn.settings::write.settings(settings, outputfile='pecan.CONFIGS.xml')
1552080364212:PEcAn.utils::status.end()
1552080364213:} else if (file.exists(file.path(settings$outdir, 'pecan.CONFIGS.xml'))) {
1552080364214:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.CONFIGS.xml'))
1552080364215:}
1552321136318:# ----------------------------------------------------------------------
1552321136321:# Load required libraries
1552321136323:# ----------------------------------------------------------------------
1552321136325:library(PEcAn.all)
1552321141015:library(PEcAn.utils)
1552321141017:library(RCurl)
1552321142022:# make sure always to call status.end
1552321142024:options(warn=1)
1552321142827:options(error=quote({
1552321142829:PEcAn.utils::status.end("ERROR")
1552321142831:PEcAn.remote::kill.tunnel(settings)
1552321142833:if (!interactive()) {
1552321142835:q(status = 1)
1552321142837:}
1552321142838:}))
1552321143548:# ----------------------------------------------------------------------
1552321143550:# PEcAn Workflow
1552321143552:# ----------------------------------------------------------------------
1552321143554:# Open and read in settings file for PEcAn run.
1552321143556:args <- commandArgs(trailingOnly = TRUE)
1552321144983:if (is.na(args[1])){
1552321144986:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.biocro.xml")
1552321144988:} else {
1552321144990:settings.file = args[1]
1552321144992:settings <- PEcAn.settings::read.settings(settings.file)
1552321144993:}
1552321147128:# Check for additional modules that will require adding settings
1552321147130:if("benchmarking" %in% names(settings)){
1552321147131:library(PEcAn.benchmark)
1552321147132:settings <- papply(settings, read_settings_BRR)
1552321147133:}
1552321148403:if("sitegroup" %in% names(settings)){
1552321148405:if(is.null(settings$sitegroup$nSite)){
1552321148407:settings <- PEcAn.settings::createSitegroupMultiSettings(settings, sitegroupId = settings$sitegroup$id)
1552321148408:} else {
1552321148410:settings <- PEcAn.settings::createSitegroupMultiSettings(settings, sitegroupId = settings$sitegroup$id,nSite = settings$sitegroup$nSite)
1552321148412:}
1552321148414:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1552321148416:}
1552321149734:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1552321149737:settings <- PEcAn.settings::prepare.settings(settings, force=FALSE)
1552321157944:# Write pecan.CHECKED.xml
1552321157946:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1552321166338:# start from scratch if no continue is passed in
1552321166340:statusFile <- file.path(settings$outdir, "STATUS")
1552321169116:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1552321169118:file.remove(statusFile)
1552321169119:}
1552321170647:# Do conversions
1552321170649:settings <- PEcAn.workflow::do_conversions(settings)
1552321172523:# Query the trait database for data and priors
1552321172525:if (PEcAn.utils::status.check("TRAIT") == 0){
1552321172527:PEcAn.utils::status.start("TRAIT")
1552321172529:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1552321172531:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1552321172532:PEcAn.utils::status.end()
1552321172533:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1552321172534:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1552321172535:}
1552321191401:# Run the PEcAn meta.analysis
1552321191404:if(!is.null(settings$meta.analysis)) {
1552321191406:if (PEcAn.utils::status.check("META") == 0){
1552321191408:PEcAn.utils::status.start("META")
1552321191410:PEcAn.MA::runModule.run.meta.analysis(settings)
1552321191412:PEcAn.utils::status.end()
1552321191414:}
1552321191415:}
1552321206439:# Write model specific configs
1552321206441:if (PEcAn.utils::status.check("CONFIG") == 0){
1552321206443:PEcAn.utils::status.start("CONFIG")
1552321206445:settings <- PEcAn.workflow::runModule.run.write.configs(settings)
1552321206447:PEcAn.settings::write.settings(settings, outputfile='pecan.CONFIGS.xml')
1552321206449:PEcAn.utils::status.end()
1552321206451:} else if (file.exists(file.path(settings$outdir, 'pecan.CONFIGS.xml'))) {
1552321206452:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.CONFIGS.xml'))
1552321206454:}
1552321230802:if ((length(which(commandArgs() == "--advanced")) != 0) && (PEcAn.utils::status.check("ADVANCED") == 0)) {
1552321230804:PEcAn.utils::status.start("ADVANCED")
1552321230806:q();
1552321230808:}
1552321245262:# Start ecosystem model runs
1552321245264:if (PEcAn.utils::status.check("MODEL") == 0) {
1552321245266:PEcAn.utils::status.start("MODEL")
1552321245267:PEcAn.remote::runModule.start.model.runs(settings,stop.on.error=FALSE)
1552321245269:PEcAn.utils::status.end()
1552321245271:}
1552321250693:# Get results of model runs
1552321250695:if (PEcAn.utils::status.check("OUTPUT") == 0) {
1552321250696:PEcAn.utils::status.start("OUTPUT")
1552321250698:runModule.get.results(settings)
1552321250700:PEcAn.utils::status.end()
1552321250701:}
1552321252163:# Run ensemble analysis on model output.
1552321252165:if ('ensemble' %in% names(settings) & PEcAn.utils::status.check("ENSEMBLE") == 0) {
1552321252167:PEcAn.utils::status.start("ENSEMBLE")
1552321252169:runModule.run.ensemble.analysis(settings, TRUE)
1552321252171:PEcAn.utils::status.end()
1552321252173:}
1552321252962:# Run sensitivity analysis and variance decomposition on model output
1552321252964:if ('sensitivity.analysis' %in% names(settings) & PEcAn.utils::status.check("SENSITIVITY") == 0) {
1552321252965:PEcAn.utils::status.start("SENSITIVITY")
1552321252967:runModule.run.sensitivity.analysis(settings)
1552321252968:PEcAn.utils::status.end()
1552321252970:}
1552321253754:# Run parameter data assimilation
1552321253756:if ('assim.batch' %in% names(settings)) {
1552321253758:if (PEcAn.utils::status.check("PDA") == 0) {
1552321253760:PEcAn.utils::status.start("PDA")
1552321253761:settings <- PEcAn.assim.batch::runModule.assim.batch(settings)
1552321253763:PEcAn.utils::status.end()
1552321253765:}
1552321253767:}
1552321254962:# Run state data assimilation
1552321254963:if ('state.data.assimilation' %in% names(settings)) {
1552321254965:if (PEcAn.utils::status.check("SDA") == 0) {
1552321254966:PEcAn.utils::status.start("SDA")
1552321254967:settings <- sda.enfk(settings)
1552321254968:PEcAn.utils::status.end()
1552321254969:}
1552321254970:}
1552321256170:# Run benchmarking
1552321256172:if("benchmarking" %in% names(settings) & "benchmark" %in% names(settings$benchmarking)){
1552321256174:PEcAn.utils::status.start("BENCHMARKING")
1552321256175:results <- papply(settings, function(x) calc_benchmark(x, bety))
1552321256177:PEcAn.utils::status.end()
1552321256178:}
1552321257018:# Pecan workflow complete
1552321257020:if (PEcAn.utils::status.check("FINISHED") == 0) {
1552321257022:PEcAn.utils::status.start("FINISHED")
1552321257024:PEcAn.remote::kill.tunnel(settings)
1552321257026:db.query(paste("UPDATE workflows SET finished_at=NOW() WHERE id=", settings$workflow$id, "AND finished_at IS NULL"), params=settings$database$bety)
1552321257030:# Send email if configured
1552321257031:if (!is.null(settings$email) && !is.null(settings$email$to) && (settings$email$to != "")) {
1552321257032:sendmail(settings$email$from, settings$email$to,
1552321257033:paste0("Workflow has finished executing at ", base::date()),
1552321257034:paste0("You can find the results on ", settings$email$url))
1552321257035:}
1552321257036:PEcAn.utils::status.end()
1552321257037:}
1552321259803:db.print.connections()
1552321260444:print("---------- PEcAn Workflow Complete ----------")
1552321287207:# ----------------------------------------------------------------------
1552321287209:# Load required libraries
1552321287211:# ----------------------------------------------------------------------
1552321287213:library(PEcAn.all)
1552321292590:library(PEcAn.utils)
1552321292592:library(RCurl)
1552321293857:# make sure always to call status.end
1552321293859:options(warn=1)
1552321294523:options(error=quote({
1552321294525:PEcAn.utils::status.end("ERROR")
1552321294527:PEcAn.remote::kill.tunnel(settings)
1552321294529:if (!interactive()) {
1552321294530:q(status = 1)
1552321294533:}
1552321294535:}))
1552321295875:# ----------------------------------------------------------------------
1552321295877:# PEcAn Workflow
1552321295879:# ----------------------------------------------------------------------
1552321295882:# Open and read in settings file for PEcAn run.
1552321295884:args <- commandArgs(trailingOnly = TRUE)
1552321296976:if (is.na(args[1])){
1552321296979:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.biocro.xml")
1552321296980:} else {
1552321296982:settings.file = args[1]
1552321296984:settings <- PEcAn.settings::read.settings(settings.file)
1552321296985:}
1552321298601:# Check for additional modules that will require adding settings
1552321298604:if("benchmarking" %in% names(settings)){
1552321298606:library(PEcAn.benchmark)
1552321298608:settings <- papply(settings, read_settings_BRR)
1552321298610:}
1552321299370:if("sitegroup" %in% names(settings)){
1552321299372:if(is.null(settings$sitegroup$nSite)){
1552321299374:settings <- PEcAn.settings::createSitegroupMultiSettings(settings, sitegroupId = settings$sitegroup$id)
1552321299377:} else {
1552321299379:settings <- PEcAn.settings::createSitegroupMultiSettings(settings, sitegroupId = settings$sitegroup$id,nSite = settings$sitegroup$nSite)
1552321299381:}
1552321299383:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1552321299384:}
1552321300238:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1552321300240:settings <- PEcAn.settings::prepare.settings(settings, force=FALSE)
1552321488501:library(PEcAn.all)
1552321493443:library(PEcAn.utils)
1552321493445:library(RCurl)
1552321493624:# make sure always to call status.end
1552321493626:options(warn=1)
1552321493627:options(error=quote({
1552321493629:PEcAn.utils::status.end("ERROR")
1552321493630:PEcAn.remote::kill.tunnel(settings)
1552321493632:if (!interactive()) {
1552321493633:q(status = 1)
1552321493635:}
1552321493636:}))
1552321493639:#options(warning.expression=status.end("ERROR"))
1552321493642:# ----------------------------------------------------------------------
1552321493643:# PEcAn Workflow
1552321493644:# ----------------------------------------------------------------------
1552321493645:# Open and read in settings file for PEcAn run.
1552321493646:args <- commandArgs(trailingOnly = TRUE)
1552321493647:if (is.na(args[1])){
1552321493648:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.biocro.xml")
1552321493649:} else {
1552321493650:settings.file = args[1]
1552321493651:settings <- PEcAn.settings::read.settings(settings.file)
1552321493652:}
1552321502343:# Check for additional modules that will require adding settings
1552321502345:if("benchmarking" %in% names(settings)){
1552321502347:library(PEcAn.benchmark)
1552321502349:settings <- papply(settings, read_settings_BRR)
1552321502351:}
1552321503310:if("sitegroup" %in% names(settings)){
1552321503313:if(is.null(settings$sitegroup$nSite)){
1552321503315:settings <- PEcAn.settings::createSitegroupMultiSettings(settings, sitegroupId = settings$sitegroup$id)
1552321503317:} else {
1552321503319:settings <- PEcAn.settings::createSitegroupMultiSettings(settings, sitegroupId = settings$sitegroup$id,nSite = settings$sitegroup$nSite)
1552321503321:}
1552321503323:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1552321503324:}
1552321505070:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1552321505073:settings <- PEcAn.settings::prepare.settings(settings, force=FALSE)
1552321507776:# Write pecan.CHECKED.xml
1552321507778:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1552321509775:# start from scratch if no continue is passed in
1552321509777:statusFile <- file.path(settings$outdir, "STATUS")
1552321510862:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1552321510863:file.remove(statusFile)
1552321510866:}
1552321512222:# Do conversions
1552321512223:settings <- PEcAn.workflow::do_conversions(settings)
1552321514430:# Query the trait database for data and priors
1552321514432:if (PEcAn.utils::status.check("TRAIT") == 0){
1552321514434:PEcAn.utils::status.start("TRAIT")
1552321514436:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1552321514438:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1552321514439:PEcAn.utils::status.end()
1552321514440:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1552321514441:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1552321514443:}
1552321515678:# Run the PEcAn meta.analysis
1552321515680:if(!is.null(settings$meta.analysis)) {
1552321515682:if (PEcAn.utils::status.check("META") == 0){
1552321515684:PEcAn.utils::status.start("META")
1552321515687:PEcAn.MA::runModule.run.meta.analysis(settings)
1552321515689:PEcAn.utils::status.end()
1552321515691:}
1552321515692:}
1552321518191:# Write model specific configs
1552321518193:if (PEcAn.utils::status.check("CONFIG") == 0){
1552321518195:PEcAn.utils::status.start("CONFIG")
1552321518197:settings <- PEcAn.workflow::runModule.run.write.configs(settings)
1552321518199:PEcAn.settings::write.settings(settings, outputfile='pecan.CONFIGS.xml')
1552321518201:PEcAn.utils::status.end()
1552321518202:} else if (file.exists(file.path(settings$outdir, 'pecan.CONFIGS.xml'))) {
1552321518204:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.CONFIGS.xml'))
1552321518205:}
1552322077412:?PEcAn.MA::runModule.run.meta.analysis
1552322102217:?pecan.ma
1552322162850:?runModule.run.meta.analysis
1552322203628:library(PEcAn.MA)
1552322206191:?runModule.run.meta.analysis
1552322377627:?PEcAn.utils::status.check
1552322489358:settings
1552322746144:# ----------------------------------------------------------------------
1552322746146:# Load required libraries
1552322746148:# ----------------------------------------------------------------------
1552322746150:library(PEcAn.all)
1552322750835:library(PEcAn.utils)
1552322750837:library(RCurl)
1552322752946:# make sure always to call status.end
1552322752948:options(warn=1)
1552322754821:options(error=quote({
1552322754823:PEcAn.utils::status.end("ERROR")
1552322754825:PEcAn.remote::kill.tunnel(settings)
1552322754827:if (!interactive()) {
1552322754828:q(status = 1)
1552322754830:}
1552322754831:}))
1552322756510:# ----------------------------------------------------------------------
1552322756513:# PEcAn Workflow
1552322756515:# ----------------------------------------------------------------------
1552322756517:# Open and read in settings file for PEcAn run.
1552322756519:args <- commandArgs(trailingOnly = TRUE)
1552322758340:if (is.na(args[1])){
1552322758342:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.biocro.xml")
1552322758344:} else {
1552322758346:settings.file = args[1]
1552322758348:settings <- PEcAn.settings::read.settings(settings.file)
1552322758350:}
1552322760403:# Check for additional modules that will require adding settings
1552322760405:if("benchmarking" %in% names(settings)){
1552322760407:library(PEcAn.benchmark)
1552322760409:settings <- papply(settings, read_settings_BRR)
1552322760410:}
1552322762910:if("sitegroup" %in% names(settings)){
1552322762911:if(is.null(settings$sitegroup$nSite)){
1552322762913:settings <- PEcAn.settings::createSitegroupMultiSettings(settings, sitegroupId = settings$sitegroup$id)
1552322762915:} else {
1552322762916:settings <- PEcAn.settings::createSitegroupMultiSettings(settings, sitegroupId = settings$sitegroup$id,nSite = settings$sitegroup$nSite)
1552322762918:}
1552322762919:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1552322762920:}
1552322765635:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1552322765637:settings <- PEcAn.settings::prepare.settings(settings, force=FALSE)
1552322769728:# Write pecan.CHECKED.xml
1552322769731:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1552322773378:# start from scratch if no continue is passed in
1552322773379:statusFile <- file.path(settings$outdir, "STATUS")
1552322777173:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1552322777175:file.remove(statusFile)
1552322777177:}
1552322780697:# Do conversions
1552322780699:settings <- PEcAn.workflow::do_conversions(settings)
1552322785373:# Query the trait database for data and priors
1552322785376:if (PEcAn.utils::status.check("TRAIT") == 0){
1552322785378:PEcAn.utils::status.start("TRAIT")
1552322785380:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1552322785382:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1552322785384:PEcAn.utils::status.end()
1552322785387:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1552322785388:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1552322785390:}
1552322790765:# Run the PEcAn meta.analysis
1552322790767:if(!is.null(settings$meta.analysis)) {
1552322790769:if (PEcAn.utils::status.check("META") == 0){
1552322790771:PEcAn.utils::status.start("META")
1552322790773:PEcAn.MA::runModule.run.meta.analysis(settings)
1552322790775:PEcAn.utils::status.end()
1552322790776:}
1552322790777:}
1552322794276:# Write model specific configs
1552322794278:if (PEcAn.utils::status.check("CONFIG") == 0){
1552322794280:PEcAn.utils::status.start("CONFIG")
1552322794283:settings <- PEcAn.workflow::runModule.run.write.configs(settings)
1552322794285:PEcAn.settings::write.settings(settings, outputfile='pecan.CONFIGS.xml')
1552322794287:PEcAn.utils::status.end()
1552322794288:} else if (file.exists(file.path(settings$outdir, 'pecan.CONFIGS.xml'))) {
1552322794290:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.CONFIGS.xml'))
1552322794291:}
1552322909392:pwd
1552323410232:# ----------------------------------------------------------------------
1552323410234:# Load required libraries
1552323410236:# ----------------------------------------------------------------------
1552323410238:library(PEcAn.all)
1552323414746:library(PEcAn.utils)
1552323414748:library(RCurl)
1552323416566:# make sure always to call status.end
1552323416567:options(warn=1)
1552323418513:options(error=quote({
1552323418515:PEcAn.utils::status.end("ERROR")
1552323418517:PEcAn.remote::kill.tunnel(settings)
1552323418519:if (!interactive()) {
1552323418521:q(status = 1)
1552323418523:}
1552323418524:}))
1552323420412:# ----------------------------------------------------------------------
1552323420414:# PEcAn Workflow
1552323420416:# ----------------------------------------------------------------------
1552323420418:# Open and read in settings file for PEcAn run.
1552323420421:args <- commandArgs(trailingOnly = TRUE)
1552323423789:if (is.na(args[1])){
1552323423791:settings <- PEcAn.settings::read.settings("pecan.biocro.xml")
1552323423793:} else {
1552323423795:settings.file <- args[1]
1552323423797:settings <- PEcAn.settings::read.settings(settings.file)
1552323423799:}
1552326964896:# ----------------------------------------------------------------------
1552326964898:# Load required libraries
1552326964899:# ----------------------------------------------------------------------
1552326964900:library(PEcAn.all)
1552326970002:library(PEcAn.utils)
1552326970003:library(RCurl)
1552326974060:# make sure always to call status.end
1552326974062:options(warn=1)
1552326978547:options(error=quote({
1552326978549:PEcAn.utils::status.end("ERROR")
1552326978551:PEcAn.remote::kill.tunnel(settings)
1552326978553:if (!interactive()) {
1552326978555:q(status = 1)
1552326978557:}
1552326978558:}))
1552326980096:# ----------------------------------------------------------------------
1552326980098:# PEcAn Workflow
1552326980100:# ----------------------------------------------------------------------
1552326980102:# Open and read in settings file for PEcAn run.
1552326980105:args <- commandArgs(trailingOnly = TRUE)
1552326981520:if (is.na(args[1])){
1552326981523:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.biocro.xml")
1552326981525:} else {
1552326981527:settings.file <- args[1]
1552326981529:settings <- PEcAn.settings::read.settings(settings.file)
1552326981531:}
1552326983036:# Check for additional modules that will require adding settings
1552326983039:if("benchmarking" %in% names(settings)){
1552326983041:library(PEcAn.benchmark)
1552326983043:settings <- papply(settings, read_settings_BRR)
1552326983045:}
1552326984462:if("sitegroup" %in% names(settings)){
1552326984463:if(is.null(settings$sitegroup$nSite)){
1552326984465:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1552326984467:sitegroupId = settings$sitegroup$id)
1552326984468:} else {
1552326984470:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1552326984472:sitegroupId = settings$sitegroup$id,
1552326984474:nSite = settings$sitegroup$nSite)
1552326984475:}
1552326984476:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1552326984478:}
1552326985945:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1552326985947:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1552326987688:# Write pecan.CHECKED.xml
1552326987691:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1552327202392:# ----------------------------------------------------------------------
1552327202393:# Load required libraries
1552327202394:# ----------------------------------------------------------------------
1552327202396:library(PEcAn.all)
1552327207491:library(PEcAn.utils)
1552327207493:library(RCurl)
1552327213845:# make sure always to call status.end
1552327213847:options(warn=1)
1552327214282:options(error=quote({
1552327214284:PEcAn.utils::status.end("ERROR")
1552327214285:PEcAn.remote::kill.tunnel(settings)
1552327214286:if (!interactive()) {
1552327214287:q(status = 1)
1552327214288:}
1552327214289:}))
1552327223359:# ----------------------------------------------------------------------
1552327223360:# PEcAn Workflow
1552327223361:# ----------------------------------------------------------------------
1552327223362:# Open and read in settings file for PEcAn run.
1552327223364:args <- commandArgs(trailingOnly = TRUE)
1552327225627:if (is.na(args[1])){
1552327225628:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.biocro.xml")
1552327225629:} else {
1552327225631:settings.file <- args[1]
1552327225632:settings <- PEcAn.settings::read.settings(settings.file)
1552327225633:}
1552327232876:# Check for additional modules that will require adding settings
1552327232877:if("benchmarking" %in% names(settings)){
1552327232878:library(PEcAn.benchmark)
1552327232879:settings <- papply(settings, read_settings_BRR)
1552327232880:}
1552327239501:if("sitegroup" %in% names(settings)){
1552327239503:if(is.null(settings$sitegroup$nSite)){
1552327239510:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1552327239512:sitegroupId = settings$sitegroup$id)
1552327239513:} else {
1552327239515:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1552327239516:sitegroupId = settings$sitegroup$id,
1552327239518:nSite = settings$sitegroup$nSite)
1552327239519:}
1552327239521:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1552327239522:}
1552327246586:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1552327246587:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1552327827076:# Write pecan.CHECKED.xml
1552327827078:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1552327832440:# start from scratch if no continue is passed in
1552327832441:statusFile <- file.path(settings$outdir, "STATUS")
1552327835897:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1552327835898:file.remove(statusFile)
1552327835900:}
1552327840752:# Do conversions
1552327840753:settings <- PEcAn.workflow::do_conversions(settings)
1552327904525:# Query the trait database for data and priors
1552327904527:if (PEcAn.utils::status.check("TRAIT") == 0){
1552327904529:PEcAn.utils::status.start("TRAIT")
1552327904531:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1552327904533:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1552327904534:PEcAn.utils::status.end()
1552327904536:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1552327904537:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1552327904539:}
1552327951669:# Run the PEcAn meta.analysis
1552327951671:if(!is.null(settings$meta.analysis)) {
1552327951673:if (PEcAn.utils::status.check("META") == 0){
1552327951675:PEcAn.utils::status.start("META")
1552327951677:PEcAn.MA::runModule.run.meta.analysis(settings)
1552327951679:PEcAn.utils::status.end()
1552327951681:}
1552327951682:}
1552327987422:# Write model specific configs
1552327987424:if (PEcAn.utils::status.check("CONFIG") == 0){
1552327987426:PEcAn.utils::status.start("CONFIG")
1552327987428:settings <- PEcAn.workflow::runModule.run.write.configs(settings)
1552327987430:PEcAn.settings::write.settings(settings, outputfile='pecan.CONFIGS.xml')
1552327987432:PEcAn.utils::status.end()
1552327987434:} else if (file.exists(file.path(settings$outdir, 'pecan.CONFIGS.xml'))) {
1552327987435:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.CONFIGS.xml'))
1552327987436:}
1552328928913:# ----------------------------------------------------------------------
1552328928915:# Load required libraries
1552328928917:# ----------------------------------------------------------------------
1552328928918:library(PEcAn.all)
1552328933534:library(PEcAn.utils)
1552328933536:library(RCurl)
1552328946150:# make sure always to call status.end
1552328946151:options(warn=1)
1552328947114:options(error=quote({
1552328947116:PEcAn.utils::status.end("ERROR")
1552328947118:PEcAn.remote::kill.tunnel(settings)
1552328947120:if (!interactive()) {
1552328947121:q(status = 1)
1552328947122:}
1552328947123:}))
1552328948522:# ----------------------------------------------------------------------
1552328948524:# PEcAn Workflow
1552328948526:# ----------------------------------------------------------------------
1552328948528:# Open and read in settings file for PEcAn run.
1552328948530:args <- commandArgs(trailingOnly = TRUE)
1552328950120:if (is.na(args[1])){
1552328950121:settings <- PEcAn.settings::read.settings("pecan/models/biocro/inst/extdata/pecan.biocro.xml")
1552328950123:} else {
1552328950125:settings.file <- args[1]
1552328950127:settings <- PEcAn.settings::read.settings(settings.file)
1552328950129:}
1552328952372:# Check for additional modules that will require adding settings
1552328952374:if("benchmarking" %in% names(settings)){
1552328952376:library(PEcAn.benchmark)
1552328952378:settings <- papply(settings, read_settings_BRR)
1552328952380:}
1552328954056:if("sitegroup" %in% names(settings)){
1552328954058:if(is.null(settings$sitegroup$nSite)){
1552328954060:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1552328954062:sitegroupId = settings$sitegroup$id)
1552328954064:} else {
1552328954065:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1552328954066:sitegroupId = settings$sitegroup$id,
1552328954067:nSite = settings$sitegroup$nSite)
1552328954068:}
1552328954069:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1552328954070:}
1552328955960:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1552328955962:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1552330300824:library(PEcAn.all)
1552330305810:library(PEcAn.utils)
1552330305812:library(RCurl)
1552330305988:# make sure always to call status.end
1552330305989:options(warn=1)
1552330305991:options(error=quote({
1552330305992:PEcAn.utils::status.end("ERROR")
1552330305993:PEcAn.remote::kill.tunnel(settings)
1552330305994:if (!interactive()) {
1552330305996:q(status = 1)
1552330305997:}
1552330305998:}))
1552330306001:#options(warning.expression=status.end("ERROR"))
1552330306004:# ----------------------------------------------------------------------
1552330306005:# PEcAn Workflow
1552330306006:# ----------------------------------------------------------------------
1552330306008:# Open and read in settings file for PEcAn run.
1552330306009:args <- commandArgs(trailingOnly = TRUE)
1552330306010:if (is.na(args[1])){
1552330306012:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.biocro.xml")
1552330306013:} else {
1552330306014:settings.file <- args[1]
1552330306015:settings <- PEcAn.settings::read.settings(settings.file)
1552330306017:}
1552330306039:# Check for additional modules that will require adding settings
1552330306041:if("benchmarking" %in% names(settings)){
1552330306042:library(PEcAn.benchmark)
1552330306043:settings <- papply(settings, read_settings_BRR)
1552330306044:}
1552330306047:if("sitegroup" %in% names(settings)){
1552330306048:if(is.null(settings$sitegroup$nSite)){
1552330306050:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1552330306051:sitegroupId = settings$sitegroup$id)
1552330306052:} else {
1552330306053:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1552330306055:sitegroupId = settings$sitegroup$id,
1552330306056:nSite = settings$sitegroup$nSite)
1552330306057:}
1552330306058:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1552330306059:}
1552330306062:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1552330306063:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1552330346384:# Write pecan.CHECKED.xml
1552330346386:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1552330347303:# start from scratch if no continue is passed in
1552330347305:statusFile <- file.path(settings$outdir, "STATUS")
1552330348576:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1552330348578:file.remove(statusFile)
1552330348580:}
1552330350097:# Do conversions
1552330350099:settings <- PEcAn.workflow::do_conversions(settings)
1552330352042:# Query the trait database for data and priors
1552330352044:if (PEcAn.utils::status.check("TRAIT") == 0){
1552330352047:PEcAn.utils::status.start("TRAIT")
1552330352049:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1552330352051:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1552330352052:PEcAn.utils::status.end()
1552330352054:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1552330352055:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1552330352056:}
1552330372972:# Run the PEcAn meta.analysis
1552330372974:if(!is.null(settings$meta.analysis)) {
1552330372976:if (PEcAn.utils::status.check("META") == 0){
1552330372977:PEcAn.utils::status.start("META")
1552330372979:PEcAn.MA::runModule.run.meta.analysis(settings)
1552330372980:PEcAn.utils::status.end()
1552330372982:}
1552330372983:}
1552330380343:# Write model specific configs
1552330380345:if (PEcAn.utils::status.check("CONFIG") == 0){
1552330380346:PEcAn.utils::status.start("CONFIG")
1552330380347:settings <- PEcAn.workflow::runModule.run.write.configs(settings)
1552330380349:PEcAn.settings::write.settings(settings, outputfile='pecan.CONFIGS.xml')
1552330380350:PEcAn.utils::status.end()
1552330380351:} else if (file.exists(file.path(settings$outdir, 'pecan.CONFIGS.xml'))) {
1552330380352:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.CONFIGS.xml'))
1552330380353:}
1552330884733:PEcAn.workflow::runModule.get.trait.data(settings)
1552330986722:library(dplyr)
1552330987356:# Open and read in settings file for PEcAn run.
1552330987357:args <- commandArgs(trailingOnly = TRUE)
1552330988053:if (is.na(args[1])){
1552330988054:settings <- PEcAn.settings::read.settings("pecan/tests/pecan64.sipnet.xml")
1552330988055:} else {
1552330988057:settings.file = args[1]
1552330988058:settings <- PEcAn.settings::read.settings(settings.file)
1552330988059:}
1552330989099:# Open up a connection to BETY
1552330989100:bety <-dplyr::src_postgres(host = settings$database$bety$host,
1552330989102:user = settings$database$bety$user,
1552330989103:password = settings$database$bety$password,
1552330989104:dbname = settings$database$bety$dbname)
1552331022115:library(dplyr)
1552331022569:# Open and read in settings file for PEcAn run.
1552331022570:args <- commandArgs(trailingOnly = TRUE)
1552331023095:if (is.na(args[1])){
1552331023097:settings <- PEcAn.settings::read.settings("pecan/tests/pecan64.sipnet.xml")
1552331023101:} else {
1552331023103:settings.file = args[1]
1552331023104:settings <- PEcAn.settings::read.settings(settings.file)
1552331023105:}
1552331023867:# Open up a connection to BETY
1552331023868:bety <-dplyr::src_postgres(host = settings$database$bety$host,
1552331023869:user = settings$database$bety$user,
1552331023870:password = settings$database$bety$password,
1552331023871:dbname = settings$database$bety$dbname)
1552331024613:# Pull down new parameters distribution from BETY
1552331024614:new_pfts <- tbl(bety, 'pfts') %>%
1552331024615:filter(modeltype_id == 99000000001) %>%
1552331024617:data.frame()
1552331033084:View(new_pfts)
1552331060315:# Open and read in settings file for PEcAn run.
1552331060317:args <- commandArgs(trailingOnly = TRUE)
1552331060887:if (is.na(args[1])){
1552331060889:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.biocro.xml")
1552331060891:} else {
1552331060893:settings.file = args[1]
1552331060895:settings <- PEcAn.settings::read.settings(settings.file)
1552331060897:}
1552331062087:# Open up a connection to BETY
1552331062089:bety <-dplyr::src_postgres(host = settings$database$bety$host,
1552331062091:user = settings$database$bety$user,
1552331062093:password = settings$database$bety$password,
1552331062095:dbname = settings$database$bety$dbname)
1552331068184:tbl(bety, 'pfts')
1552331239101:#!/usr/bin/env Rscript
1552331239102:#-------------------------------------------------------------------------------
1552331239103:# Copyright (c) 2012 University of Illinois, NCSA.
1552331239105:# All rights reserved. This program and the accompanying materials
1552331239106:# are made available under the terms of the
1552331239107:# University of Illinois/NCSA Open Source License
1552331239108:# which accompanies this distribution, and is available at
1552331239109:# http://opensource.ncsa.illinois.edu/license.html
1552331239110:#-------------------------------------------------------------------------------
1552331239112:# ----------------------------------------------------------------------
1552331239113:# Load required libraries
1552331239114:# ----------------------------------------------------------------------
1552331239115:library(PEcAn.all)
1552331243637:library(PEcAn.utils)
1552331243639:library(RCurl)
1552331243816:# make sure always to call status.end
1552331243817:options(warn=1)
1552331243819:options(error=quote({
1552331243820:PEcAn.utils::status.end("ERROR")
1552331243821:PEcAn.remote::kill.tunnel(settings)
1552331243822:if (!interactive()) {
1552331243823:q(status = 1)
1552331243824:}
1552331243825:}))
1552331243827:#options(warning.expression=status.end("ERROR"))
1552331243830:# ----------------------------------------------------------------------
1552331243830:# PEcAn Workflow
1552331243831:# ----------------------------------------------------------------------
1552331243832:# Open and read in settings file for PEcAn run.
1552331243833:args <- commandArgs(trailingOnly = TRUE)
1552331243835:if (is.na(args[1])){
1552331243836:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.biocro.xml")
1552331243837:} else {
1552331243838:settings.file <- args[1]
1552331243839:settings <- PEcAn.settings::read.settings(settings.file)
1552331243840:}
1552331243861:# Check for additional modules that will require adding settings
1552331243862:if("benchmarking" %in% names(settings)){
1552331243863:library(PEcAn.benchmark)
1552331243864:settings <- papply(settings, read_settings_BRR)
1552331243865:}
1552331243868:if("sitegroup" %in% names(settings)){
1552331243869:if(is.null(settings$sitegroup$nSite)){
1552331243870:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1552331243871:sitegroupId = settings$sitegroup$id)
1552331243872:} else {
1552331243873:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1552331243874:sitegroupId = settings$sitegroup$id,
1552331243875:nSite = settings$sitegroup$nSite)
1552331243876:}
1552331243877:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1552331243878:}
1552331243880:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1552331243881:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1552331244382:# Write pecan.CHECKED.xml
1552331244383:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1552331244449:# start from scratch if no continue is passed in
1552331244450:statusFile <- file.path(settings$outdir, "STATUS")
1552331244452:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1552331244453:file.remove(statusFile)
1552331244454:}
1552331244457:# Do conversions
1552331244458:settings <- PEcAn.workflow::do_conversions(settings)
1552331258317:settings$model$type
1552331270416:settings$database$dbfiles
1552331278485:settings$database$bety
1552331487394:modeltype <- settings$model$type
1552331487397:dbfiles <- settings$database$dbfiles
1552331487399:database <- settings$database$bety
1552331487401:forceupdate <- ifelse(is.null(settings$meta.analysis$update), FALSE, settings$meta.analysis$update)
1552331492200:modeltype
1552331496887:forceupdate
1552331502325:dbfiles
1552331504290:database
1552331558407:settings$pfts
1552331589353:settings$pfts$pft$name
1552331602635:pft <- settings$pfts$pft$name
1552331653319:PEcAn.DB::get.trait.data(pft, modeltype, dbfiles, database, forceupdate)
1552331670795:pft <- list(settings$pfts$pft$name)
1552331672466:PEcAn.DB::get.trait.data(pft, modeltype, dbfiles, database, forceupdate)
1552597315182:library(PEcAn.photosynthesis)
1552597319065:## Get list of LI-COR 6400 file names (ASCII not xls)
1552597319066:filenames <- system.file("extdata", paste0("flux-course-",rep(1:6,each=2),c("aci","aq")), package = "PEcAn.photosynthesis")
1552597323831:## Load files to a list
1552597323833:master = lapply(filenames, read_Licor)
1552597324917:dat <- do.call("rbind", master)
1552597329133:## if QC was done, remove both unchecked points and those that fail QC
1552597329134:if("QC" %in% colnames(dat)){
1552597329136:dat <- dat[-which(dat$QC < 1),]
1552597329137:} else {
1552597329138:QC <- rep(1, nrow(dat))
1552597329139:dat <- cbind(dat, QC)
1552597329140:}
1552597330272:if(file.exists("fit.RData")){
1552597330273:load("fit.RData")
1552597330274:} else{
1552597330275:fit <- fitA(dat)
1552597330276:save(fit, file = "fit.RData")
1552597330277:}
1552597332203:par(mfrow = c(2, 1))
1552597332813:plot(fit$params, auto.layout = FALSE)    ## MCMC diagnostic plots
1552597333573:summary(fit$params) ## parameter estimates
1552597334239:gelman.plot(fit$params, auto.layout = FALSE)
1552597334838:gelman.diag(fit$params)
1552597337784:## predicted vs observed plot
1552597337785:par(mfrow = c(1, 1))
1552597338277:mstats <- summary(fit$predict)
1552597344388:pmean <- mstats$statistics[grep("pmean", rownames(mstats$statistics)), 1]
1552597344390:plot(pmean, dat$Photo, pch = "+", xlab = "Predicted A", ylab = "Observed A")
1552597344783:abline(0, 1, col = 2, lwd = 2)
1552597417198:View(master)
1552597425499:head(master[[1]])
1552597623967:library(PEcAn.photosynthesis)
1552597625996:## Get list of LI-COR 6400 file names (ASCII not xls)
1552597625997:filenames <- system.file("extdata", paste0("flux-course-",rep(1:6,each=2),c("aci","aq")), package = "PEcAn.photosynthesis")
1552597631075:filenames
1552597636119:## Load files to a list
1552597636121:master = lapply(filenames, read_Licor)
1552598437549:licor_test <- read.table("photosynthesis_pkg/data/licor_example_aci.txt")
1552598444821:licor_test <- read.table("photosynthesis_pkg/data/licor_example_aci.txt")
1552598684328:head(master[[1]])
1552598698655:colnames(master[[1]])
1552598720418:sort(colnames(master[[1]]))
1552598842132:?readLines
1552599763235:?read.table
1552599782916:licor_test <- read.table("photosynthesis_pkg/data/licor_example_aci.txt", skip = 12)
1552599786889:licor_test <- read.table("photosynthesis_pkg/data/licor_example_aci.txt", skip = 13)
1552599791551:licor_test <- read.table("photosynthesis_pkg/data/licor_example_aci.txt", skip = 12)
1552599801994:licor_test <- read.table("photosynthesis_pkg/data/licor_example_aci.txt", skip = 12, nrows = 1)
1552599806804:View(licor_test)
1552599815842:licor_test <- read.table("photosynthesis_pkg/data/licor_example_aci.txt", skip = 12, nrows = 2)
1552599933991:licor_test <- read.table("photosynthesis_pkg/data/licor_example_aci.txt", sep = "\t", skip = 12, nrows = 2)
1552599949445:licor_test <- read.table("photosynthesis_pkg/data/licor_example_aci.txt", skip = 12, nrows = 2)
1552599959239:licor_test <- read.table("photosynthesis_pkg/data/licor_example_aci.txt", skip = 12, nrows = 1)
1552599970240:ncol(licor_test)
1552599976548:licor_test <- read.table("photosynthesis_pkg/data/licor_example_aci.txt", skip = 13, nrows = 1)
1552599980198:ncol(licor_test)
1552600039569:licor_test1 <- read.table("photosynthesis_pkg/data/licor_example_aci.txt", skip = 12, nrows = 1)
1552600039584:ncol(licor_test1)
1552600039586:licor_test2 <- read.table("photosynthesis_pkg/data/licor_example_aci.txt", skip = 13, nrows = 1)
1552600039596:ncol(licor_test2)
1552600039598:licor_test3 <- read.table("photosynthesis_pkg/data/licor_example_aci.txt", skip = 14, nrows = 1)
1552600039609:ncol(licor_test3)
1552600039611:licor_test4 <- read.table("photosynthesis_pkg/data/licor_example_aci.txt", skip = 15, nrows = 1)
1552600039615:ncol(licor_test4)
1552600047525:View(licor_test1)
1552600052835:View(licor_test1)
1552600053889:View(licor_test2)
1552600064325:View(licor_test2)
1552600069583:View(licor_test3)
1552600076769:View(licor_test4)
1552600106262:licor_test5 <- read.table("photosynthesis_pkg/data/licor_example_aci.txt", skip = 16, nrows = 1)
1552600108987:ncol(licor_test5)
1552600125953:licor_test4 <- read.table("photosynthesis_pkg/data/licor_example_aci.txt", skip = 15)
1552600127271:ncol(licor_test4)
1552600131889:View(licor_test4)
1552600152007:165/42
1552600167791:42*4
1552600730505:header_1 <- read.table("photosynthesis_pkg/data/licor_example_aci.txt", skip = 12, nrows = 1)
1552600730924:ncol(header_1)
1552600731543:header_2 <- read.table("photosynthesis_pkg/data/licor_example_aci.txt", skip = 13, nrows = 1)
1552600731983:ncol(header_2)
1552600732524:header_3 <- read.table("photosynthesis_pkg/data/licor_example_aci.txt", skip = 14, nrows = 1)
1552600732948:ncol(header_3)
1552600733610:all_data <- read.table("photosynthesis_pkg/data/licor_example_aci.txt", skip = 15)
1552600734608:ncol(all_data)
1552600741950:View(header_1)
1552600750475:View(header_2)
1552600771222:View(header_3)
1552600825960:var_types <- read.table("photosynthesis_pkg/data/licor_example_aci.txt", skip = 12, nrows = 1)
1552600826299:ncol(var_types)
1552600826749:vars <- read.table("photosynthesis_pkg/data/licor_example_aci.txt", skip = 13, nrows = 1)
1552600827161:ncol(vars)
1552600827502:var_units <- read.table("photosynthesis_pkg/data/licor_example_aci.txt", skip = 14, nrows = 1)
1552600827906:ncol(var_units)
1552600833709:View(vars)
1552600848539:View(all_data)
1552600877859:head(colnames(vars))
1552600890501:vars[1:20,]
1552600896007:vars[,1:20]
1552600974858:test <- read.table("photosynthesis_pkg/data/licor_example_aci.txt", nrows = 1)
1552600977315:View(test)
1552601015478:test <- read.table("photosynthesis_pkg/data/licor_example_aci.txt", nrows = 2)
1552601018488:test <- read.table("photosynthesis_pkg/data/licor_example_aci.txt", nrows = 3)
1552601021885:test <- read.table("photosynthesis_pkg/data/licor_example_aci.txt", nrows = 4)
1552601024846:test <- read.table("photosynthesis_pkg/data/licor_example_aci.txt", nrows = 12)
1552601028789:test <- read.table("photosynthesis_pkg/data/licor_example_aci.txt", nrows = 5)
1552601031785:test <- read.table("photosynthesis_pkg/data/licor_example_aci.txt", nrows = 4)
1552601035057:View(test)
1552601060791:test <- read.table("photosynthesis_pkg/data/licor_example_aci.txt", nrows = 1)
1552601063011:View(test)
1552601072720:test <- read.table("photosynthesis_pkg/data/licor_example_aci.txt", nrows = 2)
1552601075015:View(test)
1552601090709:test <- read.table("photosynthesis_pkg/data/licor_example_aci.txt", nrows = 2, header = FALSE)
1552601115225:test <- read.table("photosynthesis_pkg/data/licor_example_aci.txt", nrows = 1)
1552601115700:test2 <- read.table("photosynthesis_pkg/data/licor_example_aci.txt", skip = 1, nrows = 1)
1552601119798:View(test2)
1552601126668:test2 <- read.table("photosynthesis_pkg/data/licor_example_aci.txt", skip = 1, nrows = 2)
1552601130044:test2 <- read.table("photosynthesis_pkg/data/licor_example_aci.txt", skip = 1, nrows = 3)
1552601132249:View(test2)
1552601136911:test2 <- read.table("photosynthesis_pkg/data/licor_example_aci.txt", skip = 1, nrows = 4)
1552601139454:test2 <- read.table("photosynthesis_pkg/data/licor_example_aci.txt", skip = 1, nrows = 5)
1552601143167:test2 <- read.table("photosynthesis_pkg/data/licor_example_aci.txt", skip = 1, nrows = 4)
1552601145609:View(test2)
1552601149102:test
1553624487207:# ----------------------------------------------------------------------
1553624487271:# Load required libraries
1553624487273:# ----------------------------------------------------------------------
1553624487275:library(PEcAn.all)
1553624493059:library(PEcAn.utils)
1553624493061:library(RCurl)
1553624493277:# make sure always to call status.end
1553624493278:options(warn=1)
1553624493280:options(error=quote({
1553624493282:PEcAn.utils::status.end("ERROR")
1553624493283:PEcAn.remote::kill.tunnel(settings)
1553624493284:if (!interactive()) {
1553624493286:q(status = 1)
1553624493287:}
1553624493289:}))
1553624554085:# ----------------------------------------------------------------------
1553624554087:# PEcAn Workflow
1553624554089:# ----------------------------------------------------------------------
1553624554091:# Open and read in settings file for PEcAn run.
1553624554093:args <- commandArgs(trailingOnly = TRUE)
1553624555930:if (is.na(args[1])){
1553624555932:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.biocro.xml")
1553624555935:} else {
1553624555937:settings.file <- args[1]
1553624555939:settings <- PEcAn.settings::read.settings(settings.file)
1553624555941:}
1553624557802:# Check for additional modules that will require adding settings
1553624557804:if("benchmarking" %in% names(settings)){
1553624557807:library(PEcAn.benchmark)
1553624557809:settings <- papply(settings, read_settings_BRR)
1553624557811:}
1553624559017:if("sitegroup" %in% names(settings)){
1553624559019:if(is.null(settings$sitegroup$nSite)){
1553624559021:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1553624559023:sitegroupId = settings$sitegroup$id)
1553624559025:} else {
1553624559026:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1553624559028:sitegroupId = settings$sitegroup$id,
1553624559030:nSite = settings$sitegroup$nSite)
1553624559032:}
1553624559033:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1553624559034:}
1553624560280:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1553624560283:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1553624563863:# Write pecan.CHECKED.xml
1553624563866:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1553624600920:# ----------------------------------------------------------------------
1553624600922:# Load required libraries
1553624600924:# ----------------------------------------------------------------------
1553624600926:library(PEcAn.all)
1553624606298:library(PEcAn.utils)
1553624606300:library(RCurl)
1553624606514:# make sure always to call status.end
1553624606515:options(warn=1)
1553624606517:options(error=quote({
1553624606518:PEcAn.utils::status.end("ERROR")
1553624606520:PEcAn.remote::kill.tunnel(settings)
1553624606521:if (!interactive()) {
1553624606522:q(status = 1)
1553624606524:}
1553624606525:}))
1553624606527:# ----------------------------------------------------------------------
1553624606528:# PEcAn Workflow
1553624606529:# ----------------------------------------------------------------------
1553624606531:# Open and read in settings file for PEcAn run.
1553624606532:args <- commandArgs(trailingOnly = TRUE)
1553624607457:if (is.na(args[1])){
1553624607459:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.biocro.xml")
1553624607461:} else {
1553624607463:settings.file <- args[1]
1553624607465:settings <- PEcAn.settings::read.settings(settings.file)
1553624607467:}
1553624608651:# Check for additional modules that will require adding settings
1553624608653:if("benchmarking" %in% names(settings)){
1553624608655:library(PEcAn.benchmark)
1553624608657:settings <- papply(settings, read_settings_BRR)
1553624608658:}
1553624609497:if("sitegroup" %in% names(settings)){
1553624609499:if(is.null(settings$sitegroup$nSite)){
1553624609502:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1553624609504:sitegroupId = settings$sitegroup$id)
1553624609505:} else {
1553624609507:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1553624609509:sitegroupId = settings$sitegroup$id,
1553624609510:nSite = settings$sitegroup$nSite)
1553624609511:}
1553624609512:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1553624609514:}
1553624610343:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1553624610344:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1553624612027:# Write pecan.CHECKED.xml
1553624612029:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1553624628606:# start from scratch if no continue is passed in
1553624628608:statusFile <- file.path(settings$outdir, "STATUS")
1553624630871:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1553624630873:file.remove(statusFile)
1553624630875:}
1553624634943:# Do conversions
1553624634945:settings <- PEcAn.workflow::do_conversions(settings)
1553624636706:# Query the trait database for data and priors
1553624636709:if (PEcAn.utils::status.check("TRAIT") == 0){
1553624636711:PEcAn.utils::status.start("TRAIT")
1553624636713:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1553624636715:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1553624636716:PEcAn.utils::status.end()
1553624636717:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1553624636719:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1553624636720:}
1553624638057:# Run the PEcAn meta.analysis
1553624638059:if(!is.null(settings$meta.analysis)) {
1553624638061:if (PEcAn.utils::status.check("META") == 0){
1553624638063:PEcAn.utils::status.start("META")
1553624638065:PEcAn.MA::runModule.run.meta.analysis(settings)
1553624638067:PEcAn.utils::status.end()
1553624638068:}
1553624638070:}
1553624639404:# Write model specific configs
1553624639406:if (PEcAn.utils::status.check("CONFIG") == 0){
1553624639409:PEcAn.utils::status.start("CONFIG")
1553624639411:settings <- PEcAn.workflow::runModule.run.write.configs(settings)
1553624639413:PEcAn.settings::write.settings(settings, outputfile='pecan.CONFIGS.xml')
1553624639415:PEcAn.utils::status.end()
1553624639417:} else if (file.exists(file.path(settings$outdir, 'pecan.CONFIGS.xml'))) {
1553624639418:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.CONFIGS.xml'))
1553624639420:}
1553624754707:if ((length(which(commandArgs() == "--advanced")) != 0) && (PEcAn.utils::status.check("ADVANCED") == 0)) {
1553624754710:PEcAn.utils::status.start("ADVANCED")
1553624754712:q();
1553624754715:}
1553624756469:# Start ecosystem model runs
1553624756471:if (PEcAn.utils::status.check("MODEL") == 0) {
1553624756473:PEcAn.utils::status.start("MODEL")
1553624756475:PEcAn.remote::runModule.start.model.runs(settings, stop.on.error = FALSE)
1553624756477:PEcAn.utils::status.end()
1553624756478:}
1553624758329:# Get results of model runs
1553624758332:if (PEcAn.utils::status.check("OUTPUT") == 0) {
1553624758334:PEcAn.utils::status.start("OUTPUT")
1553624758336:runModule.get.results(settings)
1553624758338:PEcAn.utils::status.end()
1553624758340:}
1553624759813:# Run ensemble analysis on model output.
1553624759815:if ('ensemble' %in% names(settings) & PEcAn.utils::status.check("ENSEMBLE") == 0) {
1553624759817:PEcAn.utils::status.start("ENSEMBLE")
1553624759819:runModule.run.ensemble.analysis(settings, TRUE)
1553624759821:PEcAn.utils::status.end()
1553624759822:}
1553624761257:# Run sensitivity analysis and variance decomposition on model output
1553624761259:if ('sensitivity.analysis' %in% names(settings) & PEcAn.utils::status.check("SENSITIVITY") == 0) {
1553624761261:PEcAn.utils::status.start("SENSITIVITY")
1553624761263:runModule.run.sensitivity.analysis(settings)
1553624761265:PEcAn.utils::status.end()
1553624761267:}
1553624762229:# Run parameter data assimilation
1553624762231:if ('assim.batch' %in% names(settings)) {
1553624762234:if (PEcAn.utils::status.check("PDA") == 0) {
1553624762236:PEcAn.utils::status.start("PDA")
1553624762238:settings <- PEcAn.assim.batch::runModule.assim.batch(settings)
1553624762239:PEcAn.utils::status.end()
1553624762241:}
1553624762242:}
1553624763554:# Run state data assimilation
1553624763557:if ('state.data.assimilation' %in% names(settings)) {
1553624763559:if (PEcAn.utils::status.check("SDA") == 0) {
1553624763561:PEcAn.utils::status.start("SDA")
1553624763563:settings <- sda.enfk(settings)
1553624763564:PEcAn.utils::status.end()
1553624763565:}
1553624763567:}
1553624764667:# Run benchmarking
1553624764669:if("benchmarking" %in% names(settings) & "benchmark" %in% names(settings$benchmarking)){
1553624764672:PEcAn.utils::status.start("BENCHMARKING")
1553624764673:results <- papply(settings, function(x) calc_benchmark(x, bety))
1553624764676:PEcAn.utils::status.end()
1553624764678:}
1553624765504:# Pecan workflow complete
1553624765505:if (PEcAn.utils::status.check("FINISHED") == 0) {
1553624765506:PEcAn.utils::status.start("FINISHED")
1553624765507:PEcAn.remote::kill.tunnel(settings)
1553624765508:db.query(paste("UPDATE workflows SET finished_at=NOW() WHERE id=",
1553624765509:settings$workflow$id, "AND finished_at IS NULL"),
1553624765510:params = settings$database$bety)
1553624765512:# Send email if configured
1553624765513:if (!is.null(settings$email) && !is.null(settings$email$to) && (settings$email$to != "")) {
1553624765514:sendmail(settings$email$from, settings$email$to,
1553624765515:paste0("Workflow has finished executing at ", base::date()),
1553624765516:paste0("You can find the results on ", settings$email$url))
1553624765518:}
1553624765519:PEcAn.utils::status.end()
1553624765520:}
1553624768280:db.print.connections()
1553624769075:print("---------- PEcAn Workflow Complete ----------")
1553624825989:#!/usr/bin/env Rscript
1553624825990:#-------------------------------------------------------------------------------
1553624825991:# Copyright (c) 2012 University of Illinois, NCSA.
1553624825993:# All rights reserved. This program and the accompanying materials
1553624825994:# are made available under the terms of the
1553624825995:# University of Illinois/NCSA Open Source License
1553624825996:# which accompanies this distribution, and is available at
1553624825998:# http://opensource.ncsa.illinois.edu/license.html
1553624825999:#-------------------------------------------------------------------------------
1553624826001:# ----------------------------------------------------------------------
1553624826002:# Load required libraries
1553624826004:# ----------------------------------------------------------------------
1553624826005:library(PEcAn.all)
1553624831356:library(PEcAn.utils)
1553624831358:library(RCurl)
1553624831559:# make sure always to call status.end
1553624831560:options(warn=1)
1553624831562:options(error=quote({
1553624831563:PEcAn.utils::status.end("ERROR")
1553624831565:PEcAn.remote::kill.tunnel(settings)
1553624831566:if (!interactive()) {
1553624831567:q(status = 1)
1553624831569:}
1553624831570:}))
1553624831573:#options(warning.expression=status.end("ERROR"))
1553624831576:# ----------------------------------------------------------------------
1553624831578:# PEcAn Workflow
1553624831579:# ----------------------------------------------------------------------
1553624831581:# Open and read in settings file for PEcAn run.
1553624831583:args <- commandArgs(trailingOnly = TRUE)
1553624831584:if (is.na(args[1])){
1553624831586:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.biocro.xml")
1553624831588:} else {
1553624831589:settings.file <- args[1]
1553624831591:settings <- PEcAn.settings::read.settings(settings.file)
1553624831592:}
1553624831629:# Check for additional modules that will require adding settings
1553624831630:if("benchmarking" %in% names(settings)){
1553624831631:library(PEcAn.benchmark)
1553624831633:settings <- papply(settings, read_settings_BRR)
1553624831634:}
1553624831637:if("sitegroup" %in% names(settings)){
1553624831638:if(is.null(settings$sitegroup$nSite)){
1553624831639:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1553624831640:sitegroupId = settings$sitegroup$id)
1553624831642:} else {
1553624831643:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1553624831644:sitegroupId = settings$sitegroup$id,
1553624831646:nSite = settings$sitegroup$nSite)
1553624831647:}
1553624831648:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1553624831649:}
1553624833909:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1553624833911:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1553638218810:# ----------------------------------------------------------------------
1553638218845:# Load required libraries
1553638218846:# ----------------------------------------------------------------------
1553638218847:library(PEcAn.all)
1553638224302:library(PEcAn.utils)
1553638224304:library(RCurl)
1553638224505:# make sure always to call status.end
1553638224507:options(warn=1)
1553638224508:options(error=quote({
1553638224510:PEcAn.utils::status.end("ERROR")
1553638224511:PEcAn.remote::kill.tunnel(settings)
1553638224513:if (!interactive()) {
1553638224514:q(status = 1)
1553638224515:}
1553638224516:}))
1553638225670:# ----------------------------------------------------------------------
1553638225672:# PEcAn Workflow
1553638225675:# ----------------------------------------------------------------------
1553638225677:# Open and read in settings file for PEcAn run.
1553638225678:args <- commandArgs(trailingOnly = TRUE)
1553638226757:if (is.na(args[1])){
1553638226759:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.kr.biocro.xml")
1553638226761:} else {
1553638226763:settings.file <- args[1]
1553638226765:settings <- PEcAn.settings::read.settings(settings.file)
1553638226766:}
1553638228205:# Check for additional modules that will require adding settings
1553638228207:if("benchmarking" %in% names(settings)){
1553638228209:library(PEcAn.benchmark)
1553638228211:settings <- papply(settings, read_settings_BRR)
1553638228213:}
1553638229427:if("sitegroup" %in% names(settings)){
1553638229429:if(is.null(settings$sitegroup$nSite)){
1553638229431:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1553638229433:sitegroupId = settings$sitegroup$id)
1553638229435:} else {
1553638229437:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1553638229438:sitegroupId = settings$sitegroup$id,
1553638229439:nSite = settings$sitegroup$nSite)
1553638229440:}
1553638229441:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1553638229442:}
1553638231482:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1553638231483:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1553638458653:#!/usr/bin/env Rscript
1553638458655:#-------------------------------------------------------------------------------
1553638458657:# Copyright (c) 2012 University of Illinois, NCSA.
1553638458659:# All rights reserved. This program and the accompanying materials
1553638458661:# are made available under the terms of the
1553638458662:# University of Illinois/NCSA Open Source License
1553638458663:# which accompanies this distribution, and is available at
1553638458664:# http://opensource.ncsa.illinois.edu/license.html
1553638458665:#-------------------------------------------------------------------------------
1553638458667:# ----------------------------------------------------------------------
1553638458668:# Load required libraries
1553638458669:# ----------------------------------------------------------------------
1553638458670:library(PEcAn.all)
1553638464280:library(PEcAn.utils)
1553638464281:library(RCurl)
1553638464497:# make sure always to call status.end
1553638464498:options(warn=1)
1553638464499:options(error=quote({
1553638464500:PEcAn.utils::status.end("ERROR")
1553638464501:PEcAn.remote::kill.tunnel(settings)
1553638464502:if (!interactive()) {
1553638464503:q(status = 1)
1553638464504:}
1553638464505:}))
1553638464507:#options(warning.expression=status.end("ERROR"))
1553638464510:# ----------------------------------------------------------------------
1553638464511:# PEcAn Workflow
1553638464512:# ----------------------------------------------------------------------
1553638464513:# Open and read in settings file for PEcAn run.
1553638464514:args <- commandArgs(trailingOnly = TRUE)
1553638464516:if (is.na(args[1])){
1553638464516:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.kr.biocro.xml")
1553638464517:} else {
1553638464518:settings.file <- args[1]
1553638464519:settings <- PEcAn.settings::read.settings(settings.file)
1553638464520:}
1553638464546:# Check for additional modules that will require adding settings
1553638464547:if("benchmarking" %in% names(settings)){
1553638464548:library(PEcAn.benchmark)
1553638464549:settings <- papply(settings, read_settings_BRR)
1553638464550:}
1553638464552:if("sitegroup" %in% names(settings)){
1553638464553:if(is.null(settings$sitegroup$nSite)){
1553638464554:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1553638464555:sitegroupId = settings$sitegroup$id)
1553638464556:} else {
1553638464557:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1553638464558:sitegroupId = settings$sitegroup$id,
1553638464559:nSite = settings$sitegroup$nSite)
1553638464560:}
1553638464561:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1553638464562:}
1553638470353:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1553638470354:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1553640714297:#!/usr/bin/env Rscript
1553640714298:#-------------------------------------------------------------------------------
1553640714300:# Copyright (c) 2012 University of Illinois, NCSA.
1553640714301:# All rights reserved. This program and the accompanying materials
1553640714302:# are made available under the terms of the
1553640714303:# University of Illinois/NCSA Open Source License
1553640714305:# which accompanies this distribution, and is available at
1553640714306:# http://opensource.ncsa.illinois.edu/license.html
1553640714307:#-------------------------------------------------------------------------------
1553640714309:# ----------------------------------------------------------------------
1553640714310:# Load required libraries
1553640714311:# ----------------------------------------------------------------------
1553640714312:library(PEcAn.all)
1553640719917:library(PEcAn.utils)
1553640719919:library(RCurl)
1553640720136:# make sure always to call status.end
1553640720137:options(warn=1)
1553640720139:options(error=quote({
1553640720140:PEcAn.utils::status.end("ERROR")
1553640720141:PEcAn.remote::kill.tunnel(settings)
1553640720142:if (!interactive()) {
1553640720143:q(status = 1)
1553640720144:}
1553640720145:}))
1553640720147:#options(warning.expression=status.end("ERROR"))
1553640720150:# ----------------------------------------------------------------------
1553640720151:# PEcAn Workflow
1553640720152:# ----------------------------------------------------------------------
1553640720153:# Open and read in settings file for PEcAn run.
1553640720154:args <- commandArgs(trailingOnly = TRUE)
1553640720156:if (is.na(args[1])){
1553640720157:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.kr.biocro.xml")
1553640720158:} else {
1553640720159:settings.file <- args[1]
1553640720160:settings <- PEcAn.settings::read.settings(settings.file)
1553640720161:}
1553640720195:# Check for additional modules that will require adding settings
1553640720196:if("benchmarking" %in% names(settings)){
1553640720197:library(PEcAn.benchmark)
1553640720198:settings <- papply(settings, read_settings_BRR)
1553640720200:}
1553640720202:if("sitegroup" %in% names(settings)){
1553640720204:if(is.null(settings$sitegroup$nSite)){
1553640720205:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1553640720206:sitegroupId = settings$sitegroup$id)
1553640720207:} else {
1553640720209:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1553640720210:sitegroupId = settings$sitegroup$id,
1553640720212:nSite = settings$sitegroup$nSite)
1553640720213:}
1553640720214:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1553640720215:}
1553640723813:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1553640723815:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1553641059676:# ----------------------------------------------------------------------
1553641059678:# Load required libraries
1553641059679:# ----------------------------------------------------------------------
1553641059680:library(PEcAn.all)
1553641065189:library(PEcAn.utils)
1553641065191:library(RCurl)
1553641066295:# make sure always to call status.end
1553641066297:options(warn=1)
1553641066670:options(error=quote({
1553641066672:PEcAn.utils::status.end("ERROR")
1553641066674:PEcAn.remote::kill.tunnel(settings)
1553641066676:if (!interactive()) {
1553641066679:q(status = 1)
1553641066680:}
1553641066682:}))
1553641067655:# ----------------------------------------------------------------------
1553641067657:# PEcAn Workflow
1553641067659:# ----------------------------------------------------------------------
1553641067661:# Open and read in settings file for PEcAn run.
1553641067663:args <- commandArgs(trailingOnly = TRUE)
1553641069848:if (is.na(args[1])){
1553641069851:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.kr.biocro.xml")
1553641069853:} else {
1553641069855:settings.file <- args[1]
1553641069857:settings <- PEcAn.settings::read.settings(settings.file)
1553641069859:}
1553641072340:# Check for additional modules that will require adding settings
1553641072342:if("benchmarking" %in% names(settings)){
1553641072345:library(PEcAn.benchmark)
1553641072347:settings <- papply(settings, read_settings_BRR)
1553641072349:}
1553641075024:if("sitegroup" %in% names(settings)){
1553641075026:if(is.null(settings$sitegroup$nSite)){
1553641075028:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1553641075030:sitegroupId = settings$sitegroup$id)
1553641075032:} else {
1553641075034:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1553641075036:sitegroupId = settings$sitegroup$id,
1553641075038:nSite = settings$sitegroup$nSite)
1553641075039:}
1553641075040:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1553641075042:}
1553641076846:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1553641076848:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1553641428033:#!/usr/bin/env Rscript
1553641428034:#-------------------------------------------------------------------------------
1553641428036:# Copyright (c) 2012 University of Illinois, NCSA.
1553641428037:# All rights reserved. This program and the accompanying materials
1553641428039:# are made available under the terms of the
1553641428040:# University of Illinois/NCSA Open Source License
1553641428041:# which accompanies this distribution, and is available at
1553641428043:# http://opensource.ncsa.illinois.edu/license.html
1553641428044:#-------------------------------------------------------------------------------
1553641428047:# ----------------------------------------------------------------------
1553641428048:# Load required libraries
1553641428049:# ----------------------------------------------------------------------
1553641428050:library(PEcAn.all)
1553641433200:library(PEcAn.utils)
1553641433202:library(RCurl)
1553641433366:# make sure always to call status.end
1553641433367:options(warn=1)
1553641433368:options(error=quote({
1553641433369:PEcAn.utils::status.end("ERROR")
1553641433370:PEcAn.remote::kill.tunnel(settings)
1553641433371:if (!interactive()) {
1553641433372:q(status = 1)
1553641433373:}
1553641433374:}))
1553641433375:#options(warning.expression=status.end("ERROR"))
1553641433378:# ----------------------------------------------------------------------
1553641433378:# PEcAn Workflow
1553641433379:# ----------------------------------------------------------------------
1553641433380:# Open and read in settings file for PEcAn run.
1553641433381:args <- commandArgs(trailingOnly = TRUE)
1553641433382:if (is.na(args[1])){
1553641433383:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.biocro.xml")
1553641433384:} else {
1553641433385:settings.file <- args[1]
1553641433386:settings <- PEcAn.settings::read.settings(settings.file)
1553641433386:}
1553641433405:# Check for additional modules that will require adding settings
1553641433406:if("benchmarking" %in% names(settings)){
1553641433407:library(PEcAn.benchmark)
1553641433408:settings <- papply(settings, read_settings_BRR)
1553641433409:}
1553641433411:if("sitegroup" %in% names(settings)){
1553641433412:if(is.null(settings$sitegroup$nSite)){
1553641433413:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1553641433414:sitegroupId = settings$sitegroup$id)
1553641433415:} else {
1553641433416:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1553641433417:sitegroupId = settings$sitegroup$id,
1553641433418:nSite = settings$sitegroup$nSite)
1553641433419:}
1553641433420:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1553641433421:}
1553641439720:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1553641439723:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1553641629777:# ----------------------------------------------------------------------
1553641629779:# Load required libraries
1553641629780:# ----------------------------------------------------------------------
1553641629781:library(PEcAn.all)
1553641634278:library(PEcAn.utils)
1553641634280:library(RCurl)
1553641636248:# make sure always to call status.end
1553641636250:options(warn=1)
1553641636576:options(error=quote({
1553641636577:PEcAn.utils::status.end("ERROR")
1553641636579:PEcAn.remote::kill.tunnel(settings)
1553641636581:if (!interactive()) {
1553641636582:q(status = 1)
1553641636583:}
1553641636584:}))
1553641637609:# ----------------------------------------------------------------------
1553641637611:# PEcAn Workflow
1553641637612:# ----------------------------------------------------------------------
1553641637614:# Open and read in settings file for PEcAn run.
1553641637615:args <- commandArgs(trailingOnly = TRUE)
1553641638414:if (is.na(args[1])){
1553641638416:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.kr.biocro.xml")
1553641638418:} else {
1553641638420:settings.file <- args[1]
1553641638422:settings <- PEcAn.settings::read.settings(settings.file)
1553641638423:}
1553641639284:# Check for additional modules that will require adding settings
1553641639286:if("benchmarking" %in% names(settings)){
1553641639288:library(PEcAn.benchmark)
1553641639289:settings <- papply(settings, read_settings_BRR)
1553641639291:}
1553641639932:if("sitegroup" %in% names(settings)){
1553641639934:if(is.null(settings$sitegroup$nSite)){
1553641639935:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1553641639937:sitegroupId = settings$sitegroup$id)
1553641639939:} else {
1553641639940:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1553641639940:sitegroupId = settings$sitegroup$id,
1553641639942:nSite = settings$sitegroup$nSite)
1553641639943:}
1553641639944:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1553641639945:}
1553641642365:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1553641642367:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1553641647954:# Write pecan.CHECKED.xml
1553641647956:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1553641651643:# start from scratch if no continue is passed in
1553641651645:statusFile <- file.path(settings$outdir, "STATUS")
1553641653420:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1553641653422:file.remove(statusFile)
1553641653424:}
1553641655069:# Do conversions
1553641655071:settings <- PEcAn.workflow::do_conversions(settings)
1553641675241:# Query the trait database for data and priors
1553641675243:if (PEcAn.utils::status.check("TRAIT") == 0){
1553641675245:PEcAn.utils::status.start("TRAIT")
1553641675247:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1553641675249:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1553641675251:PEcAn.utils::status.end()
1553641675252:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1553641675253:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1553641675254:}
1553641680419:# Run the PEcAn meta.analysis
1553641680421:if(!is.null(settings$meta.analysis)) {
1553641680423:if (PEcAn.utils::status.check("META") == 0){
1553641680425:PEcAn.utils::status.start("META")
1553641680427:PEcAn.MA::runModule.run.meta.analysis(settings)
1553641680429:PEcAn.utils::status.end()
1553641680430:}
1553641680431:}
1553641681524:# Write model specific configs
1553641681526:if (PEcAn.utils::status.check("CONFIG") == 0){
1553641681528:PEcAn.utils::status.start("CONFIG")
1553641681530:settings <- PEcAn.workflow::runModule.run.write.configs(settings)
1553641681531:PEcAn.settings::write.settings(settings, outputfile='pecan.CONFIGS.xml')
1553641681533:PEcAn.utils::status.end()
1553641681535:} else if (file.exists(file.path(settings$outdir, 'pecan.CONFIGS.xml'))) {
1553641681536:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.CONFIGS.xml'))
1553641681538:}
1553641683961:if ((length(which(commandArgs() == "--advanced")) != 0) && (PEcAn.utils::status.check("ADVANCED") == 0)) {
1553641683963:PEcAn.utils::status.start("ADVANCED")
1553641683965:q();
1553641683968:}
1553641685082:# Start ecosystem model runs
1553641685084:if (PEcAn.utils::status.check("MODEL") == 0) {
1553641685086:PEcAn.utils::status.start("MODEL")
1553641685088:PEcAn.remote::runModule.start.model.runs(settings, stop.on.error = FALSE)
1553641685090:PEcAn.utils::status.end()
1553641685092:}
1553641686076:# Get results of model runs
1553641686078:if (PEcAn.utils::status.check("OUTPUT") == 0) {
1553641686080:PEcAn.utils::status.start("OUTPUT")
1553641686082:runModule.get.results(settings)
1553641686084:PEcAn.utils::status.end()
1553641686086:}
1553641686824:# Run ensemble analysis on model output.
1553641686826:if ('ensemble' %in% names(settings) & PEcAn.utils::status.check("ENSEMBLE") == 0) {
1553641686828:PEcAn.utils::status.start("ENSEMBLE")
1553641686830:runModule.run.ensemble.analysis(settings, TRUE)
1553641686832:PEcAn.utils::status.end()
1553641686833:}
1553641687499:# Run sensitivity analysis and variance decomposition on model output
1553641687501:if ('sensitivity.analysis' %in% names(settings) & PEcAn.utils::status.check("SENSITIVITY") == 0) {
1553641687503:PEcAn.utils::status.start("SENSITIVITY")
1553641687505:runModule.run.sensitivity.analysis(settings)
1553641687507:PEcAn.utils::status.end()
1553641687509:}
1553641688475:# Run parameter data assimilation
1553641688477:if ('assim.batch' %in% names(settings)) {
1553641688479:if (PEcAn.utils::status.check("PDA") == 0) {
1553641688481:PEcAn.utils::status.start("PDA")
1553641688482:settings <- PEcAn.assim.batch::runModule.assim.batch(settings)
1553641688483:PEcAn.utils::status.end()
1553641688484:}
1553641688485:}
1553641689655:# Run state data assimilation
1553641689657:if ('state.data.assimilation' %in% names(settings)) {
1553641689659:if (PEcAn.utils::status.check("SDA") == 0) {
1553641689661:PEcAn.utils::status.start("SDA")
1553641689663:settings <- sda.enfk(settings)
1553641689664:PEcAn.utils::status.end()
1553641689665:}
1553641689667:}
1553641691423:# Run benchmarking
1553641691425:if("benchmarking" %in% names(settings) & "benchmark" %in% names(settings$benchmarking)){
1553641691426:PEcAn.utils::status.start("BENCHMARKING")
1553641691427:results <- papply(settings, function(x) calc_benchmark(x, bety))
1553641691428:PEcAn.utils::status.end()
1553641691429:}
1553641692301:# Pecan workflow complete
1553641692303:if (PEcAn.utils::status.check("FINISHED") == 0) {
1553641692305:PEcAn.utils::status.start("FINISHED")
1553641692307:PEcAn.remote::kill.tunnel(settings)
1553641692309:db.query(paste("UPDATE workflows SET finished_at=NOW() WHERE id=",
1553641692310:settings$workflow$id, "AND finished_at IS NULL"),
1553641692311:params = settings$database$bety)
1553641692313:# Send email if configured
1553641692314:if (!is.null(settings$email) && !is.null(settings$email$to) && (settings$email$to != "")) {
1553641692315:sendmail(settings$email$from, settings$email$to,
1553641692316:paste0("Workflow has finished executing at ", base::date()),
1553641692317:paste0("You can find the results on ", settings$email$url))
1553641692318:}
1553641692320:PEcAn.utils::status.end()
1553641692320:}
1553641693626:db.print.connections()
1553641693837:print("---------- PEcAn Workflow Complete ----------")
1553641771159:#!/usr/bin/env Rscript
1553641771161:#-------------------------------------------------------------------------------
1553641771163:# Copyright (c) 2012 University of Illinois, NCSA.
1553641771164:# All rights reserved. This program and the accompanying materials
1553641771166:# are made available under the terms of the
1553641771168:# University of Illinois/NCSA Open Source License
1553641771170:# which accompanies this distribution, and is available at
1553641771171:# http://opensource.ncsa.illinois.edu/license.html
1553641771173:#-------------------------------------------------------------------------------
1553641771176:# ----------------------------------------------------------------------
1553641771177:# Load required libraries
1553641771178:# ----------------------------------------------------------------------
1553641771180:library(PEcAn.all)
1553641776144:library(PEcAn.utils)
1553641776146:library(RCurl)
1553641776306:# make sure always to call status.end
1553641776307:options(warn=1)
1553641776309:options(error=quote({
1553641776310:PEcAn.utils::status.end("ERROR")
1553641776311:PEcAn.remote::kill.tunnel(settings)
1553641776312:if (!interactive()) {
1553641776314:q(status = 1)
1553641776315:}
1553641776316:}))
1553641776318:#options(warning.expression=status.end("ERROR"))
1553641776322:# ----------------------------------------------------------------------
1553641776323:# PEcAn Workflow
1553641776324:# ----------------------------------------------------------------------
1553641776325:# Open and read in settings file for PEcAn run.
1553641776326:args <- commandArgs(trailingOnly = TRUE)
1553641776327:if (is.na(args[1])){
1553641776328:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.kr.biocro.xml")
1553641776330:} else {
1553641776331:settings.file <- args[1]
1553641776332:settings <- PEcAn.settings::read.settings(settings.file)
1553641776333:}
1553641776353:# Check for additional modules that will require adding settings
1553641776354:if("benchmarking" %in% names(settings)){
1553641776355:library(PEcAn.benchmark)
1553641776357:settings <- papply(settings, read_settings_BRR)
1553641776358:}
1553641776360:if("sitegroup" %in% names(settings)){
1553641776361:if(is.null(settings$sitegroup$nSite)){
1553641776362:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1553641776363:sitegroupId = settings$sitegroup$id)
1553641776364:} else {
1553641776366:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1553641776367:sitegroupId = settings$sitegroup$id,
1553641776368:nSite = settings$sitegroup$nSite)
1553641776369:}
1553641776370:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1553641776371:}
1553641776374:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1553641776375:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1553641776976:# Write pecan.CHECKED.xml
1553641776977:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1553641777035:# start from scratch if no continue is passed in
1553641777036:statusFile <- file.path(settings$outdir, "STATUS")
1553641777038:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1553641777039:file.remove(statusFile)
1553641777040:}
1553641781532:# Do conversions
1553641781534:settings <- PEcAn.workflow::do_conversions(settings)
1553642618441:#!/usr/bin/env Rscript
1553642618443:#-------------------------------------------------------------------------------
1553642618445:# Copyright (c) 2012 University of Illinois, NCSA.
1553642618447:# All rights reserved. This program and the accompanying materials
1553642618448:# are made available under the terms of the
1553642618449:# University of Illinois/NCSA Open Source License
1553642618451:# which accompanies this distribution, and is available at
1553642618452:# http://opensource.ncsa.illinois.edu/license.html
1553642618453:#-------------------------------------------------------------------------------
1553642618455:# ----------------------------------------------------------------------
1553642618456:# Load required libraries
1553642618457:# ----------------------------------------------------------------------
1553642618458:library(PEcAn.all)
1553642622849:library(PEcAn.utils)
1553642622851:library(RCurl)
1553642623008:# make sure always to call status.end
1553642623009:options(warn=1)
1553642623010:options(error=quote({
1553642623011:PEcAn.utils::status.end("ERROR")
1553642623012:PEcAn.remote::kill.tunnel(settings)
1553642623013:if (!interactive()) {
1553642623014:q(status = 1)
1553642623015:}
1553642623016:}))
1553642623018:#options(warning.expression=status.end("ERROR"))
1553642623020:# ----------------------------------------------------------------------
1553642623021:# PEcAn Workflow
1553642623022:# ----------------------------------------------------------------------
1553642623023:# Open and read in settings file for PEcAn run.
1553642623023:args <- commandArgs(trailingOnly = TRUE)
1553642623025:if (is.na(args[1])){
1553642623026:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.kr.biocro.xml")
1553642623026:} else {
1553642623027:settings.file <- args[1]
1553642623028:settings <- PEcAn.settings::read.settings(settings.file)
1553642623029:}
1553642623050:# Check for additional modules that will require adding settings
1553642623051:if("benchmarking" %in% names(settings)){
1553642623052:library(PEcAn.benchmark)
1553642623053:settings <- papply(settings, read_settings_BRR)
1553642623053:}
1553642623055:if("sitegroup" %in% names(settings)){
1553642623056:if(is.null(settings$sitegroup$nSite)){
1553642623057:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1553642623058:sitegroupId = settings$sitegroup$id)
1553642623059:} else {
1553642623060:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1553642623061:sitegroupId = settings$sitegroup$id,
1553642623062:nSite = settings$sitegroup$nSite)
1553642623063:}
1553642623064:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1553642623065:}
1553642623067:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1553642623068:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1553642623770:# Write pecan.CHECKED.xml
1553642623772:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1553642623809:# start from scratch if no continue is passed in
1553642623810:statusFile <- file.path(settings$outdir, "STATUS")
1553642623812:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1553642623813:file.remove(statusFile)
1553642623814:}
1553642651743:# Do conversions
1553642651745:settings <- PEcAn.workflow::do_conversions(settings)
1553704050722:# ----------------------------------------------------------------------
1553704050740:# Load required libraries
1553704050742:# ----------------------------------------------------------------------
1553704050744:library(PEcAn.all)
1553704056184:library(PEcAn.utils)
1553704056185:library(RCurl)
1553704060326:# make sure always to call status.end
1553704060328:options(warn=1)
1553704060911:options(error=quote({
1553704060912:PEcAn.utils::status.end("ERROR")
1553704060914:PEcAn.remote::kill.tunnel(settings)
1553704060915:if (!interactive()) {
1553704060917:q(status = 1)
1553704060918:}
1553704060920:}))
1553704061782:# ----------------------------------------------------------------------
1553704061783:# PEcAn Workflow
1553704061784:# ----------------------------------------------------------------------
1553704061786:# Open and read in settings file for PEcAn run.
1553704061787:args <- commandArgs(trailingOnly = TRUE)
1553704062704:if (is.na(args[1])){
1553704062706:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.kr.biocro.xml")
1553704062707:} else {
1553704062708:settings.file <- args[1]
1553704062710:settings <- PEcAn.settings::read.settings(settings.file)
1553704062711:}
1553704064119:# Check for additional modules that will require adding settings
1553704064121:if("benchmarking" %in% names(settings)){
1553704064123:library(PEcAn.benchmark)
1553704064124:settings <- papply(settings, read_settings_BRR)
1553704064126:}
1553704064929:if("sitegroup" %in% names(settings)){
1553704064930:if(is.null(settings$sitegroup$nSite)){
1553704064932:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1553704064933:sitegroupId = settings$sitegroup$id)
1553704064935:} else {
1553704064936:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1553704064937:sitegroupId = settings$sitegroup$id,
1553704064939:nSite = settings$sitegroup$nSite)
1553704064940:}
1553704064941:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1553704064942:}
1553704065918:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1553704065920:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1553704105172:# ----------------------------------------------------------------------
1553704105173:# Load required libraries
1553704105174:# ----------------------------------------------------------------------
1553704105176:library(PEcAn.all)
1553704110697:library(PEcAn.utils)
1553704110699:library(RCurl)
1553704110910:# make sure always to call status.end
1553704110911:options(warn=1)
1553704110913:options(error=quote({
1553704110914:PEcAn.utils::status.end("ERROR")
1553704110915:PEcAn.remote::kill.tunnel(settings)
1553704110916:if (!interactive()) {
1553704110917:q(status = 1)
1553704110918:}
1553704110919:}))
1553704112145:# ----------------------------------------------------------------------
1553704112147:# PEcAn Workflow
1553704112149:# ----------------------------------------------------------------------
1553704112151:# Open and read in settings file for PEcAn run.
1553704112153:args <- commandArgs(trailingOnly = TRUE)
1553704113526:if (is.na(args[1])){
1553704113528:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.kr.biocro.xml")
1553704113530:} else {
1553704113532:settings.file <- args[1]
1553704113534:settings <- PEcAn.settings::read.settings(settings.file)
1553704113536:}
1553704114708:# Check for additional modules that will require adding settings
1553704114710:if("benchmarking" %in% names(settings)){
1553704114713:library(PEcAn.benchmark)
1553704114715:settings <- papply(settings, read_settings_BRR)
1553704114716:}
1553704115923:if("sitegroup" %in% names(settings)){
1553704115925:if(is.null(settings$sitegroup$nSite)){
1553704115927:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1553704115929:sitegroupId = settings$sitegroup$id)
1553704115931:} else {
1553704115933:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1553704115934:sitegroupId = settings$sitegroup$id,
1553704115935:nSite = settings$sitegroup$nSite)
1553704115936:}
1553704115937:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1553704115939:}
1553704117914:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1553704117917:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1553704190837:# Write pecan.CHECKED.xml
1553704190839:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1553704194351:# start from scratch if no continue is passed in
1553704194353:statusFile <- file.path(settings$outdir, "STATUS")
1553704195700:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1553704195702:file.remove(statusFile)
1553704195704:}
1553704197185:# Do conversions
1553704197188:settings <- PEcAn.workflow::do_conversions(settings)
1553704246417:#!/usr/bin/env Rscript
1553704246419:#-------------------------------------------------------------------------------
1553704246421:# Copyright (c) 2012 University of Illinois, NCSA.
1553704246423:# All rights reserved. This program and the accompanying materials
1553704246424:# are made available under the terms of the
1553704246426:# University of Illinois/NCSA Open Source License
1553704246427:# which accompanies this distribution, and is available at
1553704246428:# http://opensource.ncsa.illinois.edu/license.html
1553704246429:#-------------------------------------------------------------------------------
1553704246431:# ----------------------------------------------------------------------
1553704246432:# Load required libraries
1553704246433:# ----------------------------------------------------------------------
1553704246434:library(PEcAn.all)
1553704251732:library(PEcAn.utils)
1553704251734:library(RCurl)
1553704251906:# make sure always to call status.end
1553704251907:options(warn=1)
1553704251909:options(error=quote({
1553704251910:PEcAn.utils::status.end("ERROR")
1553704251911:PEcAn.remote::kill.tunnel(settings)
1553704251912:if (!interactive()) {
1553704251913:q(status = 1)
1553704251914:}
1553704251915:}))
1553704251918:#options(warning.expression=status.end("ERROR"))
1553704251921:# ----------------------------------------------------------------------
1553704251922:# PEcAn Workflow
1553704251923:# ----------------------------------------------------------------------
1553704251924:# Open and read in settings file for PEcAn run.
1553704251925:args <- commandArgs(trailingOnly = TRUE)
1553704251927:if (is.na(args[1])){
1553704251928:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.kr.biocro.xml")
1553704251929:} else {
1553704251930:settings.file <- args[1]
1553704251931:settings <- PEcAn.settings::read.settings(settings.file)
1553704251932:}
1553704251953:# Check for additional modules that will require adding settings
1553704251954:if("benchmarking" %in% names(settings)){
1553704251955:library(PEcAn.benchmark)
1553704251957:settings <- papply(settings, read_settings_BRR)
1553704251958:}
1553704251960:if("sitegroup" %in% names(settings)){
1553704251961:if(is.null(settings$sitegroup$nSite)){
1553704251963:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1553704251964:sitegroupId = settings$sitegroup$id)
1553704251965:} else {
1553704251966:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1553704251967:sitegroupId = settings$sitegroup$id,
1553704251968:nSite = settings$sitegroup$nSite)
1553704251969:}
1553704251970:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1553704251972:}
1553704251974:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1553704251975:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1553704252832:# Write pecan.CHECKED.xml
1553704252833:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1553704252912:# start from scratch if no continue is passed in
1553704252913:statusFile <- file.path(settings$outdir, "STATUS")
1553704252915:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1553704252916:file.remove(statusFile)
1553704252917:}
1553704271439:settings
1553704939827:# ----------------------------------------------------------------------
1553704939829:# Load required libraries
1553704939831:# ----------------------------------------------------------------------
1553704939833:library(PEcAn.all)
1553704944006:library(PEcAn.utils)
1553704944007:library(RCurl)
1553704944162:# make sure always to call status.end
1553704944163:options(warn=1)
1553704944164:options(error=quote({
1553704944166:PEcAn.utils::status.end("ERROR")
1553704944167:PEcAn.remote::kill.tunnel(settings)
1553704944168:if (!interactive()) {
1553704944169:q(status = 1)
1553704944170:}
1553704944172:}))
1553704944173:# ----------------------------------------------------------------------
1553704944174:# PEcAn Workflow
1553704944175:# ----------------------------------------------------------------------
1553704944176:# Open and read in settings file for PEcAn run.
1553704944178:args <- commandArgs(trailingOnly = TRUE)
1553704944182:if (is.na(args[1])){
1553704944183:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.kr.biocro.xml")
1553704944184:} else {
1553704944185:settings.file <- args[1]
1553704944186:settings <- PEcAn.settings::read.settings(settings.file)
1553704944188:}
1553704945228:# Check for additional modules that will require adding settings
1553704945231:if("benchmarking" %in% names(settings)){
1553704945233:library(PEcAn.benchmark)
1553704945235:settings <- papply(settings, read_settings_BRR)
1553704945237:}
1553704946002:if("sitegroup" %in% names(settings)){
1553704946004:if(is.null(settings$sitegroup$nSite)){
1553704946007:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1553704946009:sitegroupId = settings$sitegroup$id)
1553704946012:} else {
1553704946014:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1553704946016:sitegroupId = settings$sitegroup$id,
1553704946018:nSite = settings$sitegroup$nSite)
1553704946019:}
1553704946020:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1553704946021:}
1553704948554:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1553704948556:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1553704954728:# Write pecan.CHECKED.xml
1553704954730:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1553704956471:# start from scratch if no continue is passed in
1553704956473:statusFile <- file.path(settings$outdir, "STATUS")
1553704957339:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1553704957341:file.remove(statusFile)
1553704957343:}
1553704958764:# Do conversions
1553704958767:settings <- PEcAn.workflow::do_conversions(settings)
1553705090171:?PEcAn.utils::convert.input
1553715267784:file.path(rundir, "config.xml")
1553715284661:?PEcAn.BIOCRO::read.biocro.config
1553715347881:PEcAn.BIOCRO::read.biocro.config("pecan/tests/pecan.kr.biocro.xml")
1553715359203:# ----------------------------------------------------------------------
1553715359205:# Load required libraries
1553715359207:# ----------------------------------------------------------------------
1553715359209:library(PEcAn.all)
1553715364406:library(PEcAn.utils)
1553715364408:library(RCurl)
1553715364610:# make sure always to call status.end
1553715364612:options(warn=1)
1553715364614:options(error=quote({
1553715364615:PEcAn.utils::status.end("ERROR")
1553715364617:PEcAn.remote::kill.tunnel(settings)
1553715364618:if (!interactive()) {
1553715364620:q(status = 1)
1553715364621:}
1553715364622:}))
1553715364624:# ----------------------------------------------------------------------
1553715364626:# PEcAn Workflow
1553715364627:# ----------------------------------------------------------------------
1553715364629:# Open and read in settings file for PEcAn run.
1553715364630:args <- commandArgs(trailingOnly = TRUE)
1553715364632:if (is.na(args[1])){
1553715364633:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.kr.biocro.xml")
1553715364635:} else {
1553715364636:settings.file <- args[1]
1553715364638:settings <- PEcAn.settings::read.settings(settings.file)
1553715364639:}
1553715364663:# Check for additional modules that will require adding settings
1553715364664:if("benchmarking" %in% names(settings)){
1553715364665:library(PEcAn.benchmark)
1553715364667:settings <- papply(settings, read_settings_BRR)
1553715364668:}
1553715364670:if("sitegroup" %in% names(settings)){
1553715364671:if(is.null(settings$sitegroup$nSite)){
1553715364673:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1553715364674:sitegroupId = settings$sitegroup$id)
1553715364676:} else {
1553715364677:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1553715364679:sitegroupId = settings$sitegroup$id,
1553715364680:nSite = settings$sitegroup$nSite)
1553715364681:}
1553715364683:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1553715364684:}
1553715366354:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1553715366356:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1553715369765:settings
1553715415020:settings$rundir
1553715443337:?file.path
1553715455431:file.path("pecan/tests/pecan.kr.biocro.xml")
1553715458936:PEcAn.BIOCRO::read.biocro.config(file.path("pecan/tests/pecan.kr.biocro.xml"))
1553715505585:runid <- readLines(file.path(settings$rundir, "runs.txt"))[1]
1553715540419:args   <- commandArgs(trailingOnly = TRUE)
1553715540940:rundir <- args[1]
1553715541621:outdir <- args[2]
1553715546104:rundir
1553716345643:# ----------------------------------------------------------------------
1553716345645:# Load required libraries
1553716345647:# ----------------------------------------------------------------------
1553716345648:library(PEcAn.all)
1553716351433:library(PEcAn.utils)
1553716351435:library(RCurl)
1553716351650:# make sure always to call status.end
1553716351651:options(warn=1)
1553716351653:options(error=quote({
1553716351654:PEcAn.utils::status.end("ERROR")
1553716351655:PEcAn.remote::kill.tunnel(settings)
1553716351656:if (!interactive()) {
1553716351657:q(status = 1)
1553716351658:}
1553716351659:}))
1553716354079:# ----------------------------------------------------------------------
1553716354082:# PEcAn Workflow
1553716354084:# ----------------------------------------------------------------------
1553716354086:# Open and read in settings file for PEcAn run.
1553716354087:args <- commandArgs(trailingOnly = TRUE)
1553716355091:if (is.na(args[1])){
1553716355093:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.kr.biocro.xml")
1553716355095:} else {
1553716355097:settings.file <- args[1]
1553716355100:settings <- PEcAn.settings::read.settings(settings.file)
1553716355102:}
1553716356554:# Check for additional modules that will require adding settings
1553716356556:if("benchmarking" %in% names(settings)){
1553716356558:library(PEcAn.benchmark)
1553716356560:settings <- papply(settings, read_settings_BRR)
1553716356562:}
1553716357310:if("sitegroup" %in% names(settings)){
1553716357312:if(is.null(settings$sitegroup$nSite)){
1553716357314:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1553716357317:sitegroupId = settings$sitegroup$id)
1553716357319:} else {
1553716357320:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1553716357321:sitegroupId = settings$sitegroup$id,
1553716357322:nSite = settings$sitegroup$nSite)
1553716357323:}
1553716357324:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1553716357325:}
1553716358291:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1553716358293:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1553716360837:# Write pecan.CHECKED.xml
1553716360839:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1553716378764:# start from scratch if no continue is passed in
1553716378767:statusFile <- file.path(settings$outdir, "STATUS")
1553716380918:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1553716380920:file.remove(statusFile)
1553716380923:}
1553716382099:# Do conversions
1553716382101:settings <- PEcAn.workflow::do_conversions(settings)
1553716401328:settings
1553716435608:settings$host
1553716442373:settings$host$name
1553716460497:settings$host$name <- "postgres"
1553716462662:settings$host$name
1553716466176:settings
1553716496507:#!/usr/bin/env Rscript
1553716496508:#-------------------------------------------------------------------------------
1553716496509:# Copyright (c) 2012 University of Illinois, NCSA.
1553716496510:# All rights reserved. This program and the accompanying materials
1553716496511:# are made available under the terms of the
1553716496512:# University of Illinois/NCSA Open Source License
1553716496513:# which accompanies this distribution, and is available at
1553716496514:# http://opensource.ncsa.illinois.edu/license.html
1553716496515:#-------------------------------------------------------------------------------
1553716496517:# ----------------------------------------------------------------------
1553716496518:# Load required libraries
1553716496519:# ----------------------------------------------------------------------
1553716496520:library(PEcAn.all)
1553716501409:library(PEcAn.utils)
1553716501411:library(RCurl)
1553716501565:# make sure always to call status.end
1553716501566:options(warn=1)
1553716501568:options(error=quote({
1553716501569:PEcAn.utils::status.end("ERROR")
1553716501569:PEcAn.remote::kill.tunnel(settings)
1553716501570:if (!interactive()) {
1553716501571:q(status = 1)
1553716501572:}
1553716501573:}))
1553716501575:#options(warning.expression=status.end("ERROR"))
1553716501578:# ----------------------------------------------------------------------
1553716501579:# PEcAn Workflow
1553716501579:# ----------------------------------------------------------------------
1553716501580:# Open and read in settings file for PEcAn run.
1553716501581:args <- commandArgs(trailingOnly = TRUE)
1553716501582:if (is.na(args[1])){
1553716501583:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.kr.biocro.xml")
1553716501584:} else {
1553716501585:settings.file <- args[1]
1553716501586:settings <- PEcAn.settings::read.settings(settings.file)
1553716501587:}
1553716501607:# Check for additional modules that will require adding settings
1553716501608:if("benchmarking" %in% names(settings)){
1553716501609:library(PEcAn.benchmark)
1553716501610:settings <- papply(settings, read_settings_BRR)
1553716501611:}
1553716501613:if("sitegroup" %in% names(settings)){
1553716501614:if(is.null(settings$sitegroup$nSite)){
1553716501614:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1553716501615:sitegroupId = settings$sitegroup$id)
1553716501616:} else {
1553716501617:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1553716501618:sitegroupId = settings$sitegroup$id,
1553716501619:nSite = settings$sitegroup$nSite)
1553716501620:}
1553716501621:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1553716501622:}
1553716501624:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1553716501625:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1553716502259:# Write pecan.CHECKED.xml
1553716502260:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1553716502318:# start from scratch if no continue is passed in
1553716502319:statusFile <- file.path(settings$outdir, "STATUS")
1553716502320:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1553716502321:file.remove(statusFile)
1553716502322:}
1553716511834:settings$host$name
1553716514810:# Do conversions
1553716514813:settings$host$name <- "postgres"
1553716516734:settings$host$name
1553716519092:settings <- PEcAn.workflow::do_conversions(settings)
1553716543603:settings$host
1553716574218:#!/usr/bin/env Rscript
1553716574220:#-------------------------------------------------------------------------------
1553716574222:# Copyright (c) 2012 University of Illinois, NCSA.
1553716574224:# All rights reserved. This program and the accompanying materials
1553716574225:# are made available under the terms of the
1553716574226:# University of Illinois/NCSA Open Source License
1553716574227:# which accompanies this distribution, and is available at
1553716574228:# http://opensource.ncsa.illinois.edu/license.html
1553716574229:#-------------------------------------------------------------------------------
1553716574231:# ----------------------------------------------------------------------
1553716574232:# Load required libraries
1553716574233:# ----------------------------------------------------------------------
1553716574234:library(PEcAn.all)
1553716580107:library(PEcAn.utils)
1553716580109:library(RCurl)
1553716580327:# make sure always to call status.end
1553716580328:options(warn=1)
1553716580330:options(error=quote({
1553716580331:PEcAn.utils::status.end("ERROR")
1553716580333:PEcAn.remote::kill.tunnel(settings)
1553716580334:if (!interactive()) {
1553716580335:q(status = 1)
1553716580336:}
1553716580337:}))
1553716580340:#options(warning.expression=status.end("ERROR"))
1553716580343:# ----------------------------------------------------------------------
1553716580344:# PEcAn Workflow
1553716580345:# ----------------------------------------------------------------------
1553716580347:# Open and read in settings file for PEcAn run.
1553716580348:args <- commandArgs(trailingOnly = TRUE)
1553716580349:if (is.na(args[1])){
1553716580351:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.kr.biocro.xml")
1553716580352:} else {
1553716580353:settings.file <- args[1]
1553716580354:settings <- PEcAn.settings::read.settings(settings.file)
1553716580355:}
1553716580383:# Check for additional modules that will require adding settings
1553716580384:if("benchmarking" %in% names(settings)){
1553716580385:library(PEcAn.benchmark)
1553716580386:settings <- papply(settings, read_settings_BRR)
1553716580388:}
1553716580390:if("sitegroup" %in% names(settings)){
1553716580391:if(is.null(settings$sitegroup$nSite)){
1553716580392:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1553716580393:sitegroupId = settings$sitegroup$id)
1553716580394:} else {
1553716580395:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1553716580397:sitegroupId = settings$sitegroup$id,
1553716580398:nSite = settings$sitegroup$nSite)
1553716580399:}
1553716580400:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1553716580401:}
1553716580404:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1553716580405:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1553716581344:# Write pecan.CHECKED.xml
1553716581345:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1553716581423:# start from scratch if no continue is passed in
1553716581425:statusFile <- file.path(settings$outdir, "STATUS")
1553716581427:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1553716581428:file.remove(statusFile)
1553716581429:}
1553716608466:settings$host
1553716614429:settings$host$folder
1553716623852:# Do conversions
1553716623854:settings <- PEcAn.workflow::do_conversions(settings)
1553716877621:sessionInfo()
1553716934633:library(BioCro)
1553716937721:sessionInfo()
1553717132362:machine.host <- ifelse(host$name == "localhost", PEcAn.remote::fqdn(), host$name)
1553717213661:settings$host$name
1553717226236:machine.host <- ifelse(settings$host$name == "localhost", PEcAn.remote::fqdn(), settings$host$name)
1553717229304:machine.host
1553717331238:machine <- PEcAn.DB::db.query(paste0("SELECT * from machines where hostname = '",
1553717331240:machine.host, "'"), con)
1553791521326:# ----------------------------------------------------------------------
1553791521364:# Load required libraries
1553791521365:# ----------------------------------------------------------------------
1553791521366:library(PEcAn.all)
1553791526827:library(PEcAn.utils)
1553791526829:library(RCurl)
1553791528073:# make sure always to call status.end
1553791528076:options(warn=1)
1553791528766:options(error=quote({
1553791528768:PEcAn.utils::status.end("ERROR")
1553791528771:PEcAn.remote::kill.tunnel(settings)
1553791528773:if (!interactive()) {
1553791528775:q(status = 1)
1553791528777:}
1553791528779:}))
1553791529592:# ----------------------------------------------------------------------
1553791529594:# PEcAn Workflow
1553791529596:# ----------------------------------------------------------------------
1553791529598:# Open and read in settings file for PEcAn run.
1553791529600:args <- commandArgs(trailingOnly = TRUE)
1553791530294:if (is.na(args[1])){
1553791530296:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.kr.biocro.xml")
1553791530298:} else {
1553791530300:settings.file <- args[1]
1553791530302:settings <- PEcAn.settings::read.settings(settings.file)
1553791530303:}
1553791531007:# Check for additional modules that will require adding settings
1553791531009:if("benchmarking" %in% names(settings)){
1553791531011:library(PEcAn.benchmark)
1553791531013:settings <- papply(settings, read_settings_BRR)
1553791531015:}
1553791531663:if("sitegroup" %in% names(settings)){
1553791531665:if(is.null(settings$sitegroup$nSite)){
1553791531667:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1553791531669:sitegroupId = settings$sitegroup$id)
1553791531671:} else {
1553791531673:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1553791531674:sitegroupId = settings$sitegroup$id,
1553791531675:nSite = settings$sitegroup$nSite)
1553791531676:}
1553791531677:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1553791531678:}
1553791532371:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1553791532373:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1553791541607:# Write pecan.CHECKED.xml
1553791541609:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1553791542682:# start from scratch if no continue is passed in
1553791542684:statusFile <- file.path(settings$outdir, "STATUS")
1553791544174:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1553791544176:file.remove(statusFile)
1553791544178:}
1553791544994:# Do conversions
1553791544996:settings <- PEcAn.workflow::do_conversions(settings)
1553791608240:#!/usr/bin/env Rscript
1553791608241:#-------------------------------------------------------------------------------
1553791608242:# Copyright (c) 2012 University of Illinois, NCSA.
1553791608243:# All rights reserved. This program and the accompanying materials
1553791608244:# are made available under the terms of the
1553791608245:# University of Illinois/NCSA Open Source License
1553791608246:# which accompanies this distribution, and is available at
1553791608247:# http://opensource.ncsa.illinois.edu/license.html
1553791608248:#-------------------------------------------------------------------------------
1553791608250:# ----------------------------------------------------------------------
1553791608251:# Load required libraries
1553791608252:# ----------------------------------------------------------------------
1553791608253:library(PEcAn.all)
1553791613828:library(PEcAn.utils)
1553791613830:library(RCurl)
1553791614047:# make sure always to call status.end
1553791614048:options(warn=1)
1553791614050:options(error=quote({
1553791614051:PEcAn.utils::status.end("ERROR")
1553791614053:PEcAn.remote::kill.tunnel(settings)
1553791614054:if (!interactive()) {
1553791614055:q(status = 1)
1553791614056:}
1553791614057:}))
1553791614060:#options(warning.expression=status.end("ERROR"))
1553791614063:# ----------------------------------------------------------------------
1553791614064:# PEcAn Workflow
1553791614065:# ----------------------------------------------------------------------
1553791614066:# Open and read in settings file for PEcAn run.
1553791614067:args <- commandArgs(trailingOnly = TRUE)
1553791614069:if (is.na(args[1])){
1553791614070:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.kr.biocro.xml")
1553791614071:} else {
1553791614072:settings.file <- args[1]
1553791614073:settings <- PEcAn.settings::read.settings(settings.file)
1553791614075:}
1553791614101:# Check for additional modules that will require adding settings
1553791614102:if("benchmarking" %in% names(settings)){
1553791614103:library(PEcAn.benchmark)
1553791614104:settings <- papply(settings, read_settings_BRR)
1553791614105:}
1553791614108:if("sitegroup" %in% names(settings)){
1553791614109:if(is.null(settings$sitegroup$nSite)){
1553791614110:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1553791614111:sitegroupId = settings$sitegroup$id)
1553791614112:} else {
1553791614113:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1553791614114:sitegroupId = settings$sitegroup$id,
1553791614116:nSite = settings$sitegroup$nSite)
1553791614117:}
1553791614118:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1553791614119:}
1553791614122:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1553791614123:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1553791614889:# Write pecan.CHECKED.xml
1553791614890:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1553791614959:# start from scratch if no continue is passed in
1553791614960:statusFile <- file.path(settings$outdir, "STATUS")
1553791614962:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1553791614963:file.remove(statusFile)
1553791614964:}
1553791621070:# Do conversions
1553791621072:settings <- PEcAn.workflow::do_conversions(settings)
1553791976709:#!/usr/bin/env Rscript
1553791976710:#-------------------------------------------------------------------------------
1553791976711:# Copyright (c) 2012 University of Illinois, NCSA.
1553791976712:# All rights reserved. This program and the accompanying materials
1553791976713:# are made available under the terms of the
1553791976714:# University of Illinois/NCSA Open Source License
1553791976715:# which accompanies this distribution, and is available at
1553791976716:# http://opensource.ncsa.illinois.edu/license.html
1553791976718:#-------------------------------------------------------------------------------
1553791976720:# ----------------------------------------------------------------------
1553791976720:# Load required libraries
1553791976722:# ----------------------------------------------------------------------
1553791976722:library(PEcAn.all)
1553791982126:library(PEcAn.utils)
1553791982128:library(RCurl)
1553791982329:# make sure always to call status.end
1553791982330:options(warn=1)
1553791982332:options(error=quote({
1553791982333:PEcAn.utils::status.end("ERROR")
1553791982334:PEcAn.remote::kill.tunnel(settings)
1553791982336:if (!interactive()) {
1553791982337:q(status = 1)
1553791982338:}
1553791982340:}))
1553791982343:#options(warning.expression=status.end("ERROR"))
1553791982346:# ----------------------------------------------------------------------
1553791982347:# PEcAn Workflow
1553791982349:# ----------------------------------------------------------------------
1553791982350:# Open and read in settings file for PEcAn run.
1553791982351:args <- commandArgs(trailingOnly = TRUE)
1553791982353:if (is.na(args[1])){
1553791982354:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.kr.biocro.xml")
1553791982356:} else {
1553791982357:settings.file <- args[1]
1553791982358:settings <- PEcAn.settings::read.settings(settings.file)
1553791982359:}
1553791982385:# Check for additional modules that will require adding settings
1553791982386:if("benchmarking" %in% names(settings)){
1553791982387:library(PEcAn.benchmark)
1553791982389:settings <- papply(settings, read_settings_BRR)
1553791982390:}
1553791982393:if("sitegroup" %in% names(settings)){
1553791982394:if(is.null(settings$sitegroup$nSite)){
1553791982395:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1553791982397:sitegroupId = settings$sitegroup$id)
1553791982398:} else {
1553791982399:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1553791982400:sitegroupId = settings$sitegroup$id,
1553791982402:nSite = settings$sitegroup$nSite)
1553791982403:}
1553791982404:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1553791982405:}
1553791982408:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1553791982410:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1553791983030:# Write pecan.CHECKED.xml
1553791983031:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1553791983069:# start from scratch if no continue is passed in
1553791983070:statusFile <- file.path(settings$outdir, "STATUS")
1553791983072:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1553791983073:file.remove(statusFile)
1553791983074:}
1553791987460:# Do conversions
1553791987462:settings <- PEcAn.workflow::do_conversions(settings)
1553792244988:#!/usr/bin/env Rscript
1553792244990:#-------------------------------------------------------------------------------
1553792244993:# Copyright (c) 2012 University of Illinois, NCSA.
1553792244994:# All rights reserved. This program and the accompanying materials
1553792244996:# are made available under the terms of the
1553792244998:# University of Illinois/NCSA Open Source License
1553792245000:# which accompanies this distribution, and is available at
1553792245002:# http://opensource.ncsa.illinois.edu/license.html
1553792245003:#-------------------------------------------------------------------------------
1553792245005:# ----------------------------------------------------------------------
1553792245006:# Load required libraries
1553792245007:# ----------------------------------------------------------------------
1553792245008:library(PEcAn.all)
1553792250365:library(PEcAn.utils)
1553792250366:library(RCurl)
1553792250522:# make sure always to call status.end
1553792250523:options(warn=1)
1553792250524:options(error=quote({
1553792250525:PEcAn.utils::status.end("ERROR")
1553792250526:PEcAn.remote::kill.tunnel(settings)
1553792250526:if (!interactive()) {
1553792250527:q(status = 1)
1553792250528:}
1553792250529:}))
1553792250531:#options(warning.expression=status.end("ERROR"))
1553792250533:# ----------------------------------------------------------------------
1553792250534:# PEcAn Workflow
1553792250535:# ----------------------------------------------------------------------
1553792250536:# Open and read in settings file for PEcAn run.
1553792250537:args <- commandArgs(trailingOnly = TRUE)
1553792250538:if (is.na(args[1])){
1553792250539:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.kr.biocro.xml")
1553792250540:} else {
1553792250541:settings.file <- args[1]
1553792250541:settings <- PEcAn.settings::read.settings(settings.file)
1553792250542:}
1553792250562:# Check for additional modules that will require adding settings
1553792250562:if("benchmarking" %in% names(settings)){
1553792250563:library(PEcAn.benchmark)
1553792250564:settings <- papply(settings, read_settings_BRR)
1553792250565:}
1553792250567:if("sitegroup" %in% names(settings)){
1553792250568:if(is.null(settings$sitegroup$nSite)){
1553792250569:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1553792250570:sitegroupId = settings$sitegroup$id)
1553792250571:} else {
1553792250571:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1553792250572:sitegroupId = settings$sitegroup$id,
1553792250573:nSite = settings$sitegroup$nSite)
1553792250574:}
1553792250575:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1553792250576:}
1553792250578:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1553792250579:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1553792251186:# Write pecan.CHECKED.xml
1553792251187:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1553792251237:# start from scratch if no continue is passed in
1553792251238:statusFile <- file.path(settings$outdir, "STATUS")
1553792251240:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1553792251240:file.remove(statusFile)
1553792251241:}
1553792251244:# Do conversions
1553792251245:settings <- PEcAn.workflow::do_conversions(settings)
1553792264053:# Query the trait database for data and priors
1553792264055:if (PEcAn.utils::status.check("TRAIT") == 0){
1553792264056:PEcAn.utils::status.start("TRAIT")
1553792264057:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1553792264058:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1553792264060:PEcAn.utils::status.end()
1553792264061:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1553792264063:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1553792264064:}
1553792265235:# Run the PEcAn meta.analysis
1553792265237:if(!is.null(settings$meta.analysis)) {
1553792265239:if (PEcAn.utils::status.check("META") == 0){
1553792265242:PEcAn.utils::status.start("META")
1553792265244:PEcAn.MA::runModule.run.meta.analysis(settings)
1553792265246:PEcAn.utils::status.end()
1553792265247:}
1553792265249:}
1553792268076:# Write model specific configs
1553792268079:if (PEcAn.utils::status.check("CONFIG") == 0){
1553792268081:PEcAn.utils::status.start("CONFIG")
1553792268083:settings <- PEcAn.workflow::runModule.run.write.configs(settings)
1553792268085:PEcAn.settings::write.settings(settings, outputfile='pecan.CONFIGS.xml')
1553792268086:PEcAn.utils::status.end()
1553792268087:} else if (file.exists(file.path(settings$outdir, 'pecan.CONFIGS.xml'))) {
1553792268089:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.CONFIGS.xml'))
1553792268090:}
1553792332736:PEcAn.remote::fqdn()
1553798199557:# ----------------------------------------------------------------------
1553798199558:# Load required libraries
1553798199559:# ----------------------------------------------------------------------
1553798199560:library(PEcAn.all)
1553798204792:library(PEcAn.utils)
1553798204794:library(RCurl)
1553798216633:# make sure always to call status.end
1553798216635:options(warn=1)
1553798217405:options(error=quote({
1553798217407:PEcAn.utils::status.end("ERROR")
1553798217409:PEcAn.remote::kill.tunnel(settings)
1553798217411:if (!interactive()) {
1553798217413:q(status = 1)
1553798217415:}
1553798217417:}))
1553798218970:# ----------------------------------------------------------------------
1553798218972:# PEcAn Workflow
1553798218974:# ----------------------------------------------------------------------
1553798218982:# Open and read in settings file for PEcAn run.
1553798218984:args <- commandArgs(trailingOnly = TRUE)
1553798221039:if (is.na(args[1])){
1553798221041:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.kr.biocro.xml")
1553798221043:} else {
1553798221045:settings.file <- args[1]
1553798221047:settings <- PEcAn.settings::read.settings(settings.file)
1553798221048:}
1553798222840:# Check for additional modules that will require adding settings
1553798222842:if("benchmarking" %in% names(settings)){
1553798222844:library(PEcAn.benchmark)
1553798222846:settings <- papply(settings, read_settings_BRR)
1553798222848:}
1553798223520:if("sitegroup" %in% names(settings)){
1553798223534:if(is.null(settings$sitegroup$nSite)){
1553798223535:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1553798223537:sitegroupId = settings$sitegroup$id)
1553798223539:} else {
1553798223541:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1553798223542:sitegroupId = settings$sitegroup$id,
1553798223543:nSite = settings$sitegroup$nSite)
1553798223545:}
1553798223546:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1553798223548:}
1553798224830:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1553798224832:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1553798546355:# ----------------------------------------------------------------------
1553798546356:# Load required libraries
1553798546358:# ----------------------------------------------------------------------
1553798546359:library(PEcAn.all)
1553798550615:library(PEcAn.utils)
1553798550617:library(RCurl)
1553798550773:# make sure always to call status.end
1553798550774:options(warn=1)
1553798550775:options(error=quote({
1553798550776:PEcAn.utils::status.end("ERROR")
1553798550778:PEcAn.remote::kill.tunnel(settings)
1553798550779:if (!interactive()) {
1553798550779:q(status = 1)
1553798550780:}
1553798550782:}))
1553798550783:# ----------------------------------------------------------------------
1553798550784:# PEcAn Workflow
1553798550785:# ----------------------------------------------------------------------
1553798550786:# Open and read in settings file for PEcAn run.
1553798550787:args <- commandArgs(trailingOnly = TRUE)
1553798550788:if (is.na(args[1])){
1553798550790:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.kr.biocro.xml")
1553798550791:} else {
1553798550792:settings.file <- args[1]
1553798550793:settings <- PEcAn.settings::read.settings(settings.file)
1553798550794:}
1553798550814:# Check for additional modules that will require adding settings
1553798550815:if("benchmarking" %in% names(settings)){
1553798550816:library(PEcAn.benchmark)
1553798550817:settings <- papply(settings, read_settings_BRR)
1553798550818:}
1553798550819:if("sitegroup" %in% names(settings)){
1553798550820:if(is.null(settings$sitegroup$nSite)){
1553798550821:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1553798550823:sitegroupId = settings$sitegroup$id)
1553798550824:} else {
1553798550825:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1553798550826:sitegroupId = settings$sitegroup$id,
1553798550827:nSite = settings$sitegroup$nSite)
1553798550828:}
1553798550829:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1553798550830:}
1553798551675:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1553798551677:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1553798555291:# Write pecan.CHECKED.xml
1553798555293:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1553798557234:# start from scratch if no continue is passed in
1553798557236:statusFile <- file.path(settings$outdir, "STATUS")
1553798558119:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1553798558121:file.remove(statusFile)
1553798558123:}
1553798559020:# Do conversions
1553798559022:settings <- PEcAn.workflow::do_conversions(settings)
1553798709960:# ----------------------------------------------------------------------
1553798709961:# Load required libraries
1553798709962:# ----------------------------------------------------------------------
1553798709963:library(PEcAn.all)
1553798714100:library(PEcAn.utils)
1553798714102:library(RCurl)
1553798714257:# make sure always to call status.end
1553798714258:options(warn=1)
1553798714259:options(error=quote({
1553798714261:PEcAn.utils::status.end("ERROR")
1553798714262:PEcAn.remote::kill.tunnel(settings)
1553798714263:if (!interactive()) {
1553798714264:q(status = 1)
1553798714265:}
1553798714266:}))
1553798714267:# ----------------------------------------------------------------------
1553798714268:# PEcAn Workflow
1553798714269:# ----------------------------------------------------------------------
1553798714270:# Open and read in settings file for PEcAn run.
1553798714271:args <- commandArgs(trailingOnly = TRUE)
1553798714273:if (is.na(args[1])){
1553798714274:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.kr.biocro.xml")
1553798714275:} else {
1553798714276:settings.file <- args[1]
1553798714277:settings <- PEcAn.settings::read.settings(settings.file)
1553798714278:}
1553798714298:# Check for additional modules that will require adding settings
1553798714299:if("benchmarking" %in% names(settings)){
1553798714300:library(PEcAn.benchmark)
1553798714301:settings <- papply(settings, read_settings_BRR)
1553798714302:}
1553798714303:if("sitegroup" %in% names(settings)){
1553798714304:if(is.null(settings$sitegroup$nSite)){
1553798714305:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1553798714306:sitegroupId = settings$sitegroup$id)
1553798714307:} else {
1553798714308:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1553798714309:sitegroupId = settings$sitegroup$id,
1553798714310:nSite = settings$sitegroup$nSite)
1553798714311:}
1553798714312:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1553798714313:}
1553798715262:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1553798715263:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1553798718294:# Write pecan.CHECKED.xml
1553798718296:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1553798719170:# start from scratch if no continue is passed in
1553798719173:statusFile <- file.path(settings$outdir, "STATUS")
1553798719972:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1553798719974:file.remove(statusFile)
1553798719976:}
1553798721091:# Do conversions
1553798721093:settings <- PEcAn.workflow::do_conversions(settings)
1553804766101:?fqdn
1553804776311:PEcAn.remote::fqdn()
1553804850964:# ----------------------------------------------------------------------
1553804850966:# Load required libraries
1553804850967:# ----------------------------------------------------------------------
1553804850968:library(PEcAn.all)
1553804856678:library(PEcAn.utils)
1553804856680:library(RCurl)
1553804856880:# make sure always to call status.end
1553804856881:options(warn=1)
1553804856883:options(error=quote({
1553804856885:PEcAn.utils::status.end("ERROR")
1553804856886:PEcAn.remote::kill.tunnel(settings)
1553804856887:if (!interactive()) {
1553804856889:q(status = 1)
1553804856890:}
1553804856891:}))
1553804858214:# ----------------------------------------------------------------------
1553804858216:# PEcAn Workflow
1553804858218:# ----------------------------------------------------------------------
1553804858220:# Open and read in settings file for PEcAn run.
1553804858222:args <- commandArgs(trailingOnly = TRUE)
1553804858940:if (is.na(args[1])){
1553804858942:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.kr.biocro.xml")
1553804858943:} else {
1553804858945:settings.file <- args[1]
1553804858947:settings <- PEcAn.settings::read.settings(settings.file)
1553804858948:}
1553804860165:# Check for additional modules that will require adding settings
1553804860167:if("benchmarking" %in% names(settings)){
1553804860169:library(PEcAn.benchmark)
1553804860171:settings <- papply(settings, read_settings_BRR)
1553804860173:}
1553804860593:if("sitegroup" %in% names(settings)){
1553804860596:if(is.null(settings$sitegroup$nSite)){
1553804860598:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1553804860600:sitegroupId = settings$sitegroup$id)
1553804860602:} else {
1553804860603:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1553804860605:sitegroupId = settings$sitegroup$id,
1553804860606:nSite = settings$sitegroup$nSite)
1553804860608:}
1553804860609:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1553804860611:}
1553804861964:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1553804861966:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1553804872630:# Write pecan.CHECKED.xml
1553804872633:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1553804873969:# start from scratch if no continue is passed in
1553804873971:statusFile <- file.path(settings$outdir, "STATUS")
1553804875119:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1553804875121:file.remove(statusFile)
1553804875123:}
1553804876745:# Do conversions
1553804876747:settings <- PEcAn.workflow::do_conversions(settings)
1553804894544:settings
1553804905012:settings$host
1553804909041:settings$host$name
1553804952231:settings$host$name <- "e8355ca5d558"
1553804953622:settings$host$name
1553804970955:#!/usr/bin/env Rscript
1553804970957:#-------------------------------------------------------------------------------
1553804970959:# Copyright (c) 2012 University of Illinois, NCSA.
1553804970961:# All rights reserved. This program and the accompanying materials
1553804970963:# are made available under the terms of the
1553804970964:# University of Illinois/NCSA Open Source License
1553804970966:# which accompanies this distribution, and is available at
1553804970968:# http://opensource.ncsa.illinois.edu/license.html
1553804970969:#-------------------------------------------------------------------------------
1553804970971:# ----------------------------------------------------------------------
1553804970972:# Load required libraries
1553804970973:# ----------------------------------------------------------------------
1553804970974:library(PEcAn.all)
1553804976666:library(PEcAn.utils)
1553804976668:library(RCurl)
1553804976888:# make sure always to call status.end
1553804976889:options(warn=1)
1553804976891:options(error=quote({
1553804976892:PEcAn.utils::status.end("ERROR")
1553804976894:PEcAn.remote::kill.tunnel(settings)
1553804976895:if (!interactive()) {
1553804976896:q(status = 1)
1553804976897:}
1553804976899:}))
1553804976902:#options(warning.expression=status.end("ERROR"))
1553804976905:# ----------------------------------------------------------------------
1553804976906:# PEcAn Workflow
1553804976907:# ----------------------------------------------------------------------
1553804976909:# Open and read in settings file for PEcAn run.
1553804976910:args <- commandArgs(trailingOnly = TRUE)
1553804976912:if (is.na(args[1])){
1553804976913:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.kr.biocro.xml")
1553804976914:} else {
1553804976916:settings.file <- args[1]
1553804976917:settings <- PEcAn.settings::read.settings(settings.file)
1553804976918:}
1553804976946:# Check for additional modules that will require adding settings
1553804976947:if("benchmarking" %in% names(settings)){
1553804976949:library(PEcAn.benchmark)
1553804976950:settings <- papply(settings, read_settings_BRR)
1553804976951:}
1553804976954:if("sitegroup" %in% names(settings)){
1553804976955:if(is.null(settings$sitegroup$nSite)){
1553804976956:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1553804976957:sitegroupId = settings$sitegroup$id)
1553804976958:} else {
1553804976960:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1553804976961:sitegroupId = settings$sitegroup$id,
1553804976962:nSite = settings$sitegroup$nSite)
1553804976963:}
1553804976965:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1553804976966:}
1553804976969:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1553804976970:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1553804977768:# Write pecan.CHECKED.xml
1553804977769:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1553804977839:# start from scratch if no continue is passed in
1553804977840:statusFile <- file.path(settings$outdir, "STATUS")
1553804977842:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1553804977843:file.remove(statusFile)
1553804977844:}
1553805000375:# Do conversions
1553805000378:settings$host$name <- "e8355ca5d558"
1553805002211:settings <- PEcAn.workflow::do_conversions(settings)
1553805133476:# Query the trait database for data and priors
1553805133478:if (PEcAn.utils::status.check("TRAIT") == 0){
1553805133480:PEcAn.utils::status.start("TRAIT")
1553805133482:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1553805133484:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1553805133486:PEcAn.utils::status.end()
1553805133487:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1553805133489:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1553805133490:}
1553805134416:# Run the PEcAn meta.analysis
1553805134418:if(!is.null(settings$meta.analysis)) {
1553805134420:if (PEcAn.utils::status.check("META") == 0){
1553805134422:PEcAn.utils::status.start("META")
1553805134424:PEcAn.MA::runModule.run.meta.analysis(settings)
1553805134426:PEcAn.utils::status.end()
1553805134427:}
1553805134429:}
1553808187213:#!/usr/bin/env Rscript
1553808187214:#-------------------------------------------------------------------------------
1553808187215:# Copyright (c) 2012 University of Illinois, NCSA.
1553808187217:# All rights reserved. This program and the accompanying materials
1553808187218:# are made available under the terms of the
1553808187219:# University of Illinois/NCSA Open Source License
1553808187221:# which accompanies this distribution, and is available at
1553808187222:# http://opensource.ncsa.illinois.edu/license.html
1553808187224:#-------------------------------------------------------------------------------
1553808187227:# ----------------------------------------------------------------------
1553808187228:# Load required libraries
1553808187229:# ----------------------------------------------------------------------
1553808187231:library(PEcAn.all)
1553808192743:library(PEcAn.utils)
1553808192744:library(RCurl)
1553808192962:# make sure always to call status.end
1553808192963:options(warn=1)
1553808192964:options(error=quote({
1553808192965:PEcAn.utils::status.end("ERROR")
1553808192966:PEcAn.remote::kill.tunnel(settings)
1553808192967:if (!interactive()) {
1553808192968:q(status = 1)
1553808192969:}
1553808192970:}))
1553808192972:#options(warning.expression=status.end("ERROR"))
1553808192975:# ----------------------------------------------------------------------
1553808192976:# PEcAn Workflow
1553808192977:# ----------------------------------------------------------------------
1553808192978:# Open and read in settings file for PEcAn run.
1553808192979:args <- commandArgs(trailingOnly = TRUE)
1553808192980:if (is.na(args[1])){
1553808192981:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.kr.biocro.xml")
1553808192982:} else {
1553808192983:settings.file <- args[1]
1553808192984:settings <- PEcAn.settings::read.settings(settings.file)
1553808192985:}
1553808193011:# Check for additional modules that will require adding settings
1553808193012:if("benchmarking" %in% names(settings)){
1553808193013:library(PEcAn.benchmark)
1553808193014:settings <- papply(settings, read_settings_BRR)
1553808193015:}
1553808193017:if("sitegroup" %in% names(settings)){
1553808193018:if(is.null(settings$sitegroup$nSite)){
1553808193019:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1553808193020:sitegroupId = settings$sitegroup$id)
1553808193021:} else {
1553808193022:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1553808193023:sitegroupId = settings$sitegroup$id,
1553808193024:nSite = settings$sitegroup$nSite)
1553808193025:}
1553808193026:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1553808193027:}
1553808194726:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1553808194728:settings$host$name <- "e8355ca5d558"
1553808195474:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1553808199134:# Write pecan.CHECKED.xml
1553808199137:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1553808200755:# start from scratch if no continue is passed in
1553808200757:statusFile <- file.path(settings$outdir, "STATUS")
1553808201430:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1553808201432:file.remove(statusFile)
1553808201434:}
1553808203046:# Do conversions
1553808203048:settings <- PEcAn.workflow::do_conversions(settings)
1553808240367:#!/usr/bin/env Rscript
1553808240368:#-------------------------------------------------------------------------------
1553808240370:# Copyright (c) 2012 University of Illinois, NCSA.
1553808240371:# All rights reserved. This program and the accompanying materials
1553808240372:# are made available under the terms of the
1553808240374:# University of Illinois/NCSA Open Source License
1553808240375:# which accompanies this distribution, and is available at
1553808240377:# http://opensource.ncsa.illinois.edu/license.html
1553808240378:#-------------------------------------------------------------------------------
1553808240380:# ----------------------------------------------------------------------
1553808240382:# Load required libraries
1553808240383:# ----------------------------------------------------------------------
1553808240384:library(PEcAn.all)
1553808244678:library(PEcAn.utils)
1553808244679:library(RCurl)
1553808244851:# make sure always to call status.end
1553808244852:options(warn=1)
1553808244853:options(error=quote({
1553808244854:PEcAn.utils::status.end("ERROR")
1553808244854:PEcAn.remote::kill.tunnel(settings)
1553808244855:if (!interactive()) {
1553808244856:q(status = 1)
1553808244857:}
1553808244858:}))
1553808244859:#options(warning.expression=status.end("ERROR"))
1553808244862:# ----------------------------------------------------------------------
1553808244862:# PEcAn Workflow
1553808244863:# ----------------------------------------------------------------------
1553808244864:# Open and read in settings file for PEcAn run.
1553808244865:args <- commandArgs(trailingOnly = TRUE)
1553808244866:if (is.na(args[1])){
1553808244867:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.kr.biocro.xml")
1553808244868:} else {
1553808244868:settings.file <- args[1]
1553808244869:settings <- PEcAn.settings::read.settings(settings.file)
1553808244870:}
1553808244889:# Check for additional modules that will require adding settings
1553808244890:if("benchmarking" %in% names(settings)){
1553808244891:library(PEcAn.benchmark)
1553808244892:settings <- papply(settings, read_settings_BRR)
1553808244893:}
1553808244895:if("sitegroup" %in% names(settings)){
1553808244896:if(is.null(settings$sitegroup$nSite)){
1553808244896:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1553808244897:sitegroupId = settings$sitegroup$id)
1553808244898:} else {
1553808244899:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1553808244899:sitegroupId = settings$sitegroup$id,
1553808244900:nSite = settings$sitegroup$nSite)
1553808244901:}
1553808244902:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1553808244903:}
1553808255890:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1553808255892:settings$host$name <- fqdn()
1553808256596:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1553808259331:# Write pecan.CHECKED.xml
1553808259333:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1553808260633:# start from scratch if no continue is passed in
1553808260636:statusFile <- file.path(settings$outdir, "STATUS")
1553808261419:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1553808261421:file.remove(statusFile)
1553808261423:}
1553808262240:# Do conversions
1553808262242:settings <- PEcAn.workflow::do_conversions(settings)
1554136506816:# ----------------------------------------------------------------------
1554136506818:# Load required libraries
1554136506820:# ----------------------------------------------------------------------
1554136506822:library(PEcAn.all)
1554136511958:library(PEcAn.utils)
1554136511960:library(RCurl)
1554136512131:# make sure always to call status.end
1554136512133:options(warn=1)
1554136512134:options(error=quote({
1554136512135:PEcAn.utils::status.end("ERROR")
1554136512136:PEcAn.remote::kill.tunnel(settings)
1554136512137:if (!interactive()) {
1554136512138:q(status = 1)
1554136512139:}
1554136512140:}))
1554136512917:# ----------------------------------------------------------------------
1554136512919:# PEcAn Workflow
1554136512920:# ----------------------------------------------------------------------
1554136512922:# Open and read in settings file for PEcAn run.
1554136512925:args <- commandArgs(trailingOnly = TRUE)
1554136513554:if (is.na(args[1])){
1554136513556:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.kr.biocro.xml")
1554136513558:} else {
1554136513560:settings.file <- args[1]
1554136513562:settings <- PEcAn.settings::read.settings(settings.file)
1554136513564:}
1554136514892:# Check for additional modules that will require adding settings
1554136514894:if("benchmarking" %in% names(settings)){
1554136514896:library(PEcAn.benchmark)
1554136514898:settings <- papply(settings, read_settings_BRR)
1554136514901:}
1554136515478:if("sitegroup" %in% names(settings)){
1554136515480:if(is.null(settings$sitegroup$nSite)){
1554136515482:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1554136515484:sitegroupId = settings$sitegroup$id)
1554136515486:} else {
1554136515488:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1554136515489:sitegroupId = settings$sitegroup$id,
1554136515490:nSite = settings$sitegroup$nSite)
1554136515492:}
1554136515493:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1554136515494:}
1554136516947:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1554136516948:settings$host$name <- fqdn()
1554136529693:#!/usr/bin/env Rscript
1554136529694:#-------------------------------------------------------------------------------
1554136529695:# Copyright (c) 2012 University of Illinois, NCSA.
1554136529696:# All rights reserved. This program and the accompanying materials
1554136529697:# are made available under the terms of the
1554136529698:# University of Illinois/NCSA Open Source License
1554136529699:# which accompanies this distribution, and is available at
1554136529700:# http://opensource.ncsa.illinois.edu/license.html
1554136529701:#-------------------------------------------------------------------------------
1554136529703:# ----------------------------------------------------------------------
1554136529704:# Load required libraries
1554136529705:# ----------------------------------------------------------------------
1554136529706:library(PEcAn.all)
1554136534084:library(PEcAn.utils)
1554136534086:library(RCurl)
1554136534246:# make sure always to call status.end
1554136534247:options(warn=1)
1554136534249:options(error=quote({
1554136534250:PEcAn.utils::status.end("ERROR")
1554136534251:PEcAn.remote::kill.tunnel(settings)
1554136534252:if (!interactive()) {
1554136534253:q(status = 1)
1554136534254:}
1554136534255:}))
1554136534257:#options(warning.expression=status.end("ERROR"))
1554136534260:# ----------------------------------------------------------------------
1554136534261:# PEcAn Workflow
1554136534262:# ----------------------------------------------------------------------
1554136534263:# Open and read in settings file for PEcAn run.
1554136534264:args <- commandArgs(trailingOnly = TRUE)
1554136534265:if (is.na(args[1])){
1554136534266:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.kr.biocro.xml")
1554136534267:} else {
1554136534268:settings.file <- args[1]
1554136534269:settings <- PEcAn.settings::read.settings(settings.file)
1554136534270:}
1554136534290:# Check for additional modules that will require adding settings
1554136534292:if("benchmarking" %in% names(settings)){
1554136534293:library(PEcAn.benchmark)
1554136534294:settings <- papply(settings, read_settings_BRR)
1554136534295:}
1554136534297:if("sitegroup" %in% names(settings)){
1554136534298:if(is.null(settings$sitegroup$nSite)){
1554136534299:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1554136534300:sitegroupId = settings$sitegroup$id)
1554136534301:} else {
1554136534302:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1554136534303:sitegroupId = settings$sitegroup$id,
1554136534304:nSite = settings$sitegroup$nSite)
1554136534305:}
1554136534306:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1554136534307:}
1554136568144:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1554136568146:#settings$host$name <- fqdn()
1554136568148:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1554136834004:# Write pecan.CHECKED.xml
1554136834006:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1554136834999:# start from scratch if no continue is passed in
1554136835001:statusFile <- file.path(settings$outdir, "STATUS")
1554136835524:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1554136835526:file.remove(statusFile)
1554136835528:}
1554136836542:# Do conversions
1554136836544:settings <- PEcAn.workflow::do_conversions(settings)
1554142434067:# ----------------------------------------------------------------------
1554142434069:# Load required libraries
1554142434071:# ----------------------------------------------------------------------
1554142434073:library(PEcAn.all)
1554142439367:library(PEcAn.utils)
1554142439368:library(RCurl)
1554142457936:# make sure always to call status.end
1554142457938:options(warn=1)
1554142458104:options(error=quote({
1554142458107:PEcAn.utils::status.end("ERROR")
1554142458109:PEcAn.remote::kill.tunnel(settings)
1554142458111:if (!interactive()) {
1554142458113:q(status = 1)
1554142458115:}
1554142458117:}))
1554142460807:# ----------------------------------------------------------------------
1554142460809:# PEcAn Workflow
1554142460811:# ----------------------------------------------------------------------
1554142460812:# Open and read in settings file for PEcAn run.
1554142460814:args <- commandArgs(trailingOnly = TRUE)
1554142461865:if (is.na(args[1])){
1554142461868:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.kr.biocro.xml")
1554142461870:} else {
1554142461872:settings.file <- args[1]
1554142461873:settings <- PEcAn.settings::read.settings(settings.file)
1554142461874:}
1554142462959:# Check for additional modules that will require adding settings
1554142462961:if("benchmarking" %in% names(settings)){
1554142462963:library(PEcAn.benchmark)
1554142462965:settings <- papply(settings, read_settings_BRR)
1554142462967:}
1554142463882:if("sitegroup" %in% names(settings)){
1554142463884:if(is.null(settings$sitegroup$nSite)){
1554142463886:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1554142463887:sitegroupId = settings$sitegroup$id)
1554142463889:} else {
1554142463891:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1554142463893:sitegroupId = settings$sitegroup$id,
1554142463894:nSite = settings$sitegroup$nSite)
1554142463896:}
1554142463898:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1554142463900:}
1554142464721:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1554142464723:#settings$host$name <- fqdn()
1554142464725:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1554142498387:# Write pecan.CHECKED.xml
1554142498389:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1554142500655:# start from scratch if no continue is passed in
1554142500657:statusFile <- file.path(settings$outdir, "STATUS")
1554142501343:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1554142501345:file.remove(statusFile)
1554142501347:}
1554142502558:# Do conversions
1554142502560:settings <- PEcAn.workflow::do_conversions(settings)
1554142914087:# ----------------------------------------------------------------------
1554142914089:# Load required libraries
1554142914091:# ----------------------------------------------------------------------
1554142914092:library(PEcAn.all)
1554142919729:library(PEcAn.utils)
1554142919731:library(RCurl)
1554142920970:# make sure always to call status.end
1554142920972:options(warn=1)
1554142921264:options(error=quote({
1554142921265:PEcAn.utils::status.end("ERROR")
1554142921266:PEcAn.remote::kill.tunnel(settings)
1554142921267:if (!interactive()) {
1554142921268:q(status = 1)
1554142921269:}
1554142921270:}))
1554142922395:# ----------------------------------------------------------------------
1554142922398:# PEcAn Workflow
1554142922400:# ----------------------------------------------------------------------
1554142922403:# Open and read in settings file for PEcAn run.
1554142922405:args <- commandArgs(trailingOnly = TRUE)
1554142923464:if (is.na(args[1])){
1554142923466:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.kr.biocro.xml")
1554142923468:} else {
1554142923471:settings.file <- args[1]
1554142923473:settings <- PEcAn.settings::read.settings(settings.file)
1554142923475:}
1554142924315:# Check for additional modules that will require adding settings
1554142924317:if("benchmarking" %in% names(settings)){
1554142924319:library(PEcAn.benchmark)
1554142924321:settings <- papply(settings, read_settings_BRR)
1554142924323:}
1554142924858:if("sitegroup" %in% names(settings)){
1554142924860:if(is.null(settings$sitegroup$nSite)){
1554142924862:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1554142924865:sitegroupId = settings$sitegroup$id)
1554142924867:} else {
1554142924869:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1554142924871:sitegroupId = settings$sitegroup$id,
1554142924873:nSite = settings$sitegroup$nSite)
1554142924874:}
1554142924876:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1554142924877:}
1554142926041:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1554142926043:#settings$host$name <- fqdn()
1554142926045:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1554142931235:# Write pecan.CHECKED.xml
1554142931238:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1554142932566:# start from scratch if no continue is passed in
1554142932569:statusFile <- file.path(settings$outdir, "STATUS")
1554142933101:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1554142933103:file.remove(statusFile)
1554142933104:}
1554142933975:# Do conversions
1554142933977:settings <- PEcAn.workflow::do_conversions(settings)
1554151158769:library(dplyr)
1554151159267:# Open and read in settings file for PEcAn run.
1554151159269:args <- commandArgs(trailingOnly = TRUE)
1554151159862:if (is.na(args[1])){
1554151159864:settings <- PEcAn.settings::read.settings("pecan/tests/pecan64.sipnet.xml")
1554151159866:} else {
1554151159868:settings.file = args[1]
1554151159870:settings <- PEcAn.settings::read.settings(settings.file)
1554151159872:}
1554151160391:# Open up a connection to BETY
1554151160393:bety <-dplyr::src_postgres(host = settings$database$bety$host,
1554151160395:user = settings$database$bety$user,
1554151160397:password = settings$database$bety$password,
1554151160398:dbname = settings$database$bety$dbname)
1554151161549:# Pull down new parameters distribution from BETY
1554151161551:new_pfts <- tbl(bety, 'pfts') %>%
1554151161553:filter(modeltype_id == 99000000001) %>%
1554151161555:data.frame()
1554151162337:new_priors <- tbl(bety, 'priors') %>%
1554151162339:filter(id >= 99000000001 & id <= 99000000016) %>%
1554151162341:data.frame()
1554151167231:View(new_pfts)
1554151185585:settings$database$bety$host
1554151193886:settings$database$bety$host <- 'localhost'
1554151196307:# Open up a connection to BETY
1554151196309:bety <-dplyr::src_postgres(host = settings$database$bety$host,
1554151196311:user = settings$database$bety$user,
1554151196313:password = settings$database$bety$password,
1554151196315:dbname = settings$database$bety$dbname)
1554151227787:settings$database$bety$host <- 'postgres'
1554151229463:# Open up a connection to BETY
1554151229465:bety <-dplyr::src_postgres(host = settings$database$bety$host,
1554151229467:user = settings$database$bety$user,
1554151229469:password = settings$database$bety$password,
1554151229471:dbname = settings$database$bety$dbname)
1554151240425:tbl(bety, 'pfts')
1554151267891:tbl(bety, 'pfts') %>% range(id)
1554151277867:tbl(bety, 'pfts') %>% collect() %>% range(id)
1554151288603:x <- tbl(bety, 'pfts') %>% collect
1554151289857:x
1554151292099:x$id
1554151295572:range(x$id)
1554151310136:range(x$modeltype_id)
1554151327217:x$modeltype_id == 99000000001
1554151337275:sum(x$modeltype_id == 99000000001)
1554151908496:# Pull down new parameters distribution from BETY
1554151908499:tbl(bety, 'modeltypes' %>% filter(name == 'BIOCRO')
1554151915329:)
1554151920764:# Pull down new parameters distribution from BETY
1554151920766:tbl(bety, 'modeltypes') %>% filter(name == 'BIOCRO')
1554151930145:new_pfts <- tbl(bety, 'pfts') %>%
1554151930147:filter(modeltype_id == 2) %>%
1554151930149:data.frame()
1554151962821:# Pull down new parameters distribution from BETY
1554151962823:biocros <- tbl(bety, 'modeltypes') %>% filter(name == 'BIOCRO')
1554151972545:new_pfts <- tbl(bety, 'pfts') %>%
1554151972547:filter(modeltype_id %in% biocros$id) %>%
1554151972549:data.frame()
1554151974985:# Pull down new parameters distribution from BETY
1554151974987:biocros <- tbl(bety, 'modeltypes') %>% filter(name == 'BIOCRO')
1554151975663:new_pfts <- tbl(bety, 'pfts') %>%
1554151975666:filter(modeltype_id %in% biocros$id) %>%
1554151975668:data.frame()
1554151986939:new_pfts <- tbl(bety, 'pfts') %>%
1554151986942:filter(modeltype_id == biocros$id[1]) %>%
1554151986944:data.frame()
1554151993774:biocros$id[1]
1554151997609:biocros$id
1554151999343:# Pull down new parameters distribution from BETY
1554151999345:biocros <- tbl(bety, 'modeltypes') %>% filter(name == 'BIOCRO')
1554152003911:View(biocros)
1554152014848:# Pull down new parameters distribution from BETY
1554152014850:biocros <- tbl(bety, 'modeltypes') %>% filter(name == 'BIOCRO') %>% collect
1554152016524:View(biocros)
1554152028235:new_pfts <- tbl(bety, 'pfts') %>%
1554152028237:filter(modeltype_id %in% biocros$id) %>%
1554152028239:data.frame()
1554152087045:# Pull down new parameters distribution from BETY
1554152087047:pfts <- tbl(bety, 'pfts')
1554152114079:# Pull down new parameters distribution from BETY
1554152114082:pfts <- tbl(bety, 'pfts') %>% transmute(pft_id = id)
1554152121198:View(pfts)
1554152243619:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.kr.biocro.xml")
1554152281188:# ----------------------------------------------------------------------
1554152281190:# Load required libraries
1554152281192:# ----------------------------------------------------------------------
1554152281194:library(PEcAn.all)
1554152286376:library(PEcAn.utils)
1554152287457:library(RCurl)
1554152289916:# make sure always to call status.end
1554152289918:options(warn=1)
1554152290362:options(error=quote({
1554152290364:PEcAn.utils::status.end("ERROR")
1554152290366:PEcAn.remote::kill.tunnel(settings)
1554152290368:if (!interactive()) {
1554152290370:q(status = 1)
1554152290372:}
1554152290373:}))
1554152291330:# ----------------------------------------------------------------------
1554152291332:# PEcAn Workflow
1554152291334:# ----------------------------------------------------------------------
1554152291337:# Open and read in settings file for PEcAn run.
1554152291339:args <- commandArgs(trailingOnly = TRUE)
1554152296973:is.na(args[1])
1554152299454:if (is.na(args[1])){
1554152299457:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.kr.biocro.xml")
1554152299459:} else {
1554152299461:settings.file <- args[1]
1554152299463:settings <- PEcAn.settings::read.settings(settings.file)
1554152299465:}
1554152301926:# Check for additional modules that will require adding settings
1554152301928:if("benchmarking" %in% names(settings)){
1554152301930:library(PEcAn.benchmark)
1554152301932:settings <- papply(settings, read_settings_BRR)
1554152301934:}
1554152305179:if("sitegroup" %in% names(settings)){
1554152305181:if(is.null(settings$sitegroup$nSite)){
1554152305183:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1554152305185:sitegroupId = settings$sitegroup$id)
1554152305187:} else {
1554152305189:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1554152305191:sitegroupId = settings$sitegroup$id,
1554152305192:nSite = settings$sitegroup$nSite)
1554152305193:}
1554152305194:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1554152305195:}
1554152308407:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1554152308409:#settings$host$name <- fqdn()
1554152308410:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1554152322554:settings$model
1554152350235:# Write pecan.CHECKED.xml
1554152350237:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1554152354878:# start from scratch if no continue is passed in
1554152354880:statusFile <- file.path(settings$outdir, "STATUS")
1554152356942:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1554152356944:file.remove(statusFile)
1554152356947:}
1554152360547:# Do conversions
1554152360549:settings <- PEcAn.workflow::do_conversions(settings)
1554152422054:?convert.input
1554152463974:traceback()
1554152656044:debugonce(convert.input)
1554152660148:# Do conversions
1554152660150:settings <- PEcAn.workflow::do_conversions(settings)
1554152682720:settings
1554152728362:settings <- read.settings('pecan.CHECKED.xml')
1554152748747:settings$outdir
1554152755500:settings <- read.settings(file.path(settings$outdir, 'pecan.CHECKED.xml'))
1554152758954:# Do conversions
1554152758956:settings <- PEcAn.workflow::do_conversions(settings)
1554152770779:# ----------------------------------------------------------------------
1554152770782:# PEcAn Workflow
1554152770783:# ----------------------------------------------------------------------
1554152770785:# Open and read in settings file for PEcAn run.
1554152770787:args <- commandArgs(trailingOnly = TRUE)
1554152771272:if (is.na(args[1])){
1554152771274:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.kr.biocro.xml")
1554152771276:} else {
1554152771279:settings.file <- args[1]
1554152771281:settings <- PEcAn.settings::read.settings(settings.file)
1554152771283:}
1554152771969:# Check for additional modules that will require adding settings
1554152771972:if("benchmarking" %in% names(settings)){
1554152771974:library(PEcAn.benchmark)
1554152771976:settings <- papply(settings, read_settings_BRR)
1554152771977:}
1554152772520:if("sitegroup" %in% names(settings)){
1554152772522:if(is.null(settings$sitegroup$nSite)){
1554152772524:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1554152772527:sitegroupId = settings$sitegroup$id)
1554152772529:} else {
1554152772531:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1554152772533:sitegroupId = settings$sitegroup$id,
1554152772534:nSite = settings$sitegroup$nSite)
1554152772536:}
1554152772537:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1554152772538:}
1554152775804:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1554152775805:#settings$host$name <- fqdn()
1554152775807:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1554152778742:# Write pecan.CHECKED.xml
1554152778744:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1554152783778:# start from scratch if no continue is passed in
1554152783780:statusFile <- file.path(settings$outdir, "STATUS")
1554152784450:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1554152784452:file.remove(statusFile)
1554152784454:}
1554152786447:#settings <- read.settings(file.path(settings$outdir, 'pecan.CHECKED.xml'))
1554152786449:# Do conversions
1554152786451:settings <- PEcAn.workflow::do_conversions(settings)
1554152887611:input.id
1554152922475:input.args <- list(...)
1554152923542:PEcAn.logger::logger.debug(paste("Convert.Inputs", fcn, input.id, host$name, outfolder, formatname,
1554152923544:mimetype, site.id, start_date, end_date))
1554152981147:host$name
1554152985716:input.id
1554153458522:system.file(package = 'BioCro')
1554153477189:dir(system.file(package = 'BioCro'))
1554153487458:dir(system.file(package = 'BioCro', 'extdata'))
1554153499037:dir(system.file(package = 'BioCro', 'extdata', 'met2011.csv'))
1554153515142:system.file(package = 'BioCro', 'extdata/met2011.csv')
1554153573110:# ----------------------------------------------------------------------
1554153573112:# Load required libraries
1554153573114:# ----------------------------------------------------------------------
1554153573116:library(PEcAn.all)
1554153573488:library(PEcAn.utils)
1554153574033:library(RCurl)
1554153574621:# make sure always to call status.end
1554153574623:options(warn=1)
1554153581374:# make sure always to call status.end
1554153581377:options(warn=1)
1554153581756:options(error=quote({
1554153581759:PEcAn.utils::status.end("ERROR")
1554153581762:PEcAn.remote::kill.tunnel(settings)
1554153581764:if (!interactive()) {
1554153581766:q(status = 1)
1554153581768:}
1554153581770:}))
1554153582300:# ----------------------------------------------------------------------
1554153582302:# PEcAn Workflow
1554153582304:# ----------------------------------------------------------------------
1554153582306:# Open and read in settings file for PEcAn run.
1554153582308:args <- commandArgs(trailingOnly = TRUE)
1554153582983:if (is.na(args[1])){
1554153582985:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.kr.biocro.xml")
1554153582987:} else {
1554153582989:settings.file <- args[1]
1554153582991:settings <- PEcAn.settings::read.settings(settings.file)
1554153582993:}
1554153583514:# Check for additional modules that will require adding settings
1554153583516:if("benchmarking" %in% names(settings)){
1554153583519:library(PEcAn.benchmark)
1554153583520:settings <- papply(settings, read_settings_BRR)
1554153583522:}
1554153584488:if("sitegroup" %in% names(settings)){
1554153584490:if(is.null(settings$sitegroup$nSite)){
1554153584492:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1554153584494:sitegroupId = settings$sitegroup$id)
1554153584496:} else {
1554153584498:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1554153584500:sitegroupId = settings$sitegroup$id,
1554153584501:nSite = settings$sitegroup$nSite)
1554153584503:}
1554153584504:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1554153584505:}
1554153586046:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1554153586048:#settings$host$name <- fqdn()
1554153586050:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1554153630326:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.kr.biocro.xml")
1554153638457:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1554153638459:#settings$host$name <- fqdn()
1554153638460:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1554153865752:# ----------------------------------------------------------------------
1554153865754:# PEcAn Workflow
1554153865756:# ----------------------------------------------------------------------
1554153865758:# Open and read in settings file for PEcAn run.
1554153865760:args <- commandArgs(trailingOnly = TRUE)
1554153866167:if (is.na(args[1])){
1554153866169:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.kr.biocro.xml")
1554153866170:} else {
1554153866172:settings.file <- args[1]
1554153866173:settings <- PEcAn.settings::read.settings(settings.file)
1554153866174:}
1554153866837:# Check for additional modules that will require adding settings
1554153866839:if("benchmarking" %in% names(settings)){
1554153866841:library(PEcAn.benchmark)
1554153866844:settings <- papply(settings, read_settings_BRR)
1554153866845:}
1554153867805:if("sitegroup" %in% names(settings)){
1554153867808:if(is.null(settings$sitegroup$nSite)){
1554153867810:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1554153867812:sitegroupId = settings$sitegroup$id)
1554153867814:} else {
1554153867816:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1554153867818:sitegroupId = settings$sitegroup$id,
1554153867819:nSite = settings$sitegroup$nSite)
1554153867821:}
1554153867822:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1554153867824:}
1554153874183:# make sure always to call status.end
1554153874185:options(warn=1)
1554153874652:options(error=quote({
1554153874654:PEcAn.utils::status.end("ERROR")
1554153874656:PEcAn.remote::kill.tunnel(settings)
1554153874658:if (!interactive()) {
1554153874660:q(status = 1)
1554153874662:}
1554153874664:}))
1554153875602:# ----------------------------------------------------------------------
1554153875605:# PEcAn Workflow
1554153875607:# ----------------------------------------------------------------------
1554153875609:# Open and read in settings file for PEcAn run.
1554153875611:args <- commandArgs(trailingOnly = TRUE)
1554153876673:if (is.na(args[1])){
1554153876675:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.kr.biocro.xml")
1554153876677:} else {
1554153876679:settings.file <- args[1]
1554153876681:settings <- PEcAn.settings::read.settings(settings.file)
1554153876682:}
1554153879189:# Check for additional modules that will require adding settings
1554153879192:if("benchmarking" %in% names(settings)){
1554153879194:library(PEcAn.benchmark)
1554153879196:settings <- papply(settings, read_settings_BRR)
1554153879198:}
1554153879760:if("sitegroup" %in% names(settings)){
1554153879763:if(is.null(settings$sitegroup$nSite)){
1554153879765:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1554153879766:sitegroupId = settings$sitegroup$id)
1554153879768:} else {
1554153879770:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1554153879772:sitegroupId = settings$sitegroup$id,
1554153879773:nSite = settings$sitegroup$nSite)
1554153879775:}
1554153879776:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1554153879778:}
1554153881589:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1554153881599:#settings$host$name <- fqdn()
1554153881603:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1554153952917:Sys.getenv('HOSTNAME')
1554153958237:Sys.getenv('USER')
1554153962557:Sys.getenv('HOST')
1554154071555:# ----------------------------------------------------------------------
1554154071557:# PEcAn Workflow
1554154071559:# ----------------------------------------------------------------------
1554154071561:# Open and read in settings file for PEcAn run.
1554154071563:args <- commandArgs(trailingOnly = TRUE)
1554154073048:if (is.na(args[1])){
1554154073050:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.kr.biocro.xml")
1554154073052:} else {
1554154073054:settings.file <- args[1]
1554154073056:settings <- PEcAn.settings::read.settings(settings.file)
1554154073057:}
1554154074424:# Check for additional modules that will require adding settings
1554154074427:if("benchmarking" %in% names(settings)){
1554154074429:library(PEcAn.benchmark)
1554154074431:settings <- papply(settings, read_settings_BRR)
1554154074433:}
1554154075222:if("sitegroup" %in% names(settings)){
1554154075224:if(is.null(settings$sitegroup$nSite)){
1554154075227:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1554154075229:sitegroupId = settings$sitegroup$id)
1554154075231:} else {
1554154075233:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1554154075234:sitegroupId = settings$sitegroup$id,
1554154075235:nSite = settings$sitegroup$nSite)
1554154075236:}
1554154075237:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1554154075238:}
1554154076796:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1554154076798:#settings$host$name <- fqdn()
1554154076800:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1554154081393:# Write pecan.CHECKED.xml
1554154081395:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1554154084020:# start from scratch if no continue is passed in
1554154084022:statusFile <- file.path(settings$outdir, "STATUS")
1554154084767:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1554154084769:file.remove(statusFile)
1554154084771:}
1554154088288:#settings <- read.settings(file.path(settings$outdir, 'pecan.CHECKED.xml'))
1554154088290:# Do conversions
1554154088292:settings <- PEcAn.workflow::do_conversions(settings)
1554154140603:# Query the trait database for data and priors
1554154140605:if (PEcAn.utils::status.check("TRAIT") == 0){
1554154140607:PEcAn.utils::status.start("TRAIT")
1554154140609:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1554154140611:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1554154140613:PEcAn.utils::status.end()
1554154140614:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1554154140615:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1554154140616:}
1554154154001:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1554154156995:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1554154166742:PEcAn.utils::status.check("TRAIT") == 0
1554154180732:file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1554154192621:# Query the trait database for data and priors
1554154192623:if (PEcAn.utils::status.check("TRAIT") == 0){
1554154192625:PEcAn.utils::status.start("TRAIT")
1554154192626:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1554154192627:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1554154192629:PEcAn.utils::status.end()
1554154192630:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1554154192631:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1554154192632:}
1554154223617:# # Query the trait database for data and priors
1554154223619:# if (PEcAn.utils::status.check("TRAIT") == 0){
1554154223621:# PEcAn.utils::status.start("TRAIT")
1554154223623:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1554154224666:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1554154229139:PEcAn.utils::status.end()
1554154238423:!is.null(settings$meta.analysis)
1554154265355:PEcAn.MA::runModule.run.meta.analysis(settings)
1554154273340:# # Query the trait database for data and priors
1554154273349:# if (PEcAn.utils::status.check("TRAIT") == 0){
1554154273351:# PEcAn.utils::status.start("TRAIT")
1554154273352:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1554154280654:# # Query the trait database for data and priors
1554154280656:# if (PEcAn.utils::status.check("TRAIT") == 0){
1554154280658:# PEcAn.utils::status.start("TRAIT")
1554154280660:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1554154372934:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.kr.biocro.xml")
1554154378584:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1554154378586:#settings$host$name <- fqdn()
1554154378588:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1554154388171:# Write pecan.CHECKED.xml
1554154388174:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1554154391435:# start from scratch if no continue is passed in
1554154391437:statusFile <- file.path(settings$outdir, "STATUS")
1554154406683:# start from scratch if no continue is passed in
1554154406686:statusFile <- file.path(settings$outdir, "STATUS")
1554154408092:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1554154408095:file.remove(statusFile)
1554154408097:}
1554154429650:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1554154447270:PEcAn.utils::status.start("META")
1554154448347:PEcAn.MA::runModule.run.meta.analysis(settings)
1554154470945:# ----------------------------------------------------------------------
1554154470948:# Load required libraries
1554154470949:# ----------------------------------------------------------------------
1554154470951:library(PEcAn.all)
1554154475091:library(PEcAn.utils)
1554154476168:library(RCurl)
1554154478227:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.kr.biocro.xml")
1554154479366:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1554154479368:#settings$host$name <- fqdn()
1554154479370:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1554154480812:# Write pecan.CHECKED.xml
1554154480826:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1554154482286:# start from scratch if no continue is passed in
1554154482288:statusFile <- file.path(settings$outdir, "STATUS")
1554154484687:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1554154484689:file.remove(statusFile)
1554154484691:}
1554154485750:# # Query the trait database for data and priors
1554154485752:# if (PEcAn.utils::status.check("TRAIT") == 0){
1554154485754:# PEcAn.utils::status.start("TRAIT")
1554154485756:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1554154502877:# Run the PEcAn meta.analysis
1554154502879:PEcAn.utils::status.start("META")
1554154503788:PEcAn.MA::runModule.run.meta.analysis(settings)
1554154585528:settings$meta.analysis <- ''
1554154588586:# # Query the trait database for data and priors
1554154588589:# if (PEcAn.utils::status.check("TRAIT") == 0){
1554154588591:# PEcAn.utils::status.start("TRAIT")
1554154588592:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1554154624264:settings <- PEcAn.workflow::runModule.run.write.configs(settings)
1554154764254:# make sure always to call status.end
1554154764256:options(warn=1)
1554154764714:options(error=quote({
1554154764716:PEcAn.utils::status.end("ERROR")
1554154764718:PEcAn.remote::kill.tunnel(settings)
1554154764720:if (!interactive()) {
1554154764722:q(status = 1)
1554154764723:}
1554154764724:}))
1554154765960:# ----------------------------------------------------------------------
1554154765962:# PEcAn Workflow
1554154765964:# ----------------------------------------------------------------------
1554154765965:# Open and read in settings file for PEcAn run.
1554154765967:args <- commandArgs(trailingOnly = TRUE)
1554154767133:if (is.na(args[1])){
1554154767135:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.kr.biocro.xml")
1554154767137:} else {
1554154767139:settings.file <- args[1]
1554154767140:settings <- PEcAn.settings::read.settings(settings.file)
1554154767141:}
1554154768542:# Check for additional modules that will require adding settings
1554154768544:if("benchmarking" %in% names(settings)){
1554154768546:library(PEcAn.benchmark)
1554154768549:settings <- papply(settings, read_settings_BRR)
1554154768550:}
1554154769261:if("sitegroup" %in% names(settings)){
1554154769263:if(is.null(settings$sitegroup$nSite)){
1554154769265:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1554154769266:sitegroupId = settings$sitegroup$id)
1554154769268:} else {
1554154769269:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1554154769271:sitegroupId = settings$sitegroup$id,
1554154769272:nSite = settings$sitegroup$nSite)
1554154769274:}
1554154769275:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1554154769277:}
1554154769977:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1554154769979:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1554154790239:# Write pecan.CHECKED.xml
1554154790242:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1554154796431:# start from scratch if no continue is passed in
1554154796433:statusFile <- file.path(settings$outdir, "STATUS")
1554154799125:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1554154799128:file.remove(statusFile)
1554154799129:}
1554154800552:# Do conversions
1554154800554:settings <- PEcAn.workflow::do_conversions(settings)
1554154836522:# Query the trait database for data and priors
1554154836525:if (PEcAn.utils::status.check("TRAIT") == 0){
1554154836527:PEcAn.utils::status.start("TRAIT")
1554154836528:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1554154836529:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1554154836530:PEcAn.utils::status.end()
1554154836531:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1554154836533:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1554154836534:}
1554154850251:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1554154924548:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1554154971536:PEcAn.MA::runModule.run.meta.analysis(settings)
1554915411876:library(dplyr)
1554915412340:# Open and read in settings file for PEcAn run.
1554915412341:args <- commandArgs(trailingOnly = TRUE)
1554915412791:if (is.na(args[1])){
1554915412793:settings <- PEcAn.settings::read.settings("pecan/tests/pecan64.sipnet.xml")
1554915412795:} else {
1554915412797:settings.file = args[1]
1554915412799:settings <- PEcAn.settings::read.settings(settings.file)
1554915412801:}
1554915413571:# Open up a connection to BETY
1554915413573:bety <-dplyr::src_postgres(host = settings$database$bety$host,
1554915413575:user = settings$database$bety$user,
1554915413578:password = settings$database$bety$password,
1554915413580:dbname = settings$database$bety$dbname)
1554915417765:new_model <- tbl(bety, 'models') %>%
1554915417767:filter(id == 9000000001)
1554915424725:new_model
1554915619291:getw
1554915620370:getwd()
1554916115460:bety
1554916134130:settings$database$bety$host
1554916138975:settings$database$bety$user
1554916144024:settings$database$bety$password
1554916149483:settings$database$bety$dbname
1555452536319:getwd()
1555452576525:# ----------------------------------------------------------------------
1555452576527:# Load required libraries
1555452576530:# ----------------------------------------------------------------------
1555452576532:library(PEcAn.all)
1555452580893:library(PEcAn.utils)
1555452580894:library(RCurl)
1555452582088:# make sure always to call status.end
1555452582090:options(warn=1)
1555452582830:options(error=quote({
1555452582833:PEcAn.utils::status.end("ERROR")
1555452582835:PEcAn.remote::kill.tunnel(settings)
1555452582837:if (!interactive()) {
1555452582839:q(status = 1)
1555452582841:}
1555452582843:}))
1555452583868:# ----------------------------------------------------------------------
1555452583870:# PEcAn Workflow
1555452583872:# ----------------------------------------------------------------------
1555452583874:# Open and read in settings file for PEcAn run.
1555452583876:args <- commandArgs(trailingOnly = TRUE)
1555452584834:if (is.na(args[1])){
1555452584836:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.clm.params.xml")
1555452584838:} else {
1555452584840:settings.file <- args[1]
1555452584842:settings <- PEcAn.settings::read.settings(settings.file)
1555452584844:}
1555452586438:# Check for additional modules that will require adding settings
1555452586440:if("benchmarking" %in% names(settings)){
1555452586442:library(PEcAn.benchmark)
1555452586444:settings <- papply(settings, read_settings_BRR)
1555452586446:}
1555452587540:if("sitegroup" %in% names(settings)){
1555452587542:if(is.null(settings$sitegroup$nSite)){
1555452587543:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1555452587545:sitegroupId = settings$sitegroup$id)
1555452587546:} else {
1555452587548:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1555452587549:sitegroupId = settings$sitegroup$id,
1555452587551:nSite = settings$sitegroup$nSite)
1555452587552:}
1555452587553:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1555452587555:}
1555452589063:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1555452589065:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1555452592132:# Write pecan.CHECKED.xml
1555452592134:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1555452613735:# start from scratch if no continue is passed in
1555452613738:statusFile <- file.path(settings$outdir, "STATUS")
1555452614683:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1555452614685:file.remove(statusFile)
1555452614687:}
1555452615657:# Do conversions
1555452615659:settings <- PEcAn.workflow::do_conversions(settings)
1555453640576:# ----------------------------------------------------------------------
1555453640578:# Load required libraries
1555453640580:# ----------------------------------------------------------------------
1555453640582:library(PEcAn.all)
1555453645872:library(PEcAn.utils)
1555453645874:library(RCurl)
1555453646062:# make sure always to call status.end
1555453646063:options(warn=1)
1555453646064:options(error=quote({
1555453646065:PEcAn.utils::status.end("ERROR")
1555453646066:PEcAn.remote::kill.tunnel(settings)
1555453646067:if (!interactive()) {
1555453646068:q(status = 1)
1555453646069:}
1555453646070:}))
1555453646072:# ----------------------------------------------------------------------
1555453646073:# PEcAn Workflow
1555453646073:# ----------------------------------------------------------------------
1555453646074:# Open and read in settings file for PEcAn run.
1555453646075:args <- commandArgs(trailingOnly = TRUE)
1555453647375:if (is.na(args[1])){
1555453647377:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.clm.params.xml")
1555453647379:} else {
1555453647381:settings.file <- args[1]
1555453647383:settings <- PEcAn.settings::read.settings(settings.file)
1555453647386:}
1555453648932:# Check for additional modules that will require adding settings
1555453648935:if("benchmarking" %in% names(settings)){
1555453648939:library(PEcAn.benchmark)
1555453648940:settings <- papply(settings, read_settings_BRR)
1555453648942:}
1555453651271:if("sitegroup" %in% names(settings)){
1555453651273:if(is.null(settings$sitegroup$nSite)){
1555453651275:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1555453651277:sitegroupId = settings$sitegroup$id)
1555453651278:} else {
1555453651280:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1555453651281:sitegroupId = settings$sitegroup$id,
1555453651282:nSite = settings$sitegroup$nSite)
1555453651283:}
1555453651284:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1555453651285:}
1555453653008:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1555453653011:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1555453657692:# Write pecan.CHECKED.xml
1555453657695:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1555453660992:# start from scratch if no continue is passed in
1555453660994:statusFile <- file.path(settings$outdir, "STATUS")
1555453661817:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1555453661820:file.remove(statusFile)
1555453661822:}
1555453663720:# Do conversions
1555453663722:settings <- PEcAn.workflow::do_conversions(settings)
1555453697561:traceback()
1555455151610:settings$model$type
1555455251019:model = settings$model$type
1555455254710:model
1555455268038:reg.model.xml <- system.file(paste0("register.", model, ".xml"), package = paste0("PEcAn.",model))
1555455272346:reg.model.xml
1555455280228:?system.file
1555455301726:paste0("register.", model, ".xml")
1555455650092:paste0("PEcAn.",model)
1555522329227:model = "BIOCRO"
1555522330369:MODEL
1555522332376:model
1555522337836:reg.model.xml <- system.file(paste0("register.", model, ".xml"), package = paste0("PEcAn.",model))
1555522344287:reg.model.xml
1555522511069:# ----------------------------------------------------------------------
1555522511070:# Load required libraries
1555522511071:# ----------------------------------------------------------------------
1555522511073:library(PEcAn.all)
1555522515878:library(PEcAn.utils)
1555522515879:library(RCurl)
1555522516035:# make sure always to call status.end
1555522516036:options(warn=1)
1555522516038:options(error=quote({
1555522516039:PEcAn.utils::status.end("ERROR")
1555522516040:PEcAn.remote::kill.tunnel(settings)
1555522516041:if (!interactive()) {
1555522516042:q(status = 1)
1555522516043:}
1555522516044:}))
1555522527886:# ----------------------------------------------------------------------
1555522527889:# PEcAn Workflow
1555522527891:# ----------------------------------------------------------------------
1555522527893:# Open and read in settings file for PEcAn run.
1555522527895:args <- commandArgs(trailingOnly = TRUE)
1555522528964:if (is.na(args[1])){
1555522528966:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.clm.params.xml")
1555522528968:} else {
1555522528971:settings.file <- args[1]
1555522528972:settings <- PEcAn.settings::read.settings(settings.file)
1555522528974:}
1555522530059:# Check for additional modules that will require adding settings
1555522530061:if("benchmarking" %in% names(settings)){
1555522530063:library(PEcAn.benchmark)
1555522530065:settings <- papply(settings, read_settings_BRR)
1555522530067:}
1555522531058:if("sitegroup" %in% names(settings)){
1555522531060:if(is.null(settings$sitegroup$nSite)){
1555522531062:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1555522531064:sitegroupId = settings$sitegroup$id)
1555522531066:} else {
1555522531068:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1555522531069:sitegroupId = settings$sitegroup$id,
1555522531071:nSite = settings$sitegroup$nSite)
1555522531072:}
1555522531073:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1555522531075:}
1555522532523:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1555522532525:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1555522535635:# Write pecan.CHECKED.xml
1555522535637:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1555522537193:# start from scratch if no continue is passed in
1555522537195:statusFile <- file.path(settings$outdir, "STATUS")
1555522537890:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1555522537892:file.remove(statusFile)
1555522537894:}
1555522543794:settings
1555522555359:settings$model
1555522576110:# Do conversions
1555522576113:settings$model$type <- "BIOCRO"
1555522579621:settings$model
1555522585695:settings <- PEcAn.workflow::do_conversions(settings)
1555523286590:settings
1555523414496:#!/usr/bin/env Rscript
1555523414498:#-------------------------------------------------------------------------------
1555523414500:# Copyright (c) 2012 University of Illinois, NCSA.
1555523414501:# All rights reserved. This program and the accompanying materials
1555523414502:# are made available under the terms of the
1555523414504:# University of Illinois/NCSA Open Source License
1555523414505:# which accompanies this distribution, and is available at
1555523414506:# http://opensource.ncsa.illinois.edu/license.html
1555523414507:#-------------------------------------------------------------------------------
1555523414509:# ----------------------------------------------------------------------
1555523414510:# Load required libraries
1555523414511:# ----------------------------------------------------------------------
1555523414512:library(PEcAn.all)
1555523419494:library(PEcAn.utils)
1555523419496:library(RCurl)
1555523419630:# make sure always to call status.end
1555523419632:options(warn=1)
1555523419633:options(error=quote({
1555523419634:PEcAn.utils::status.end("ERROR")
1555523419636:PEcAn.remote::kill.tunnel(settings)
1555523419637:if (!interactive()) {
1555523419638:q(status = 1)
1555523419639:}
1555523419640:}))
1555523419643:#options(warning.expression=status.end("ERROR"))
1555523419645:# ----------------------------------------------------------------------
1555523419647:# PEcAn Workflow
1555523419648:# ----------------------------------------------------------------------
1555523419649:# Open and read in settings file for PEcAn run.
1555523419650:args <- commandArgs(trailingOnly = TRUE)
1555523419652:if (is.na(args[1])){
1555523419653:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.clm.params.xml")
1555523419654:} else {
1555523419655:settings.file <- args[1]
1555523419656:settings <- PEcAn.settings::read.settings(settings.file)
1555523419657:}
1555523419676:# Check for additional modules that will require adding settings
1555523419678:if("benchmarking" %in% names(settings)){
1555523419679:library(PEcAn.benchmark)
1555523419680:settings <- papply(settings, read_settings_BRR)
1555523419681:}
1555523419683:if("sitegroup" %in% names(settings)){
1555523419684:if(is.null(settings$sitegroup$nSite)){
1555523419686:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1555523419687:sitegroupId = settings$sitegroup$id)
1555523419688:} else {
1555523419689:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1555523419690:sitegroupId = settings$sitegroup$id,
1555523419691:nSite = settings$sitegroup$nSite)
1555523419692:}
1555523419693:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1555523419695:}
1555523419697:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1555523419698:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1555523420210:# Write pecan.CHECKED.xml
1555523420212:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1555523420258:# start from scratch if no continue is passed in
1555523420259:statusFile <- file.path(settings$outdir, "STATUS")
1555523420261:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1555523420262:file.remove(statusFile)
1555523420263:}
1555523424843:# Do conversions
1555523424845:settings$model$type <- "BIOCRO"
1555523426036:settings <- PEcAn.workflow::do_conversions(settings)
1555523564913:#!/usr/bin/env Rscript
1555523564914:#-------------------------------------------------------------------------------
1555523564915:# Copyright (c) 2012 University of Illinois, NCSA.
1555523564916:# All rights reserved. This program and the accompanying materials
1555523564917:# are made available under the terms of the
1555523564918:# University of Illinois/NCSA Open Source License
1555523564919:# which accompanies this distribution, and is available at
1555523564920:# http://opensource.ncsa.illinois.edu/license.html
1555523564921:#-------------------------------------------------------------------------------
1555523564922:# ----------------------------------------------------------------------
1555523564923:# Load required libraries
1555523564924:# ----------------------------------------------------------------------
1555523564925:library(PEcAn.all)
1555523569767:library(PEcAn.utils)
1555523569769:library(RCurl)
1555523569925:# make sure always to call status.end
1555523569926:options(warn=1)
1555523569927:options(error=quote({
1555523569928:PEcAn.utils::status.end("ERROR")
1555523569930:PEcAn.remote::kill.tunnel(settings)
1555523569931:if (!interactive()) {
1555523569932:q(status = 1)
1555523569933:}
1555523569934:}))
1555523569936:#options(warning.expression=status.end("ERROR"))
1555523569938:# ----------------------------------------------------------------------
1555523569940:# PEcAn Workflow
1555523569941:# ----------------------------------------------------------------------
1555523569942:# Open and read in settings file for PEcAn run.
1555523569943:args <- commandArgs(trailingOnly = TRUE)
1555523569944:if (is.na(args[1])){
1555523569945:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.clm.params.xml")
1555523569946:} else {
1555523569947:settings.file <- args[1]
1555523569948:settings <- PEcAn.settings::read.settings(settings.file)
1555523569949:}
1555523569968:# Check for additional modules that will require adding settings
1555523569969:if("benchmarking" %in% names(settings)){
1555523569971:library(PEcAn.benchmark)
1555523569972:settings <- papply(settings, read_settings_BRR)
1555523569973:}
1555523569975:if("sitegroup" %in% names(settings)){
1555523569976:if(is.null(settings$sitegroup$nSite)){
1555523569977:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1555523569977:sitegroupId = settings$sitegroup$id)
1555523569978:} else {
1555523569979:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1555523569980:sitegroupId = settings$sitegroup$id,
1555523569981:nSite = settings$sitegroup$nSite)
1555523569982:}
1555523569984:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1555523569985:}
1555523569987:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1555523569988:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1555523570491:# Write pecan.CHECKED.xml
1555523570492:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1555523570537:# start from scratch if no continue is passed in
1555523570538:statusFile <- file.path(settings$outdir, "STATUS")
1555523570540:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1555523570541:file.remove(statusFile)
1555523570542:}
1555523587555:# Do conversions
1555523587557:settings$model$type <- "BIOCRO"
1555523588485:settings <- PEcAn.workflow::do_conversions(settings)
1555523729388:settings$database$dbfiles
1555523949686:#!/usr/bin/env Rscript
1555523949688:#-------------------------------------------------------------------------------
1555523949690:# Copyright (c) 2012 University of Illinois, NCSA.
1555523949691:# All rights reserved. This program and the accompanying materials
1555523949693:# are made available under the terms of the
1555523949695:# University of Illinois/NCSA Open Source License
1555523949697:# which accompanies this distribution, and is available at
1555523949699:# http://opensource.ncsa.illinois.edu/license.html
1555523949700:#-------------------------------------------------------------------------------
1555523949701:# ----------------------------------------------------------------------
1555523949702:# Load required libraries
1555523949703:# ----------------------------------------------------------------------
1555523949704:library(PEcAn.all)
1555523954718:library(PEcAn.utils)
1555523954720:library(RCurl)
1555523954939:# make sure always to call status.end
1555523954941:options(warn=1)
1555523954942:options(error=quote({
1555523954944:PEcAn.utils::status.end("ERROR")
1555523954945:PEcAn.remote::kill.tunnel(settings)
1555523954947:if (!interactive()) {
1555523954948:q(status = 1)
1555523954949:}
1555523954951:}))
1555523954953:#options(warning.expression=status.end("ERROR"))
1555523954957:# ----------------------------------------------------------------------
1555523954958:# PEcAn Workflow
1555523954959:# ----------------------------------------------------------------------
1555523954960:# Open and read in settings file for PEcAn run.
1555523954962:args <- commandArgs(trailingOnly = TRUE)
1555523954963:if (is.na(args[1])){
1555523954965:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.clm.params.xml")
1555523954966:} else {
1555523954967:settings.file <- args[1]
1555523954968:settings <- PEcAn.settings::read.settings(settings.file)
1555523954969:}
1555523954995:# Check for additional modules that will require adding settings
1555523954996:if("benchmarking" %in% names(settings)){
1555523954997:library(PEcAn.benchmark)
1555523954999:settings <- papply(settings, read_settings_BRR)
1555523955000:}
1555523955003:if("sitegroup" %in% names(settings)){
1555523955004:if(is.null(settings$sitegroup$nSite)){
1555523955006:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1555523955007:sitegroupId = settings$sitegroup$id)
1555523955008:} else {
1555523955010:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1555523955011:sitegroupId = settings$sitegroup$id,
1555523955012:nSite = settings$sitegroup$nSite)
1555523955014:}
1555523955015:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1555523955016:}
1555523955019:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1555523955020:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1555523955645:# Write pecan.CHECKED.xml
1555523955647:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1555523955709:# start from scratch if no continue is passed in
1555523955711:statusFile <- file.path(settings$outdir, "STATUS")
1555523955713:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1555523955714:file.remove(statusFile)
1555523955715:}
1555523961323:# Do conversions
1555523961325:#settings$model$type <- "BIOCRO"
1555523961327:settings <- PEcAn.workflow::do_conversions(settings)
1555524178650:#!/usr/bin/env Rscript
1555524178651:#-------------------------------------------------------------------------------
1555524178652:# Copyright (c) 2012 University of Illinois, NCSA.
1555524178652:# All rights reserved. This program and the accompanying materials
1555524178653:# are made available under the terms of the
1555524178654:# University of Illinois/NCSA Open Source License
1555524178655:# which accompanies this distribution, and is available at
1555524178656:# http://opensource.ncsa.illinois.edu/license.html
1555524178657:#-------------------------------------------------------------------------------
1555524178659:# ----------------------------------------------------------------------
1555524178660:# Load required libraries
1555524178660:# ----------------------------------------------------------------------
1555524178661:library(PEcAn.all)
1555524183396:library(PEcAn.utils)
1555524183398:library(RCurl)
1555524183578:# make sure always to call status.end
1555524183579:options(warn=1)
1555524183580:options(error=quote({
1555524183581:PEcAn.utils::status.end("ERROR")
1555524183582:PEcAn.remote::kill.tunnel(settings)
1555524183583:if (!interactive()) {
1555524183584:q(status = 1)
1555524183585:}
1555524183586:}))
1555524183589:#options(warning.expression=status.end("ERROR"))
1555524183591:# ----------------------------------------------------------------------
1555524183592:# PEcAn Workflow
1555524183593:# ----------------------------------------------------------------------
1555524183594:# Open and read in settings file for PEcAn run.
1555524183595:args <- commandArgs(trailingOnly = TRUE)
1555524183597:if (is.na(args[1])){
1555524183598:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.clm.params.xml")
1555524183599:} else {
1555524183600:settings.file <- args[1]
1555524183601:settings <- PEcAn.settings::read.settings(settings.file)
1555524183602:}
1555524183627:# Check for additional modules that will require adding settings
1555524183628:if("benchmarking" %in% names(settings)){
1555524183629:library(PEcAn.benchmark)
1555524183630:settings <- papply(settings, read_settings_BRR)
1555524183631:}
1555524183633:if("sitegroup" %in% names(settings)){
1555524183634:if(is.null(settings$sitegroup$nSite)){
1555524183635:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1555524183636:sitegroupId = settings$sitegroup$id)
1555524183637:} else {
1555524183639:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1555524183640:sitegroupId = settings$sitegroup$id,
1555524183641:nSite = settings$sitegroup$nSite)
1555524183642:}
1555524183643:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1555524183644:}
1555524183646:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1555524183647:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1555524184215:# Write pecan.CHECKED.xml
1555524184217:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1555524184283:# start from scratch if no continue is passed in
1555524184284:statusFile <- file.path(settings$outdir, "STATUS")
1555524184286:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1555524184287:file.remove(statusFile)
1555524184288:}
1555524184291:# Do conversions
1555524184292:settings$model$type <- "BIOCRO"
1555524184294:settings <- PEcAn.workflow::do_conversions(settings)
1555525018643:?PEcAn.workflow::do_conversions
1555525048415:#!/usr/bin/env Rscript
1555525048416:#-------------------------------------------------------------------------------
1555525048417:# Copyright (c) 2012 University of Illinois, NCSA.
1555525048418:# All rights reserved. This program and the accompanying materials
1555525048419:# are made available under the terms of the
1555525048420:# University of Illinois/NCSA Open Source License
1555525048421:# which accompanies this distribution, and is available at
1555525048422:# http://opensource.ncsa.illinois.edu/license.html
1555525048423:#-------------------------------------------------------------------------------
1555525048425:# ----------------------------------------------------------------------
1555525048426:# Load required libraries
1555525048427:# ----------------------------------------------------------------------
1555525048428:library(PEcAn.all)
1555525053211:library(PEcAn.utils)
1555525053213:library(RCurl)
1555525053369:# make sure always to call status.end
1555525053369:options(warn=1)
1555525053371:options(error=quote({
1555525053372:PEcAn.utils::status.end("ERROR")
1555525053373:PEcAn.remote::kill.tunnel(settings)
1555525053374:if (!interactive()) {
1555525053375:q(status = 1)
1555525053376:}
1555525053377:}))
1555525053380:#options(warning.expression=status.end("ERROR"))
1555525053382:# ----------------------------------------------------------------------
1555525053383:# PEcAn Workflow
1555525053384:# ----------------------------------------------------------------------
1555525053385:# Open and read in settings file for PEcAn run.
1555525053386:args <- commandArgs(trailingOnly = TRUE)
1555525053387:if (is.na(args[1])){
1555525053388:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.clm.params.xml")
1555525053389:} else {
1555525053390:settings.file <- args[1]
1555525053391:settings <- PEcAn.settings::read.settings(settings.file)
1555525053392:}
1555525053411:# Check for additional modules that will require adding settings
1555525053412:if("benchmarking" %in% names(settings)){
1555525053413:library(PEcAn.benchmark)
1555525053414:settings <- papply(settings, read_settings_BRR)
1555525053415:}
1555525053418:if("sitegroup" %in% names(settings)){
1555525053419:if(is.null(settings$sitegroup$nSite)){
1555525053419:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1555525053420:sitegroupId = settings$sitegroup$id)
1555525053422:} else {
1555525053423:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1555525053424:sitegroupId = settings$sitegroup$id,
1555525053425:nSite = settings$sitegroup$nSite)
1555525053426:}
1555525053427:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1555525053428:}
1555525053430:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1555525053431:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1555525053896:# Write pecan.CHECKED.xml
1555525053897:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1555525053945:# start from scratch if no continue is passed in
1555525053946:statusFile <- file.path(settings$outdir, "STATUS")
1555525053947:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1555525053948:file.remove(statusFile)
1555525053949:}
1555525072355:# Do conversions
1555525072357:settings$model$type <- "BIOCRO"
1555525073468:settings <- PEcAn.workflow::do_conversions(settings, overwrite.met = TRUE)
1555527430691:#!/usr/bin/env Rscript
1555527430694:#-------------------------------------------------------------------------------
1555527430695:# Copyright (c) 2012 University of Illinois, NCSA.
1555527430697:# All rights reserved. This program and the accompanying materials
1555527430699:# are made available under the terms of the
1555527430701:# University of Illinois/NCSA Open Source License
1555527430702:# which accompanies this distribution, and is available at
1555527430703:# http://opensource.ncsa.illinois.edu/license.html
1555527430704:#-------------------------------------------------------------------------------
1555527430706:# ----------------------------------------------------------------------
1555527430707:# Load required libraries
1555527430708:# ----------------------------------------------------------------------
1555527430709:library(PEcAn.all)
1555527436073:library(PEcAn.utils)
1555527436075:library(RCurl)
1555527436264:# make sure always to call status.end
1555527436265:options(warn=1)
1555527436267:options(error=quote({
1555527436268:PEcAn.utils::status.end("ERROR")
1555527436269:PEcAn.remote::kill.tunnel(settings)
1555527436270:if (!interactive()) {
1555527436271:q(status = 1)
1555527436272:}
1555527436273:}))
1555527436275:#options(warning.expression=status.end("ERROR"))
1555527436277:# ----------------------------------------------------------------------
1555527436278:# PEcAn Workflow
1555527436279:# ----------------------------------------------------------------------
1555527436280:# Open and read in settings file for PEcAn run.
1555527436281:args <- commandArgs(trailingOnly = TRUE)
1555527436283:if (is.na(args[1])){
1555527436284:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.clm.params.xml")
1555527436285:} else {
1555527436286:settings.file <- args[1]
1555527436287:settings <- PEcAn.settings::read.settings(settings.file)
1555527436287:}
1555527436312:# Check for additional modules that will require adding settings
1555527436313:if("benchmarking" %in% names(settings)){
1555527436314:library(PEcAn.benchmark)
1555527436315:settings <- papply(settings, read_settings_BRR)
1555527436316:}
1555527436319:if("sitegroup" %in% names(settings)){
1555527436320:if(is.null(settings$sitegroup$nSite)){
1555527436321:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1555527436322:sitegroupId = settings$sitegroup$id)
1555527436323:} else {
1555527436324:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1555527436325:sitegroupId = settings$sitegroup$id,
1555527436326:nSite = settings$sitegroup$nSite)
1555527436327:}
1555527436328:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1555527436329:}
1555527436331:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1555527436332:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1555527436955:# Write pecan.CHECKED.xml
1555527436956:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1555527437019:# start from scratch if no continue is passed in
1555527437020:statusFile <- file.path(settings$outdir, "STATUS")
1555527437021:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1555527437022:file.remove(statusFile)
1555527437023:}
1555527445056:# Do conversions
1555527445058:settings <- PEcAn.workflow::do_conversions(settings)
1555527476475:# Query the trait database for data and priors
1555527476476:if (PEcAn.utils::status.check("TRAIT") == 0){
1555527476477:PEcAn.utils::status.start("TRAIT")
1555527476479:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1555527476480:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1555527476481:PEcAn.utils::status.end()
1555527476483:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1555527476484:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1555527476486:}
1555527487318:# Run the PEcAn meta.analysis
1555527487320:if(!is.null(settings$meta.analysis)) {
1555527487322:if (PEcAn.utils::status.check("META") == 0){
1555527487324:PEcAn.utils::status.start("META")
1555527487327:PEcAn.MA::runModule.run.meta.analysis(settings)
1555527487329:PEcAn.utils::status.end()
1555527487331:}
1555527487332:}
1555527490710:# Write model specific configs
1555527490712:if (PEcAn.utils::status.check("CONFIG") == 0){
1555527490714:PEcAn.utils::status.start("CONFIG")
1555527490716:settings <- PEcAn.workflow::runModule.run.write.configs(settings)
1555527490717:PEcAn.settings::write.settings(settings, outputfile='pecan.CONFIGS.xml')
1555527490718:PEcAn.utils::status.end()
1555527490719:} else if (file.exists(file.path(settings$outdir, 'pecan.CONFIGS.xml'))) {
1555527490721:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.CONFIGS.xml'))
1555527490722:}
1555527518233:traceback()
1555530309823:?pecan.ma
1555531085617:#!/usr/bin/env Rscript
1555531085619:#-------------------------------------------------------------------------------
1555531085621:# Copyright (c) 2012 University of Illinois, NCSA.
1555531085623:# All rights reserved. This program and the accompanying materials
1555531085626:# are made available under the terms of the
1555531085628:# University of Illinois/NCSA Open Source License
1555531085629:# which accompanies this distribution, and is available at
1555531085631:# http://opensource.ncsa.illinois.edu/license.html
1555531085632:#-------------------------------------------------------------------------------
1555531085634:# ----------------------------------------------------------------------
1555531085635:# Load required libraries
1555531085636:# ----------------------------------------------------------------------
1555531085637:library(PEcAn.all)
1555531091364:library(PEcAn.utils)
1555531091366:library(RCurl)
1555531091569:# make sure always to call status.end
1555531091570:options(warn=1)
1555531091572:options(error=quote({
1555531091573:PEcAn.utils::status.end("ERROR")
1555531091575:PEcAn.remote::kill.tunnel(settings)
1555531091576:if (!interactive()) {
1555531091577:q(status = 1)
1555531091578:}
1555531091579:}))
1555531091583:#options(warning.expression=status.end("ERROR"))
1555531091586:# ----------------------------------------------------------------------
1555531091588:# PEcAn Workflow
1555531091589:# ----------------------------------------------------------------------
1555531091590:# Open and read in settings file for PEcAn run.
1555531091591:args <- commandArgs(trailingOnly = TRUE)
1555531091593:if (is.na(args[1])){
1555531091594:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.clm.params.xml")
1555531091596:} else {
1555531091597:settings.file <- args[1]
1555531091598:settings <- PEcAn.settings::read.settings(settings.file)
1555531091599:}
1555531091625:# Check for additional modules that will require adding settings
1555531091626:if("benchmarking" %in% names(settings)){
1555531091627:library(PEcAn.benchmark)
1555531091628:settings <- papply(settings, read_settings_BRR)
1555531091629:}
1555531091632:if("sitegroup" %in% names(settings)){
1555531091634:if(is.null(settings$sitegroup$nSite)){
1555531091635:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1555531091636:sitegroupId = settings$sitegroup$id)
1555531091637:} else {
1555531091638:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1555531091639:sitegroupId = settings$sitegroup$id,
1555531091641:nSite = settings$sitegroup$nSite)
1555531091642:}
1555531091643:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1555531091644:}
1555531091647:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1555531091648:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1555531092266:# Write pecan.CHECKED.xml
1555531092267:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1555531092336:# start from scratch if no continue is passed in
1555531092337:statusFile <- file.path(settings$outdir, "STATUS")
1555531092339:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1555531092340:file.remove(statusFile)
1555531092342:}
1555531109550:# Do conversions
1555531109552:settings <- PEcAn.workflow::do_conversions(settings)
1555531112452:# Query the trait database for data and priors
1555531112454:if (PEcAn.utils::status.check("TRAIT") == 0){
1555531112457:PEcAn.utils::status.start("TRAIT")
1555531112458:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1555531112460:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1555531112461:PEcAn.utils::status.end()
1555531112463:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1555531112464:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1555531112466:}
1555531128819:traceback()
1555532056338:PEcAn.workflow::runModule.get.trait.data(settings)
1555532387476:settings$database$dbfiles
1555532451485:prior.distns <- PEcAn.DB::query.priors(pft = pftid, trstr = PEcAn.utils::vecpaste(trait.names), out = pft$outdir, con = dbcon)
1555607182637:#!/usr/bin/env Rscript
1555607182660:#-------------------------------------------------------------------------------
1555607182662:# Copyright (c) 2012 University of Illinois, NCSA.
1555607182664:# All rights reserved. This program and the accompanying materials
1555607182666:# are made available under the terms of the
1555607182668:# University of Illinois/NCSA Open Source License
1555607182670:# which accompanies this distribution, and is available at
1555607182671:# http://opensource.ncsa.illinois.edu/license.html
1555607182672:#-------------------------------------------------------------------------------
1555607182674:# ----------------------------------------------------------------------
1555607182675:# Load required libraries
1555607182676:# ----------------------------------------------------------------------
1555607182677:library(PEcAn.all)
1555607187627:library(PEcAn.utils)
1555607187629:library(RCurl)
1555607187807:# make sure always to call status.end
1555607187809:options(warn=1)
1555607187810:options(error=quote({
1555607187812:PEcAn.utils::status.end("ERROR")
1555607187813:PEcAn.remote::kill.tunnel(settings)
1555607187814:if (!interactive()) {
1555607187816:q(status = 1)
1555607187817:}
1555607187818:}))
1555607187821:#options(warning.expression=status.end("ERROR"))
1555607187824:# ----------------------------------------------------------------------
1555607187826:# PEcAn Workflow
1555607187827:# ----------------------------------------------------------------------
1555607187828:# Open and read in settings file for PEcAn run.
1555607187829:args <- commandArgs(trailingOnly = TRUE)
1555607187831:if (is.na(args[1])){
1555607187832:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.clm.params.xml")
1555607187833:} else {
1555607187835:settings.file <- args[1]
1555607187836:settings <- PEcAn.settings::read.settings(settings.file)
1555607187837:}
1555607187862:# Check for additional modules that will require adding settings
1555607187863:if("benchmarking" %in% names(settings)){
1555607187865:library(PEcAn.benchmark)
1555607187866:settings <- papply(settings, read_settings_BRR)
1555607187867:}
1555607187870:if("sitegroup" %in% names(settings)){
1555607187872:if(is.null(settings$sitegroup$nSite)){
1555607187873:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1555607187874:sitegroupId = settings$sitegroup$id)
1555607187876:} else {
1555607187877:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1555607187878:sitegroupId = settings$sitegroup$id,
1555607187879:nSite = settings$sitegroup$nSite)
1555607187880:}
1555607187882:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1555607187883:}
1555607187886:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1555607187887:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1555607188468:# Write pecan.CHECKED.xml
1555607188469:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1555607188533:# start from scratch if no continue is passed in
1555607188534:statusFile <- file.path(settings$outdir, "STATUS")
1555607188536:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1555607188537:file.remove(statusFile)
1555607188538:}
1555607191549:# Do conversions
1555607191551:settings <- PEcAn.workflow::do_conversions(settings)
1555607201265:# Query the trait database for data and priors
1555607201267:if (PEcAn.utils::status.check("TRAIT") == 0){
1555607201270:PEcAn.utils::status.start("TRAIT")
1555607201272:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1555607201274:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1555607201275:PEcAn.utils::status.end()
1555607201276:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1555607201278:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1555607201279:}
1555607202361:# Run the PEcAn meta.analysis
1555607202362:if(!is.null(settings$meta.analysis)) {
1555607202363:if (PEcAn.utils::status.check("META") == 0){
1555607202364:PEcAn.utils::status.start("META")
1555607202365:PEcAn.MA::runModule.run.meta.analysis(settings)
1555607202366:PEcAn.utils::status.end()
1555607202367:}
1555607202368:}
1555607207653:# Write model specific configs
1555607207655:if (PEcAn.utils::status.check("CONFIG") == 0){
1555607207657:PEcAn.utils::status.start("CONFIG")
1555607207658:settings <- PEcAn.workflow::runModule.run.write.configs(settings)
1555607207660:PEcAn.settings::write.settings(settings, outputfile='pecan.CONFIGS.xml')
1555607207661:PEcAn.utils::status.end()
1555607207663:} else if (file.exists(file.path(settings$outdir, 'pecan.CONFIGS.xml'))) {
1555607207664:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.CONFIGS.xml'))
1555607207665:}
1555607567581:pft$outdir
1555607578726:settings
1555607590990:settings$pfts
1555607892066:#!/usr/bin/env Rscript
1555607892067:#-------------------------------------------------------------------------------
1555607892068:# Copyright (c) 2012 University of Illinois, NCSA.
1555607892069:# All rights reserved. This program and the accompanying materials
1555607892070:# are made available under the terms of the
1555607892071:# University of Illinois/NCSA Open Source License
1555607892072:# which accompanies this distribution, and is available at
1555607892073:# http://opensource.ncsa.illinois.edu/license.html
1555607892074:#-------------------------------------------------------------------------------
1555607892076:# ----------------------------------------------------------------------
1555607892077:# Load required libraries
1555607892078:# ----------------------------------------------------------------------
1555607892079:library(PEcAn.all)
1555607897487:library(PEcAn.utils)
1555607897488:library(RCurl)
1555607897703:# make sure always to call status.end
1555607897704:options(warn=1)
1555607897705:options(error=quote({
1555607897707:PEcAn.utils::status.end("ERROR")
1555607897708:PEcAn.remote::kill.tunnel(settings)
1555607897709:if (!interactive()) {
1555607897710:q(status = 1)
1555607897711:}
1555607897712:}))
1555607897715:#options(warning.expression=status.end("ERROR"))
1555607897718:# ----------------------------------------------------------------------
1555607897719:# PEcAn Workflow
1555607897720:# ----------------------------------------------------------------------
1555607897721:# Open and read in settings file for PEcAn run.
1555607897722:args <- commandArgs(trailingOnly = TRUE)
1555607897723:if (is.na(args[1])){
1555607897724:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.clm.params.xml")
1555607897726:} else {
1555607897727:settings.file <- args[1]
1555607897728:settings <- PEcAn.settings::read.settings(settings.file)
1555607897729:}
1555607897755:# Check for additional modules that will require adding settings
1555607897756:if("benchmarking" %in% names(settings)){
1555607897757:library(PEcAn.benchmark)
1555607897758:settings <- papply(settings, read_settings_BRR)
1555607897759:}
1555607897762:if("sitegroup" %in% names(settings)){
1555607897763:if(is.null(settings$sitegroup$nSite)){
1555607897764:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1555607897765:sitegroupId = settings$sitegroup$id)
1555607897766:} else {
1555607897767:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1555607897768:sitegroupId = settings$sitegroup$id,
1555607897769:nSite = settings$sitegroup$nSite)
1555607897770:}
1555607897771:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1555607897772:}
1555607897774:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1555607897776:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1555607898403:# Write pecan.CHECKED.xml
1555607898404:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1555607898471:# start from scratch if no continue is passed in
1555607898472:statusFile <- file.path(settings$outdir, "STATUS")
1555607898473:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1555607898474:file.remove(statusFile)
1555607898476:}
1555607898478:# Do conversions
1555607898480:settings <- PEcAn.workflow::do_conversions(settings)
1555607898552:# Query the trait database for data and priors
1555607898553:if (PEcAn.utils::status.check("TRAIT") == 0){
1555607898554:PEcAn.utils::status.start("TRAIT")
1555607898555:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1555607898556:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1555607898558:PEcAn.utils::status.end()
1555607898559:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1555607898560:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1555607898561:}
1555607898768:# Run the PEcAn meta.analysis
1555607898769:if(!is.null(settings$meta.analysis)) {
1555607898770:if (PEcAn.utils::status.check("META") == 0){
1555607898771:PEcAn.utils::status.start("META")
1555607898772:PEcAn.MA::runModule.run.meta.analysis(settings)
1555607898773:PEcAn.utils::status.end()
1555607898774:}
1555607898775:}
1555607924644:traceback()
1555610159269:#!/usr/bin/env Rscript
1555610159271:#-------------------------------------------------------------------------------
1555610159273:# Copyright (c) 2012 University of Illinois, NCSA.
1555610159275:# All rights reserved. This program and the accompanying materials
1555610159277:# are made available under the terms of the
1555610159278:# University of Illinois/NCSA Open Source License
1555610159279:# which accompanies this distribution, and is available at
1555610159280:# http://opensource.ncsa.illinois.edu/license.html
1555610159281:#-------------------------------------------------------------------------------
1555610159283:# ----------------------------------------------------------------------
1555610159284:# Load required libraries
1555610159285:# ----------------------------------------------------------------------
1555610159286:library(PEcAn.all)
1555610164256:library(PEcAn.utils)
1555610164258:library(RCurl)
1555610164429:# make sure always to call status.end
1555610164430:options(warn=1)
1555610164432:options(error=quote({
1555610164433:PEcAn.utils::status.end("ERROR")
1555610164434:PEcAn.remote::kill.tunnel(settings)
1555610164435:if (!interactive()) {
1555610164436:q(status = 1)
1555610164437:}
1555610164438:}))
1555610164440:#options(warning.expression=status.end("ERROR"))
1555610164443:# ----------------------------------------------------------------------
1555610164444:# PEcAn Workflow
1555610164445:# ----------------------------------------------------------------------
1555610164446:# Open and read in settings file for PEcAn run.
1555610164447:args <- commandArgs(trailingOnly = TRUE)
1555610164448:if (is.na(args[1])){
1555610164449:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.clm.params.xml")
1555610164450:} else {
1555610164451:settings.file <- args[1]
1555610164452:settings <- PEcAn.settings::read.settings(settings.file)
1555610164453:}
1555610164481:# Check for additional modules that will require adding settings
1555610164482:if("benchmarking" %in% names(settings)){
1555610164483:library(PEcAn.benchmark)
1555610164484:settings <- papply(settings, read_settings_BRR)
1555610164485:}
1555610164487:if("sitegroup" %in% names(settings)){
1555610164488:if(is.null(settings$sitegroup$nSite)){
1555610164489:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1555610164490:sitegroupId = settings$sitegroup$id)
1555610164491:} else {
1555610164492:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1555610164493:sitegroupId = settings$sitegroup$id,
1555610164494:nSite = settings$sitegroup$nSite)
1555610164495:}
1555610164495:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1555610164496:}
1555610164499:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1555610164500:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1555610165108:# Write pecan.CHECKED.xml
1555610165109:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1555610165185:# start from scratch if no continue is passed in
1555610165186:statusFile <- file.path(settings$outdir, "STATUS")
1555610165187:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1555610165188:file.remove(statusFile)
1555610165189:}
1555610165192:# Do conversions
1555610165193:settings <- PEcAn.workflow::do_conversions(settings)
1555610170736:# Query the trait database for data and priors
1555610170738:if (PEcAn.utils::status.check("TRAIT") == 0){
1555610170740:PEcAn.utils::status.start("TRAIT")
1555610170742:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1555610170743:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1555610170744:PEcAn.utils::status.end()
1555610170746:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1555610170747:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1555610170748:}
1555610174576:# Run the PEcAn meta.analysis
1555610174578:if(!is.null(settings$meta.analysis)) {
1555610174581:if (PEcAn.utils::status.check("META") == 0){
1555610174583:PEcAn.utils::status.start("META")
1555610174585:PEcAn.MA::runModule.run.meta.analysis(settings)
1555610174587:PEcAn.utils::status.end()
1555610174588:}
1555610174589:}
1555610205348:#!/usr/bin/env Rscript
1555610205351:#-------------------------------------------------------------------------------
1555610205352:# Copyright (c) 2012 University of Illinois, NCSA.
1555610205354:# All rights reserved. This program and the accompanying materials
1555610205355:# are made available under the terms of the
1555610205357:# University of Illinois/NCSA Open Source License
1555610205358:# which accompanies this distribution, and is available at
1555610205359:# http://opensource.ncsa.illinois.edu/license.html
1555610205360:#-------------------------------------------------------------------------------
1555610205361:# ----------------------------------------------------------------------
1555610205362:# Load required libraries
1555610205363:# ----------------------------------------------------------------------
1555610205364:library(PEcAn.all)
1555610209693:library(PEcAn.utils)
1555610209694:library(RCurl)
1555610209852:# make sure always to call status.end
1555610209853:options(warn=1)
1555610209854:options(error=quote({
1555610209855:PEcAn.utils::status.end("ERROR")
1555610209855:PEcAn.remote::kill.tunnel(settings)
1555610209856:if (!interactive()) {
1555610209857:q(status = 1)
1555610209858:}
1555610209859:}))
1555610209860:#options(warning.expression=status.end("ERROR"))
1555610209863:# ----------------------------------------------------------------------
1555610209863:# PEcAn Workflow
1555610209864:# ----------------------------------------------------------------------
1555610209865:# Open and read in settings file for PEcAn run.
1555610209866:args <- commandArgs(trailingOnly = TRUE)
1555610209867:if (is.na(args[1])){
1555610209868:settings <- PEcAn.settings::read.settings("pecan/tests/pecan.clm.params.xml")
1555610209869:} else {
1555610209869:settings.file <- args[1]
1555610209870:settings <- PEcAn.settings::read.settings(settings.file)
1555610209871:}
1555610209893:# Check for additional modules that will require adding settings
1555610209894:if("benchmarking" %in% names(settings)){
1555610209895:library(PEcAn.benchmark)
1555610209896:settings <- papply(settings, read_settings_BRR)
1555610209897:}
1555610209899:if("sitegroup" %in% names(settings)){
1555610209899:if(is.null(settings$sitegroup$nSite)){
1555610209900:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1555610209901:sitegroupId = settings$sitegroup$id)
1555610209902:} else {
1555610209903:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1555610209904:sitegroupId = settings$sitegroup$id,
1555610209904:nSite = settings$sitegroup$nSite)
1555610209905:}
1555610209906:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1555610209907:}
1555610209909:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1555610209910:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1555610210453:# Write pecan.CHECKED.xml
1555610210454:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1555610210511:# start from scratch if no continue is passed in
1555610210512:statusFile <- file.path(settings$outdir, "STATUS")
1555610210513:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1555610210514:file.remove(statusFile)
1555610210515:}
1555610210517:# Do conversions
1555610210517:settings <- PEcAn.workflow::do_conversions(settings)
1555610213279:# Query the trait database for data and priors
1555610213281:if (PEcAn.utils::status.check("TRAIT") == 0){
1555610213283:PEcAn.utils::status.start("TRAIT")
1555610213285:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1555610213287:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1555610213289:PEcAn.utils::status.end()
1555610213291:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1555610213292:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1555610213293:}
1555610216876:# Run the PEcAn meta.analysis
1555610216878:if(!is.null(settings$meta.analysis)) {
1555610216880:if (PEcAn.utils::status.check("META") == 0){
1555610216882:PEcAn.utils::status.start("META")
1555610216884:PEcAn.MA::runModule.run.meta.analysis(settings)
1555610216885:PEcAn.utils::status.end()
1555610216886:}
1555610216887:}
1555610231469:# Write model specific configs
1555610231470:if (PEcAn.utils::status.check("CONFIG") == 0){
1555610231472:PEcAn.utils::status.start("CONFIG")
1555610231473:settings <- PEcAn.workflow::runModule.run.write.configs(settings)
1555610231474:PEcAn.settings::write.settings(settings, outputfile='pecan.CONFIGS.xml')
1555610231476:PEcAn.utils::status.end()
1555610231477:} else if (file.exists(file.path(settings$outdir, 'pecan.CONFIGS.xml'))) {
1555610231478:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.CONFIGS.xml'))
1555610231479:}
1555610462508:# Query the trait database for data and priors
1555610462510:if (PEcAn.utils::status.check("TRAIT") == 0){
1555610462512:PEcAn.utils::status.start("TRAIT")
1555610462514:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1555610462516:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1555610462518:PEcAn.utils::status.end()
1555610462520:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1555610462521:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1555610462522:}
1555610466264:# Run the PEcAn meta.analysis
1555610466266:if(!is.null(settings$meta.analysis)) {
1555610466267:if (PEcAn.utils::status.check("META") == 0){
1555610466268:PEcAn.utils::status.start("META")
1555610466269:PEcAn.MA::runModule.run.meta.analysis(settings)
1555610466270:PEcAn.utils::status.end()
1555610466271:}
1555610466272:}
1555610483240:# Write model specific configs
1555610483242:if (PEcAn.utils::status.check("CONFIG") == 0){
1555610483244:PEcAn.utils::status.start("CONFIG")
1555610483245:settings <- PEcAn.workflow::runModule.run.write.configs(settings)
1555610483247:PEcAn.settings::write.settings(settings, outputfile='pecan.CONFIGS.xml')
1555610483249:PEcAn.utils::status.end()
1555610483250:} else if (file.exists(file.path(settings$outdir, 'pecan.CONFIGS.xml'))) {
1555610483252:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.CONFIGS.xml'))
1555610483253:}
1555690386194:debugonce(PEcAn.workflow::run.write.configs)
1555690403443:source('~/pecan/tests/workflow.R')
1555690407213:source('~/pecan/web/workflow.R')
1555690798010:source("~/pecan/web/workflow.R")
1555690850449:quantile.samples
1555690949564:source("~/pecan/web/workflow.R")
1555691038365:settings$run$site$site.pft
1555691101304:quantile.samples
1555691128606:defined.pfts
1555691165321:con
1555691171468:run.id
1555691176431:ensemble.id
1555691324018:my.write.config
1555691556734:source("~/pecan/web/workflow.R")
1555691637020:source("~/pecan/web/workflow.R")
1555691797881:load("~/clm_params/samples.Rdata")
1555691917316:source('~/pecan/web/workflow.R')
1555691932805:source('~/pecan/web/workflow.R')
1555691946277:source('~/pecan/web/workflow.R')
1555691975784:source('~/pecan/web/workflow.R')
1555691997857:load("~/clm_params/samples.Rdata")
1555692032760:source('~/pecan/web/workflow.R')
1555692043182:load("~/clm_params/samples.Rdata")
1555692554076:source('~/pecan/web/workflow.R')
1555695165890:load("~/clm_params/samples.Rdata")
1555695219406:ls
1555695220908:ls()
1555695245839:write.csv(ensemble.samples, file = "ensemble1.csv")
1555695276478:write.csv(sa.samples, file = "sensitivity1.csv")
1555695304684:ens = read.csv("ensemble1.csv")
1555695306955:View(ens)
1555695333646:load("~/clm_params/samples.Rdata")
1555695337840:write.csv(sa.samples, file = "sensitivity1.csv")
1555695431466:?saveObjec
1555695432896:?saveObject
1555695479267:blabla <- load("~/clm_params/samples.Rdata")
1555695489282:blabla
1555695580306:load("~/clm_params/samples.Rdata")
1555695589422:data.frame(sa.samples)
1555695591938:sa.samples
1555695608963:ensemble.samples
1555695636853:sa.samples$`Setaria WT priors defaults`
1555695647459:write.csv(sa.samples$`Setaria WT priors defaults`, file = "sensitivity1.csv"
1555695649712:)
1555695665850:satest = read.csv("sensitivity1.csv")
1555695669023:View(satest)
1555696896854:load("~/clm_params_defaults_out/samples.Rdata")
1555696908375:View(sa.samples)
1555696911887:View(ensemble.samples)
1555697136400:load("clm_params_defaults_out//samples.Rdata")
1555697141052:load("clm_params_defaults_out/samples.Rdata")
1555697151265:ls()
1555697182960:write.csv(ensemble.samples$`Setaria WT priors defaults`, "clm_params_defaults/ensemble_defaults.csv")
1555697201135:write.csv(sa.samples$`Setaria WT priors defaults`, "clm_params_defaults/sensitivity_defaults.csv")
1555697235461:ens_test <- read.csv("clm_params_defaults/ensemble_defaults.csv")
1555697237957:View(ens_test)
1555697350345:sa_test <- read.csv("clm_params_defaults/sensitivity_defaults.csv")
1555697354556:View(sa_test)
1555698524335:load("~/clm_params_data_out/samples.Rdata")
1555698584406:load("clm_params_data_out/samples.Rdata")
1555698589303:ls()
1555698594881:load("clm_params_data_out/samples.Rdata")
1555698595736:ls()
1555698617653:write.csv(ensemble.samples$`Setaria WT priors defaults`, "clm_params_data/ensemble_defaults.csv")
1555698618894:write.csv(sa.samples$`Setaria WT priors defaults`, "clm_params_data/sensitivity_defaults.csv")
1555698645865:load("~/clm_params_data_out/samples.Rdata")
1555698663315:load("~/clm_params_data_out/samples.Rdata")
1555698672577:load("clm_params_data_out/samples.Rdata")
1555698736651:write.csv(ensemble.samples$`Setaria WT priors data`, "clm_params_data/ensemble_data.csv")
1555698737533:write.csv(sa.samples$`Setaria WT priors data`, "clm_params_data/sensitivity_data.csv")
1556747424774:PEcAn.visualization::plot.netcdf("biocro_results/out/SA-salix-chi_leaf-0.159/2004.nc", "LAI")
1556753421040:PEcAn.visualization::plot.netcdf("biocro_results/out/SA-salix-chi_leaf-0.159/2004.nc", "LAI")
1557342168505:library(dplyr)
1557342181619:# Open up a connection to BETY
1557342181620:bety <-dplyr::src_postgres(host = settings$database$bety$host,
1557342181621:user = settings$database$bety$user,
1557342181622:password = settings$database$bety$password,
1557342181623:dbname = settings$database$bety$dbname)
1557342185773:# Open and read in settings file for PEcAn run.
1557342185775:args <- commandArgs(trailingOnly = TRUE)
1557342186667:if (is.na(args[1])){
1557342186671:settings <- PEcAn.settings::read.settings("pecan/tests/pecan64.sipnet.xml")
1557342186672:} else {
1557342186673:settings.file = args[1]
1557342186674:settings <- PEcAn.settings::read.settings(settings.file)
1557342186675:}
1557342188256:# Open up a connection to BETY
1557342188258:bety <-dplyr::src_postgres(host = settings$database$bety$host,
1557342188260:user = settings$database$bety$user,
1557342188261:password = settings$database$bety$password,
1557342188262:dbname = settings$database$bety$dbname)
1557342228687:settings$database$bety$host
1557342233270:settings$database$bety$user
1557342237424:settings$database$bety$password
1557342240754:settings$database$bety$dbname
1557342262762:# Open up a connection to BETY
1557342262763:bety <-dplyr::src_postgres(host = "postgres",
1557342262765:user = settings$database$bety$user,
1557342262767:password = settings$database$bety$password,
1557342262768:dbname = settings$database$bety$dbname)
1557342264604:# Pull down new parameters distribution from BETY
1557342264606:pfts <- tbl(bety, 'pfts') %>%
1557342264607:transmute(pft_id = id)
1557342270262:View(pfts)
1557342277609:pfts
1557342319356:# Open up a connection to BETY
1557342319358:bety <-dplyr::src_postgres(host = "postgres",
1557342319360:user = "bety",
1557342319362:password = "bety",
1557342319363:dbname = "bety")
1557342526237:all_priors_test <- tbl(bety, 'priors')
1557342533651:library(dplyr)
1557342533916:# Open up a connection to BETY
1557342533918:bety <-dplyr::src_postgres(host = "postgres",
1557342533920:user = "bety",
1557342533922:password = "bety",
1557342533924:dbname = "bety")
1557342535677:all_priors_test <- tbl(bety, 'priors')
1557342539249:all_priors_test
1557342628680:all_pfts_test <- tbl(bety, 'pfts')
1557342631871:all_pfts_test
1557342686826:colnames(all_pfts_test)
1557342708096:all_pfts_test <- tbl(bety, 'pfts') %>%
1557342708098:filter(modeltype_id == 9000000001)
1557342711258:all_pfts_test
1557342749005:all_pfts_test <- tbl(bety, 'pfts') %>%
1557342749007:filter(modeltype_id == 9000000001) %>%
1557342749009:collect()
1557342750913:all_pfts_test
1557342760643:all_priors_test
1557342775865:colnames(all_priors_test)
1557342788193:View(all_pfts_test)
1557342828432:all_priors_test <- tbl(bety, 'priors') %>%
1557342828434:collect()
1557342836146:head(all_priors_test)
1557342840179:View(all_priors_test)
1557344085332:View(all_pfts_test)
1557344095172:options(scipen = 999)
1557344104600:all_pfts_test$id
1557344253367:pft_prior_link <- tbl(bety, 'pfts_priors')
1557344257398:pft_prior_link
1557344270873:all_pfts_test
1557344369093:all_pfts_test$id
1557344385496:pft_ids <- all_pfts_test$id
1557344402338:colnames(pft_prior_link)
1557344437663:unique(pft_prior_link$pft_id)
1557344463870:pft_prior_link <- tbl(bety, 'pfts_priors') %>%
1557344463871:filter(pft_id == pft_ids)
1557344469344:pft_prior_link
1557344484700:pft_ids
1557344491095:pft_prior_link <- tbl(bety, 'pfts_priors') %>%
1557344491097:filter(pft_id == 9000000001)
1557344493351:pft_ids
1557344495550:pft_prior_link
1557344795549:all_pfts_test
1557344831790:pft_prior_link <- tbl(bety, 'pfts_priors') %>%
1557344831792:filter(pft_id == 9000000002)
1557344835322:pft_prior_link
1557344856243:pft_prior_link <- tbl(bety, 'pfts_priors') %>%
1557344856245:filter(pft_id %in% pft_ids)
1557344858306:pft_prior_link
1557344867745:pft_prior_link <- tbl(bety, 'pfts_priors') %>%
1557344867746:filter(pft_id %in% pft_ids) %>%
1557344867747:collect()
1557344869641:pft_prior_link
1557344877250:View(pft_prior_link)
1557344886862:table(pft_prior_link$pft_id)
1557344991776:all_priors_test
1557345038675:pft_prior_link <- tbl(bety, 'pfts_priors') %>%
1557345038677:filter(pft_id %in% all_pfts_test$id) %>%
1557345038679:collect()
1557345042939:pft_prior_link
1557345056016:all_priors_test <- tbl(bety, 'priors') %>%
1557345056018:filter(id %in% pft_prior_link$prior_id) %>%
1557345056020:collect()
1557345059762:all_priors_test
1557345068644:View(all_priors_test)
1557345278650:library(dplyr)
1557345279227:# Open up a connection to BETY
1557345279228:bety <-dplyr::src_postgres(host = "postgres",
1557345279229:user = "bety",
1557345279230:password = "bety",
1557345279231:dbname = "bety")
1557345279487:# Get all priors data for CLM50 PFTs
1557345279488:clm_pfts <- tbl(bety, 'pfts') %>%
1557345279489:filter(modeltype_id == 9000000001) %>%
1557345279490:collect()
1557345279544:pft_prior_link <- tbl(bety, 'pfts_priors') %>%
1557345279545:filter(pft_id %in% clm_pfts$id) %>%
1557345279545:collect()
1557345279571:clm_priors <- tbl(bety, 'priors') %>%
1557345279572:filter(id %in% pft_prior_link$prior_id) %>%
1557345279573:collect()
1557345287643:clm_priors
1557345429327:library(ggplot2)
1557345499736:clm_priors$parama[1]
1557345516307:ggplot(data = data.frame(x = c(0.5, 1.2)), aes(x)) +
1557345516309:stat_function(fun = dnorm, n = 101, args = list(mean = clm_priors$parama[1], sd = clm_priors$paramb[1]))
1557345551582:clm_priors$parama[1] + (0.1 * clm_priors$parama[1])
1557345558818:clm_priors$parama[1] - (0.1 * clm_priors$parama[1])
1557345597068:ggplot(data = data.frame(x = c(clm_priors$parama[1] - (0.1 * clm_priors$parama[1]), clm_priors$parama[1] + (0.1 * clm_priors$parama[1]))), aes(x)) +
1557345597070:stat_function(fun = dnorm, n = 101, args = list(mean = clm_priors$parama[1], sd = clm_priors$paramb[1]))
1557345611315:ggplot(data = data.frame(x = c(clm_priors$parama[1] - (0.25 * clm_priors$parama[1]), clm_priors$parama[1] + (0.25 * clm_priors$parama[1]))), aes(x)) +
1557345611317:stat_function(fun = dnorm, n = 101, args = list(mean = clm_priors$parama[1], sd = clm_priors$paramb[1]))
1557345648841:ggplot(data = data.frame(x = c(clm_priors$parama[1] - (0.5 * clm_priors$parama[1]), clm_priors$parama[1] + (0.5 * clm_priors$parama[1]))), aes(x)) +
1557345648842:stat_function(fun = dnorm, n = 101, args = list(mean = clm_priors$parama[1], sd = clm_priors$paramb[1]))
1557345666909:ggplot(data = data.frame(x = c(clm_priors$parama[1] - (0.35 * clm_priors$parama[1]), clm_priors$parama[1] + (0.35 * clm_priors$parama[1]))), aes(x)) +
1557345666909:stat_function(fun = dnorm, n = 101, args = list(mean = clm_priors$parama[1], sd = clm_priors$paramb[1]))
1557345758845:ggplot(data = data.frame(x = c(clm_priors$parama - (0.35 * clm_priors$parama),
1557345758847:clm_priors$parama + (0.35 * clm_priors$parama))),
1557345758848:aes(x)) +
1557345758849:stat_function(fun = dnorm, n = 101,
1557345758850:args = list(mean = clm_priors$parama, sd = clm_priors$paramb))
1557345777851:ggplot(data = data.frame(x = c(clm_priors$parama - (0.35 * clm_priors$parama),
1557345777852:clm_priors$parama + (0.35 * clm_priors$parama))),
1557345777853:aes(x)) +
1557345777854:stat_function(fun = dnorm, n = 101,
1557345777855:args = list(mean = clm_priors$parama, sd = clm_priors$paramb)) +
1557345777856:facet_wrap(~id)
1557345789152:?facet_wrap
1557345869283:clm_priors[1,]
1557345963935:data.frame(x = c(clm_priors$parama[1] - (0.35 * clm_priors$parama[1]),
1557345963937:clm_priors$parama[1] + (0.35 * clm_priors$parama[1]
1557345966023:)
1557345967418:)
1557345969727:)
1557346078197:ggplot(data = data.frame(x = c(clm_priors$parama - (0.35 * clm_priors$parama),
1557346078199:clm_priors$parama + (0.35 * clm_priors$parama))),
1557346078201:aes(x)) +
1557346078203:stat_function(fun = dnorm, n = 101,
1557346078205:args = list(mean = clm_priors$parama, sd = clm_priors$paramb))
1557346088282:data.frame(x = c(clm_priors$parama - (0.35 * clm_priors$parama),
1557346088284:clm_priors$parama + (0.35 * clm_priors$parama
1557346090565:))
1557346091336:)
1557346532902:ggplot(clm_priors, aes(x = c(parama - (0.35*parama)), parama + (0.35*parama))) +
1557346532904:stat_function(fun = dnorm, n = 101,
1557346532906:args = list(mean = parama, sd = paramb)) +
1557346532908:facet_wrap(~id)
1557346606951:ggplot(clm_priors, aes(x = parama, y = paramb)) +
1557346606953:geom_point()
1557347417224:ggplot(data = data.frame(x = c(-3, 3)), aes(x)) +
1557347417226:geom_point()
1557347861087:library(ggformula)
1557347861244:theme_set(theme_bw())
1557347870801:install.packages("ggformula")
1557348642420:ggplot(data = data.frame(x = c(clm_priors$parama[1] - (0.35 * clm_priors$parama[1]),
1557348642422:clm_priors$parama[1] + (0.35 * clm_priors$parama[1]))),
1557348642424:aes(x)) +
1557348642426:stat_function(fun = dnorm, n = 101,
1557348642428:args = list(mean = clm_priors$parama[1], sd = clm_priors$paramb[1]))
1557348688575:for(row in 1:nrow(clm_priors)){
1557348688577:print(row)
1557348688579:}
1557348706998:for(i in 1:nrow(clm_priors)){
1557348707000:print(i)
1557348707002:}
1557348740673:for(i in 1:nrow(clm_priors)){
1557348740675:ggplot(data = data.frame(x = c(clm_priors$parama[i] - (0.35 * clm_priors$parama[i]),
1557348740677:clm_priors$parama[i] + (0.35 * clm_priors$parama[i]))),
1557348740679:aes(x)) +
1557348740682:stat_function(fun = dnorm, n = 101,
1557348740683:args = list(mean = clm_priors$parama[i], sd = clm_priors$paramb[i]))
1557348740684:}
1557348751312:for(i in 1:nrow(clm_priors)){
1557348751314:ggplot(data = data.frame(x = c(clm_priors$parama[i] - (0.35 * clm_priors$parama[i]),
1557348751315:clm_priors$parama[i] + (0.35 * clm_priors$parama[i]))),
1557348751316:aes(x)) +
1557348751318:stat_function(fun = dnorm, n = 101,
1557348751319:args = list(mean = clm_priors$parama[i], sd = clm_priors$paramb[i]))
1557348751321:}
1557348772093:for(i in 1:nrow(clm_priors)){
1557348772095:param_plot <- ggplot(data = data.frame(x = c(clm_priors$parama[i] - (0.35 * clm_priors$parama[i]),
1557348772096:clm_priors$parama[i] + (0.35 * clm_priors$parama[i]))),
1557348772097:aes(x)) +
1557348772099:stat_function(fun = dnorm, n = 101,
1557348772100:args = list(mean = clm_priors$parama[i], sd = clm_priors$paramb[i]))
1557348772101:print(param_plot)
1557348772103:}
1557348794546:tail(clm_priors)
1557348894605:clm_priors$parama[21] + (0.35 * clm_priors$parama[21])
1557348909892:clm_priors$parama[21]
1557348915031:(0.35 * clm_priors$parama[21])
1557428510467:library(dplyr)
1557428510706:library(ggplot2)
1557428511558:# Open up a connection to BETY
1557428511559:bety <-dplyr::src_postgres(host = "postgres",
1557428511560:user = "bety",
1557428511561:password = "bety",
1557428511562:dbname = "bety")
1557428512610:# Get all priors data for CLM50 PFTs
1557428512611:clm_pfts <- tbl(bety, 'pfts') %>%
1557428512612:filter(modeltype_id == 9000000001) %>%
1557428512613:collect()
1557428513276:pft_prior_link <- tbl(bety, 'pfts_priors') %>%
1557428513278:filter(pft_id %in% clm_pfts$id) %>%
1557428513279:collect()
1557428513783:clm_priors <- tbl(bety, 'priors') %>%
1557428513785:filter(id %in% pft_prior_link$prior_id) %>%
1557428513786:collect()
1557428514905:for(i in 1:nrow(clm_priors)){
1557428514907:param_plot <- ggplot(data = data.frame(x = c(clm_priors$parama[i] - (0.35 * clm_priors$parama[i]),
1557428514908:clm_priors$parama[i] + (0.35 * clm_priors$parama[i]))),
1557428514910:aes(x)) +
1557428514911:stat_function(fun = dnorm, n = 101,
1557428514913:args = list(mean = clm_priors$parama[i], sd = clm_priors$paramb[i]))
1557428514915:print(param_plot)
1557428514917:}
1557428526996:library(gridExtra)
1557428536577:p = list()
1557428597228:for(i in 1:nrow(clm_priors)){
1557428597230:p[[i]] <- ggplot(data = data.frame(x = c(clm_priors$parama[i] - (0.35 * clm_priors$parama[i]),
1557428597232:clm_priors$parama[i] + (0.35 * clm_priors$parama[i]))),
1557428597234:aes(x)) +
1557428597236:stat_function(fun = dnorm, n = 101,
1557428597238:args = list(mean = clm_priors$parama[i], sd = clm_priors$paramb[i]))
1557428597239:}
1557428607446:p
1557428618125:p[[i]]
1557428624728:p[[1]]
1557428643842:?do.call
1557428661186:?grid.arrange
1557428682400:class(p)
1557428685032:class(p[[1]])
1557428694036:do.call(grid.arrange, p)
1557428963392:?labs
1557429040096:p = list()
1557429040290:for(i in 1:nrow(clm_priors)){
1557429040293:p[[i]] <- ggplot(data = data.frame(x = c(clm_priors$parama[i] - (0.35 * clm_priors$parama[i]),
1557429040296:clm_priors$parama[i] + (0.35 * clm_priors$parama[i]))), aes(x)) +
1557429040299:stat_function(fun = dnorm, n = 101, args = list(mean = clm_priors$parama[i],
1557429040302:sd = clm_priors$paramb[i])) +
1557429040303:labs(x = "", y = "")
1557429040304:}
1557429040779:do.call(grid.arrange, p)
1557429126643:p = list()
1557429126919:for(i in 1:nrow(clm_priors)){
1557429126921:p[[i]] <- ggplot(data = data.frame(x = c(clm_priors$parama[i] - (0.35 * clm_priors$parama[i]),
1557429126922:clm_priors$parama[i] + (0.35 * clm_priors$parama[i]))), aes(x)) +
1557429126924:stat_function(fun = dnorm, n = 101, args = list(mean = clm_priors$parama[i],
1557429126925:sd = clm_priors$paramb[i])) +
1557429126926:labs(x = "", y = "") +
1557429126928:theme(axis.title.y = element_blank(),
1557429126929:axis.text.y = element_blank(),
1557429126930:axis.ticks.y = element_blank())
1557429126932:}
1557429129260:do.call(grid.arrange, p)
1557429159428:clm_priors
1557429167599:View(clm_priors)
1557429233314:clm_priors$variable_id
1557429239987:options(scipen = 999)
1557429240830:clm_priors$variable_id
1557429279259:clm_variables <- tbl(bety, 'variables')
1557429282822:clm_variables
1557429302274:clm_variables <- tbl(bety, 'variables') %>%
1557429302276:collect()
1557429304410:View(clm_variables)
1557429366123:?left_join
1557429481356:head(clm_priors)
1557429487501:head(clm_variables)
1557429645653:colnames(clm_variables)
1557429678260:clm_priors_2 <- left_join(clm_priors, clm_variables, by = c("variable_id" = "id"))
1557429741088:View(clm_priors_2)
1557429943672:clm_variables <- tbl(bety, 'variables') %>%
1557429943674:select(id, name) %>%
1557429943676:collect()
1557429947943:clm_variables
1557429963910:clm_priors_2 <- left_join(clm_priors, clm_variables, by = c("variable_id" = "id"))
1557429967126:View(clm_priors_2)
1557429980028:clm_priors_2$name
1557429986941:clm_priors <- left_join(clm_priors, clm_variables, by = c("variable_id" = "id"))
1557429989694:p = list()
1557429989883:for(i in 1:nrow(clm_priors)){
1557429989885:p[[i]] <- ggplot(data = data.frame(x = c(clm_priors$parama[i] - (0.35 * clm_priors$parama[i]),
1557429989887:clm_priors$parama[i] + (0.35 * clm_priors$parama[i]))), aes(x)) +
1557429989889:stat_function(fun = dnorm, n = 101, args = list(mean = clm_priors$parama[i],
1557429989891:sd = clm_priors$paramb[i])) +
1557429989893:labs(x = "", y = "", title = clm_priors$name) +
1557429989895:theme(axis.title.y = element_blank(),
1557429989896:axis.text.y = element_blank(),
1557429989897:axis.ticks.y = element_blank())
1557429989898:}
1557429990560:do.call(grid.arrange, p)
1557430017000:p = list()
1557430017184:for(i in 1:nrow(clm_priors)){
1557430017186:p[[i]] <- ggplot(data = data.frame(x = c(clm_priors$parama[i] - (0.35 * clm_priors$parama[i]),
1557430017188:clm_priors$parama[i] + (0.35 * clm_priors$parama[i]))), aes(x)) +
1557430017190:stat_function(fun = dnorm, n = 101, args = list(mean = clm_priors$parama[i],
1557430017192:sd = clm_priors$paramb[i])) +
1557430017194:labs(x = "", y = "", title = clm_priors$name[i]) +
1557430017195:theme(axis.title.y = element_blank(),
1557430017196:axis.text.y = element_blank(),
1557430017197:axis.ticks.y = element_blank())
1557430017198:}
1557430017843:do.call(grid.arrange, p)
1557430149429:clm_variables <- tbl(bety, 'variables') %>%
1557430149431:select(id, name, units) %>%
1557430149433:collect()
1557430182001:clm_variables
1557430188568:clm_variables <- tbl(bety, 'variables') %>%
1557430188570:select(id, name, units) %>%
1557430188571:collect()
1557430188904:clm_priors <- left_join(clm_priors, clm_variables, by = c("variable_id" = "id"))
1557430209461:p = list()
1557430209737:for(i in 1:nrow(clm_priors)){
1557430209739:p[[i]] <- ggplot(data = data.frame(x = c(clm_priors$parama[i] - (0.35 * clm_priors$parama[i]),
1557430209741:clm_priors$parama[i] + (0.35 * clm_priors$parama[i]))), aes(x)) +
1557430209743:stat_function(fun = dnorm, n = 101, args = list(mean = clm_priors$parama[i],
1557430209745:sd = clm_priors$paramb[i])) +
1557430209748:labs(x = clm_priors$units[i], y = "", title = clm_priors$name[i]) +
1557430209749:theme(axis.title.y = element_blank(),
1557430209750:axis.text.y = element_blank(),
1557430209751:axis.ticks.y = element_blank())
1557430209753:}
1557430210414:do.call(grid.arrange, p)
1557430234779:p = list()
1557430235228:for(i in 1:nrow(clm_priors)){
1557430235230:p[[i]] <- ggplot(data = data.frame(x = c(clm_priors$parama[i] - (0.35 * clm_priors$parama[i]),
1557430235232:clm_priors$parama[i] + (0.35 * clm_priors$parama[i]))), aes(x)) +
1557430235234:stat_function(fun = dnorm, n = 101, args = list(mean = clm_priors$parama[i],
1557430235236:sd = clm_priors$paramb[i])) +
1557430235238:labs(x = clm_priors$units[i], y = "", title = clm_priors$name[i]) +
1557430235240:theme(axis.title.y = element_blank(),
1557430235242:axis.text.y = element_blank(),
1557430235243:axis.ticks.y = element_blank())
1557430235244:}
1557430239421:warnings()
1557430245724:library(dplyr)
1557430246342:library(ggplot2)
1557430246503:library(gridExtra)
1557430246518:# Open up a connection to BETY
1557430246519:bety <-dplyr::src_postgres(host = "postgres",
1557430246520:user = "bety",
1557430246521:password = "bety",
1557430246522:dbname = "bety")
1557430246817:# Get all priors data for CLM50 PFTs
1557430246818:clm_pfts <- tbl(bety, 'pfts') %>%
1557430246819:filter(modeltype_id == 9000000001) %>%
1557430246820:collect()
1557430247190:pft_prior_link <- tbl(bety, 'pfts_priors') %>%
1557430247192:filter(pft_id %in% clm_pfts$id) %>%
1557430247194:collect()
1557430247585:clm_priors <- tbl(bety, 'priors') %>%
1557430247587:filter(id %in% pft_prior_link$prior_id) %>%
1557430247590:collect()
1557430248028:clm_variables <- tbl(bety, 'variables') %>%
1557430248030:select(id, name, units) %>%
1557430248033:collect()
1557430248649:clm_priors <- left_join(clm_priors, clm_variables, by = c("variable_id" = "id"))
1557430249983:p = list()
1557430251008:for(i in 1:nrow(clm_priors)){
1557430251010:p[[i]] <- ggplot(data = data.frame(x = c(clm_priors$parama[i] - (0.35 * clm_priors$parama[i]),
1557430251012:clm_priors$parama[i] + (0.35 * clm_priors$parama[i]))), aes(x)) +
1557430251015:stat_function(fun = dnorm, n = 101, args = list(mean = clm_priors$parama[i],
1557430251017:sd = clm_priors$paramb[i])) +
1557430251019:labs(x = clm_priors$units[i], y = "", title = clm_priors$name[i]) +
1557430251022:theme(axis.title.y = element_blank(),
1557430251023:axis.text.y = element_blank(),
1557430251025:axis.ticks.y = element_blank())
1557430251027:}
1557430251794:do.call(grid.arrange, p)
1557430296509:clm_priors
1557430303640:table(clm_priors$id)
1557430318191:clm_pfts$id
1557433027001:clm_pfts
1557433081639:View(clm_pfts)
1557435862185:View(clm_pfts)
1557435897010:pft_prior_link
1557436099596:pft_prior_link
1557436122701:colnames(clm_pfts)
1557436143937:# Get all priors data for CLM50 PFTs
1557436143939:clm_pfts <- tbl(bety, 'pfts') %>%
1557436143940:filter(modeltype_id == 9000000001) %>%
1557436143942:select(id, name) %>%
1557436143944:collect()
1557436146139:pft_prior_link <- tbl(bety, 'pfts_priors') %>%
1557436146141:filter(pft_id %in% clm_pfts$id) %>%
1557436146143:collect()
1557436192716:pft_prior_link
1557436195007:clm_pfts
1557436219601:left_join(pft_prior_link, clm_pfts, by = c("pft_id" = "id"))
1557436240679:pft_prior_combined <- left_join(pft_prior_link, clm_pfts, by = c("pft_id" = "id"))
1557436244141:pft_prior_combined
1557436250194:table(pft_prior_combined$name)
1557436385056:# Get all priors data for CLM50 PFTs
1557436385058:clm_pfts <- tbl(bety, 'pfts') %>%
1557436385060:filter(modeltype_id == 9000000001) %>%
1557436385062:select(id, name) %>%
1557436385064:collect()
1557436385608:pft_prior_link <- tbl(bety, 'pfts_priors') %>%
1557436385610:#filter(pft_id %in% clm_pfts$id) %>%
1557436385612:collect()
1557436386981:pft_prior_combined <- left_join(pft_prior_link, clm_pfts, by = c("pft_id" = "id"))
1557436391093:pft_prior_combined
1557436414346:library(dplyr)
1557436414931:library(ggplot2)
1557436415113:library(gridExtra)
1557436415128:# Open up a connection to BETY
1557436415129:bety <-dplyr::src_postgres(host = "postgres",
1557436415130:user = "bety",
1557436415131:password = "bety",
1557436415132:dbname = "bety")
1557436415814:# Get all priors data for CLM50 PFTs
1557436415816:clm_pfts <- tbl(bety, 'pfts') %>%
1557436415818:filter(modeltype_id == 9000000001) %>%
1557436415819:select(id, name) %>%
1557436415820:collect()
1557436416174:pft_prior_link <- tbl(bety, 'pfts_priors') %>%
1557436416176:filter(pft_id %in% clm_pfts$id) %>%
1557436416178:collect()
1557436416646:pft_prior_combined <- left_join(pft_prior_link, clm_pfts, by = c("pft_id" = "id"))
1557436427431:View(pft_prior_combined)
1557436457911:clm_priors <- tbl(bety, 'priors') %>%
1557436457913:filter(id %in% pft_prior_link$prior_id) %>%
1557436457915:collect()
1557436462391:clm_priors
1557436475966:clm_priors <- tbl(bety, 'priors') %>%
1557436475969:filter(id %in% pft_prior_combined$prior_id) %>%
1557436475971:collect()
1557436503904:clm_priors
1557436526819:clm_priors <- tbl(bety, 'priors') %>%
1557436526821:filter(id %in% pft_prior_link$prior_id) %>%
1557436526823:collect()
1557436579843:clm_priors
1557436583800:pft_prior_combined
1557436649452:blabla <- left_join(clm_priors, pft_prior_combined, by = c("id" = "prior_id"))
1557436653907:blabla
1557436668339:table(blabla$name)
1557436890740:colnames(blabla)
1557436906717:library(dplyr)
1557436907282:library(ggplot2)
1557436907451:library(gridExtra)
1557436907466:# Open up a connection to BETY
1557436907468:bety <-dplyr::src_postgres(host = "postgres",
1557436907469:user = "bety",
1557436907470:password = "bety",
1557436907471:dbname = "bety")
1557436908320:# Get all priors data for CLM50 PFTs
1557436908322:clm_pfts <- tbl(bety, 'pfts') %>%
1557436908324:filter(modeltype_id == 9000000001) %>%
1557436908326:select(id, name) %>%
1557436908327:collect()
1557436909089:pft_prior_link <- tbl(bety, 'pfts_priors') %>%
1557436909091:filter(pft_id %in% clm_pfts$id) %>%
1557436909092:collect()
1557436909591:pft_prior_combined <- left_join(pft_prior_link, clm_pfts, by = c("pft_id" = "id"))
1557436909990:clm_priors <- tbl(bety, 'priors') %>%
1557436909991:filter(id %in% pft_prior_link$prior_id) %>%
1557436909994:collect()
1557436911002:blabla <- left_join(clm_priors, pft_prior_combined, by = c("id" = "prior_id"))
1557436927774:blabla
1557436944894:clm_variables <- tbl(bety, 'variables') %>%
1557436944895:select(id, name, units) %>%
1557436944896:collect()
1557436956718:clm_priors <- left_join(blabla, clm_variables, by = c("variable_id" = "id"))
1557436968052:View(clm_priors)
1557437074194:library(dplyr)
1557437074813:library(ggplot2)
1557437074985:library(gridExtra)
1557437075001:# Open up a connection to BETY
1557437075002:bety <-dplyr::src_postgres(host = "postgres",
1557437075003:user = "bety",
1557437075004:password = "bety",
1557437075005:dbname = "bety")
1557437076020:# Get all priors data for CLM50 PFTs
1557437076022:clm_pfts <- tbl(bety, 'pfts') %>%
1557437076024:filter(modeltype_id == 9000000001) %>%
1557437076026:select(id, name) %>%
1557437076027:collect()
1557437076589:pft_prior_link <- tbl(bety, 'pfts_priors') %>%
1557437076591:filter(pft_id %in% clm_pfts$id) %>%
1557437076592:collect()
1557437077162:pft_prior_combined <- left_join(pft_prior_link, clm_pfts, by = c("pft_id" = "id"))
1557437077870:blabla <- tbl(bety, 'priors') %>%
1557437077872:filter(id %in% pft_prior_link$prior_id) %>%
1557437077874:collect()
1557437078631:blabla2 <- left_join(blabla, pft_prior_combined, by = c("id" = "prior_id"))
1557437079453:clm_variables <- tbl(bety, 'variables') %>%
1557437079456:select(id, name, units) %>%
1557437079457:collect()
1557437080715:clm_priors <- left_join(blabla2, clm_variables, by = c("variable_id" = "id"))
1557437087012:View(clm_priors)
1557437115007:p = list()
1557437115420:#add for for each of the two pfts
1557437115422:for(i in 1:nrow(clm_priors)){
1557437115423:p[[i]] <- ggplot(data = data.frame(x = c(clm_priors$parama[i] - (0.35 * clm_priors$parama[i]),
1557437115425:clm_priors$parama[i] + (0.35 * clm_priors$parama[i]))), aes(x)) +
1557437115426:stat_function(fun = dnorm, n = 101, args = list(mean = clm_priors$parama[i],
1557437115427:sd = clm_priors$paramb[i])) +
1557437115429:labs(x = clm_priors$units[i], y = "", title = clm_priors$name.y[i]) +
1557437115430:theme(axis.title.y = element_blank(),
1557437115431:axis.text.y = element_blank(),
1557437115432:axis.ticks.y = element_blank())
1557437115433:}
1557437116669:do.call(grid.arrange, p)
1557437143974:clm_priors
1557437169374:clm_priors$name.x
1557437198783:for(pft_name in unique(clm_priors$name.x)){
1557437198784:print(pft_name)
1557437198786:}
1557437274398:for(pft_name in unique(clm_priors$name.x)){
1557437274400:for(i in 1:nrow(clm_priors)){
1557437274402:p[[i]] <- ggplot(data = data.frame(x = c(clm_priors$parama[i] - (0.35 * clm_priors$parama[i]),
1557437274404:clm_priors$parama[i] + (0.35 * clm_priors$parama[i]))), aes(x)) +
1557437274406:stat_function(fun = dnorm, n = 101, args = list(mean = clm_priors$parama[i],
1557437274408:sd = clm_priors$paramb[i])) +
1557437274409:labs(x = clm_priors$units[i], y = "", title = clm_priors$name.y[i]) +
1557437274411:theme(axis.title.y = element_blank(),
1557437274412:axis.text.y = element_blank(),
1557437274414:axis.ticks.y = element_blank())
1557437274415:}
1557437274416:}
1557437285979:p = list()
1557437286318:for(pft_name in unique(clm_priors$name.x)){
1557437286320:for(i in 1:nrow(clm_priors)){
1557437286322:p[[i]] <- ggplot(data = data.frame(x = c(clm_priors$parama[i] - (0.35 * clm_priors$parama[i]),
1557437286324:clm_priors$parama[i] + (0.35 * clm_priors$parama[i]))), aes(x)) +
1557437286325:stat_function(fun = dnorm, n = 101, args = list(mean = clm_priors$parama[i],
1557437286326:sd = clm_priors$paramb[i])) +
1557437286327:labs(x = clm_priors$units[i], y = "", title = clm_priors$name.y[i]) +
1557437286328:theme(axis.title.y = element_blank(),
1557437286329:axis.text.y = element_blank(),
1557437286330:axis.ticks.y = element_blank())
1557437286332:}
1557437286333:}
1557437287412:do.call(grid.arrange, p)
1557437379308:p
1557437402369:unique(clm_priors$name.x)
1557437423004:do.call(grid.arrange, p)
1557437470795:p = list()
1557437471325:for(pft_name in unique(clm_priors$name.x)){
1557437471327:for(i in 1:nrow(clm_priors)){
1557437471329:p[[i]] <- ggplot(data = data.frame(x = c(clm_priors$parama[i] - (0.35 * clm_priors$parama[i]),
1557437471331:clm_priors$parama[i] + (0.35 * clm_priors$parama[i]))), aes(x)) +
1557437471333:stat_function(fun = dnorm, n = 101, args = list(mean = clm_priors$parama[i],
1557437471335:sd = clm_priors$paramb[i])) +
1557437471336:labs(x = clm_priors$units[i], y = "", title = paste(clm_priors$name.x[i], clm_priors$name.y[i])) +
1557437471337:theme(axis.title.y = element_blank(),
1557437471338:axis.text.y = element_blank(),
1557437471340:axis.ticks.y = element_blank())
1557437471341:}
1557437471342:}
1557437472246:do.call(grid.arrange, p)
1557437537886:clm_priors
1557437547141:clm_priors$name.x
1557437617351:for(pft_name in unique(clm_priors$name.x)){
1557437617352:clm_priors_by_pft = filter(clm_priors, name.x == pft_name)
1557437617353:print(clm_priors_by_pft)
1557437617354:# for(i in 1:nrow(clm_priors_by_pft)){
1557437617355:#   p[[i]] <- ggplot(data = data.frame(x = c(clm_priors_by_pft$parama[i] - (0.35 * clm_priors_by_pft$parama[i]),
1557437617356:#                                  clm_priors_by_pft$parama[i] + (0.35 * clm_priors_by_pft$parama[i]))), aes(x)) +
1557437617357:#     stat_function(fun = dnorm, n = 101, args = list(mean = clm_priors_by_pft$parama[i],
1557437617358:#                                                     sd = clm_priors_by_pft$paramb[i])) +
1557437617362:#     labs(x = clm_priors_by_pft$units[i], y = "", title = paste(clm_priors_by_pft$name.x[i], clm_priors_by_pft$name.y[i])) +
1557437617363:#     theme(axis.title.y = element_blank(),
1557437617364:#           axis.text.y = element_blank(),
1557437617365:#           axis.ticks.y = element_blank())
1557437617366:# }
1557437617367:}
1557437629586:for(pft_name in unique(clm_priors$name.x)){
1557437629588:clm_priors_by_pft = filter(clm_priors, name.x == pft_name)
1557437629590:print(clm_priors_by_pft$name.x)
1557437629592:# for(i in 1:nrow(clm_priors_by_pft)){
1557437629593:#   p[[i]] <- ggplot(data = data.frame(x = c(clm_priors_by_pft$parama[i] - (0.35 * clm_priors_by_pft$parama[i]),
1557437629594:#                                  clm_priors_by_pft$parama[i] + (0.35 * clm_priors_by_pft$parama[i]))), aes(x)) +
1557437629595:#     stat_function(fun = dnorm, n = 101, args = list(mean = clm_priors_by_pft$parama[i],
1557437629596:#                                                     sd = clm_priors_by_pft$paramb[i])) +
1557437629597:#     labs(x = clm_priors_by_pft$units[i], y = "", title = paste(clm_priors_by_pft$name.x[i], clm_priors_by_pft$name.y[i])) +
1557437629598:#     theme(axis.title.y = element_blank(),
1557437629599:#           axis.text.y = element_blank(),
1557437629600:#           axis.ticks.y = element_blank())
1557437629601:# }
1557437629602:}
1557437668046:for(pft_name in unique(clm_priors$name.x)){
1557437668048:clm_priors_by_pft = filter(clm_priors, name.x == pft_name)
1557437668050:p = list()
1557437668051:for(i in 1:nrow(clm_priors_by_pft)){
1557437668053:p[[i]] <- ggplot(data = data.frame(x = c(clm_priors_by_pft$parama[i] - (0.35 * clm_priors_by_pft$parama[i]),
1557437668055:clm_priors_by_pft$parama[i] + (0.35 * clm_priors_by_pft$parama[i]))), aes(x)) +
1557437668057:stat_function(fun = dnorm, n = 101, args = list(mean = clm_priors_by_pft$parama[i],
1557437668059:sd = clm_priors_by_pft$paramb[i])) +
1557437668060:labs(x = clm_priors_by_pft$units[i], y = "", title = paste(clm_priors_by_pft$name.x[i], clm_priors_by_pft$name.y[i])) +
1557437668061:theme(axis.title.y = element_blank(),
1557437668062:axis.text.y = element_blank(),
1557437668063:axis.ticks.y = element_blank())
1557437668064:}
1557437668066:do.call(grid.arrange, p)
1557437668067:}
1557437797905:for(pft_name in unique(clm_priors$name.x)){
1557437797907:clm_priors_by_pft = filter(clm_priors, name.x == pft_name)
1557437797910:p = list()
1557437797911:for(i in 1:nrow(clm_priors_by_pft)){
1557437797914:p[[i]] <- ggplot(data = data.frame(x = c(clm_priors_by_pft$parama[i] - (0.35 * clm_priors_by_pft$parama[i]),
1557437797916:clm_priors_by_pft$parama[i] + (0.35 * clm_priors_by_pft$parama[i]))), aes(x)) +
1557437797918:stat_function(fun = dnorm, n = 101, args = list(mean = clm_priors_by_pft$parama[i],
1557437797919:sd = clm_priors_by_pft$paramb[i])) +
1557437797921:labs(x = paste(clm_priors_by_pft$name.y[i], "(", clm_priors_by_pft$units[i], ")"), y = "") +
1557437797922:theme(axis.title.y = element_blank(),
1557437797923:axis.text.y = element_blank(),
1557437797925:axis.ticks.y = element_blank())
1557437797926:}
1557437797928:do.call(grid.arrange, p)
1557437797929:}
1557437824295:for(pft_name in unique(clm_priors$name.x)){
1557437824296:clm_priors_by_pft = filter(clm_priors, name.x == pft_name)
1557437824297:p = list()
1557437824298:for(i in 1:nrow(clm_priors_by_pft)){
1557437824299:p[[i]] <- ggplot(data = data.frame(x = c(clm_priors_by_pft$parama[i] - (0.5 * clm_priors_by_pft$parama[i]),
1557437824300:clm_priors_by_pft$parama[i] + (0.5 * clm_priors_by_pft$parama[i]))), aes(x)) +
1557437824301:stat_function(fun = dnorm, n = 101, args = list(mean = clm_priors_by_pft$parama[i],
1557437824302:sd = clm_priors_by_pft$paramb[i])) +
1557437824303:labs(x = paste(clm_priors_by_pft$name.y[i], "(", clm_priors_by_pft$units[i], ")"), y = "") +
1557437824304:theme(axis.title.y = element_blank(),
1557437824305:axis.text.y = element_blank(),
1557437824306:axis.ticks.y = element_blank())
1557437824307:}
1557437824309:do.call(grid.arrange, p)
1557437824310:}
1557437869353:for(pft_name in unique(clm_priors$name.x)){
1557437869355:clm_priors_by_pft = filter(clm_priors, name.x == pft_name)
1557437869357:p = list()
1557437869359:for(i in 1:nrow(clm_priors_by_pft)){
1557437869361:p[[i]] <- ggplot(data = data.frame(x = c(clm_priors_by_pft$parama[i] - (0.35 * clm_priors_by_pft$parama[i]),
1557437869363:clm_priors_by_pft$parama[i] + (0.35 * clm_priors_by_pft$parama[i]))), aes(x)) +
1557437869365:stat_function(fun = dnorm, n = 101, args = list(mean = clm_priors_by_pft$parama[i],
1557437869366:sd = clm_priors_by_pft$paramb[i])) +
1557437869367:labs(x = paste0(clm_priors_by_pft$name.y[i], " (", clm_priors_by_pft$units[i], ")"), y = "") +
1557437869369:theme(axis.title.y = element_blank(),
1557437869371:axis.text.y = element_blank(),
1557437869372:axis.ticks.y = element_blank())
1557437869374:}
1557437869375:do.call(grid.arrange, p)
1557437869377:}
1557437977873:theme_set()
1557437981299:?theme_set()
1557438015248:library(dplyr)
1557438016096:library(ggplot2)
1557438016257:library(gridExtra)
1557438016269:theme_set(theme_bw())
1557438017621:# Open up a connection to BETY
1557438017622:bety <-dplyr::src_postgres(host = "postgres",
1557438017623:user = "bety",
1557438017624:password = "bety",
1557438017625:dbname = "bety")
1557438017982:# Get all priors data for CLM50 PFTs
1557438017983:clm_pfts <- tbl(bety, 'pfts') %>%
1557438017983:filter(modeltype_id == 9000000001) %>%
1557438017984:select(id, name) %>%
1557438017985:collect()
1557438018318:pft_prior_link <- tbl(bety, 'pfts_priors') %>%
1557438018319:filter(pft_id %in% clm_pfts$id) %>%
1557438018320:collect()
1557438018728:pft_prior_combined <- left_join(pft_prior_link, clm_pfts, by = c("pft_id" = "id"))
1557438019132:blabla <- tbl(bety, 'priors') %>%
1557438019133:filter(id %in% pft_prior_link$prior_id) %>%
1557438019134:collect()
1557438019559:blabla2 <- left_join(blabla, pft_prior_combined, by = c("id" = "prior_id"))
1557438020096:clm_variables <- tbl(bety, 'variables') %>%
1557438020097:select(id, name, units) %>%
1557438020098:collect()
1557438020674:clm_priors <- left_join(blabla2, clm_variables, by = c("variable_id" = "id"))
1557438022345:for(pft_name in unique(clm_priors$name.x)){
1557438022346:clm_priors_by_pft = filter(clm_priors, name.x == pft_name)
1557438022347:p = list()
1557438022348:for(i in 1:nrow(clm_priors_by_pft)){
1557438022349:p[[i]] <- ggplot(data = data.frame(x = c(clm_priors_by_pft$parama[i] - (0.35 * clm_priors_by_pft$parama[i]),
1557438022352:clm_priors_by_pft$parama[i] + (0.35 * clm_priors_by_pft$parama[i]))), aes(x)) +
1557438022353:stat_function(fun = dnorm, n = 101, args = list(mean = clm_priors_by_pft$parama[i],
1557438022354:sd = clm_priors_by_pft$paramb[i])) +
1557438022355:labs(x = paste0(clm_priors_by_pft$name.y[i], " (", clm_priors_by_pft$units[i], ")"), y = "") +
1557438022356:theme(axis.title.y = element_blank(),
1557438022357:axis.text.y = element_blank(),
1557438022358:axis.ticks.y = element_blank())
1557438022359:}
1557438022360:do.call(grid.arrange, p)
1557438022360:}
1557438339102:View(clm_priors_by_pft)
1557438482082:library(dplyr)
1557438482716:library(ggplot2)
1557438482852:library(gridExtra)
1557438482865:theme_set(theme_bw())
1557438482877:# Open up a connection to BETY
1557438482878:bety <-dplyr::src_postgres(host = "postgres",
1557438482880:user = "bety",
1557438482881:password = "bety",
1557438482882:dbname = "bety")
1557438483140:# Get all priors data for CLM50 PFTs
1557438483141:clm_pfts <- tbl(bety, 'pfts') %>%
1557438483142:filter(modeltype_id == 9000000001) %>%
1557438483143:select(id, name) %>%
1557438483144:collect()
1557438483208:pft_prior_link <- tbl(bety, 'pfts_priors') %>%
1557438483209:filter(pft_id %in% clm_pfts$id) %>%
1557438483210:collect()
1557438483256:pft_prior_combined <- left_join(pft_prior_link, clm_pfts, by = c("pft_id" = "id"))
1557438483261:clm_priors <- tbl(bety, 'priors') %>%
1557438483262:filter(id %in% pft_prior_link$prior_id) %>%
1557438483263:collect()
1557438483301:clm_priors_extended <- left_join(clm_priors, pft_prior_combined, by = c("id" = "prior_id"))
1557438483304:clm_variables <- tbl(bety, 'variables') %>%
1557438483305:select(id, name, units) %>%
1557438483306:collect()
1557438483334:clm_priors_full <- left_join(clm_priors_extended, clm_variables, by = c("variable_id" = "id"))
1557438483338:# Plot distributions
1557438483339:#add in functionality to choose which type of distribution to plot based on distn column
1557438483341:for(pft_name in unique(clm_priors_full$name.x)){
1557438483342:clm_priors_by_pft = filter(clm_priors_full, name.x == pft_name)
1557438483343:p = list()
1557438483344:for(i in 1:nrow(clm_priors_by_pft)){
1557438483345:p[[i]] <- ggplot(data = data.frame(x = c(clm_priors_by_pft$parama[i] - (0.35 * clm_priors_by_pft$parama[i]),
1557438483347:clm_priors_by_pft$parama[i] + (0.35 * clm_priors_by_pft$parama[i]))), aes(x)) +
1557438483348:stat_function(fun = dnorm, n = 101, args = list(mean = clm_priors_by_pft$parama[i],
1557438483348:sd = clm_priors_by_pft$paramb[i])) +
1557438483349:labs(x = paste0(clm_priors_by_pft$name.y[i], " (", clm_priors_by_pft$units[i], ")"), y = "") +
1557438483351:theme(axis.title.y = element_blank(),
1557438483352:axis.text.y = element_blank(),
1557438483353:axis.ticks.y = element_blank())
1557438483354:}
1557438483355:do.call(grid.arrange, p)
1557438483356:}
1557439045936:unique(clm_priors_full$distn)
1557439052679:?dnorm
1557439141615:colnames(clm_priors_full)
1557439165961:clm_priors_full <- left_join(clm_priors_extended, clm_variables, by = c("variable_id" = "id")) %>%
1557439165963:mutate(distn_r = paste0("d", distn))
1557439168911:View(clm_priors_full)
1557439225570:for(pft_name in unique(clm_priors_full$name.x)){
1557439225571:clm_priors_by_pft = filter(clm_priors_full, name.x == pft_name)
1557439225572:p = list()
1557439225573:for(i in 1:nrow(clm_priors_by_pft)){
1557439225574:p[[i]] <- ggplot(data = data.frame(x = c(clm_priors_by_pft$parama[i] - (0.35 * clm_priors_by_pft$parama[i]),
1557439225575:clm_priors_by_pft$parama[i] + (0.35 * clm_priors_by_pft$parama[i]))), aes(x)) +
1557439225576:stat_function(fun = clm_priors_by_pft$distn_r[i], n = 101, args = list(mean = clm_priors_by_pft$parama[i],
1557439225577:sd = clm_priors_by_pft$paramb[i])) +
1557439225579:labs(x = paste0(clm_priors_by_pft$name.y[i], " (", clm_priors_by_pft$units[i], ")"), y = "") +
1557439225580:theme(axis.title.y = element_blank(),
1557439225581:axis.text.y = element_blank(),
1557439225582:axis.ticks.y = element_blank())
1557439225583:}
1557439225584:do.call(grid.arrange, p)
1557439225585:}
1557439923761:list(mean = clm_priors_by_pft$parama[1], sd = clm_priors_by_pft$paramb[1])
1557439935730:list(clm_priors_by_pft$parama[1], clm_priors_by_pft$paramb[1])
1557439951631:for(pft_name in unique(clm_priors_full$name.x)){
1557439951634:clm_priors_by_pft = filter(clm_priors_full, name.x == pft_name)
1557439951636:p = list()
1557439951638:for(i in 1:nrow(clm_priors_by_pft)){
1557439951640:p[[i]] <- ggplot(data = data.frame(x = c(clm_priors_by_pft$parama[i] - (0.35 * clm_priors_by_pft$parama[i]),
1557439951641:clm_priors_by_pft$parama[i] + (0.35 * clm_priors_by_pft$parama[i]))), aes(x)) +
1557439951642:stat_function(fun = clm_priors_by_pft$distn_r[i], n = 101, args = list(clm_priors_by_pft$parama[i],
1557439951643:clm_priors_by_pft$paramb[i])) +
1557439951644:labs(x = paste0(clm_priors_by_pft$name.y[i], " (", clm_priors_by_pft$units[i], ")"), y = "") +
1557439951645:theme(axis.title.y = element_blank(),
1557439951647:axis.text.y = element_blank(),
1557439951648:axis.ticks.y = element_blank())
1557439951649:}
1557439951650:do.call(grid.arrange, p)
1557439951651:}
1557440227528:?dlnorm
1557440323602:?dbeta
1557440477831:ggplot(data = data.frame(x = c(clm_priors_full$parama[22] - (0.35 * clm_priors_full$parama[22]),
1557440477833:clm_priors_full$parama[22] + (0.35 * clm_priors_full$parama[22]))), aes(x)) +
1557440477835:stat_function(fun = dbeta, n = 101, args = list(clm_priors_full$parama[22],
1557440477838:clm_priors_full$paramb[22]))
1557440671056:for(pft_name in unique(clm_priors_full$name.x)){
1557440671058:clm_priors_by_pft = filter(clm_priors_full, name.x == pft_name)
1557440671060:p = list()
1557440671062:for(i in 1:nrow(clm_priors_by_pft)){
1557440671064:p[[i]] <- ggplot(data = data.frame(x = c(clm_priors_by_pft$parama[i] - (0.35 * clm_priors_by_pft$parama[i]),
1557440671065:clm_priors_by_pft$parama[i] + (0.35 * clm_priors_by_pft$parama[i]))), aes(x)) +
1557440671067:stat_function(fun = clm_priors_by_pft$distn_r[i], n = 101, args = list(clm_priors_by_pft$parama[i],
1557440671068:clm_priors_by_pft$paramb[i])) +
1557440671070:labs(x = paste0(clm_priors_by_pft$name.y[i], " (", clm_priors_by_pft$units[i], ")"),
1557440671071:y = "", title = paste0(clm_priors_by_pft$distn[i], "(", clm_priors_by_pft$parama[i], ", ", clm_priors_by_pft$paramb[i], ")")) +
1557440671073:theme(axis.title.y = element_blank(),
1557440671074:axis.text.y = element_blank(),
1557440671076:axis.ticks.y = element_blank())
1557440671078:}
1557440671079:do.call(grid.arrange, p)
1557440671081:}
1557440702287:library(dplyr)
1557440702899:library(ggplot2)
1557440703034:library(gridExtra)
1557440703050:theme_set(theme_bw())
1557440703064:# Open up a connection to BETY
1557440703065:bety <-dplyr::src_postgres(host = "postgres",
1557440703066:user = "bety",
1557440703067:password = "bety",
1557440703068:dbname = "bety")
1557440703373:# Get all priors data for CLM50 PFTs
1557440703374:clm_pfts <- tbl(bety, 'pfts') %>%
1557440703375:filter(modeltype_id == 9000000001) %>%
1557440703376:select(id, name) %>%
1557440703377:collect()
1557440703443:pft_prior_link <- tbl(bety, 'pfts_priors') %>%
1557440703444:filter(pft_id %in% clm_pfts$id) %>%
1557440703445:collect()
1557440703478:pft_prior_combined <- left_join(pft_prior_link, clm_pfts, by = c("pft_id" = "id"))
1557440703483:clm_priors <- tbl(bety, 'priors') %>%
1557440703484:filter(id %in% pft_prior_link$prior_id) %>%
1557440703485:collect()
1557440703528:clm_priors_extended <- left_join(clm_priors, pft_prior_combined, by = c("id" = "prior_id"))
1557440703531:clm_variables <- tbl(bety, 'variables') %>%
1557440703532:select(id, name, units) %>%
1557440703533:collect()
1557440703556:clm_priors_full <- left_join(clm_priors_extended, clm_variables, by = c("variable_id" = "id")) %>%
1557440703557:mutate(distn_r = paste0("d", distn))
1557440703582:# Plot distributions
1557440703583:#add in functionality to choose which type of distribution to plot based on distn column
1557440703584:for(pft_name in unique(clm_priors_full$name.x)){
1557440703585:clm_priors_by_pft = filter(clm_priors_full, name.x == pft_name)
1557440703586:p = list()
1557440703587:for(i in 1:nrow(clm_priors_by_pft)){
1557440703588:p[[i]] <- ggplot(data = data.frame(x = c(clm_priors_by_pft$parama[i] - (0.35 * clm_priors_by_pft$parama[i]),
1557440703589:clm_priors_by_pft$parama[i] + (0.35 * clm_priors_by_pft$parama[i]))), aes(x)) +
1557440703590:stat_function(fun = clm_priors_by_pft$distn_r[i], n = 101, args = list(clm_priors_by_pft$parama[i],
1557440703591:clm_priors_by_pft$paramb[i])) +
1557440703592:labs(x = paste0(clm_priors_by_pft$name.y[i], " (", clm_priors_by_pft$units[i], ")"),
1557440703593:y = "", title = paste0(clm_priors_by_pft$distn[i], "(", clm_priors_by_pft$parama[i], ", ", clm_priors_by_pft$paramb[i], ")")) +
1557440703594:theme(axis.title.y = element_blank(),
1557440703595:axis.text.y = element_blank(),
1557440703596:axis.ticks.y = element_blank())
1557440703597:}
1557440703599:do.call(grid.arrange, p)
1557440703600:}
1557517085623:system('rm -rf ~/clm_results')
1557519966859:load("clm_results/samples.Rdata")
1557519969235:ls()
1557519997725:head(ensemble.samples$`Setaria WT priors defaults`)
1557520107645:View(ensemble.samples$`Setaria WT priors defaults`)
1557520133039:ensemble_values <- data.frame(ensemble.samples$`Setaria WT priors defaults`)
1557520135296:View(ensemble_values)
1557520175031:library(ggplot2)
1557520218225:ggplot(ensemble_values, aes(x = Vcmax25)) +
1557520218227:geom_density()
1557772995066:?create_css
1557773043113:library(PEcAn.ED2)
1557773045706:?create_css
1557773057656:?example_css
1557773062398:example_css
1557773064299:example_css()
1557777761127:getwd()
1557777786159:# ----------------------------------------------------------------------
1557777786164:# Load required libraries
1557777786169:# ----------------------------------------------------------------------
1557777786170:library(PEcAn.all)
1557777790889:library(PEcAn.utils)
1557777790891:library(RCurl)
1557777791929:# make sure always to call status.end
1557777791930:options(warn=1)
1557777792355:options(error=quote({
1557777792356:PEcAn.utils::status.end("ERROR")
1557777792358:PEcAn.remote::kill.tunnel(settings)
1557777792360:if (!interactive()) {
1557777792361:q(status = 1)
1557777792363:}
1557777792365:}))
1557777796928:# ----------------------------------------------------------------------
1557777796930:# PEcAn Workflow
1557777796931:# ----------------------------------------------------------------------
1557777796932:# Open and read in settings file for PEcAn run.
1557777796934:args <- commandArgs(trailingOnly = TRUE)
1557777797747:if (is.na(args[1])){
1557777797749:settings <- PEcAn.settings::read.settings("ed2_files/pecan64.ed2.xml")
1557777797750:} else {
1557777797752:settings.file <- args[1]
1557777797753:settings <- PEcAn.settings::read.settings(settings.file)
1557777797754:}
1557777799600:# Check for additional modules that will require adding settings
1557777799602:if("benchmarking" %in% names(settings)){
1557777799603:library(PEcAn.benchmark)
1557777799605:settings <- papply(settings, read_settings_BRR)
1557777799606:}
1557777800993:if("sitegroup" %in% names(settings)){
1557777800995:if(is.null(settings$sitegroup$nSite)){
1557777800996:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1557777800998:sitegroupId = settings$sitegroup$id)
1557777800999:} else {
1557777801001:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1557777801003:sitegroupId = settings$sitegroup$id,
1557777801004:nSite = settings$sitegroup$nSite)
1557777801006:}
1557777801006:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1557777801007:}
1557777803228:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1557777803229:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1557777808727:# Write pecan.CHECKED.xml
1557777808728:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1557777826634:# ----------------------------------------------------------------------
1557777826635:# Load required libraries
1557777826636:# ----------------------------------------------------------------------
1557777826637:library(PEcAn.all)
1557777831122:library(PEcAn.utils)
1557777831123:library(RCurl)
1557777832172:# make sure always to call status.end
1557777832173:options(warn=1)
1557777833113:options(error=quote({
1557777833115:PEcAn.utils::status.end("ERROR")
1557777833117:PEcAn.remote::kill.tunnel(settings)
1557777833118:if (!interactive()) {
1557777833119:q(status = 1)
1557777833120:}
1557777833121:}))
1557777834776:# ----------------------------------------------------------------------
1557777834778:# PEcAn Workflow
1557777834780:# ----------------------------------------------------------------------
1557777834782:# Open and read in settings file for PEcAn run.
1557777834783:args <- commandArgs(trailingOnly = TRUE)
1557777835908:if (is.na(args[1])){
1557777835909:settings <- PEcAn.settings::read.settings("ed2_files/pecan64.ed2.xml")
1557777835911:} else {
1557777835912:settings.file <- args[1]
1557777835913:settings <- PEcAn.settings::read.settings(settings.file)
1557777835914:}
1557777837438:# Check for additional modules that will require adding settings
1557777837439:if("benchmarking" %in% names(settings)){
1557777837441:library(PEcAn.benchmark)
1557777837443:settings <- papply(settings, read_settings_BRR)
1557777837444:}
1557777839807:if("sitegroup" %in% names(settings)){
1557777839809:if(is.null(settings$sitegroup$nSite)){
1557777839811:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1557777839813:sitegroupId = settings$sitegroup$id)
1557777839815:} else {
1557777839817:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1557777839819:sitegroupId = settings$sitegroup$id,
1557777839820:nSite = settings$sitegroup$nSite)
1557777839821:}
1557777839823:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1557777839824:}
1557777841111:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1557777841113:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1557777870189:# Write pecan.CHECKED.xml
1557777870191:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1557777872401:# start from scratch if no continue is passed in
1557777872403:statusFile <- file.path(settings$outdir, "STATUS")
1557777874103:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1557777874105:file.remove(statusFile)
1557777874106:}
1557777875793:# Do conversions
1557777875795:settings <- PEcAn.workflow::do_conversions(settings)
1557777912180:# Query the trait database for data and priors
1557777912182:if (PEcAn.utils::status.check("TRAIT") == 0){
1557777912184:PEcAn.utils::status.start("TRAIT")
1557777912186:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1557777912188:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1557777912190:PEcAn.utils::status.end()
1557777912192:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1557777912193:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1557777912194:}
1557777926157:# Run the PEcAn meta.analysis
1557777926160:if(!is.null(settings$meta.analysis)) {
1557777926162:if (PEcAn.utils::status.check("META") == 0){
1557777926164:PEcAn.utils::status.start("META")
1557777926166:PEcAn.MA::runModule.run.meta.analysis(settings)
1557777926168:PEcAn.utils::status.end()
1557777926169:}
1557777926171:}
1557777938518:# Write model specific configs
1557777938520:if (PEcAn.utils::status.check("CONFIG") == 0){
1557777938522:PEcAn.utils::status.start("CONFIG")
1557777938524:settings <- PEcAn.workflow::runModule.run.write.configs(settings)
1557777938526:PEcAn.settings::write.settings(settings, outputfile='pecan.CONFIGS.xml')
1557777938528:PEcAn.utils::status.end()
1557777938529:} else if (file.exists(file.path(settings$outdir, 'pecan.CONFIGS.xml'))) {
1557777938530:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.CONFIGS.xml'))
1557777938531:}
1557777997767:traceback()
1557780267187:?PEcAn.logger::logger.info
1557780420233:?rm
1557783466569:load("ed2_results/samples.Rdata")
1557783473771:ls()
1557783508046:library(ggplot2)
1557783508777:ggplot(ensemble_values, aes(x = Vcmax25)) +
1557783508778:geom_density()
1557783521936:ensemble_values <- data.frame(ensemble.samples$`Setaria WT priors defaults`)
1557783522777:ggplot(ensemble_values, aes(x = Vcmax25)) +
1557783522779:geom_density()
1557783682340:View(ensemble_values)
1557832461977:library(dplyr)
1557832462577:library(ggplot2)
1557832462711:library(gridExtra)
1557832463409:theme_set(theme_bw())
1557832464462:# Open up a connection to BETY
1557832464463:bety <-dplyr::src_postgres(host = "postgres",
1557832464464:user = "bety",
1557832464465:password = "bety",
1557832464466:dbname = "bety")
1557832465707:# Get all priors data for CLM50 PFTs
1557832465709:clm_pfts <- tbl(bety, 'pfts') %>%
1557832465710:filter(modeltype_id == 9000000001) %>%
1557832465712:select(id, name) %>%
1557832465714:collect()
1557832466685:pft_prior_link <- tbl(bety, 'pfts_priors') %>%
1557832466687:filter(pft_id %in% clm_pfts$id) %>%
1557832466688:collect()
1557832467495:pft_prior_combined <- left_join(pft_prior_link, clm_pfts, by = c("pft_id" = "id"))
1557832468079:clm_priors <- tbl(bety, 'priors') %>%
1557832468080:filter(id %in% pft_prior_link$prior_id) %>%
1557832468082:collect()
1557832468680:clm_priors_extended <- left_join(clm_priors, pft_prior_combined, by = c("id" = "prior_id"))
1557832469310:clm_variables <- tbl(bety, 'variables') %>%
1557832469312:select(id, name, units) %>%
1557832469314:collect()
1557832470133:clm_priors_full <- left_join(clm_priors_extended, clm_variables, by = c("variable_id" = "id")) %>%
1557832470135:mutate(distn_r = paste0("d", distn))
1557832488448:getwd()
1557832512447:write.csv(clm_priors_full, "clm_priors_full.csv")
1557832858320:# Plot distributions
1557832858322:for(pft_name in unique(clm_priors_full$name.x)){
1557832858325:clm_priors_by_pft = filter(clm_priors_full, name.x == pft_name)
1557832858326:p = list()
1557832858328:for(i in 1:nrow(clm_priors_by_pft)){
1557832858329:p[[i]] <- ggplot(data = data.frame(x = c(clm_priors_by_pft$parama[i] - (0.35 * clm_priors_by_pft$parama[i]),
1557832858330:clm_priors_by_pft$parama[i] + (0.35 * clm_priors_by_pft$parama[i]))), aes(x)) +
1557832858331:stat_function(fun = clm_priors_by_pft$distn_r[i], n = 101, args = list(clm_priors_by_pft$parama[i],
1557832858332:clm_priors_by_pft$paramb[i])) +
1557832858334:labs(x = paste0(clm_priors_by_pft$name.y[i], " (", clm_priors_by_pft$units[i], ")"),
1557832858335:y = "", title = paste0(clm_priors_by_pft$distn[i], "(", clm_priors_by_pft$parama[i], ", ", clm_priors_by_pft$paramb[i], ")")) +
1557832858336:theme(axis.title.y = element_blank(),
1557832858337:axis.text.y = element_blank(),
1557832858339:axis.ticks.y = element_blank())
1557832858340:}
1557832858341:do.call(grid.arrange, p)
1557832858343:}
1557847316232:library(dplyr)
1557847316881:library(ggplot2)
1557847317017:library(gridExtra)
1557847317635:theme_set(theme_bw())
1557847318639:# Open up a connection to BETY
1557847318641:bety <-dplyr::src_postgres(host = "postgres",
1557847318642:user = "bety",
1557847318644:password = "bety",
1557847318646:dbname = "bety")
1557847319781:# Get all priors data for CLM50 PFTs
1557847319783:clm_pfts <- tbl(bety, 'pfts') %>%
1557847319785:filter(modeltype_id == 9000000001) %>%
1557847319786:select(id, name) %>%
1557847319788:collect()
1557847320509:pft_prior_link <- tbl(bety, 'pfts_priors') %>%
1557847320511:filter(pft_id %in% clm_pfts$id) %>%
1557847320513:collect()
1557847321373:pft_prior_combined <- left_join(pft_prior_link, clm_pfts, by = c("pft_id" = "id"))
1557847322060:clm_priors <- tbl(bety, 'priors') %>%
1557847322062:filter(id %in% pft_prior_link$prior_id) %>%
1557847322064:collect()
1557847322884:clm_priors_extended <- left_join(clm_priors, pft_prior_combined, by = c("id" = "prior_id"))
1557847323633:clm_variables <- tbl(bety, 'variables') %>%
1557847323634:select(id, name, units) %>%
1557847323636:collect()
1557847324552:clm_priors_full <- left_join(clm_priors_extended, clm_variables, by = c("variable_id" = "id")) %>%
1557847324555:mutate(distn_r = paste0("d", distn),
1557847324556:pft_col = case_when(name.x == "Setaria WT priors defaults" ~ "black",
1557847324559:name.x == "Setaria WT priors data" ~ "red"))
1557847326516:# check variable names matching (growth respiration, Vcmax)
1557847326518:var_plot <- list()
1557847327382:for(var_name in sort(unique(clm_priors_full$name.y))){
1557847327384:clm_priors_by_var <- filter(clm_priors_full, name.y == var_name)
1557847327386:plot_center <- mean(c(clm_priors_by_var$parama[1], clm_priors_by_var$parama[2]), na.rm = TRUE)
1557847327387:var_plot[[var_name]] <- ggplot(data = data.frame(x = c(plot_center + (5 * plot_center), plot_center - (5 * plot_center))), aes(x)) +
1557847327389:stat_function(fun = clm_priors_by_var$distn_r[1], n = 101,
1557847327390:args = list(clm_priors_by_var$parama[1], clm_priors_by_var$paramb[1]),
1557847327391:col = clm_priors_by_var$pft_col[1]) +
1557847327393:stat_function(fun = clm_priors_by_var$distn_r[2], n = 101,
1557847327394:args = list(clm_priors_by_var$parama[2], clm_priors_by_var$paramb[2]),
1557847327396:color = clm_priors_by_var$pft_col[2]) +
1557847327397:labs(x = paste0(var_name, " (", clm_priors_by_var$units[1], ")"), y = "") +
1557847327399:theme(axis.title.y = element_blank(),
1557847327400:axis.text.y = element_blank(),
1557847327401:axis.ticks.y = element_blank())
1557847327402:}
1557847328377:do.call(grid.arrange, var_plot)
1557847476380:### This runs in Welsch UA RStudio instance
1557847476382:library(dplyr)
1557847476981:library(ggplot2)
1557847477153:library(gridExtra)
1557847477169:theme_set(theme_bw())
1557847477183:# Open up a connection to BETY
1557847477184:bety <-dplyr::src_postgres(host = "postgres",
1557847477185:user = "bety",
1557847477186:password = "bety",
1557847477187:dbname = "bety")
1557847477497:# Get all priors data for CLM50 PFTs
1557847477498:clm_pfts <- tbl(bety, 'pfts') %>%
1557847477499:filter(modeltype_id == 9000000001) %>%
1557847477500:select(id, name) %>%
1557847477501:collect()
1557847477572:pft_prior_link <- tbl(bety, 'pfts_priors') %>%
1557847477573:filter(pft_id %in% clm_pfts$id) %>%
1557847477574:collect()
1557847477607:pft_prior_combined <- left_join(pft_prior_link, clm_pfts, by = c("pft_id" = "id"))
1557847477612:clm_priors <- tbl(bety, 'priors') %>%
1557847477613:filter(id %in% pft_prior_link$prior_id) %>%
1557847477614:collect()
1557847477658:clm_priors_extended <- left_join(clm_priors, pft_prior_combined, by = c("id" = "prior_id"))
1557847477661:clm_variables <- tbl(bety, 'variables') %>%
1557847477662:select(id, name, units) %>%
1557847477663:collect()
1557847477688:clm_priors_full <- left_join(clm_priors_extended, clm_variables, by = c("variable_id" = "id")) %>%
1557847477689:mutate(distn_r = paste0("d", distn),
1557847477690:pft_col = case_when(name.x == "Setaria WT priors defaults" ~ "black",
1557847477691:name.x == "Setaria WT priors data" ~ "red"))
1557847477717:# check variable names matching (growth respiration, Vcmax)
1557847477718:var_plot <- list()
1557847477719:for(var_name in sort(unique(clm_priors_full$name.y))){
1557847477720:clm_priors_by_var <- filter(clm_priors_full, name.y == var_name)
1557847477721:plot_center <- mean(c(clm_priors_by_var$parama[1], clm_priors_by_var$parama[2]), na.rm = TRUE)
1557847477722:var_plot[[var_name]] <- ggplot(data = data.frame(x = c(plot_center + (5 * plot_center), plot_center - (5 * plot_center))), aes(x)) +
1557847477723:stat_function(fun = clm_priors_by_var$distn_r[1], n = 101,
1557847477724:args = list(clm_priors_by_var$parama[1], clm_priors_by_var$paramb[1]),
1557847477725:col = clm_priors_by_var$pft_col[1]) +
1557847477726:stat_function(fun = clm_priors_by_var$distn_r[2], n = 101,
1557847477727:args = list(clm_priors_by_var$parama[2], clm_priors_by_var$paramb[2]),
1557847477728:color = clm_priors_by_var$pft_col[2]) +
1557847477729:labs(x = paste0(var_name, " (", clm_priors_by_var$units[1], ")"), y = "") +
1557847477730:theme(axis.title.y = element_blank(),
1557847477731:axis.text.y = element_blank(),
1557847477732:axis.ticks.y = element_blank())
1557847477733:}
1557847477946:do.call(grid.arrange, var_plot)
1557848969285:getwd()
1557848989776:# ----------------------------------------------------------------------
1557848989779:# Load required libraries
1557848989781:# ----------------------------------------------------------------------
1557848989783:library(PEcAn.all)
1557848994302:library(PEcAn.utils)
1557848994304:library(RCurl)
1557848994446:# make sure always to call status.end
1557848994447:options(warn=1)
1557848994448:options(error=quote({
1557848994449:PEcAn.utils::status.end("ERROR")
1557848994450:PEcAn.remote::kill.tunnel(settings)
1557848994451:if (!interactive()) {
1557848994452:q(status = 1)
1557848994453:}
1557848994455:}))
1557849068692:# ----------------------------------------------------------------------
1557849068694:# PEcAn Workflow
1557849068696:# ----------------------------------------------------------------------
1557849068698:# Open and read in settings file for PEcAn run.
1557849068699:args <- commandArgs(trailingOnly = TRUE)
1557849069691:if (is.na(args[1])){
1557849069693:settings <- PEcAn.settings::read.settings("ed2_files/pecan64.ed2.xml")
1557849069695:} else {
1557849069697:settings.file <- args[1]
1557849069699:settings <- PEcAn.settings::read.settings(settings.file)
1557849069701:}
1557849071209:# Check for additional modules that will require adding settings
1557849071211:if("benchmarking" %in% names(settings)){
1557849071213:library(PEcAn.benchmark)
1557849071215:settings <- papply(settings, read_settings_BRR)
1557849071218:}
1557849072082:if("sitegroup" %in% names(settings)){
1557849072084:if(is.null(settings$sitegroup$nSite)){
1557849072086:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1557849072088:sitegroupId = settings$sitegroup$id)
1557849072089:} else {
1557849072091:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1557849072093:sitegroupId = settings$sitegroup$id,
1557849072094:nSite = settings$sitegroup$nSite)
1557849072096:}
1557849072097:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1557849072098:}
1557849076822:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1557849076824:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1557849289132:# ----------------------------------------------------------------------
1557849289134:# Load required libraries
1557849289136:# ----------------------------------------------------------------------
1557849289138:library(PEcAn.all)
1557849294427:library(PEcAn.utils)
1557849294429:library(RCurl)
1557849295500:# make sure always to call status.end
1557849295502:options(warn=1)
1557849297158:options(error=quote({
1557849297160:PEcAn.utils::status.end("ERROR")
1557849297162:PEcAn.remote::kill.tunnel(settings)
1557849297164:if (!interactive()) {
1557849297166:q(status = 1)
1557849297167:}
1557849297168:}))
1557849298828:# ----------------------------------------------------------------------
1557849298830:# PEcAn Workflow
1557849298832:# ----------------------------------------------------------------------
1557849298834:# Open and read in settings file for PEcAn run.
1557849298835:args <- commandArgs(trailingOnly = TRUE)
1557849300994:if (is.na(args[1])){
1557849300996:settings <- PEcAn.settings::read.settings("ed2_files/pecan64.ed2.xml")
1557849300998:} else {
1557849301000:settings.file <- args[1]
1557849301002:settings <- PEcAn.settings::read.settings(settings.file)
1557849301003:}
1557849306059:# Check for additional modules that will require adding settings
1557849306060:if("benchmarking" %in% names(settings)){
1557849306062:library(PEcAn.benchmark)
1557849306064:settings <- papply(settings, read_settings_BRR)
1557849306065:}
1557849313070:if("sitegroup" %in% names(settings)){
1557849313072:if(is.null(settings$sitegroup$nSite)){
1557849313074:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1557849313076:sitegroupId = settings$sitegroup$id)
1557849313077:} else {
1557849313079:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1557849313081:sitegroupId = settings$sitegroup$id,
1557849313082:nSite = settings$sitegroup$nSite)
1557849313083:}
1557849313085:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1557849313086:}
1557849315090:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1557849315092:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1557849738094:traceback()
1557920777386:library(dplyr)
1557920777619:library(ggplot2)
1557920777862:library(gridExtra)
1557920778425:theme_set(theme_bw())
1557920779001:# Open up a connection to BETY
1557920779003:bety <-dplyr::src_postgres(host = "postgres",
1557920779005:user = "bety",
1557920779007:password = "bety",
1557920779008:dbname = "bety")
1557920779731:# Get all priors data for CLM50 PFTs
1557920779733:clm_pfts <- tbl(bety, 'pfts') %>%
1557920779734:filter(modeltype_id == 9000000001) %>%
1557920779736:select(id, name) %>%
1557920779738:collect()
1557920780261:pft_prior_link <- tbl(bety, 'pfts_priors') %>%
1557920780262:filter(pft_id %in% clm_pfts$id) %>%
1557920780264:collect()
1557920780977:pft_prior_combined <- left_join(pft_prior_link, clm_pfts, by = c("pft_id" = "id"))
1557920781544:clm_priors <- tbl(bety, 'priors') %>%
1557920781546:filter(id %in% pft_prior_link$prior_id) %>%
1557920781548:collect()
1557920782074:clm_priors_extended <- left_join(clm_priors, pft_prior_combined, by = c("id" = "prior_id"))
1557920782581:clm_variables <- tbl(bety, 'variables') %>%
1557920782583:select(id, name, units) %>%
1557920782585:collect()
1557920783205:clm_priors_full <- left_join(clm_priors_extended, clm_variables, by = c("variable_id" = "id")) %>%
1557920783207:mutate(distn_r = paste0("d", distn),
1557920783209:pft_col = case_when(name.x == "Setaria WT priors defaults" ~ "black",
1557920783210:name.x == "Setaria WT priors data" ~ "red"))
1557920786502:# check variable names matching (growth respiration, Vcmax)
1557920786507:var_plot <- list()
1557920786648:for(var_name in sort(unique(clm_priors_full$name.y))){
1557920786650:clm_priors_by_var <- filter(clm_priors_full, name.y == var_name)
1557920786652:plot_center <- mean(c(clm_priors_by_var$parama[1], clm_priors_by_var$parama[2]), na.rm = TRUE)
1557920786654:var_plot[[var_name]] <- ggplot(data = data.frame(x = c(plot_center + (5 * plot_center), plot_center - (5 * plot_center))), aes(x)) +
1557920786656:stat_function(fun = clm_priors_by_var$distn_r[1], n = 101,
1557920786657:args = list(clm_priors_by_var$parama[1], clm_priors_by_var$paramb[1]),
1557920786659:col = clm_priors_by_var$pft_col[1]) +
1557920786660:stat_function(fun = clm_priors_by_var$distn_r[2], n = 101,
1557920786661:args = list(clm_priors_by_var$parama[2], clm_priors_by_var$paramb[2]),
1557920786662:color = clm_priors_by_var$pft_col[2]) +
1557920786663:labs(x = paste0(var_name, " (", clm_priors_by_var$units[1], ")"), y = "") +
1557920786664:theme(axis.title.y = element_blank(),
1557920786665:axis.text.y = element_blank(),
1557920786666:axis.ticks.y = element_blank())
1557920786667:}
1557920787522:do.call(grid.arrange, var_plot)
1557920851014:# check variable names matching (growth respiration, Vcmax)
1557920851016:var_plot <- list()
1557920851366:for(var_name in sort(unique(clm_priors_full$name.y))){
1557920851367:clm_priors_by_var <- filter(clm_priors_full, name.y == var_name)
1557920851368:plot_center <- mean(c(clm_priors_by_var$parama[1], clm_priors_by_var$parama[2]), na.rm = TRUE)
1557920851369:var_plot[[var_name]] <- ggplot(data = data.frame(x = c(0, plot_center - (5 * plot_center))), aes(x)) +
1557920851370:stat_function(fun = clm_priors_by_var$distn_r[1], n = 101,
1557920851371:args = list(clm_priors_by_var$parama[1], clm_priors_by_var$paramb[1]),
1557920851373:col = clm_priors_by_var$pft_col[1]) +
1557920851374:stat_function(fun = clm_priors_by_var$distn_r[2], n = 101,
1557920851375:args = list(clm_priors_by_var$parama[2], clm_priors_by_var$paramb[2]),
1557920851376:color = clm_priors_by_var$pft_col[2]) +
1557920851377:labs(x = paste0(var_name, " (", clm_priors_by_var$units[1], ")"), y = "") +
1557920851378:theme(axis.title.y = element_blank(),
1557920851379:axis.text.y = element_blank(),
1557920851381:axis.ticks.y = element_blank())
1557920851382:}
1557920852399:do.call(grid.arrange, var_plot)
1557920895606:# check variable names matching (growth respiration, Vcmax)
1557920895608:var_plot <- list()
1557920895883:for(var_name in sort(unique(clm_priors_full$name.y))){
1557920895885:clm_priors_by_var <- filter(clm_priors_full, name.y == var_name)
1557920895887:plot_center <- mean(c(clm_priors_by_var$parama[1], clm_priors_by_var$parama[2]), na.rm = TRUE)
1557920895888:var_plot[[var_name]] <- ggplot(data = data.frame(x = c(plot_center + (5 * plot_center), 0)), aes(x)) +
1557920895889:stat_function(fun = clm_priors_by_var$distn_r[1], n = 101,
1557920895890:args = list(clm_priors_by_var$parama[1], clm_priors_by_var$paramb[1]),
1557920895891:col = clm_priors_by_var$pft_col[1]) +
1557920895892:stat_function(fun = clm_priors_by_var$distn_r[2], n = 101,
1557920895894:args = list(clm_priors_by_var$parama[2], clm_priors_by_var$paramb[2]),
1557920895896:color = clm_priors_by_var$pft_col[2]) +
1557920895897:labs(x = paste0(var_name, " (", clm_priors_by_var$units[1], ")"), y = "") +
1557920895898:theme(axis.title.y = element_blank(),
1557920895899:axis.text.y = element_blank(),
1557920895900:axis.ticks.y = element_blank())
1557920895902:}
1557920896716:do.call(grid.arrange, var_plot)
1557921655643:# check variable names matching (growth respiration, Vcmax)
1557921655645:var_plot <- list()
1557921655851:for(var_name in sort(unique(clm_priors_full$name.y))){
1557921655852:clm_priors_by_var <- filter(clm_priors_full, name.y == var_name)
1557921655854:plot_center <- mean(c(clm_priors_by_var$parama[1], clm_priors_by_var$parama[2]), na.rm = TRUE)
1557921655855:var_plot[[var_name]] <- ggplot(data = data.frame(x = c(plot_center + (1 * plot_center), 0)), aes(x)) +
1557921655856:stat_function(fun = clm_priors_by_var$distn_r[1], n = 101,
1557921655857:args = list(clm_priors_by_var$parama[1], clm_priors_by_var$paramb[1]),
1557921655858:col = clm_priors_by_var$pft_col[1]) +
1557921655859:stat_function(fun = clm_priors_by_var$distn_r[2], n = 101,
1557921655860:args = list(clm_priors_by_var$parama[2], clm_priors_by_var$paramb[2]),
1557921655862:color = clm_priors_by_var$pft_col[2]) +
1557921655863:labs(x = paste0(var_name, " (", clm_priors_by_var$units[1], ")"), y = "") +
1557921655864:theme(axis.title.y = element_blank(),
1557921655865:axis.text.y = element_blank(),
1557921655866:axis.ticks.y = element_blank())
1557921655867:}
1557921656155:do.call(grid.arrange, var_plot)
1558549338353:# ----------------------------------------------------------------------
1558549338411:# Load required libraries
1558549338413:# ----------------------------------------------------------------------
1558549338415:library(PEcAn.all)
1558549343440:library(PEcAn.utils)
1558549343441:library(RCurl)
1558549343630:# make sure always to call status.end
1558549343631:options(warn=1)
1558549343632:options(error=quote({
1558549343633:PEcAn.utils::status.end("ERROR")
1558549343634:PEcAn.remote::kill.tunnel(settings)
1558549343635:if (!interactive()) {
1558549343636:q(status = 1)
1558549343637:}
1558549343638:}))
1558549347177:# ----------------------------------------------------------------------
1558549347179:# PEcAn Workflow
1558549347181:# ----------------------------------------------------------------------
1558549347182:# Open and read in settings file for PEcAn run.
1558549347184:args <- commandArgs(trailingOnly = TRUE)
1558549348195:if (is.na(args[1])){
1558549348197:settings <- PEcAn.settings::read.settings("pecan.xml")
1558549348199:} else {
1558549348201:settings.file <- args[1]
1558549348203:settings <- PEcAn.settings::read.settings(settings.file)
1558549348205:}
1558549370697:# ----------------------------------------------------------------------
1558549370699:# Load required libraries
1558549370701:# ----------------------------------------------------------------------
1558549370703:library(PEcAn.all)
1558549375347:library(PEcAn.utils)
1558549375348:library(RCurl)
1558549375512:# make sure always to call status.end
1558549375513:options(warn=1)
1558549375515:options(error=quote({
1558549375516:PEcAn.utils::status.end("ERROR")
1558549375517:PEcAn.remote::kill.tunnel(settings)
1558549375518:if (!interactive()) {
1558549375519:q(status = 1)
1558549375520:}
1558549375521:}))
1558549376887:# ----------------------------------------------------------------------
1558549376889:# PEcAn Workflow
1558549376890:# ----------------------------------------------------------------------
1558549376892:# Open and read in settings file for PEcAn run.
1558549376893:args <- commandArgs(trailingOnly = TRUE)
1558549377428:if (is.na(args[1])){
1558549377430:settings <- PEcAn.settings::read.settings("ed2_files/pecan64.ed2.xml")
1558549377432:} else {
1558549377434:settings.file <- args[1]
1558549377436:settings <- PEcAn.settings::read.settings(settings.file)
1558549377438:}
1558549378502:# Check for additional modules that will require adding settings
1558549378504:if("benchmarking" %in% names(settings)){
1558549378506:library(PEcAn.benchmark)
1558549378508:settings <- papply(settings, read_settings_BRR)
1558549378510:}
1558549379389:if("sitegroup" %in% names(settings)){
1558549379391:if(is.null(settings$sitegroup$nSite)){
1558549379393:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1558549379395:sitegroupId = settings$sitegroup$id)
1558549379397:} else {
1558549379399:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1558549379402:sitegroupId = settings$sitegroup$id,
1558549379403:nSite = settings$sitegroup$nSite)
1558549379405:}
1558549379406:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1558549379407:}
1558549380142:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1558549380144:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1558549381999:# Write pecan.CHECKED.xml
1558549382001:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1558549384629:# start from scratch if no continue is passed in
1558549384631:statusFile <- file.path(settings$outdir, "STATUS")
1558549386689:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1558549386692:file.remove(statusFile)
1558549386694:}
1558549388155:# Do conversions
1558549388158:settings <- PEcAn.workflow::do_conversions(settings)
1558549391120:# Query the trait database for data and priors
1558549391122:if (PEcAn.utils::status.check("TRAIT") == 0){
1558549391125:PEcAn.utils::status.start("TRAIT")
1558549391127:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1558549391129:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1558549391130:PEcAn.utils::status.end()
1558549391131:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1558549391132:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1558549391133:}
1558549409469:# Run the PEcAn meta.analysis
1558549409471:if(!is.null(settings$meta.analysis)) {
1558549409473:if (PEcAn.utils::status.check("META") == 0){
1558549409475:PEcAn.utils::status.start("META")
1558549409477:PEcAn.MA::runModule.run.meta.analysis(settings)
1558549409478:PEcAn.utils::status.end()
1558549409479:}
1558549409480:}
1558549419180:# Write model specific configs
1558549419181:if (PEcAn.utils::status.check("CONFIG") == 0){
1558549419182:PEcAn.utils::status.start("CONFIG")
1558549419183:settings <- PEcAn.workflow::runModule.run.write.configs(settings)
1558549419184:PEcAn.settings::write.settings(settings, outputfile='pecan.CONFIGS.xml')
1558549419185:PEcAn.utils::status.end()
1558549419186:} else if (file.exists(file.path(settings$outdir, 'pecan.CONFIGS.xml'))) {
1558549419187:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.CONFIGS.xml'))
1558549419188:}
1558549443273:traceback()
1558549620065:settings$run$inputs$thsum$path
1558549744934:thsum <- settings$run$inputs$thsum$path
1558549744937:if (!grepl("/$", thsum)) {
1558549744939:thsum <- paste0(thsum, "/")
1558549744941:}
1558549765476:if (!grepl("/$", thsum))
1558549775155:!grepl("/$", thsum)
1558551099822:# ----------------------------------------------------------------------
1558551099824:# Load required libraries
1558551099826:# ----------------------------------------------------------------------
1558551099828:library(PEcAn.all)
1558551104490:library(PEcAn.utils)
1558551104492:library(RCurl)
1558551104655:# make sure always to call status.end
1558551104656:options(warn=1)
1558551104657:options(error=quote({
1558551104658:PEcAn.utils::status.end("ERROR")
1558551104659:PEcAn.remote::kill.tunnel(settings)
1558551104660:if (!interactive()) {
1558551104661:q(status = 1)
1558551104663:}
1558551104664:}))
1558551107358:# ----------------------------------------------------------------------
1558551107360:# PEcAn Workflow
1558551107362:# ----------------------------------------------------------------------
1558551107364:# Open and read in settings file for PEcAn run.
1558551107366:args <- commandArgs(trailingOnly = TRUE)
1558551108524:if (is.na(args[1])){
1558551108526:settings <- PEcAn.settings::read.settings("ed2_files/pecan64.ed2.xml")
1558551108528:} else {
1558551108530:settings.file <- args[1]
1558551108532:settings <- PEcAn.settings::read.settings(settings.file)
1558551108533:}
1558551110341:# Check for additional modules that will require adding settings
1558551110343:if("benchmarking" %in% names(settings)){
1558551110345:library(PEcAn.benchmark)
1558551110347:settings <- papply(settings, read_settings_BRR)
1558551110348:}
1558551112517:if("sitegroup" %in% names(settings)){
1558551112519:if(is.null(settings$sitegroup$nSite)){
1558551112522:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1558551112523:sitegroupId = settings$sitegroup$id)
1558551112525:} else {
1558551112526:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1558551112527:sitegroupId = settings$sitegroup$id,
1558551112529:nSite = settings$sitegroup$nSite)
1558551112530:}
1558551112531:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1558551112533:}
1558551114450:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1558551114451:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1558551118119:# Write pecan.CHECKED.xml
1558551118121:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1558551119075:# start from scratch if no continue is passed in
1558551119078:statusFile <- file.path(settings$outdir, "STATUS")
1558551119947:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1558551119949:file.remove(statusFile)
1558551119951:}
1558551120795:# Do conversions
1558551120797:settings <- PEcAn.workflow::do_conversions(settings)
1558551123662:# Query the trait database for data and priors
1558551123664:if (PEcAn.utils::status.check("TRAIT") == 0){
1558551123666:PEcAn.utils::status.start("TRAIT")
1558551123668:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1558551123670:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1558551123672:PEcAn.utils::status.end()
1558551123673:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1558551123674:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1558551123675:}
1558551128169:# Run the PEcAn meta.analysis
1558551128170:if(!is.null(settings$meta.analysis)) {
1558551128172:if (PEcAn.utils::status.check("META") == 0){
1558551128174:PEcAn.utils::status.start("META")
1558551128176:PEcAn.MA::runModule.run.meta.analysis(settings)
1558551128178:PEcAn.utils::status.end()
1558551128180:}
1558551128181:}
1558551137844:# Write model specific configs
1558551137846:if (PEcAn.utils::status.check("CONFIG") == 0){
1558551137848:PEcAn.utils::status.start("CONFIG")
1558551137850:settings <- PEcAn.workflow::runModule.run.write.configs(settings)
1558551137852:PEcAn.settings::write.settings(settings, outputfile='pecan.CONFIGS.xml')
1558551137854:PEcAn.utils::status.end()
1558551137855:} else if (file.exists(file.path(settings$outdir, 'pecan.CONFIGS.xml'))) {
1558551137857:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.CONFIGS.xml'))
1558551137858:}
1558551296821:if ((length(which(commandArgs() == "--advanced")) != 0) && (PEcAn.utils::status.check("ADVANCED") == 0)) {
1558551296823:PEcAn.utils::status.start("ADVANCED")
1558551296825:q();
1558551296828:}
1558551298885:# Start ecosystem model runs
1558551298887:if (PEcAn.utils::status.check("MODEL") == 0) {
1558551298890:PEcAn.utils::status.start("MODEL")
1558551298892:PEcAn.remote::runModule.start.model.runs(settings, stop.on.error = FALSE)
1558551298894:PEcAn.utils::status.end()
1558551298896:}
1558551306858:traceback()
1558562563209:# ----------------------------------------------------------------------
1558562563210:# Load required libraries
1558562563211:# ----------------------------------------------------------------------
1558562563212:library(PEcAn.all)
1558562567460:library(PEcAn.utils)
1558562567462:library(RCurl)
1558562567622:# make sure always to call status.end
1558562567623:options(warn=1)
1558562567625:options(error=quote({
1558562567626:PEcAn.utils::status.end("ERROR")
1558562567627:PEcAn.remote::kill.tunnel(settings)
1558562567628:if (!interactive()) {
1558562567629:q(status = 1)
1558562567630:}
1558562567631:}))
1558562567632:# ----------------------------------------------------------------------
1558562567633:# PEcAn Workflow
1558562567634:# ----------------------------------------------------------------------
1558562567635:# Open and read in settings file for PEcAn run.
1558562567636:args <- commandArgs(trailingOnly = TRUE)
1558562570651:if (is.na(args[1])){
1558562570652:settings <- PEcAn.settings::read.settings("ed2_files/pecan64.ed2.xml")
1558562570653:} else {
1558562570654:settings.file <- args[1]
1558562570655:settings <- PEcAn.settings::read.settings(settings.file)
1558562570655:}
1558562571438:# Check for additional modules that will require adding settings
1558562571440:if("benchmarking" %in% names(settings)){
1558562571441:library(PEcAn.benchmark)
1558562571442:settings <- papply(settings, read_settings_BRR)
1558562571444:}
1558562572585:if("sitegroup" %in% names(settings)){
1558562572587:if(is.null(settings$sitegroup$nSite)){
1558562572588:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1558562572589:sitegroupId = settings$sitegroup$id)
1558562572590:} else {
1558562572591:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1558562572592:sitegroupId = settings$sitegroup$id,
1558562572593:nSite = settings$sitegroup$nSite)
1558562572594:}
1558562572595:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1558562572595:}
1558562574032:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1558562574034:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1558562576449:# Write pecan.CHECKED.xml
1558562576450:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1558562578456:# start from scratch if no continue is passed in
1558562578458:statusFile <- file.path(settings$outdir, "STATUS")
1558562579267:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1558562579269:file.remove(statusFile)
1558562579271:}
1558562580269:# Do conversions
1558562580271:settings <- PEcAn.workflow::do_conversions(settings)
1558562581695:# Query the trait database for data and priors
1558562581696:if (PEcAn.utils::status.check("TRAIT") == 0){
1558562581697:PEcAn.utils::status.start("TRAIT")
1558562581698:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1558562581699:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1558562581700:PEcAn.utils::status.end()
1558562581701:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1558562581702:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1558562581703:}
1558562584850:# Run the PEcAn meta.analysis
1558562584851:if(!is.null(settings$meta.analysis)) {
1558562584852:if (PEcAn.utils::status.check("META") == 0){
1558562584853:PEcAn.utils::status.start("META")
1558562584854:PEcAn.MA::runModule.run.meta.analysis(settings)
1558562584855:PEcAn.utils::status.end()
1558562584856:}
1558562584857:}
1558562595093:# Write model specific configs
1558562595095:if (PEcAn.utils::status.check("CONFIG") == 0){
1558562595097:PEcAn.utils::status.start("CONFIG")
1558562595099:settings <- PEcAn.workflow::runModule.run.write.configs(settings)
1558562595100:PEcAn.settings::write.settings(settings, outputfile='pecan.CONFIGS.xml')
1558562595101:PEcAn.utils::status.end()
1558562595102:} else if (file.exists(file.path(settings$outdir, 'pecan.CONFIGS.xml'))) {
1558562595103:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.CONFIGS.xml'))
1558562595104:}
1558562623456:if ((length(which(commandArgs() == "--advanced")) != 0) && (PEcAn.utils::status.check("ADVANCED") == 0)) {
1558562623457:PEcAn.utils::status.start("ADVANCED")
1558562623458:q();
1558562623460:}
1558562624987:# Start ecosystem model runs
1558562624988:if (PEcAn.utils::status.check("MODEL") == 0) {
1558562624991:PEcAn.utils::status.start("MODEL")
1558562624992:PEcAn.remote::runModule.start.model.runs(settings, stop.on.error = FALSE)
1558562624994:PEcAn.utils::status.end()
1558562624996:}
1558562660457:traceback()
1558563032770:settings$rundir
1558565965316:# ----------------------------------------------------------------------
1558565965318:# Load required libraries
1558565965319:# ----------------------------------------------------------------------
1558565965321:library(PEcAn.all)
1558565970193:library(PEcAn.utils)
1558565970194:library(RCurl)
1558565975708:# make sure always to call status.end
1558565975709:options(warn=1)
1558565976265:options(error=quote({
1558565976267:PEcAn.utils::status.end("ERROR")
1558565976269:PEcAn.remote::kill.tunnel(settings)
1558565976271:if (!interactive()) {
1558565976273:q(status = 1)
1558565976275:}
1558565976276:}))
1558565977541:# ----------------------------------------------------------------------
1558565977543:# PEcAn Workflow
1558565977544:# ----------------------------------------------------------------------
1558565977545:# Open and read in settings file for PEcAn run.
1558565977546:args <- commandArgs(trailingOnly = TRUE)
1558565978549:if (is.na(args[1])){
1558565978551:settings <- PEcAn.settings::read.settings("pecan.xml")
1558565978552:} else {
1558565978554:settings.file <- args[1]
1558565978555:settings <- PEcAn.settings::read.settings(settings.file)
1558565978557:}
1558565998805:# ----------------------------------------------------------------------
1558565998806:# Load required libraries
1558565998808:# ----------------------------------------------------------------------
1558565998810:library(PEcAn.all)
1558566003905:library(PEcAn.utils)
1558566003907:library(RCurl)
1558566005154:# make sure always to call status.end
1558566005155:options(warn=1)
1558566005988:options(error=quote({
1558566005990:PEcAn.utils::status.end("ERROR")
1558566005991:PEcAn.remote::kill.tunnel(settings)
1558566005993:if (!interactive()) {
1558566005994:q(status = 1)
1558566005995:}
1558566005996:}))
1558566007174:# ----------------------------------------------------------------------
1558566007176:# PEcAn Workflow
1558566007177:# ----------------------------------------------------------------------
1558566007179:# Open and read in settings file for PEcAn run.
1558566007180:args <- commandArgs(trailingOnly = TRUE)
1558566008269:if (is.na(args[1])){
1558566008271:settings <- PEcAn.settings::read.settings("ed2_files/pecan64.ed2.xml")
1558566008273:} else {
1558566008274:settings.file <- args[1]
1558566008276:settings <- PEcAn.settings::read.settings(settings.file)
1558566008277:}
1558566009286:# Check for additional modules that will require adding settings
1558566009288:if("benchmarking" %in% names(settings)){
1558566009289:library(PEcAn.benchmark)
1558566009291:settings <- papply(settings, read_settings_BRR)
1558566009292:}
1558566010122:if("sitegroup" %in% names(settings)){
1558566010123:if(is.null(settings$sitegroup$nSite)){
1558566010124:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1558566010125:sitegroupId = settings$sitegroup$id)
1558566010126:} else {
1558566010127:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1558566010128:sitegroupId = settings$sitegroup$id,
1558566010129:nSite = settings$sitegroup$nSite)
1558566010130:}
1558566010131:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1558566010132:}
1558566012443:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1558566012444:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1558566014349:# Write pecan.CHECKED.xml
1558566014350:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1558566015693:# start from scratch if no continue is passed in
1558566015694:statusFile <- file.path(settings$outdir, "STATUS")
1558566017251:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1558566017252:file.remove(statusFile)
1558566017253:}
1558566018652:# Do conversions
1558566018653:settings <- PEcAn.workflow::do_conversions(settings)
1558566021399:# Query the trait database for data and priors
1558566021401:if (PEcAn.utils::status.check("TRAIT") == 0){
1558566021403:PEcAn.utils::status.start("TRAIT")
1558566021404:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1558566021406:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1558566021407:PEcAn.utils::status.end()
1558566021409:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1558566021411:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1558566021412:}
1558566023684:# Run the PEcAn meta.analysis
1558566023685:if(!is.null(settings$meta.analysis)) {
1558566023686:if (PEcAn.utils::status.check("META") == 0){
1558566023687:PEcAn.utils::status.start("META")
1558566023688:PEcAn.MA::runModule.run.meta.analysis(settings)
1558566023689:PEcAn.utils::status.end()
1558566023690:}
1558566023691:}
1558566031744:# Write model specific configs
1558566031745:if (PEcAn.utils::status.check("CONFIG") == 0){
1558566031747:PEcAn.utils::status.start("CONFIG")
1558566031749:settings <- PEcAn.workflow::runModule.run.write.configs(settings)
1558566031750:PEcAn.settings::write.settings(settings, outputfile='pecan.CONFIGS.xml')
1558566031752:PEcAn.utils::status.end()
1558566031754:} else if (file.exists(file.path(settings$outdir, 'pecan.CONFIGS.xml'))) {
1558566031755:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.CONFIGS.xml'))
1558566031756:}
1558566057862:if ((length(which(commandArgs() == "--advanced")) != 0) && (PEcAn.utils::status.check("ADVANCED") == 0)) {
1558566057864:PEcAn.utils::status.start("ADVANCED")
1558566057866:q();
1558566057868:}
1558566059649:# Start ecosystem model runs
1558566059651:if (PEcAn.utils::status.check("MODEL") == 0) {
1558566059653:PEcAn.utils::status.start("MODEL")
1558566059655:PEcAn.remote::runModule.start.model.runs(settings, stop.on.error = FALSE)
1558566059656:PEcAn.utils::status.end()
1558566059657:}
1559079730560:# ----------------------------------------------------------------------
1559079730662:# Load required libraries
1559079730664:# ----------------------------------------------------------------------
1559079730667:library(PEcAn.all)
1559079737779:library(PEcAn.utils)
1559079737780:library(RCurl)
1559079739560:system('rm -rf ~/ed2_results')
1559079744495:# make sure always to call status.end
1559079744498:options(warn=1)
1559079744782:options(error=quote({
1559079744784:PEcAn.utils::status.end("ERROR")
1559079744786:PEcAn.remote::kill.tunnel(settings)
1559079744788:if (!interactive()) {
1559079744790:q(status = 1)
1559079744792:}
1559079744794:}))
1559079746447:# ----------------------------------------------------------------------
1559079746450:# PEcAn Workflow
1559079746452:# ----------------------------------------------------------------------
1559079746454:# Open and read in settings file for PEcAn run.
1559079746455:args <- commandArgs(trailingOnly = TRUE)
1559079747170:if (is.na(args[1])){
1559079747172:settings <- PEcAn.settings::read.settings("ed2_files/pecan64.ed2.xml")
1559079747174:} else {
1559079747176:settings.file <- args[1]
1559079747178:settings <- PEcAn.settings::read.settings(settings.file)
1559079747179:}
1559079747917:# Check for additional modules that will require adding settings
1559079747919:if("benchmarking" %in% names(settings)){
1559079747921:library(PEcAn.benchmark)
1559079747922:settings <- papply(settings, read_settings_BRR)
1559079747924:}
1559079748764:if("sitegroup" %in% names(settings)){
1559079748767:if(is.null(settings$sitegroup$nSite)){
1559079748769:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1559079748771:sitegroupId = settings$sitegroup$id)
1559079748773:} else {
1559079748775:settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
1559079748777:sitegroupId = settings$sitegroup$id,
1559079748778:nSite = settings$sitegroup$nSite)
1559079748779:}
1559079748780:settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
1559079748781:}
1559079749921:# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
1559079749923:settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
1559079753577:# Write pecan.CHECKED.xml
1559079753580:PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
1559079755955:# start from scratch if no continue is passed in
1559079755957:statusFile <- file.path(settings$outdir, "STATUS")
1559079757614:if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
1559079757616:file.remove(statusFile)
1559079757618:}
1559079758655:# Do conversions
1559079758657:settings <- PEcAn.workflow::do_conversions(settings)
1559079760141:# Query the trait database for data and priors
1559079760143:if (PEcAn.utils::status.check("TRAIT") == 0){
1559079760145:PEcAn.utils::status.start("TRAIT")
1559079760146:settings <- PEcAn.workflow::runModule.get.trait.data(settings)
1559079760148:PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
1559079760149:PEcAn.utils::status.end()
1559079760150:} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
1559079760151:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
1559079760152:}
1559079763928:# Run the PEcAn meta.analysis
1559079763930:if(!is.null(settings$meta.analysis)) {
1559079763932:if (PEcAn.utils::status.check("META") == 0){
1559079763934:PEcAn.utils::status.start("META")
1559079763936:PEcAn.MA::runModule.run.meta.analysis(settings)
1559079763938:PEcAn.utils::status.end()
1559079763939:}
1559079763941:}
1559079781687:# Write model specific configs
1559079781689:if (PEcAn.utils::status.check("CONFIG") == 0){
1559079781692:PEcAn.utils::status.start("CONFIG")
1559079781694:settings <- PEcAn.workflow::runModule.run.write.configs(settings)
1559079781696:PEcAn.settings::write.settings(settings, outputfile='pecan.CONFIGS.xml')
1559079781698:PEcAn.utils::status.end()
1559079781700:} else if (file.exists(file.path(settings$outdir, 'pecan.CONFIGS.xml'))) {
1559079781702:settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.CONFIGS.xml'))
1559079781703:}
1559079806044:if ((length(which(commandArgs() == "--advanced")) != 0) && (PEcAn.utils::status.check("ADVANCED") == 0)) {
1559079806045:PEcAn.utils::status.start("ADVANCED")
1559079806046:q();
1559079806047:}
1559079808708:# Start ecosystem model runs
1559079808710:if (PEcAn.utils::status.check("MODEL") == 0) {
1559079808713:PEcAn.utils::status.start("MODEL")
1559079808715:PEcAn.remote::runModule.start.model.runs(settings, stop.on.error = FALSE)
1559079808716:PEcAn.utils::status.end()
1559079808718:}
1559079815803:traceback()
1559079992241:PEcAn.remote::runModule.start.model.runs(settings, stop.on.error = FALSE)
1559079997891:traceback()
1559085597077:## COPY AND OPEN DEFAULT PARAMETER FILES
1559085597080:# TODO: update this to read param files (CTSM and FATES) out of the refcase directory, not the PEcAn package
1559085597082:# TODO: update to allow it to pick between CLM4.5 and CLM5 (CLM5 == CTSM) parameter set based on refcase, user selection
1559085597084:## See issue https://github.com/PecanProject/pecan/issues/1008
1559085597085:# CLM5
1559085597087:ctsm.param.default <-
1559085597089:system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM')
1559085605542:ctsm.param.default
1559085736048:?install
1559085743416:library(devtools)
1559085746260:?install
1559085758745:getwd()
1559085789813:?setwd
1559085822422:setwd("~/pecan_dlebauer/pecan/")
1559085828210:getwd()
1559085832463:install()
1559085926153:setwd("~/pecan_dlebauer/pecan/models/ctsm/")
1559085929660:get(getwd())
1559085933143:getwd()
1559085939068:install()
1559085954921:.libPaths()
1559086138407:?.libPaths
1559086166739:.libPaths("~/libs/")
1559086169047:.libPaths()
1559086178835:install()
1559086233501:setwd("~/")
1559086235844:getwd()
1559086249093:library(pecan.ctsm)
1559086268863:library(PEcAn.CTSM)
1559087215075:## COPY AND OPEN DEFAULT PARAMETER FILES
1559087215077:# TODO: update this to read param files (CTSM and FATES) out of the refcase directory, not the PEcAn package
1559087215080:# TODO: update to allow it to pick between CLM4.5 and CLM5 (CLM5 == CTSM) parameter set based on refcase, user selection
1559087215082:## See issue https://github.com/PecanProject/pecan/issues/1008
1559087215084:# CLM5
1559087215085:ctsm.param.default <-
1559087215086:system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM')
1559087223372:ctsm.param.default
1559087237399:# when we implement ability to use specific refcase, do some ifelse and allow the follow option:
1559087237402:# ctsm.param.default <- file.path(refcase,"clm5_params.c171117.nc") # probably need to allow custom param file names here (pecan.xml?)
1559087237404:if (!exists('local.rundir'))
1559087244930:local.rundir <- tempdir()
1559087255229:local.rundir
1559087271161:?tempdir
1559087349285:if (!exists('run.id'))
1559087350755:run.id <- 1
1559087389768:ctsm.param.file <-
1559087389770:file.path(local.rundir, paste0("ctsm_params.", run.id, ".nc"))
1559087412416:file.copy(ctsm.param.default, ctsm.param.file)
1559087413289:ctsm.param.nc <- ncdf4::nc_open(ctsm.param.file, write = TRUE)
1559087427155:## Loop over PFTS
1559087427156:# for testing
1559087427158:# trait.values <- list(c4_grass = list(vmax = 1, b0 = 2))
1559087427160:npft <- length(trait.values)
1559087434000:trait.values <- list(c4_grass = list(vmax = 1, b0 = 2))
1559087436338:## Loop over PFTS
1559087436339:# for testing
1559087436340:# trait.values <- list(c4_grass = list(vmax = 1, b0 = 2))
1559087436341:npft <- length(trait.values)
1559087437702:PEcAn.logger::logger.debug('there are ',
1559087437704:npft,
1559087437706:'PFTs in this run, they are named:',
1559087437708:names(trait.values))
1559087440996:ctsm_pftnames <-
1559087440998:stringr::str_trim(tolower(ncdf4::ncvar_get(ctsm.param.nc, "pftname")))
1559087447673:for (i in seq_len(npft)) {
1559087447675:pft <- trait.values[[i]]
1559087447677:pft.name <- names(trait.values)[i]
1559087447678:if (is.null(pft.name) | is.na(pft.name)) {
1559087447679:PEcAn.logger::logger.error("pft.name missing")
1559087447680:} else {
1559087447681:PEcAn.logger::logger.info(paste("PFT =", pft.name))
1559087447682:## need to find a better way to match PEcAn pft names w/ CTSM pft names
1559087447683:## probably using the clm5_pfts.csv file
1559087447684:PEcAn.logger::logger.debug(paste0("fates-ctsm PFT number: ", which(ctsm_pftnames == pft.name)))
1559087447685:}
1559087447686:if (pft.name == 'env')
1559087447687:next   ## HACK, need to remove env from default
1559087447689:## Match PFT name to COLUMN
1559087447690:ipft <- match(tolower(pft.name), ctsm_pftnames)
1559087447691:PEcAn.logger::logger.debug(paste0("CTSM pft index number: ", ipft))
1559087447693:if (is.na(ipft)) {
1559087447694:PEcAn.logger::logger.severe(
1559087447695:paste(
1559087447696:"Unmatched PFT",
1559087447697:pft.name,
1559087447698:"in FATES. PEcAn does not yet support non-default PFTs for this model"
1559087447699:)
1559087447700:)
1559087447701:}
1559087447703:## Special variables used in conversions
1559087447704:leafC <- 0.48
1559087447706:# determine photo pathway
1559087447707:photo_flag <-
1559087447708:ncdf4::ncvar_get(ctsm.param.nc,
1559087447709:varid = "c3psn",
1559087447710:start = ipft,
1559087447711:count = 1)
1559087447712:photo_pathway <- ifelse(photo_flag == 1, "C3", "C4")
1559087447714:PEcAn.logger::logger.debug(paste0(
1559087447715:"Photosynthesis pathway: ",
1559087447716:photo_pathway,
1559087447717:"; flag value: ",
1559087447718:photo_flag
1559087447720:))
1559087447722:## Loop over VARIABLES
1559087447723:for (v in seq_along(pft)) {
1559087447724:var <- names(pft)[v]
1559087447726:## THESE NEED SOME FOLLOW UP
1559087447728:### ----- Leaf physiological parameters
1559087447729:# Vcmax
1559087447730:if (var == "Vcmax") {
1559087447731:ncdf4::ncvar_put(
1559087447732:nc = fates.param.nc,
1559087447733:varid = 'fates_vcmax25top',
1559087447735:start = ipft,
1559087447736:count = 1,
1559087447737:vals = pft[v]
1559087447738:)  ## (umol CO2 m-2 s-1)
1559087447739:}
1559087447740:# Ball-Berry slope
1559087447741:if (var == "stomatal_slope.BB") {
1559087447742:ncdf4::ncvar_put(
1559087447744:nc = fates.param.nc,
1559087447745:varid = 'fates_BB_slope',
1559087447746:start = ipft,
1559087447747:count = 1,
1559087447748:vals = pft[v]
1559087447750:)
1559087447751:}
1559087447753:# Ball-Berry intercept - c3.  We need to figure out how to set either C3 or C4 values? Based on the PFT?
1559087447754:# TODO: allow setting this for C3 and/or C4 PFTs
1559087447755:# right now, each are just one dimension, will need to revist this if this changes.
1559087447756:if (var == "cuticular_cond") {
1559087447758:if (photo_pathway == "C4") {
1559087447759:PEcAn.logger::logger.debug("** Setting C4 cuticular conductance value")
1559087447760:ncdf4::ncvar_put(
1559087447761:nc = fates.param.nc,
1559087447762:varid = 'fates_bbopt_c4',
1559087447764:start = 1,
1559087447765:count = 1,
1559087447766:vals = pft[v]
1559087447767:)
1559087447768:} else if (photo_pathway == "C3") {
1559087447770:PEcAn.logger::logger.debug("** Setting C3 cuticular conductance value")
1559087447771:ncdf4::ncvar_put(
1559087447772:nc = fates.param.nc,
1559087447773:varid = 'fates_bbopt_c3',
1559087447774:start = 1,
1559087447776:count = 1,
1559087447777:vals = pft[v]
1559087447778:)
1559087447779:} else {
1559087447781:PEcAn.logger::logger.warn(
1559087447782:" ** FATES photosynthesis pathway flag not set. cuticular conductance not set **"
1559087447783:)
1559087447784:}
1559087447786:}
1559087447788:## missing from params.nc
1559087447789:#       if(var == "cuticular_cond"){
1559087447790:#         gH2O_per_mol <- 18.01528
1559087447792:#         ncvar_put(nc=param.nc, varid='gsmin', start = ipft, count = 1,
1559087447793:#                   vals=pft[v]*gH2O_per_mol*1e-12)   ### umol H2O m-2 s-1 ->  [m s-1]
1559087447794:#       }
1559087447797:# T response params - modified Arrhenius params for Vcmax, Jmax, and TPU
1559087447798:# -- NOT YET IMPLEMENTED IN BETYdb. FATES params:
1559087447799:# fates_vcmaxha, fates_jmaxha, fates_tpuha, fates_vcmaxhd, fates_jmaxhd, fates_tpuhd,
1559087447800:# fates_vcmaxse, fates_jmaxse, fates_tpuse
1559087447803:# Ha activation energy for vcmax - FATES units: J/mol
1559087447804:if (var == "Ha_Modified_Arrhenius_Vcmax") {
1559087447805:ncdf4::ncvar_put(
1559087447807:nc = fates.param.nc,
1559087447808:varid = 'fates_vcmaxha',
1559087447809:start = ipft,
1559087447810:count = 1,
1559087447812:vals = pft[v] * 1000
1559087447813:)  ## convert from kj/mol to J/mol (FATES units)
1559087447814:}
1559087447817:# Hd deactivation energy for vcmax - FATES units: J/mol
1559087447818:if (var == "Hd_Modified_Arrhenius_Vcmax") {
1559087447819:ncdf4::ncvar_put(
1559087447821:nc = fates.param.nc,
1559087447822:varid = 'fates_vcmaxhd',
1559087447823:start = ipft,
1559087447825:count = 1,
1559087447826:vals = pft[v] * 1000
1559087447828:)  ## convert from kj/mol to J/mol (FATES units)
1559087447829:}
1559087447831:# Ha activation energy for Jmax - FATES units: J/mol
1559087447833:if (var == "Ha_Modified_Arrhenius_Jmax") {
1559087447834:ncdf4::ncvar_put(
1559087447835:nc = fates.param.nc,
1559087447837:varid = 'fates_jmaxha',
1559087447838:start = ipft,
1559087447839:count = 1,
1559087447841:vals = pft[v] * 1000
1559087447842:)  ## convert from kj/mol to J/mol (FATES units)
1559087447843:}
1559087447846:# Hd deactivation energy for Jmax - FATES units: J/mol
1559087447847:if (var == "Hd_Modified_Arrhenius_Jmax") {
1559087447849:ncdf4::ncvar_put(
1559087447850:nc = fates.param.nc,
1559087447851:varid = 'fates_jmaxhd',
1559087447853:start = ipft,
1559087447854:count = 1,
1559087447855:vals = pft[v] * 1000
1559087447857:)  ## convert from kj/mol to J/mol (FATES units)
1559087447858:}
1559087447861:# deltaS Vcmax - BETY units:J/mol/K;  FATES units: J/mol/K
1559087447863:if (var == "deltaS_Vcmax") {
1559087447864:ncdf4::ncvar_put(
1559087447866:nc = fates.param.nc,
1559087447867:varid = 'fates_vcmaxse',
1559087447869:start = ipft,
1559087447870:count = 1,
1559087447872:vals = pft[v]
1559087447873:)  ## convert from kj/mol to J/mol (FATES units)
1559087447875:}
1559087447876:# deltaS Jmax - BETY units:J/mol/K;  FATES units: J/mol/K
1559087447878:if (var == "deltaS_Jmax") {
1559087447879:ncdf4::ncvar_put(
1559087447881:nc = fates.param.nc,
1559087447882:varid = 'fates_jmaxse',
1559087447884:start = ipft,
1559087447885:count = 1,
1559087447887:vals = pft[v]
1559087447888:)  ## convert from kj/mol to J/mol (FATES units)
1559087447890:}
1559087447891:### ----- Leaf physiological parameters
1559087447895:### These variable names (from ED2) should updated in BETY to be more generic
1559087447896:## missing from params.nc
1559087447898:#       if(var == "mort3"){
1559087447899:#         ncvar_put(nc=param.nc, varid='background_mort_rate', start = ipft, count = 1,
1559087447901:#                   vals=pft[v])
1559087447902:#       }
1559087447904:if (var == "r_fract") {
1559087447905:## Fraction of carbon balance remaining after maintenance costs have been met that is dedicated to seed production.	[0-1]
1559087447906:ncdf4::ncvar_put(
1559087447908:nc = fates.param.nc,
1559087447909:varid = 'fates_seed_alloc',
1559087447911:start = ipft,
1559087447912:count = 1,
1559087447914:vals = pft[v]
1559087447915:)
1559087447917:}
1559087447918:## This one is currently allpft level but should be pft level  - no longer in FATES params, what was this changed to?
1559087447920:if (var == "agf_bs") {
1559087447921:## The fraction of sapwood and structural biomass that is above ground [0-1]
1559087447923:ncdf4::ncvar_put(
1559087447924:nc = fates.param.nc,
1559087447926:varid = 'fates_allom_agb_frac',
1559087447927:start = ipft,
1559087447929:count = 1,
1559087447930:vals = pft[v]
1559087447932:)
1559087447933:}
1559087447936:## PFT-level variables
1559087447938:if (var == "seed_rain_kgC") {
1559087447939:## External seed rain from outside site (non-mass conserving) ;
1559087447941:ncdf4::ncvar_put(
1559087447943:nc = fates.param.nc,
1559087447944:varid = 'fates_seed_rain',
1559087447946:start = ipft,
1559087447947:count = 1,
1559087447949:vals = pft[v]
1559087447950:)
1559087447952:}
1559087447953:## missing from params.nc
1559087447955:#       if(var == "cuticular_cond"){
1559087447957:#         gH2O_per_mol <- 18.01528
1559087447958:#         ncvar_put(nc=param.nc, varid='gsmin', start = ipft, count = 1,
1559087447960:#                   vals=pft[v]*gH2O_per_mol*1e-12)   ### umol H2O m-2 s-1 ->  [m s-1]
1559087447961:#       }
1559087447963:if (var == "DBH_at_HTMAX") {
1559087447964:## note in FATES parameter list about switching to HTMAX
1559087447966:ncdf4::ncvar_put(
1559087447968:nc = fates.param.nc,
1559087447969:varid = 'fates_allom_dbh_maxheight',
1559087447971:start = ipft,
1559087447972:count = 1,
1559087447974:vals = pft[v]
1559087447975:)  ## [cm]
1559087447977:}
1559087447978:if (var == "growth_resp_factor") {
1559087447980:## r_growth = grperc * (gpp+r_maint)  fates_grperc:long_name = "Growth respiration factor" ;
1559087447982:ncdf4::ncvar_put(
1559087447984:nc = fates.param.nc,
1559087447986:varid = 'fates_grperc',
1559087447987:start = ipft,
1559087447989:count = 1,
1559087448023:vals = pft[v]
1559087448025:)
1559087448027:}
1559087448029:if (var == "SLA") {
1559087448030:## default 0.012
1559087448032:ncdf4::ncvar_put(
1559087448034:nc = fates.param.nc,
1559087448036:varid = 'fates_slatop',
1559087448038:start = ipft,
1559087448039:count = 1,
1559087448041:vals = udunits2::ud.convert(pft[v], "m2 kg-1", "m2 g-1") / leafC
1559087448043:)
1559087448044:}
1559087448046:if (var == "leaf_turnover_rate") {
1559087448047:## fates_leaf_long:long_name = "Leaf longevity (ie turnover timescale)" ;
1559087448050:ncdf4::ncvar_put(
1559087448052:nc = fates.param.nc,
1559087448053:varid = 'fates_leaf_long',
1559087448055:start = ipft,
1559087448056:count = 1,
1559087448058:vals = 1 / pft[v]
1559087448060:) ## leaf_long = 1/leaf_turnover_rate, 1/years -> years
1559087448061:}
1559087448063:if (var == "root_turnover_rate") {
1559087448065:## fates_root_long:long_name = "root longevity (alternatively, turnover time)" ;
1559087448067:ncdf4::ncvar_put(
1559087448069:nc = fates.param.nc,
1559087448070:varid = 'fates_root_long',
1559087448072:start = ipft,
1559087448074:count = 1,
1559087448075:vals = 1 / pft[v]
1559087448077:) ## root_long = 1/root_turnover_rate, 1/years -> years
1559087448079:}
1559087448080:if (var == "c2n_leaf") {
1559087448082:ncdf4::ncvar_put(
1559087448084:nc = fates.param.nc,
1559087448085:varid = 'fates_leafcn',
1559087448087:start = ipft,
1559087448089:count = 1,
1559087448090:vals = pft[v]
1559087448092:)
1559087448094:}
1559087448095:if (var == "fineroot2leaf") {
1559087448097:#"Allocation parameter: new fine root C per new leaf C" units = "gC/gC"
1559087448099:ncdf4::ncvar_put(
1559087448100:nc = fates.param.nc,
1559087448102:varid = 'fates_froot_leaf',
1559087448104:start = ipft,
1559087448106:count = 1,
1559087448107:vals = pft[v]
1559087448109:)
1559087448111:}
1559087448114:# if(var == "sapwood_ratio"){         # leaf to sapwood area ratio. IS THIS NOW fates_sapwood_ratio(fates_pft)??
1559087448116:#   ncvar_put(nc=fates.param.nc, varid='latosa', start = ipft, count = 1,
1559087448117:#             vals=udunits2::ud.convert(pft[v],"m2 m-2","m2 cm-2"))
1559087448119:# }
1559087448123:# leaf to sapwood area ratio. This is the INTERCEPT parameter in FATES
1559087448125:# [sserbin@modex paramdata]$ ncdump fates_params_2troppftclones.c171018.nc | grep latosa
1559087448127:# double fates_allom_latosa_int(fates_pft) ;
1559087448130:# fates_allom_latosa_int:long_name = "Leaf area to sap area ratio, intercept [m2/cm2]" ;
1559087448133:#fates_allom_latosa_int:units = "ratio" ;
1559087448136:# double fates_allom_latosa_slp(fates_pft) ;
1559087448139:# fates_allom_latosa_slp:long_name = "Leaf area to sap area ratio, slope (optional)" ;
1559087448142:# fates_allom_latosa_slp:units = "unitless" ;
1559087448145:# fates_allom_latosa_int = 0.001, 0.001 ;
1559087448148:# fates_allom_latosa_slp = 0, 0 ;
1559087448151:if (var == "sapwood_ratio") {
1559087448153:ncdf4::ncvar_put(
1559087448155:nc = fates.param.nc,
1559087448157:varid = 'fates_allom_latosa_int',
1559087448159:start = ipft,
1559087448161:count = 1,
1559087448163:vals = udunits2::ud.convert(pft[v], "m2 m-2", "m2 cm-2")
1559087448165:)
1559087448167:}
1559087448169:if (var == "leaf_width") {
1559087448171:# Characteristic leaf dimension use for aerodynamic resistance
1559087448173:ncdf4::ncvar_put(
1559087448175:nc = fates.param.nc,
1559087448177:varid = 'fates_dleaf',
1559087448179:start = ipft,
1559087448181:count = 1,
1559087448183:vals = udunits2::ud.convert(pft[v], "mm", "m")
1559087448185:)
1559087448187:#PEcAn.logger::logger.debug(paste0("fates_dleaf: ",udunits2::ud.convert(pft[v],"mm","m"))) # temp debugging
1559087448189:}
1559087448191:## Currently not in param.nc file despite being on NGEE-T parameter list
1559087448193:#       if(var == "nonlocal_dispersal"){    # Place-holder parameter for important seed dispersal parameters
1559087448195:#         ncvar_put(nc=param.nc, varid='seed_dispersal_x', start = ipft, count = 1,
1559087448197:#                   vals=pft[v])
1559087448199:#       }
1559087448201:if (var == "hgt_min") {
1559087448203:# the minimum height (ie starting height) of a newly recruited plant" ;
1559087448207:ncdf4::ncvar_put(
1559087448209:nc = fates.param.nc,
1559087448211:varid = 'fates_hgt_min',
1559087448213:start = ipft,
1559087448216:count = 1,
1559087448218:vals = pft[v]
1559087448220:)
1559087448222:}
1559087448224:if (var == "leaf_reflect_nir") {
1559087448226:# Leaf reflectance: near-IR	[0-1]
1559087448228:ncdf4::ncvar_put(
1559087448230:nc = fates.param.nc,
1559087448232:varid = 'fates_rholnir',
1559087448234:start = ipft,
1559087448236:count = 1,
1559087448238:vals = pft[v]
1559087448240:)
1559087448243:}
1559087448245:if (var == "leaf_reflect_vis") {
1559087448247:# Leaf reflectance: visible	[0-1]
1559087448249:ncdf4::ncvar_put(
1559087448251:nc = fates.param.nc,
1559087448253:varid = 'fates_rholvis',
1559087448256:start = ipft,
1559087448258:count = 1,
1559087448260:vals = pft[v]
1559087448262:)
1559087448265:}
1559087448267:if (var == "wood_reflect_nir") {
1559087448269:# Stem reflectance: near-IR	[0-1]
1559087448271:ncdf4::ncvar_put(
1559087448273:nc = fates.param.nc,
1559087448275:varid = 'fates_rhosnir',
1559087448278:start = ipft,
1559087448280:count = 1,
1559087448282:vals = pft[v]
1559087448284:)
1559087448287:}
1559087448291:if (var == "wood_reflect_vis") {
1559087448293:# Stem reflectance: visible	[0-1]
1559087448295:ncdf4::ncvar_put(
1559087448297:nc = fates.param.nc,
1559087448299:varid = 'fates_rhosvis',
1559087448302:start = ipft,
1559087448304:count = 1,
1559087448306:vals = pft[v]
1559087448308:)
1559087448311:}
1559087448313:if (var == "leaf_trans_nir") {
1559087448315:# Leaf transmittance: near-IR
1559087448317:ncdf4::ncvar_put(
1559087448320:nc = fates.param.nc,
1559087448322:varid = 'fates_taulnir',
1559087448324:start = ipft,
1559087448326:count = 1,
1559087448328:vals = pft[v]
1559087448331:)
1559087448333:}
1559087448335:if (var == "leaf_trans_vis") {
1559087448338:# Leaf transmittance: visible	pft
1559087448340:ncdf4::ncvar_put(
1559087448342:nc = fates.param.nc,
1559087448344:varid = 'fates_taulvis',
1559087448347:start = ipft,
1559087448349:count = 1,
1559087448351:vals = pft[v]
1559087448353:)
1559087448356:}
1559087448358:if (var == "wood_trans_nir") {
1559087448360:# Stem transmittance: near-IR
1559087448363:ncdf4::ncvar_put(
1559087448365:nc = fates.param.nc,
1559087448368:varid = 'fates_tausnir',
1559087448370:start = ipft,
1559087448372:count = 1,
1559087448374:vals = pft[v]
1559087448377:)
1559087448379:}
1559087448382:if (var == "wood_trans_vis") {
1559087448384:# Stem transmittance: visible
1559087448386:ncdf4::ncvar_put(
1559087448389:nc = fates.param.nc,
1559087448391:varid = 'fates_tausvis',
1559087448393:start = ipft,
1559087448395:count = 1,
1559087448397:vals = pft[v]
1559087448400:)
1559087448402:}
1559087448404:if (var == "orient_factor") {
1559087448406:# Leaf/stem orientation index	[-0/4 <xl< 0.6], fates_xl:valid_range = -1., 1. ;
1559087448410:ncdf4::ncvar_put(
1559087448413:nc = fates.param.nc,
1559087448415:varid = 'fates_xl',
1559087448417:start = ipft,
1559087448420:count = 1,
1559087448422:vals = pft[v]
1559087448424:)
1559087448427:}
1559087448429:if (var == "wood_density") {
1559087448432:# Wood Specific Gravity (ie density of wood relative to density of water),
1559087448434:#fates_wood_density:long_name = "mean density of woody tissue in plant" ;
1559087448438:ncdf4::ncvar_put(
1559087448440:nc = fates.param.nc,
1559087448443:varid = 'fates_wood_density',
1559087448445:start = ipft,
1559087448447:count = 1,
1559087448450:vals = pft[v]
1559087448452:)
1559087448455:}
1559087448457:if (var == "roota_par") {
1559087448459:# CTSM rooting distribution parameter [1/m]
1559087448462:ncdf4::ncvar_put(
1559087448464:nc = fates.param.nc,
1559087448467:varid = 'roota_par',
1559087448469:start = ipft,
1559087448471:count = 1,
1559087448474:vals = pft[v]
1559087448476:)
1559087448479:}
1559087448481:if (var == "rootb_par") {
1559087448483:# CTSM rooting distribution parameter [1/m]
1559087448486:ncdf4::ncvar_put(
1559087448488:nc = fates.param.nc,
1559087448490:varid = 'rootb_par',
1559087448493:start = ipft,
1559087448495:count = 1,
1559087448497:vals = pft[v]
1559087448499:)
1559087448502:}
1559087448504:#if(var == "gsmax"){         # Maximum stomatal conductance [m s-1]  -- removed??
1559087448507:#  ncdf4::ncvar_put(nc=fates.param.nc, varid='gsmax', start = ipft, count = 1,
1559087448509:#            vals=pft[v])
1559087448512:#}
1559087448514:if (var == "psi_stomata_closure") {
1559087448516:# Soil water potential at full stomatal closure	[mm]
1559087448519:# fates_smpsc:long_name = "Soil water potential at full stomatal closure" ;
1559087448523:ncdf4::ncvar_put(
1559087448525:nc = fates.param.nc,
1559087448528:varid = 'fates_smpsc',
1559087448531:start = ipft,
1559087448534:count = 1,
1559087448536:vals = udunits2::ud.convert(pft[v], "m", "mm")
1559087448539:)
1559087448541:}
1559087448543:if (var == "psi_stomata_open") {
1559087448546:# Soil water potential at full stomatal opening	pft	[mm]
1559087448548:ncdf4::ncvar_put(
1559087448551:nc = fates.param.nc,
1559087448553:varid = 'fates_smpso',
1559087448556:start = ipft,
1559087448558:count = 1,
1559087448561:vals = udunits2::ud.convert(pft[v], "m", "mm")
1559087448563:)
1559087448566:}
1559087448571:## --- update these to match new FATES hydro code when that code-base is added to FATES master -- ##
1559087448573:if (var == "root_bulk_modulus") {
1559087448576:# coarse root bulk elastic modulus (εroot)	[MPa] - NOT IN FATES ANYMORE??
1559087448578:ncdf4::ncvar_put(
1559087448581:nc = fates.param.nc,
1559087448583:varid = 'epsil_root',
1559087448587:start = ipft,
1559087448589:count = 1,
1559087448592:vals = pft[v]
1559087448595:)
1559087448597:}
1559087448600:if (var == "sapwood_bulk_modulus") {
1559087448602:# sapwood bulk elastic modulus (εstem)	[MPa] - NOT IN FATES ANYMORE??
1559087448605:ncdf4::ncvar_put(
1559087448607:nc = fates.param.nc,
1559087448610:varid = 'epsil_stem',
1559087448612:start = ipft,
1559087448615:count = 1,
1559087448618:vals = pft[v]
1559087448620:)
1559087448623:}
1559087448625:if (var == "leaf_bulk_modulus") {
1559087448628:# leaf bulk elastic modulus (εleaf) [MPa] - NOT IN FATES ANYMORE??
1559087448631:ncdf4::ncvar_put(
1559087448633:nc = fates.param.nc,
1559087448636:varid = 'epsil_leaf',
1559087448638:start = ipft,
1559087448641:count = 1,
1559087448643:vals = pft[v]
1559087448646:)
1559087448649:}
1559087448651:if (var == "root_osmotic_potential") {
1559087448654:# coarse root osmotic potential at full turgor (πoroot)	[MPa] - NOT IN FATES ANYMORE??
1559087448657:ncdf4::ncvar_put(
1559087448659:nc = fates.param.nc,
1559087448662:varid = 'pinot_root',
1559087448664:start = ipft,
1559087448667:count = 1,
1559087448670:vals = pft[v]
1559087448672:)
1559087448675:}
1559087448677:if (var == "sapwood_osmotic_potential") {
1559087448680:# sapwood osmotic potential at full turgor (πostem) [MPa]  - NOT IN FATES ANYMORE??
1559087448683:ncdf4::ncvar_put(
1559087448685:nc = fates.param.nc,
1559087448688:varid = 'pinot_stem',
1559087448691:start = ipft,
1559087448693:count = 1,
1559087448696:vals = pft[v]
1559087448699:)
1559087448701:}
1559087448704:if (var == "leaf_osmotic_potential") {
1559087448707:# leaf osmotic potential at full turgor (πoleaf) [MPa]  - NOT IN FATES ANYMORE??
1559087448709:ncdf4::ncvar_put(
1559087448712:nc = fates.param.nc,
1559087448715:varid = 'pinot_leaf',
1559087448717:start = ipft,
1559087448720:count = 1,
1559087448723:vals = pft[v]
1559087448725:)
1559087448728:}
1559087448731:if (var == "kmax_leaf") {
1559087448733:# Maximum leaf hydraulic conductivity per unit leaf area [mmol m-2 s-1 Mpa-1]
1559087448736:ncdf4::ncvar_put(
1559087448738:nc = fates.param.nc,
1559087448741:varid = 'kmax_leaf',
1559087448744:start = ipft,
1559087448746:count = 1,
1559087448749:vals = pft[v]
1559087448752:)
1559087448754:}
1559087448757:if (var == "kmax_root") {
1559087448760:# Maximum root hydraulic conductivity per unit xs sapwood [kg m-1 s-1 Mpa-1]
1559087448762:ncdf4::ncvar_put(
1559087448765:nc = fates.param.nc,
1559087448768:varid = 'kmax_root',
1559087448771:start = ipft,
1559087448773:count = 1,
1559087448776:vals = pft[v]
1559087448779:)
1559087448782:}
1559087448784:if (var == "kmax_stem") {
1559087448787:# Maximum stem hydraulic conductivity per unit xs sapwood area	[kg m-1 s-1 Mpa-1]
1559087448790:ncdf4::ncvar_put(
1559087448792:nc = fates.param.nc,
1559087448795:varid = 'kmax_stem',
1559087448798:start = ipft,
1559087448801:count = 1,
1559087448804:vals = pft[v]
1559087448806:)
1559087448809:}
1559087448812:if (var == "p50_gs") {
1559087448815:# leaf water potential at 50% loss of stomatal conductance (Pgs50)	[MPa]
1559087448818:ncdf4::ncvar_put(
1559087448820:nc = fates.param.nc,
1559087448823:varid = 'p50_gs',
1559087448826:start = ipft,
1559087448829:count = 1,
1559087448831:vals = pft[v]
1559087448834:)
1559087448837:}
1559087448840:if (var == "p50_leaf") {
1559087448842:# leaf water potential at 50% loss of leaf hydraulic conductivity (P50leaf)	pft	[MPa]
1559087448845:ncdf4::ncvar_put(
1559087448848:nc = fates.param.nc,
1559087448850:varid = 'p50_leaf',
1559087448853:start = ipft,
1559087448856:count = 1,
1559087448859:vals = pft[v]
1559087448861:)
1559087448864:}
1559087448867:if (var == "p50_root") {
1559087448870:# root water potential at 50% loss of root hydraulic conductivity	[MPa]
1559087448873:ncdf4::ncvar_put(
1559087448876:nc = fates.param.nc,
1559087448878:varid = 'p50_root',
1559087448881:start = ipft,
1559087448884:count = 1,
1559087448887:vals = pft[v]
1559087448890:)
1559087448893:}
1559087448896:if (var == "p50_stem") {
1559087448899:# stem water potential at 50% loss of stem hydraulic conductivity [MPa]
1559087448901:ncdf4::ncvar_put(
1559087448904:nc = fates.param.nc,
1559087448907:varid = 'p50_stem',
1559087448910:start = ipft,
1559087448913:count = 1,
1559087448916:vals = pft[v]
1559087448919:)
1559087448921:}
1559087448924:if (var == "water_content_TLP_root") {
1559087448927:# coarse root relative water content at turgor loss (RWCtlproot)
1559087448930:ncdf4::ncvar_put(
1559087448933:nc = fates.param.nc,
1559087448936:varid = 'rwctlp_root',
1559087448939:start = ipft,
1559087448942:count = 1,
1559087448944:vals = pft[v]
1559087448947:)
1559087448950:}
1559087448953:if (var == "water_content_TLP_sapwood") {
1559087448956:# sapwood relative water content at turgor loss
1559087448959:ncdf4::ncvar_put(
1559087448962:nc = fates.param.nc,
1559087448965:varid = 'rwctlp_stem',
1559087448968:start = ipft,
1559087448970:count = 1,
1559087448973:vals = pft[v]
1559087448976:)
1559087448979:}
1559087448982:if (var == "water_content_TLP_leaf") {
1559087448985:# leaf relative water content at turgor loss
1559087448988:ncdf4::ncvar_put(
1559087448991:nc = fates.param.nc,
1559087448994:varid = 'rwctlp_leaf',
1559087448996:start = ipft,
1559087448999:count = 1,
1559087449002:vals = pft[v]
1559087449005:)
1559087449008:}
1559087449011:if (var == "leafp_min") {
1559087449014:# Minimum leaf water potential [MPa]
1559087449017:ncdf4::ncvar_put(
1559087449020:nc = fates.param.nc,
1559087449023:varid = 'leafp_min',
1559087449026:start = ipft,
1559087449028:count = 1,
1559087449031:vals = pft[v]
1559087449034:)
1559087449037:}
1559087449040:## --- update these to match new FATES hydro code when that code-base is added to FATES master -- ##
1559087449046:if (var == "clone_alloc") {
1559087449049:# A carbon allocation that is added on to seed_alloc for trees larger than dbh_max.	[0-1]
1559087449052:# fates_clone_alloc:long_name = "fraction of available carbon balance allocated to clonal reproduction"
1559087449055:ncvar_put(
1559087449058:nc = fates.param.nc,
1559087449061:varid = 'fates_clone_alloc',
1559087449064:start = ipft,
1559087449067:count = 1,
1559087449070:vals = pft[v]
1559087449073:)
1559087449076:}
1559087449079:if (var == "storage_target_ratio") {
1559087449082:# The target fraction of storage carbon over leaf carbon	[0-1]
1559087449085:# fates_cushion:long_name = "maximum size of storage C pool, relative to maximum size of leaf C pool" ;
1559087449090:ncdf4::ncvar_put(
1559087449093:nc = fates.param.nc,
1559087449096:varid = 'fates_cushion',
1559087449099:start = ipft,
1559087449102:count = 1,
1559087449105:vals = pft[v]
1559087449108:)
1559087449111:}
1559087449114:if (var == "crown_depth_fraction") {
1559087449117:# Crown depth fraction of a cohort relative to its total height [0-1]
1559087449120:# fates_crown_depth_frac:long_name = "the depth of a cohorts crown as a fraction of its height"
1559087449123:ncdf4::ncvar_put(
1559087449126:nc = fates.param.nc,
1559087449129:varid = 'fates_crown_depth_frac',
1559087449132:start = ipft,
1559087449135:count = 1,
1559087449138:vals = pft[v]
1559087449141:)
1559087449144:}
1559087449147:if (var == "hydraulic_stress_mortality") {
1559087449150:# The mortality rate imposed on plants meeting hydraulic stress failure condition [1/yr]
1559087449153:# fates_stress_mort:long_name = "mortality rate associated with hydraulic stress exceedence"
1559087449156:ncdf4::ncvar_put(
1559087449160:nc = fates.param.nc,
1559087449163:varid = 'fates_stress_mort',
1559087449166:start = ipft,
1559087449169:count = 1,
1559087449172:vals = pft[v]
1559087449175:)
1559087449178:}
1559087449181:if (var == "PPA_comp_exclusion") {
1559087449184:# Competetive exclusion parameter for weighting demotions from the upper canopy classification in PPA
1559087449187:#fates_comp_excln:long_name = "weighting factor (exponent on dbh) for canopy layer exclusion and promotion"
1559087449191:ncdf4::ncvar_put(
1559087449194:nc = fates.param.nc,
1559087449197:varid = 'fates_comp_excln',
1559087449200:start = ipft,
1559087449203:count = 1,
1559087449206:vals = pft[v]
1559087449209:)
1559087449212:}
1559087449215:#if(var == "grass_spread"){         # Controls the area footprint of a grass pft, as a function of number density and dbh
1559087449218:#  ncdf4::ncvar_put(nc=fates.param.nc, varid='grass_spread', start = ipft, count = 1,
1559087449221:#            vals=pft[v])
1559087449224:#}
1559087449227:if (var == "leaf_stor_priority") {
1559087449231:# Leaf turnover vs labile carbon use prioritisation. This is the fraction of maintenance demand that
1559087449234:# will be replenished at all costs and before storage is filled.	pft	[0-1]
1559087449237:# fates_leaf_stor_priority:long_name = "factor governing priority of replacing storage with NPP"
1559087449240:ncdf4::ncvar_put(
1559087449243:nc = fates.param.nc,
1559087449246:varid = 'fates_leaf_stor_priority',
1559087449249:start = ipft,
1559087449253:count = 1,
1559087449256:vals = pft[v]
1559087449259:)
1559087449262:}
1559087449265:if (var == "understory_treefall_mortality") {
1559087449268:# The fraction of trees in understory that die from impacts of large treefalls.
1559087449271:# In the model this is not a rate 1/year, so we need to convert it
1559087449275:# fates_understorey_death:long_name = "fraction of plants in understorey cohort impacted by overstorey tree-fall"
1559087449278:ncdf4::ncvar_put(
1559087449281:nc = fates.param.nc,
1559087449284:varid = 'fates_understorey_death',
1559087449287:start = ipft,
1559087449290:count = 1,
1559087449294:vals = pft[v]
1559087449297:)
1559087449300:}
1559087449303:if (var == "displar") {
1559087449306:# fates_displar:long_name = "Ratio of displacement height to canopy top height"
1559087449309:ncdf4::ncvar_put(
1559087449312:nc = fates.param.nc,
1559087449315:varid = 'fates_displar',
1559087449319:start = ipft,
1559087449324:count = 1,
1559087449327:vals = pft[v]
1559087449330:)
1559087449333:}
1559087449337:if (var == "z0mr") {
1559087449340:# Ratio of momentum roughness length to canopy top height
1559087449343:# fates_z0mr:long_name = "Ratio of momentum roughness length to canopy top height"
1559087449346:ncdf4::ncvar_put(
1559087449349:nc = fates.param.nc,
1559087449355:varid = 'fates_z0mr',
1559087449359:start = ipft,
1559087449362:count = 1,
1559087449365:vals = pft[v]
1559087449368:)
1559087449372:}
1559087449375:if (var == "inital_stem_density") {
1559087449378:# Stem density of different PFTs during a bare ground initialization.	[/m2]
1559087449381:# fates_initd:long_name = "initial seedling density for a cold-start near-bare-ground simulation"
1559087449385:ncdf4::ncvar_put(
1559087449388:nc = fates.param.nc,
1559087449391:varid = 'fates_initd',
1559087449394:start = ipft,
1559087449398:count = 1,
1559087449401:vals = pft[v]
1559087449404:)
1559087449408:}
1559087449411:if (var == "bark_scaler") {
1559087449415:# Fraction of tree diameter that is bark. Used in fire.	[0-1]
1559087449418:# fates_bark_scaler:long_name = "the thickness of a cohorts bark as a fraction of its dbh"
1559087449421:ncdf4::ncvar_put(
1559087449425:nc = fates.param.nc,
1559087449428:varid = 'fates_bark_scaler',
1559087449431:start = ipft,
1559087449435:count = 1,
1559087449438:vals = pft[v]
1559087449441:)
1559087449444:}
1559087449447:if (var == "crown_kill") {
1559087449450:## SPITFIRE: Mortality from fire scorching susceptibility parameter
1559087449453:# fates_crown_kill:long_name = "fire parameter, see equation 22 in Thonicke et al 2010"
1559087449457:ncdf4::ncvar_put(
1559087449460:nc = fates.param.nc,
1559087449463:varid = 'fates_crown_kill',
1559087449467:start = ipft,
1559087449470:count = 1,
1559087449473:vals = pft[v]
1559087449477:)
1559087449480:}
1559087449490:## BINARY FLAGS: These should be set-able by PEcAn but not sampled
1559087449493:#if(var == "photosynthetic_pathway"){         #
1559087449496:#  ncdf4::ncvar_put(nc=fates.param.nc, varid='c3psn', start = ipft, count = 1,
1559087449499:#            vals=as.numeric(pft[v] == 3))
1559087449503:#}
1559087449506:if (var == "crop") {
1559087449509:# Binary crop flag: 0. = not crop, 1. = crop
1559087449513:ncdf4::ncvar_put(
1559087449516:nc = fates.param.nc,
1559087449519:varid = '',
1559087449522:start = ipft,
1559087449526:count = 1,
1559087449529:vals = pft[v]
1559087449532:)
1559087449536:}
1559087449539:if (var == "irrigated") {
1559087449542:# Binary Irrigated PFT flag
1559087449546:ncdf4::ncvar_put(
1559087449549:nc = fates.param.nc,
1559087449553:varid = 'irrigated',
1559087449556:start = ipft,
1559087449559:count = 1,
1559087449563:vals = pft[v]
1559087449566:)
1559087449569:}
1559087449573:if (var == "cold_deciduous") {
1559087449576:# Binary flag for seasonal-deciduous leaf habit (0-not,1-it is)
1559087449579:# fates_season_decid:flag_meanings = "NOT seasonal-deciduous"
1559087449583:ncdf4::ncvar_put(
1559087449586:nc = fates.param.nc,
1559087449590:varid = 'fates_season_decid',
1559087449593:start = ipft,
1559087449596:count = 1,
1559087449600:vals = pft[v]
1559087449603:)
1559087449607:ncdf4::ncvar_put(
1559087449610:nc = fates.param.nc,
1559087449613:varid = 'fates_evergreen',
1559087449617:start = ipft,
1559087449620:count = 1,
1559087449624:vals = 0
1559087449627:)
1559087449631:}
1559087449634:if (var == "stress_deciduous") {
1559087449637:# Binary flag for stress-deciduous leaf habit (0-not,1-it is)
1559087449641:ncdf4::ncvar_put(
1559087449645:nc = fates.param.nc,
1559087449648:varid = 'fates_stress_decid',
1559087449652:start = ipft,
1559087449655:count = 1,
1559087449659:vals = pft[v]
1559087449662:)
1559087449665:ncdf4::ncvar_put(
1559087449669:nc = fates.param.nc,
1559087449672:varid = 'fates_evergreen',
1559087449676:start = ipft,
1559087449679:count = 1,
1559087449682:vals = 0
1559087449685:)
1559087449689:}
1559087449692:if (var == "woody") {
1559087449696:# Binary woody lifeform flag (0-is not woody, 1-it is woody)
1559087449699:ncdf4::ncvar_put(
1559087449703:nc = fates.param.nc,
1559087449706:varid = 'fates_woody',
1559087449710:start = ipft,
1559087449713:count = 1,
1559087449717:vals = pft[v]
1559087449720:)
1559087449724:}
1559087449727:if (var == "evergreen") {
1559087449731:# Binary flag for evergreen leaf habit
1559087449734:ncdf4::ncvar_put(
1559087449738:nc = fates.param.nc,
1559087449741:varid = 'fates_evergreen',
1559087449745:start = ipft,
1559087449748:count = 1,
1559087449752:vals = pft[v]
1559087449755:)
1559087449759:ncdf4::ncvar_put(
1559087449762:nc = fates.param.nc,
1559087449766:varid = 'fates_stress_decid',
1559087449769:start = ipft,
1559087449773:count = 1,
1559087449777:vals = 0
1559087449780:)
1559087449784:ncdf4::ncvar_put(
1559087449787:nc = fates.param.nc,
1559087449791:varid = 'fates_season_decid',
1559087449794:start = ipft,
1559087449798:count = 1,
1559087449801:vals = 0
1559087449805:)
1559087449809:}
1559087449816:## ALLPFT indexed (size = 1)
1559087449819:if (var == "veg_respiration_Q10") {
1559087449823:## Q10 for maintenance respiration. CTSM param. q10_mr(allpfts)
1559087449826:ncdf4::ncvar_put(
1559087449830:nc = ctsm.param.nc,
1559087449833:varid = 'q10_mr',
1559087449837:start = 1,
1559087449841:count = 1,
1559087449844:vals = pft[v]
1559087449848:)
1559087449851:}
1559087449855:if (var == "CelluloseS") {
1559087449859:## Cellulose fraction for CWD
1559087449862:ncvar_put(
1559087449866:nc = fates.param.nc,
1559087449869:varid = 'fates_cwd_fcel',
1559087449873:start = 1,
1559087449876:count = 1,
1559087449880:vals = pft[v]
1559087449883:)
1559087449887:}
1559087449891:if (var == "s_lignin") {
1559087449894:## Lignin fraction for CWD
1559087449898:ncdf4::ncvar_put(
1559087449901:nc = fates.param.nc,
1559087449905:varid = 'fates_cwd_flig',
1559087449909:start = 1,
1559087449912:count = 1,
1559087449916:vals = pft[v]
1559087449919:)
1559087449923:}
1559087449927:if (var == "c2n_som1") {
1559087449930:## C:N for SOM pool 1. CTSM param
1559087449934:ncdf4::ncvar_put(
1559087449938:nc = ctsm.param.nc,
1559087449941:varid = 'cn_s1_bgc',
1559087449945:start = 1,
1559087449948:count = 1,
1559087449952:vals = pft[v]
1559087449956:)
1559087449959:}
1559087449963:if (var == "c2n_som2") {
1559087449967:## C:N for SOM pool 2. CTSM param
1559087449970:ncdf4::ncvar_put(
1559087449974:nc = ctsm.param.nc,
1559087449978:varid = 'cn_s2_bgc',
1559087449981:start = 1,
1559087449985:count = 1,
1559087449989:vals = pft[v]
1559087449992:)
1559087449996:}
1559087449999:if (var == "c2n_som3") {
1559087450003:## C:N for SOM pool 3. CTSM param
1559087450007:ncdf4::ncvar_put(
1559087450010:nc = ctsm.param.nc,
1559087450014:varid = 'cn_s3_bgc',
1559087450018:start = 1,
1559087450021:count = 1,
1559087450025:vals = pft[v]
1559087450029:)
1559087450032:}
1559087450036:if (var == "cnscalefactor") {
1559087450040:## Scale factor on CN decomposition for assigning methane flux . CTSM param
1559087450043:ncdf4::ncvar_put(
1559087450047:nc = ctsm.param.nc,
1559087450050:varid = 'cnscalefactor',
1559087450054:start = 1,
1559087450058:count = 1,
1559087450062:vals = pft[v]
1559087450065:)
1559087450069:}
1559087450073:if (var == "decomp_depth_efolding") {
1559087450077:## e-folding depth for reduction in decomposition.
1559087450080:## Set to large number for depth-independance. CTSM param
1559087450084:ncdf4::ncvar_put(
1559087450088:nc = ctsm.param.nc,
1559087450091:varid = 'decomp_depth_efolding',
1559087450095:start = 1,
1559087450098:count = 1,
1559087450102:vals = pft[v]
1559087450106:)
1559087450110:}
1559087450113:if (var == "CWD_fragmentation_rate") {
1559087450117:## Fragmentation rate for CWD. units = "1/day", CTSM param
1559087450121:ncvar_put(
1559087450125:nc = ctsm.param.nc,
1559087450128:varid = 'k_frag',
1559087450132:start = 1,
1559087450136:count = 1,
1559087450140:vals = pft[v]
1559087450143:)
1559087450147:}
1559087450151:if (var == "rf_cwdl2_bgc") {
1559087450155:## respiration fraction from CWD to litter 2 - REMOVED FROM FATES PARAMS?
1559087450158:ncdf4::ncvar_put(
1559087450162:nc = fates.param.nc,
1559087450166:varid = 'rf_cwdl2_bgc',
1559087450170:start = 1,
1559087450173:count = 1,
1559087450177:vals = pft[v]
1559087450181:)
1559087450185:}
1559087450188:if (var == "rf_cwdl3_bgc") {
1559087450192:## respiration fraction from CWD to litter 3 - REMOVED FROM FATES PARAMS?
1559087450196:ncdf4::ncvar_put(
1559087450200:nc = fates.param.nc,
1559087450203:varid = 'rf_cwdl3_bgc',
1559087450207:start = 1,
1559087450211:count = 1,
1559087450215:vals = pft[v]
1559087450223:)
1559087450227:}
1559087450230:if (var == "rf_l1s1_bgc") {
1559087450234:## Respiration fraction for litter 1 -> SOM 1 - REMOVED FROM FATES PARAMS?
1559087450238:ncdf4::ncvar_put(
1559087450241:nc = fates.param.nc,
1559087450245:varid = 'rf_l1s1_bgc',
1559087450249:start = 1,
1559087450252:count = 1,
1559087450256:vals = pft[v]
1559087450259:)
1559087450263:}
1559087450266:if (var == "rf_l2s1_bgc") {
1559087450270:## respiration fraction litter 2 to SOM 1 - REMOVED FROM FATES PARAMS?
1559087450273:ncdf4::ncvar_put(
1559087450277:nc = fates.param.nc,
1559087450281:varid = 'rf_l2s1_bgc',
1559087450285:start = 1,
1559087450289:count = 1,
1559087450292:vals = pft[v]
1559087450296:)
1559087450300:}
1559087450304:if (var == "rf_l3s2_bgc") {
1559087450308:## respiration fraction from litter 3 to SOM 2 - REMOVED FROM FATES PARAMS?
1559087450311:ncdf4::ncvar_put(
1559087450315:nc = fates.param.nc,
1559087450319:varid = 'rf_l3s2_bgc',
1559087450323:start = 1,
1559087450327:count = 1,
1559087450331:vals = pft[v]
1559087450335:)
1559087450338:}
1559087450342:if (var == "rf_s2s1_bgc") {
1559087450346:## respiration fraction SOM 2 to SOM 1 - REMOVED FROM FATES PARAMS?
1559087450350:ncdf4::ncvar_put(
1559087450354:nc = fates.param.nc,
1559087450358:varid = 'rf_s2s1_bgc',
1559087450361:start = 1,
1559087450365:count = 1,
1559087450369:vals = pft[v]
1559087450373:)
1559087450377:}
1559087450381:if (var == "rf_s2s3_bgc") {
1559087450385:## Respiration fraction for SOM 2 -> SOM 3 - REMOVED FROM FATES PARAMS?
1559087450388:ncdf4::ncvar_put(
1559087450392:nc = fates.param.nc,
1559087450396:varid = 'rf_s2s3_bgc',
1559087450405:start = 1,
1559087450409:count = 1,
1559087450413:vals = pft[v]
1559087450417:)
1559087450421:}
1559087450425:if (var == "rf_s3s1_bgc") {
1559087450429:## respiration fraction SOM 3 to SOM 1 - REMOVED FROM FATES PARAMS?
1559087450433:ncdf4::ncvar_put(
1559087450436:nc = fates.param.nc,
1559087450440:varid = 'rf_s3s1_bgc',
1559087450444:start = 1,
1559087450448:count = 1,
1559087450452:vals = pft[v]
1559087450456:)
1559087450460:}
1559087450463:if (var == "Q10_frozen_soil") {
1559087450467:## Separate q10 for frozen soil respiration rates - REMOVED FROM FATES PARAMS?
1559087450471:ncdf4::ncvar_put(
1559087450475:nc = fates.param.nc,
1559087450479:varid = 'froz_q10',
1559087450483:start = 1,
1559087450487:count = 1,
1559087450491:vals = pft[v]
1559087450495:)
1559087450499:}
1559087450507:## NONE indexed
1559087450510:##   -- FIRE
1559087450514:if (var == "max_fire_duration") {
1559087450518:## maximum duration of fire	none	hours
1559087450522:# fates_max_durat:long_name = "spitfire parameter, fire maximum duration, Equation 14 Thonicke et al 2010"
1559087450526:ncdf4::ncvar_put(nc = fates.param.nc,
1559087450530:varid = 'fates_max_durat',
1559087450534:vals = pft[v])
1559087450538:}
1559087450542:if (var == "nfires") {
1559087450546:## The number of fires initiated per m2 per year, from lightning and humans
1559087450550:# fates_nignitions:long_name = "number of daily ignitions (nfires = nignitions*FDI*area_scaling)"
1559087450554:ncdf4::ncvar_put(nc = fates.param.nc,
1559087450558:varid = 'fates_nignitions',
1559087450562:vals = pft[v])
1559087450566:}
1559087450570:if (var == "fuel_energy") {
1559087450574:## energy content of fuel [kj kg-1]
1559087450577:# fates_fuel_energy:long_name = "pitfire parameter, heat content of fuel"
1559087450581:ncdf4::ncvar_put(nc = fates.param.nc,
1559087450587:varid = 'fates_fuel_energy',
1559087450593:vals = pft[v])
1559087450598:}
1559087450602:if (var == "fuel_particle_density") {
1559087450607:## particle density of fuel [kg m-3]
1559087450611:# fates_part_dens:long_name = "spitfire parameter, oven dry particle density, Table A1 Thonicke et al 2010"
1559087450615:ncdf4::ncvar_put(nc = fates.param.nc,
1559087450619:varid = 'fates_part_dens',
1559087450623:vals = pft[v])
1559087450627:}
1559087450631:if (var == "durat_slope") {
1559087450635:## SPITFIRE: change in fire duration with fire danger index. from Canadian Forest Service
1559087450640:# fates_durat_slope:long_name = "spitfire parameter, fire max duration slope, Equation 14 Thonicke et al 2010"
1559087450644:ncdf4::ncvar_put(nc = fates.param.nc,
1559087450648:varid = 'fates_durat_slope',
1559087450652:vals = pft[v])
1559087450657:}
1559087450661:if (var == "miner_damp") {
1559087450665:## SPITFIRE mineral dampening coefficient
1559087450669:# fates_miner_damp:long_name = "spitfire parameter, mineral-dampening coefficient EQ A1 Thonicke et al 2010 "
1559087450673:ncdf4::ncvar_put(nc = fates.param.nc,
1559087450677:varid = 'fates_miner_damp',
1559087450682:vals = pft[v])
1559087450686:}
1559087450690:if (var == "fuel_minerals") {
1559087450694:## mineral content of fuel
1559087450698:# fates_miner_total:long_name = "spitfire parameter, total mineral content, Table A1 Thonicke et al 2010"
1559087450702:ncdf4::ncvar_put(nc = fates.param.nc,
1559087450706:varid = 'fates_miner_total',
1559087450710:vals = pft[v])
1559087450714:}
1559087450718:if (var == "alpha_scorch_height") {
1559087450722:## SPITFIRE scorch height parameter
1559087450726:# fates_alpha_SH:long_name = "spitfire parameter, alpha scorch height, Equation 16 Thonicke et al 2010"
1559087450731:ncdf4::ncvar_put(nc = fates.param.nc,
1559087450735:varid = 'fates_alpha_SH',
1559087450739:vals = pft[v])
1559087450743:}
1559087450747:if (var == "fdi_a") {
1559087450751:## SPITFIRE Constant in calculation of dewpoint for Fire Danger Index (FDI)
1559087450755:# fates_fdi_a:long_name = "spitfire parameter (unknown) "
1559087450759:ncdf4::ncvar_put(nc = fates.param.nc,
1559087450763:varid = 'fates_fdi_a',
1559087450768:vals = pft[v])
1559087450772:}
1559087450776:if (var == "fdi_alpha") {
1559087450780:## SPITFIRE Constant in calculation of dewpoint for Fire Danger Index (FDI)
1559087450784:# fates_fdi_alpha:long_name = "spitfire parameter, EQ 7 Venevsky et al. GCB 2002,(modified EQ 8 Thonicke et al. 2010) "
1559087450789:ncdf4::ncvar_put(nc = fates.param.nc,
1559087450793:varid = 'fates_fdi_alpha',
1559087450797:vals = pft[v])
1559087450801:}
1559087450806:if (var == "fdi_b") {
1559087450810:## SPITFIRE Constant in calculation of dewpoint for Fire Danger Index (FDI)
1559087450814:# fates_fdi_b:long_name = "spitfire parameter (unknown) "
1559087450818:ncdf4::ncvar_put(nc = fates.param.nc,
1559087450822:varid = 'fates_fdi_b',
1559087450827:vals = pft[v])
1559087450831:}
1559087450835:##   -- CANOPY
1559087450839:#if(var == "canopy_max_spread"){            ## Maximum allowable "dynamic ratio of dbh to canopy area" for cohorts in closed canopies.	-	[cm/m2]
1559087450843:#  ncdf4::ncvar_put(nc=fates.param.nc, varid='maxspread',vals=pft[v])
1559087450847:#}
1559087450852:#
1559087450856:#if(var == "canopy_min_spread"){            ## Minimum allowable "dynamic ratio of dbh to canopy area" for cohorts in closed canopies.	-	[cm/m2]
1559087450860:#  ncdf4::ncvar_put(nc=fates.param.nc, varid='minspread',vals=pft[v])
1559087450864:#}
1559087450873:## LITTERCLASS indexed (Size:6)
1559087450877:## MCD: skipping for now until there's demonstrated demand because it requires expanding every variable out into VARNAME_[1..n]
1559087450881:# low_moisture_C	Intercept (constant) of fuel moisture to burned fraction term for drier fuel	litterclass
1559087450886:# low_moisture_S	Slope of fuel moisture to burned fraction term for drier fuel	litterclass
1559087450890:# max_decomp	Maximum decomposition rate of litter in the absence of moisture or temperature stress, per fuel class	litterclass	y-1
1559087450894:# mid_moisture	Parameter of burned fraction term. Below this 'low' constants apply, above this, 'mid' constants apply, 	litterclass
1559087450898:# mid_moisture_C	Intercept (constant) of fuel moisture to burned fraction term for wetter fuel	litterclass
1559087450903:# min_moisture	Parameter of burned fraction term. Below this value all litter is burned by a fire. Above, 'low' constants apply	litterclass
1559087450907:# FBD	Fuel Bulk Density of fuel class 	litterclass	kg m-3
1559087450911:# alpha_FMC	Parameter of function relating fuel moisture content to meteorological fire danger index 	litterclass
1559087450915:# SAV	Surface Area to Volume Ratio of fuel class 	litterclass	cm-1
1559087450924:## NCWD dimensioned       Size:4
1559087450928:if (var == "CWD_frac1") {
1559087450932:##Fraction of coarse woody debris (CWD) that is moved into each of the four woody fuel classes
1559087450936:ncdf4::ncvar_put(
1559087450940:nc = fates.param.nc,
1559087450944:varid = 'fates_CWD_frac',
1559087450948:start = 1,
1559087450953:count = 1,
1559087450957:vals = pft[v]
1559087450961:)
1559087450965:}
1559087450969:if (var == "CWD_frac2") {
1559087450974:ncdf4::ncvar_put(
1559087450978:nc = fates.param.nc,
1559087450982:varid = 'fates_CWD_frac',
1559087450987:start = 2,
1559087450991:count = 1,
1559087450996:vals = pft[v]
1559087451000:)
1559087451004:}
1559087451009:if (var == "CWD_frac3") {
1559087451013:ncdf4::ncvar_put(
1559087451018:nc = fates.param.nc,
1559087451022:varid = 'fates_CWD_frac',
1559087451027:start = 3,
1559087451031:count = 1,
1559087451035:vals = pft[v]
1559087451040:)
1559087451044:}
1559087451048:if (var == "CWD_frac4") {
1559087451053:ncdf4::ncvar_put(
1559087451057:nc = fates.param.nc,
1559087451061:varid = 'fates_CWD_frac',
1559087451066:start = 4,
1559087451070:count = 1,
1559087451074:vals = pft[v]
1559087451079:)
1559087451083:}
1559087451096:} ## end loop over VARIABLES
1559087451100:} ## end loop over PFTs
1559087468335:#ncdf4::nc_close(param.nc)
1559087468338:ncdf4::nc_close(ctsm.param.nc)
1559087512188:pft <- trait.values[[i]]
1559087513357:pft.name <- names(trait.values)[i]
1559087518020:pft
1559087522441:pft.name
1559087556958:if (is.null(pft.name) | is.na(pft.name)) {
1559087556961:PEcAn.logger::logger.error("pft.name missing")
1559087556963:} else {
1559087556965:PEcAn.logger::logger.info(paste("PFT =", pft.name))
1559087556967:## need to find a better way to match PEcAn pft names w/ CTSM pft names
1559087556969:## probably using the clm5_pfts.csv file
1559087556971:PEcAn.logger::logger.debug(paste0("fates-ctsm PFT number: ", which(ctsm_pftnames == pft.name)))
1559087556972:}
1559087569932:if (pft.name == 'env')
1559087570849:next   ## HACK, need to remove env from default
1559087575538:## Match PFT name to COLUMN
1559087575541:ipft <- match(tolower(pft.name), ctsm_pftnames)
1559087577744:PEcAn.logger::logger.debug(paste0("CTSM pft index number: ", ipft))
1559087589091:if (is.na(ipft)) {
1559087589093:PEcAn.logger::logger.severe(
1559087589095:paste(
1559087589097:"Unmatched PFT",
1559087589099:pft.name,
1559087589102:"in FATES. PEcAn does not yet support non-default PFTs for this model"
1559087589103:)
1559087589104:)
1559087589105:}
1559087602938:## Special variables used in conversions
1559087602940:leafC <- 0.48
1559087604081:# determine photo pathway
1559087604084:photo_flag <-
1559087604086:ncdf4::ncvar_get(ctsm.param.nc,
1559087604087:varid = "c3psn",
1559087604088:start = ipft,
1559087604089:count = 1)
1559087649835:photo_pathway <- ifelse(photo_flag == 1, "C3", "C4")
1559087653702:photo_pathway
1559087658759:PEcAn.logger::logger.debug(paste0(
1559087658761:"Photosynthesis pathway: ",
1559087658762:photo_pathway,
1559087658764:"; flag value: ",
1559087658766:photo_flag
1559087658768:))
1559087669890:seq_along(pft)
1559087678035:names(pft)[v]
1559087683308:names(pft)[1]
1559152586931:PEcAn.visualization::plot.netcdf("biocro_results/out/SA-salix-chi_leaf-0.159/2004.nc", "LAI")
1559152593333:PEcAn.visualization::plot.netcdf("biocro_results/out/SA-salix-chi_leaf-0.159/2004.nc", "LAI")
1559153860140:PEcAn.visualization::plot.netcdf("biocro_results/out/SA-salix-chi_leaf-0.159/2004.nc", "LAI")
1559156891967:PEcAn.visualization::plot.netcdf("biocro_results/out/SA-salix-chi_leaf-0.159/2004.nc", "LAI")
1559341238756:load("clm_params_defaults_out/samples.Rdata")
1559341242700:ls()
1559341263112:write.csv(ensemble.samples$`Setaria WT priors defaults`, "clm_params_defaults/ensemble_defaults.csv")
1559341265692:write.csv(sa.samples$`Setaria WT priors defaults`, "clm_params_defaults/sensitivity_defaults.csv")
1559599951683:passwd
1559602880131:library(pecanapi)
1559605880419:library(PEcAn.BIOCRO)
1559605888497:library(pecanapi)
1559605890892:devtools::install_github("pecanproject/pecan/api@develop")
1559605921298:.libPaths()
1559670369249:## COPY AND OPEN DEFAULT PARAMETER FILES
1559670369251:# TODO: update this to read param files (CTSM and FATES) out of the refcase directory, not the PEcAn package
1559670369253:# TODO: update to allow it to pick between CLM4.5 and CLM5 (CLM5 == CTSM) parameter set based on refcase, user selection
1559670369255:## See issue https://github.com/PecanProject/pecan/issues/1008
1559670369256:# CLM5
1559670369258:ctsm.param.default <-
1559670369259:system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM')
1559670378638:ctsm.param.default
1559670698630:.libPaths()
1559671219586:getwd()
1559671226350:setwd("~/pecan_dlebauer/pecan/models/ctsm")
1559671228679:getwd()
1559671240066:library(devtools)
1559671248421:build()
1559671261143:install()
1559671404595:?.libPaths
1559671463729:.libPaths()
1559671472615:.libPaths("~/R_libs/")
1559671473987:.libPaths()
1559671490074:?devtools::install
1559671509801:install()
1559671534324:library(PEcAn.CTSM)
1559671557340:?write_params_ctsm()
1559671616615:## COPY AND OPEN DEFAULT PARAMETER FILES
1559671616617:# TODO: update this to read param files (CTSM and FATES) out of the refcase directory, not the PEcAn package
1559671616619:# TODO: update to allow it to pick between CLM4.5 and CLM5 (CLM5 == CTSM) parameter set based on refcase, user selection
1559671616620:## See issue https://github.com/PecanProject/pecan/issues/1008
1559671616621:# CLM5
1559671616623:ctsm.param.default <-
1559671616624:system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM')
1559671620825:ctsm.param.default
1559671658581:# when we implement ability to use specific refcase, do some ifelse and allow the follow option:
1559671658584:# ctsm.param.default <- file.path(refcase,"clm5_params.c171117.nc") # probably need to allow custom param file names here (pecan.xml?)
1559671658586:if (!exists('local.rundir'))
1559671661527:local.rundir <- tempdir()
1559671666240:local.rundir
1559671668890:if (!exists('run.id'))
1559671669653:run.id <- 1
1559671673448:run.id
1559671677183:ctsm.param.file <-
1559671677185:file.path(local.rundir, paste0("ctsm_params.", run.id, ".nc"))
1559671685097:ctsm.param.file
1559671695642:file.copy(ctsm.param.default, ctsm.param.file)
1559671712430:class(ctsm.param.file)
1559671720673:typeof(ctsm.param.file)
1559671726141:class(ctsm.param.default)
1559671732795:ctsm.param.nc <- ncdf4::nc_open(ctsm.param.file, write = TRUE)
1559671744420:ctsm.param.nc
1559671836394:class(ctsm.param.nc)
1559671848678:library(ncdf4)
1559671865202:names(ctsm.param.nc$var)
1559672154320:## Loop over PFTS
1559672154322:# for testing
1559672154324:# trait.values <- list(c4_grass = list(vmax = 1, b0 = 2))
1559672154326:npft <- length(trait.values)
1559672159943:trait.values <- list(c4_grass = list(vmax = 1, b0 = 2))
1559672164781:trait.values
1559672176951:## Loop over PFTS
1559672176953:# for testing
1559672176955:# trait.values <- list(c4_grass = list(vmax = 1, b0 = 2))
1559672176958:npft <- length(trait.values)
1559672182930:npft
1559672187983:PEcAn.logger::logger.debug('there are ',
1559672187985:npft,
1559672187987:'PFTs in this run, they are named:',
1559672187989:names(trait.values))
1559672195805:ctsm_pftnames <-
1559672195808:stringr::str_trim(tolower(ncdf4::ncvar_get(ctsm.param.nc, "pftname")))
1559672202073:ctsm_pftnames
1559672232925:names(ctsm.param.nc$groups)
1559672245661:names(ctsm.param.nc$var)
1559672274616:seq_len(npft)
1559672280341:i = 1
1559672284097:pft <- trait.values[[i]]
1559672287471:pft
1559672317921:trait.values
1559672329352:pft.name <- names(trait.values)[i]
1559672332247:pft.name
1559672337450:if (is.null(pft.name) | is.na(pft.name)) {
1559672337452:PEcAn.logger::logger.error("pft.name missing")
1559672337454:} else {
1559672337455:PEcAn.logger::logger.info(paste("PFT =", pft.name))
1559672337457:## need to find a better way to match PEcAn pft names w/ CTSM pft names
1559672337459:## probably using the clm5_pfts.csv file
1559672337460:PEcAn.logger::logger.debug(paste0("fates-ctsm PFT number: ", which(ctsm_pftnames == pft.name)))
1559672337461:}
1559672398634:which(ctsm_pftnames == pft.name)
1559672431457:if (pft.name == 'env')
1559672440848:## Match PFT name to COLUMN
1559672440849:ipft <- match(tolower(pft.name), ctsm_pftnames)
1559672444021:ipf
1559672446074:ipft
1559672467844:tolower(pft.name)
1559672470385:ctsm_pftnames
1559672525641:## Match PFT name to COLUMN
1559672525643:ipft <- match(tolower(pft.name), ctsm_pftnames)
1559672526259:PEcAn.logger::logger.debug(paste0("CTSM pft index number: ", ipft))
1559672531627:ipft
1559672552501:## Match PFT name to COLUMN
1559672552502:ipft <- match(tolower(pft.name), ctsm_pftnames)
1559672554553:ipft
1559672568374:tolower(pft.name)
1559672570903:ctsm_pftnames
1559672595348:if (is.na(ipft)) {
1559672595350:PEcAn.logger::logger.severe(
1559672595352:paste(
1559672595354:"Unmatched PFT",
1559672595356:pft.name,
1559672595358:"in FATES. PEcAn does not yet support non-default PFTs for this model"
1559672595360:)
1559672595361:)
1559672595362:}
1559672615521:?rm
1559672621039:rm(ipft)
1559672624839:if (is.na(ipft)) {
1559672624842:PEcAn.logger::logger.severe(
1559672624844:paste(
1559672624846:"Unmatched PFT",
1559672624847:pft.name,
1559672624849:"in CTSM PEcAn does not yet support non-default PFTs for this model"
1559672624851:)
1559672624852:)
1559672624853:}
1559672632140:ipft <- NA
1559672635837:if (is.na(ipft)) {
1559672635839:PEcAn.logger::logger.severe(
1559672635841:paste(
1559672635842:"Unmatched PFT",
1559672635844:pft.name,
1559672635846:"in CTSM PEcAn does not yet support non-default PFTs for this model"
1559672635848:)
1559672635849:)
1559672635850:}
1559672640727:## Match PFT name to COLUMN
1559672640729:ipft <- match(tolower(pft.name), ctsm_pftnames)
1559672640982:PEcAn.logger::logger.debug(paste0("CTSM pft index number: ", ipft))
1559672641239:if (is.na(ipft)) {
1559672641241:PEcAn.logger::logger.severe(
1559672641243:paste(
1559672641245:"Unmatched PFT",
1559672641246:pft.name,
1559672641248:"in CTSM PEcAn does not yet support non-default PFTs for this model"
1559672641250:)
1559672641251:)
1559672641252:}
1559672662327:## Special variables used in conversions
1559672662329:leafC <- 0.48
1559672739904:seq_along(pft)
1559672750955:v <- 1
1559672754541:var <- names(pft)[v]
1559672756606:var
1559672835998:names(ctsm.param.nc
1559672845778:names(ctsm.param.nc$var)
1559672909549:?ncvar_put
1559673013606:### ----- Leaf physiological parameters
1559673013608:# Vcmax
1559673013610:if (var == "vmax") { #TODO change back to Vcmax
1559673013611:ncdf4::ncvar_put(
1559673013613:nc = ctsm.param.nc,
1559673013615:varid = 'vcmax25top',
1559673013616:start = ipft,
1559673013617:count = 1,
1559673013618:vals = pft[v]
1559673013619:)  ## (umol CO2 m-2 s-1)
1559673013620:}
1559673048142:ncvar_def(ctsm.param.nc)
1559673060840:pft[v]
1559673169191:?ncvar_add
1559673223064:ctsm.param.default
1559673799738:ncvar_get(ctsm.param.nc, "slatop")
1559673816149:data.frame(ncvar_get(ctsm.param.nc, "slatop"))
1559673826128:sla <- data.frame(ncvar_get(ctsm.param.nc, "slatop"))
1559673836602:plot(y = sla)
1559673839859:plot(y = sla$ncvar_get.ctsm.param.nc...slatop..)
1559673861729:sla <- data.frame(ncvar_get(ctsm.param.nc, "slatop"), row.names = TRUE)
1559673973607:ncvar_get(ctsm.param.nc, "slatop")
1559673984348:v <- 2
1559673987059:var <- names(pft)[v]
1559673989425:var
1559673999875:if (var == "SLA") {
1559673999877:## default 0.012
1559673999879:ncdf4::ncvar_put(
1559673999880:nc = fates.param.nc,
1559673999882:varid = 'b0',
1559673999884:start = ipft,
1559673999885:count = 1,
1559673999886:vals = udunits2::ud.convert(pft[v], "m2 kg-1", "m2 g-1") / leafC
1559673999887:)
1559673999888:}
1559674005675:ncvar_get(ctsm.param.nc, "slatop")
1559675237417:hist(ncvar_get(ctsm.param.nc, "slatop"))
1559675243321:hist(ncvar_get(ctsm.param.nc, "slatop"))
1559675514150:ipft
1559675821257:trait.values <- list(c4_grass = list(vmax = 1, b0 = 2))
1559675841099:library(pecan.ctsm)
1559675853163:library(PEcAn.CTSM)
1559675885903:getwd()
1559675901281:.libPaths()
1559675935253:.Rprofile
1559676059055:.libPaths("~/R_libs/")
1559676064554:library(PEcAn.CTSM)
1559676074547:trait.values
1559676092869:write_params_ctsm(trait.values = trait.values)
1559676106501:write_params_ctsm(trait.values = trait.values, run.id = 1)
1559676194256:blabla <- write_params_ctsm(trait.values = trait.values, run.id = 1)
1559676197420:blabla
1559676203751:class(blabla)
1559676661104:#' @param defaults
1559676661106:#' @param trait.values named list or data frame of traits, e.g.
1559676661108:#' \code{data.frame(vmax = 1, b0 = 2)} or \code{list(vmax = 1, b0 = 2)}
1559676661110:#' @param settings
1559676661112:#' @param run.id
1559676661114:#'
1559676661115:#' @return
1559676661117:#' @export
1559676661118:#'
1559676661119:#' @examples
1559676661120:write_params_ctsm <-
1559676661121:function(defaults = system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM'),
1559676661122:trait.values,
1559676661123:settings,
1559676661124:run.id) {
1559676661125:## COPY AND OPEN DEFAULT PARAMETER FILES
1559676661126:# TODO: update this to read param files (CTSM and FATES) out of the refcase directory, not the PEcAn package
1559676661127:# TODO: update to allow it to pick between CLM4.5 and CLM5 (CLM5 == CTSM) parameter set based on refcase, user selection
1559676661128:## See issue https://github.com/PecanProject/pecan/issues/1008
1559676661129:# CLM5
1559676661130:ctsm.param.default <-
1559676661131:system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM')
1559676661132:# when we implement ability to use specific refcase, do some ifelse and allow the follow option:
1559676661133:# ctsm.param.default <- file.path(refcase,"clm5_params.c171117.nc") # probably need to allow custom param file names here (pecan.xml?)
1559676661134:if (!exists('local.rundir'))
1559676661135:local.rundir <- tempdir()
1559676661136:if (!exists('run.id'))
1559676661137:run.id <- 1
1559676661138:ctsm.param.file <-
1559676661139:file.path(local.rundir, paste0("ctsm_params.", run.id, ".nc"))
1559676661140:file.copy(ctsm.param.default, ctsm.param.file)
1559676661141:ctsm.param.nc <- ncdf4::nc_open(ctsm.param.file, write = TRUE)
1559676661144:## Loop over PFTS
1559676661145:# for testing
1559676661146:# trait.values <- list(c4_grass = list(vmax = 1, b0 = 2))
1559676661147:npft <- length(trait.values)
1559676661148:PEcAn.logger::logger.debug('there are ',
1559676661149:npft,
1559676661150:'PFTs in this run, they are named:',
1559676661151:names(trait.values))
1559676661152:ctsm_pftnames <-
1559676661153:stringr::str_trim(tolower(ncdf4::ncvar_get(ctsm.param.nc, "pftname")))
1559676661154:for (i in seq_len(npft)) {
1559676661155:pft <- trait.values[[i]]
1559676661156:pft.name <- names(trait.values)[i]
1559676661158:if (is.null(pft.name) | is.na(pft.name)) {
1559676661159:PEcAn.logger::logger.error("pft.name missing")
1559676661160:} else {
1559676661161:PEcAn.logger::logger.info(paste("PFT =", pft.name))
1559676661162:## need to find a better way to match PEcAn pft names w/ CTSM pft names
1559676661163:## probably using the clm5_pfts.csv file
1559676661164:PEcAn.logger::logger.debug(paste0("ctsm PFT number: ", which(ctsm_pftnames == pft.name)))
1559676661166:}
1559676661167:if (pft.name == 'env')
1559676661168:next   ## HACK, need to remove env from default
1559676661170:## Match PFT name to COLUMN
1559676661171:ipft <- match(tolower(pft.name), ctsm_pftnames)
1559676661173:PEcAn.logger::logger.debug(paste0("CTSM pft index number: ", ipft))
1559676661175:if (is.na(ipft)) {
1559676661176:PEcAn.logger::logger.severe(
1559676661177:paste(
1559676661179:"Unmatched PFT",
1559676661180:pft.name,
1559676661181:"in CTSM PEcAn does not yet support non-default PFTs for this model"
1559676661182:)
1559676661184:)
1559676661185:}
1559676661187:## Special variables used in conversions
1559676661188:leafC <- 0.48
1559676661191:# # determine photo pathway
1559676661192:# photo_flag <-
1559676661193:#   ncdf4::ncvar_get(ctsm.param.nc,
1559676661194:#                    varid = "c3psn",
1559676661196:#                    start = ipft,
1559676661197:#                    count = 1)
1559676661198:# photo_pathway <- ifelse(photo_flag == 1, "C3", "C4")
1559676661199:# PEcAn.logger::logger.debug(paste0(
1559676661201:#   "Photosynthesis pathway: ",
1559676661202:#   photo_pathway,
1559676661203:#   "; flag value: ",
1559676661205:#   photo_flag
1559676661206:# ))
1559676661208:## Loop over VARIABLES
1559676661210:for (v in seq_along(pft)) {
1559676661211:var <- names(pft)[v]
1559676661213:## THESE NEED SOME FOLLOW UP
1559676661216:### ----- Leaf physiological parameters
1559676661217:# Vcmax
1559676661218:# if (var == "vmax") { #TODO change back to Vcmax
1559676661219:#   ncdf4::ncvar_put(
1559676661221:#     nc = ctsm.param.nc,
1559676661222:#     varid = 'vcmax25top',
1559676661223:#     start = ipft,
1559676661224:#     count = 1,
1559676661226:#     vals = pft[v]
1559676661227:#   )  ## (umol CO2 m-2 s-1)
1559676661228:# }
1559676661229:if (var == "SLA") {
1559676661231:## default 0.012
1559676661232:ncdf4::ncvar_put(
1559676661233:nc = fates.param.nc,
1559676661235:varid = 'b0', #TODO this should end up being slatop
1559676661236:start = ipft,
1559676661237:count = 1,
1559676661238:vals = udunits2::ud.convert(pft[v], "m2 kg-1", "m2 g-1") / leafC
1559676661240:)
1559676661241:}
1559676661242:} ## end loop over VARIABLES
1559676661244:} ## end loop over PFTs
1559676661245:#ncdf4::nc_close(param.nc)
1559676661246:ncdf4::nc_close(ctsm.param.nc)
1559676661248:return(ctsm.param.nc)
1559676661250:}
1559758087169:blabla <- write_params_ctsm(trait.values = trait.values, run.id = 1)
1559758106991:blabla
1559758248474:trait.values
1559758337272:.libPaths("~/R_libs/")
1559758351650:library(PEcAn.CTSM)
1559758354458:## COPY AND OPEN DEFAULT PARAMETER FILES
1559758354460:# TODO: update this to read param files (CTSM and FATES) out of the refcase directory, not the PEcAn package
1559758354462:# TODO: update to allow it to pick between CLM4.5 and CLM5 (CLM5 == CTSM) parameter set based on refcase, user selection
1559758354463:## See issue https://github.com/PecanProject/pecan/issues/1008
1559758354464:# CLM5
1559758354465:ctsm.param.default <-
1559758354466:system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM')
1559758364965:# when we implement ability to use specific refcase, do some ifelse and allow the follow option:
1559758364967:# ctsm.param.default <- file.path(refcase,"clm5_params.c171117.nc") # probably need to allow custom param file names here (pecan.xml?)
1559758364969:if (!exists('local.rundir'))
1559758365889:local.rundir <- tempdir()
1559758367314:if (!exists('run.id'))
1559758367827:run.id <- 1
1559758368476:ctsm.param.file <-
1559758368478:file.path(local.rundir, paste0("ctsm_params.", run.id, ".nc"))
1559758369532:file.copy(ctsm.param.default, ctsm.param.file)
1559758370064:ctsm.param.nc <- ncdf4::nc_open(ctsm.param.file, write = TRUE)
1559758380245:file.copy()
1559758382837:?file.copy()
1559759024859:trait.values <- list(c4_grass = list(vmax = 1, SLA = 0.03))
1559759029284:trait.values
1559759036616:## Loop over PFTS
1559759036618:# for testing
1559759036620:# trait.values <- list(c4_grass = list(vmax = 1, SLA = 0.03))
1559759036621:npft <- length(trait.values)
1559759037956:PEcAn.logger::logger.debug('there are ',
1559759037958:npft,
1559759037960:'PFTs in this run, they are named:',
1559759037962:names(trait.values))
1559759070067:ctsm_pftnames <-
1559759070071:stringr::str_trim(tolower(ncdf4::ncvar_get(ctsm.param.nc, "pftname")))
1559759077912:ctsm_pftnames
1559759091975:library(ncdf4)
1559759097090:?ncvar_get
1559759148781:names(ctsm.param.nc$var)
1559759290268:ndims(ctsm.param.nc)
1559759293411:dims(ctsm.param.nc)
1559759335433:dim(ctsm.param.nc)
1559759544515:ctsm.param.nc
1559759711722:?get.var.ncdf
1559759751904:?get_all_vars
1559760716641:print(ctsm.param.nc)
1559760851873:seq_len(npft)
1559760858724:i = 1
1559760861362:pft <- trait.values[[i]]
1559760864486:pft
1559760868254:pft.name <- names(trait.values)[i]
1559760871159:pft.name
1559760890838:trait.values
1559761071264:## Loop over VARIABLES
1559761071266:pft.trait.values <- trait.values[[i]]
1559761075034:pft.trait.values
1559761086665:seq_along(pft.trait.values)
1559761102954:v <- 1
1559761106177:var <- names(pft.trait.values)[v]
1559761108200:var
1559761124637:names(pft.trait.values)
1559761172942:# Vcmax
1559761172944:# if (var == "vmax") { #TODO change back to Vcmax
1559761172946:#   ncdf4::ncvar_put(
1559761172948:#     nc = ctsm.param.nc,
1559761172950:#     varid = 'vcmax25top',
1559761172951:#     start = ipft,
1559761172953:#     count = 1,
1559761172954:#     vals = pft[v]
1559761172956:#   )  ## (umol CO2 m-2 s-1)
1559761172958:# }
1559761172959:if (var == "SLA") {
1559761172960:## default 0.012
1559761172962:ncdf4::ncvar_put(
1559761172963:nc = fates.param.nc,
1559761172964:varid = 'slatop',
1559761172966:start = ipft,
1559761172967:count = 1,
1559761172968:vals = udunits2::ud.convert(pft[v], "m2 kg-1", "m2 g-1") / leafC
1559761172970:)
1559761172971:}
1559761194087:.libPaths("~/R_libs/")
1559761210368:library(PEcAn.CTSM)
1559761217972:## Copy and open default parameter files
1559761217974:# TODO: update this to read param files (CTSM and FATES) out of the refcase directory, not the PEcAn package
1559761217975:# TODO: update to allow it to pick between CLM4.5 and CLM5 (CLM5 == CTSM) parameter set based on refcase, user selection
1559761217977:## See issue https://github.com/PecanProject/pecan/issues/1008
1559761217979:ctsm.param.default <-
1559761217980:system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM')
1559761219462:if (!exists('local.rundir'))
1559761219756:local.rundir <- tempdir()
1559761220270:if (!exists('run.id'))
1559761220667:run.id <- 1
1559761221030:ctsm.param.file <-
1559761221032:file.path(local.rundir, paste0("ctsm_params.", run.id, ".nc"))
1559761221540:file.copy(ctsm.param.default, ctsm.param.file)
1559761222151:ctsm.param.nc <- ncdf4::nc_open(ctsm.param.file, write = TRUE)
1559761264811:trait.values <- list(c4_grass = list(vmax = 1, SLA = 0.03))
1559761268438:## Loop over PFTS
1559761268439:# for testing
1559761268440:# trait.values <- list(c4_grass = list(vmax = 1, SLA = 0.03))
1559761268441:npft <- length(trait.values)
1559761278204:PEcAn.logger::logger.debug('there are ',
1559761278205:npft,
1559761278207:'PFTs in this run, they are named:',
1559761278209:names(trait.values))
1559761281459:ctsm_pftnames <-
1559761281460:stringr::str_trim(tolower(ncdf4::ncvar_get(ctsm.param.nc, "pftname")))
1559761293899:for (i in seq_len(npft)) {
1559761293900:pft.name <- names(trait.values)[i]
1559761293901:if (is.null(pft.name) | is.na(pft.name)) {
1559761293902:PEcAn.logger::logger.error("pft.name missing")
1559761293903:} else {
1559761293904:PEcAn.logger::logger.info(paste("PFT =", pft.name))
1559761293911:## need to find a better way to match PEcAn pft names w/ CTSM pft names
1559761293912:## probably using the clm5_pfts.csv file
1559761293913:PEcAn.logger::logger.debug(paste0("ctsm PFT number: ", which(ctsm_pftnames == pft.name)))
1559761293914:}
1559761293915:if (pft.name == 'env')
1559761293916:next   ## HACK, need to remove env from default
1559761293918:## Match PFT name to COLUMN
1559761293919:ipft <- match(tolower(pft.name), ctsm_pftnames)
1559761293920:PEcAn.logger::logger.debug(paste0("CTSM pft index number: ", ipft))
1559761293922:if (is.na(ipft)) {
1559761293931:PEcAn.logger::logger.severe(
1559761293932:paste(
1559761293933:"Unmatched PFT",
1559761293934:pft.name,
1559761293935:"in CTSM PEcAn does not yet support non-default PFTs for this model"
1559761293936:)
1559761293937:)
1559761293938:}
1559761293940:## Special variables used in conversions
1559761293941:leafC <- 0.48
1559761293951:# # determine photo pathway
1559761293952:# photo_flag <-
1559761293953:#   ncdf4::ncvar_get(ctsm.param.nc,
1559761293954:#                    varid = "c3psn",
1559761293955:#                    start = ipft,
1559761293956:#                    count = 1)
1559761293957:# photo_pathway <- ifelse(photo_flag == 1, "C3", "C4")
1559761293958:# PEcAn.logger::logger.debug(paste0(
1559761293959:#   "Photosynthesis pathway: ",
1559761293960:#   photo_pathway,
1559761293961:#   "; flag value: ",
1559761293971:#   photo_flag
1559761293972:# ))
1559761293974:## Loop over VARIABLES
1559761293975:pft.trait.values <- trait.values[[i]]
1559761293976:for (v in seq_along(pft.trait.values)) {
1559761293977:var <- names(pft.trait.values)[v]
1559761293979:## THESE NEED SOME FOLLOW UP
1559761293981:### ----- Leaf physiological parameters
1559761293982:# Vcmax
1559761293983:# if (var == "vmax") { #TODO change back to Vcmax
1559761293984:#   ncdf4::ncvar_put(
1559761293984:#     nc = ctsm.param.nc,
1559761293985:#     varid = 'vcmax25top',
1559761293986:#     start = ipft,
1559761293987:#     count = 1,
1559761293988:#     vals = pft[v]
1559761293989:#   )  ## (umol CO2 m-2 s-1)
1559761293990:# }
1559761293991:if (var == "SLA") {
1559761293992:## default 0.012
1559761293993:ncdf4::ncvar_put(
1559761293994:nc = fates.param.nc,
1559761293995:varid = 'slatop',
1559761293996:start = ipft,
1559761293997:count = 1,
1559761293998:vals = udunits2::ud.convert(pft[v], "m2 kg-1", "m2 g-1") / leafC
1559761293999:)
1559761294000:}
1559761294001:} ## end loop over VARIABLES
1559761294002:} ## end loop over PFTs
1559761321368:.libPaths("~/R_libs/")
1559761328472:library(PEcAn.CTSM)
1559761335670:## Copy and open default parameter files
1559761335672:# TODO: update this to read param files (CTSM and FATES) out of the refcase directory, not the PEcAn package
1559761335673:# TODO: update to allow it to pick between CLM4.5 and CLM5 (CLM5 == CTSM) parameter set based on refcase, user selection
1559761335675:## See issue https://github.com/PecanProject/pecan/issues/1008
1559761335677:ctsm.param.default <-
1559761335679:system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM')
1559761337007:if (!exists('local.rundir'))
1559761337026:local.rundir <- tempdir()
1559761337810:if (!exists('run.id'))
1559761338735:run.id <- 1
1559761339217:ctsm.param.file <-
1559761339219:file.path(local.rundir, paste0("ctsm_params.", run.id, ".nc"))
1559761339703:file.copy(ctsm.param.default, ctsm.param.file)
1559761339728:ctsm.param.nc <- ncdf4::nc_open(ctsm.param.file, write = TRUE)
1559761344667:## Loop over PFTS
1559761344668:# for testing
1559761344669:# trait.values <- list(c4_grass = list(vmax = 1, SLA = 0.03))
1559761344670:npft <- length(trait.values)
1559761345749:PEcAn.logger::logger.debug('there are ',
1559761345750:npft,
1559761345752:'PFTs in this run, they are named:',
1559761345753:names(trait.values))
1559761346888:ctsm_pftnames <-
1559761346889:stringr::str_trim(tolower(ncdf4::ncvar_get(ctsm.param.nc, "pftname")))
1559761354968:seq_len(npft)
1559761364114:trait.values <- list(c4_grass = list(vmax = 1, SLA = 0.03))
1559761365908:## Loop over PFTS
1559761365910:# for testing
1559761365911:# trait.values <- list(c4_grass = list(vmax = 1, SLA = 0.03))
1559761365912:npft <- length(trait.values)
1559761366784:PEcAn.logger::logger.debug('there are ',
1559761366785:npft,
1559761366786:'PFTs in this run, they are named:',
1559761366787:names(trait.values))
1559761367872:ctsm_pftnames <-
1559761367874:stringr::str_trim(tolower(ncdf4::ncvar_get(ctsm.param.nc, "pftname")))
1559761374520:seq_len(npft)
1559761381877:i <- 1
1559761387882:pft.name <- names(trait.values)[i]
1559761391558:if (is.null(pft.name) | is.na(pft.name)) {
1559761391559:PEcAn.logger::logger.error("pft.name missing")
1559761391560:} else {
1559761391561:PEcAn.logger::logger.info(paste("PFT =", pft.name))
1559761391562:## need to find a better way to match PEcAn pft names w/ CTSM pft names
1559761391563:## probably using the clm5_pfts.csv file
1559761391564:PEcAn.logger::logger.debug(paste0("ctsm PFT number: ", which(ctsm_pftnames == pft.name)))
1559761391565:}
1559761396554:if (pft.name == 'env')
1559761398123:next   ## HACK, need to remove env from default
1559761434510:## Match PFT name to COLUMN
1559761434513:ipft <- match(tolower(pft.name), ctsm_pftnames)
1559761438053:ipft
1559761440779:PEcAn.logger::logger.debug(paste0("CTSM pft index number: ", ipft))
1559761447431:if (is.na(ipft)) {
1559761447432:PEcAn.logger::logger.severe(
1559761447433:paste(
1559761447434:"Unmatched PFT",
1559761447435:pft.name,
1559761447436:"in CTSM PEcAn does not yet support non-default PFTs for this model"
1559761447437:)
1559761447438:)
1559761447439:}
1559761457756:## Loop over VARIABLES
1559761457758:pft.trait.values <- trait.values[[i]]
1559761466675:seq_along(pft.trait.values)
1559761476738:pft.trait.values
1559761481546:v <- 2
1559761486512:var <- names(pft.trait.values)[v]
1559761489630:var
1559761517458:library(ncdf4)
1559761535697:ncvar_get(ctsm.param.nc, varid = "slatop")
1559761544379:sla_default <- ncvar_get(ctsm.param.nc, varid = "slatop")
1559761547716:sla_default
1559761604340:trait.values
1559761616530:udunits2::ud.convert(0.03, "m2 kg-1", "m2 g-1") / leafC
1559761625930:udunits2::ud.convert(0.03, "m2 kg-1", "m2 g-1") / 0.48
1559761652460:# Vcmax
1559761652462:# if (var == "vmax") { #TODO change back to Vcmax
1559761652464:#   ncdf4::ncvar_put(
1559761652466:#     nc = ctsm.param.nc,
1559761652468:#     varid = 'vcmax25top',
1559761652469:#     start = ipft,
1559761652470:#     count = 1,
1559761652471:#     vals = pft[v]
1559761652472:#   )  ## (umol CO2 m-2 s-1)
1559761652473:# }
1559761652474:if (var == "SLA") {
1559761652476:## default 0.012
1559761652477:ncdf4::ncvar_put(
1559761652478:nc = ctsm.param.nc,
1559761652479:varid = 'slatop',
1559761652480:start = ipft,
1559761652481:count = 1,
1559761652482:vals = pft[v]
1559761652483:#vals = udunits2::ud.convert(pft[v], "m2 kg-1", "m2 g-1") / leafC  TODO: add conversion back in
1559761652484:)
1559761652485:}
1559761669972:# Vcmax
1559761669974:# if (var == "vmax") { #TODO change back to Vcmax
1559761669976:#   ncdf4::ncvar_put(
1559761669979:#     nc = ctsm.param.nc,
1559761669980:#     varid = 'vcmax25top',
1559761669981:#     start = ipft,
1559761669982:#     count = 1,
1559761669984:#     vals = pft[v]
1559761670001:#   )  ## (umol CO2 m-2 s-1)
1559761670004:# }
1559761670006:if (var == "SLA") {
1559761670007:## default 0.012
1559761670009:ncdf4::ncvar_put(
1559761670010:nc = ctsm.param.nc,
1559761670011:varid = 'slatop',
1559761670012:start = ipft,
1559761670013:count = 1,
1559761670014:vals = pft.trait.values[v]
1559761670015:#vals = udunits2::ud.convert(pft[v], "m2 kg-1", "m2 g-1") / leafC  TODO: add conversion back in
1559761670016:)
1559761670017:}
1559761684239:sla_default
1559761688883:ncvar_get(ctsm.param.nc, varid = "slatop")
1559761702632:sla_new <- ncvar_get(ctsm.param.nc, varid = "slatop")
1559761712956:sla_default == sla_new
1559761726609:sla_default[15]
1559761733309:sla_new[15]
1559766069433:#' @param defaults
1559766069435:#' @param trait.values named list or data frame of traits, e.g.
1559766069437:#' \code{data.frame(vmax = 1, b0 = 2)} or \code{list(vmax = 1, b0 = 2)}
1559766069438:#' @param settings
1559766069440:#' @param run.id
1559766069442:#'
1559766069443:#' @return
1559766069444:#' @export
1559766069445:#'
1559766069446:#' @examples
1559766069447:write_params_ctsm <-
1559766069448:function(defaults = system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM'),
1559766069449:trait.values,
1559766069450:settings,
1559766069451:run.id) {
1559766069453:## Copy and open default parameter files
1559766069454:# TODO: update this to read param files (CTSM and FATES) out of the refcase directory, not the PEcAn package
1559766069455:# TODO: update to allow it to pick between CLM4.5 and CLM5 (CLM5 == CTSM) parameter set based on refcase, user selection
1559766069456:## See issue https://github.com/PecanProject/pecan/issues/1008
1559766069457:ctsm.param.default <-
1559766069458:system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM')
1559766069459:if (!exists('local.rundir'))
1559766069460:local.rundir <- tempdir()
1559766069462:if (!exists('run.id'))
1559766069463:run.id <- 1
1559766069464:ctsm.param.file <-
1559766069465:file.path(local.rundir, paste0("ctsm_params.", run.id, ".nc"))
1559766069466:file.copy(ctsm.param.default, ctsm.param.file)
1559766069468:ctsm.param.nc <- ncdf4::nc_open(ctsm.param.file, write = TRUE)
1559766069470:## Loop over PFTS
1559766069471:# for testing
1559766069472:# trait.values <- list(c4_grass = list(vmax = 1, SLA = 0.03))
1559766069474:npft <- length(trait.values)
1559766069475:PEcAn.logger::logger.debug('there are ',
1559766069476:npft,
1559766069477:'PFTs in this run, they are named:',
1559766069478:names(trait.values))
1559766069480:ctsm_pftnames <-
1559766069481:stringr::str_trim(tolower(ncdf4::ncvar_get(ctsm.param.nc, "pftname")))
1559766069482:for (i in seq_len(npft)) {
1559766069483:pft.name <- names(trait.values)[i]
1559766069485:if (is.null(pft.name) | is.na(pft.name)) {
1559766069486:PEcAn.logger::logger.error("pft.name missing")
1559766069487:} else {
1559766069488:PEcAn.logger::logger.info(paste("PFT =", pft.name))
1559766069490:## need to find a better way to match PEcAn pft names w/ CTSM pft names
1559766069491:## probably using the clm5_pfts.csv file
1559766069492:PEcAn.logger::logger.debug(paste0("ctsm PFT number: ", which(ctsm_pftnames == pft.name)))
1559766069494:}
1559766069495:if (pft.name == 'env')
1559766069496:next   ## HACK, need to remove env from default
1559766069499:## Match PFT name to COLUMN
1559766069500:ipft <- match(tolower(pft.name), ctsm_pftnames)
1559766069501:PEcAn.logger::logger.debug(paste0("CTSM pft index number: ", ipft))
1559766069504:if (is.na(ipft)) {
1559766069505:PEcAn.logger::logger.severe(
1559766069506:paste(
1559766069508:"Unmatched PFT",
1559766069509:pft.name,
1559766069510:"in CTSM PEcAn does not yet support non-default PFTs for this model"
1559766069512:)
1559766069513:)
1559766069515:}
1559766069517:## Special variables used in conversions
1559766069519:leafC <- 0.48
1559766069521:# # determine photo pathway
1559766069522:# photo_flag <-
1559766069524:#   ncdf4::ncvar_get(ctsm.param.nc,
1559766069525:#                    varid = "c3psn",
1559766069527:#                    start = ipft,
1559766069528:#                    count = 1)
1559766069529:# photo_pathway <- ifelse(photo_flag == 1, "C3", "C4")
1559766069531:# PEcAn.logger::logger.debug(paste0(
1559766069532:#   "Photosynthesis pathway: ",
1559766069533:#   photo_pathway,
1559766069535:#   "; flag value: ",
1559766069537:#   photo_flag
1559766069538:# ))
1559766069540:## Loop over VARIABLES
1559766069542:pft.trait.values <- trait.values[[i]]
1559766069543:for (v in seq_along(pft.trait.values)) {
1559766069544:var <- names(pft.trait.values)[v]
1559766069547:## THESE NEED SOME FOLLOW UP
1559766069550:### ----- Leaf physiological parameters
1559766069551:# Vcmax
1559766069552:# if (var == "vmax") { #TODO change back to Vcmax
1559766069554:#   ncdf4::ncvar_put(
1559766069555:#     nc = ctsm.param.nc,
1559766069557:#     varid = 'vcmax25top',
1559766069558:#     start = ipft,
1559766069559:#     count = 1,
1559766069561:#     vals = pft[v]
1559766069562:#   )  ## (umol CO2 m-2 s-1)
1559766069564:# }
1559766069565:if (var == "SLA") {
1559766069566:## default 0.012
1559766069568:ncdf4::ncvar_put(
1559766069569:nc = ctsm.param.nc,
1559766069571:varid = 'slatop',
1559766069572:start = ipft,
1559766069573:count = 1,
1559766069575:vals = pft.trait.values[v]
1559766069576:#vals = udunits2::ud.convert(pft[v], "m2 kg-1", "m2 g-1") / leafC  TODO: add conversion back in
1559766069578:)
1559766069579:}
1559766069581:} ## end loop over VARIABLES
1559766069582:} ## end loop over PFTs
1559766069584:ncdf4::nc_close(ctsm.param.nc)
1559766069585:}
1559766099010:write_params_ctsm
1559766439823:trait.values <- list(c4_grass = list(vmax = 1, SLA = 0.03))
1559766446313:write_params_ctsm(trait.values = trait.values, run.id = 1)
1559766458404:test_fx <- write_params_ctsm(trait.values = trait.values, run.id = 1)
1559766461653:text_f
1559766463301:text_f
1559766465100:text_fx
1559766492067:#' @param run.id
1559766492068:#'
1559766492070:#' @return
1559766492072:#' @export
1559766492073:#'
1559766492074:#' @examples
1559766492075:#' /dontrun{
1559766492076:#' trait.values <- list(c4_grass = list(vmax = 1, SLA = 0.03))
1559766492076:#' write_params_ctsm(trait.values = trait.values, run.id = 1)
1559766492077:#' }
1559766492078:write_params_ctsm <-
1559766492079:function(defaults = system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM'),
1559766492080:trait.values,
1559766492081:settings,
1559766492082:run.id) {
1559766492083:## Copy and open default parameter files
1559766492084:# TODO: update this to read param files (CTSM and FATES) out of the refcase directory, not the PEcAn package
1559766492085:# TODO: update to allow it to pick between CLM4.5 and CLM5 (CLM5 == CTSM) parameter set based on refcase, user selection
1559766492086:## See issue https://github.com/PecanProject/pecan/issues/1008
1559766492087:ctsm.param.default <-
1559766492087:system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM')
1559766492088:if (!exists('local.rundir'))
1559766492089:local.rundir <- tempdir()
1559766492090:if (!exists('run.id'))
1559766492091:run.id <- 1
1559766492092:ctsm.param.file <-
1559766492093:file.path(local.rundir, paste0("ctsm_params.", run.id, ".nc"))
1559766492094:file.copy(ctsm.param.default, ctsm.param.file)
1559766492095:ctsm.param.nc <- ncdf4::nc_open(ctsm.param.file, write = TRUE)
1559766492097:## Loop over PFTS
1559766492098:# for testing
1559766492099:# trait.values <- list(c4_grass = list(vmax = 1, SLA = 0.03))
1559766492100:npft <- length(trait.values)
1559766492101:PEcAn.logger::logger.debug('there are ',
1559766492102:npft,
1559766492103:'PFTs in this run, they are named:',
1559766492104:names(trait.values))
1559766492105:ctsm_pftnames <-
1559766492106:stringr::str_trim(tolower(ncdf4::ncvar_get(ctsm.param.nc, "pftname")))
1559766492107:for (i in seq_len(npft)) {
1559766492108:pft.name <- names(trait.values)[i]
1559766492109:if (is.null(pft.name) | is.na(pft.name)) {
1559766492110:PEcAn.logger::logger.error("pft.name missing")
1559766492111:} else {
1559766492112:PEcAn.logger::logger.info(paste("PFT =", pft.name))
1559766492113:## need to find a better way to match PEcAn pft names w/ CTSM pft names
1559766492114:## probably using the clm5_pfts.csv file
1559766492115:PEcAn.logger::logger.debug(paste0("ctsm PFT number: ", which(ctsm_pftnames == pft.name)))
1559766492116:}
1559766492117:if (pft.name == 'env')
1559766492118:next   ## HACK, need to remove env from default
1559766492120:## Match PFT name to COLUMN
1559766492121:ipft <- match(tolower(pft.name), ctsm_pftnames)
1559766492123:PEcAn.logger::logger.debug(paste0("CTSM pft index number: ", ipft))
1559766492125:if (is.na(ipft)) {
1559766492126:PEcAn.logger::logger.severe(
1559766492127:paste(
1559766492128:"Unmatched PFT",
1559766492129:pft.name,
1559766492130:"in CTSM PEcAn does not yet support non-default PFTs for this model"
1559766492131:)
1559766492132:)
1559766492134:}
1559766492136:## Special variables used in conversions
1559766492137:leafC <- 0.48
1559766492139:# # determine photo pathway
1559766492140:# photo_flag <-
1559766492141:#   ncdf4::ncvar_get(ctsm.param.nc,
1559766492142:#                    varid = "c3psn",
1559766492143:#                    start = ipft,
1559766492145:#                    count = 1)
1559766492146:# photo_pathway <- ifelse(photo_flag == 1, "C3", "C4")
1559766492147:# PEcAn.logger::logger.debug(paste0(
1559766492148:#   "Photosynthesis pathway: ",
1559766492149:#   photo_pathway,
1559766492150:#   "; flag value: ",
1559766492152:#   photo_flag
1559766492153:# ))
1559766492155:## Loop over VARIABLES
1559766492156:pft.trait.values <- trait.values[[i]]
1559766492157:for (v in seq_along(pft.trait.values)) {
1559766492159:var <- names(pft.trait.values)[v]
1559766492161:## THESE NEED SOME FOLLOW UP
1559766492163:### ----- Leaf physiological parameters
1559766492164:# Vcmax
1559766492165:# if (var == "vmax") { #TODO change back to Vcmax
1559766492167:#   ncdf4::ncvar_put(
1559766492168:#     nc = ctsm.param.nc,
1559766492169:#     varid = 'vcmax25top',
1559766492170:#     start = ipft,
1559766492171:#     count = 1,
1559766492173:#     vals = pft[v]
1559766492174:#   )  ## (umol CO2 m-2 s-1)
1559766492175:# }
1559766492176:if (var == "SLA") {
1559766492177:## default 0.012
1559766492178:ncdf4::ncvar_put(
1559766492180:nc = ctsm.param.nc,
1559766492181:varid = 'slatop',
1559766492182:start = ipft,
1559766492183:count = 1,
1559766492184:vals = pft.trait.values[v]
1559766492186:#vals = udunits2::ud.convert(pft[v], "m2 kg-1", "m2 g-1") / leafC  TODO: add conversion back in
1559766492187:)
1559766492188:}
1559766492189:} ## end loop over VARIABLES
1559766492191:} ## end loop over PFTs
1559766492192:ncdf4::nc_close(ctsm.param.nc)
1559766492193:return(ctsm.param.nc)
1559766492194:}
1559766498792:test_fx <- write_params_ctsm(trait.values = trait.values, run.id = 1)
1559766503899:test_fx
1559766746839:traceback()
1559766791963:.libPaths("~/R_libs/")
1559766797260:library(PEcAn.CTSM)
1559766804122:## Copy and open default parameter files
1559766804124:# TODO: update this to read param files (CTSM and FATES) out of the refcase directory, not the PEcAn package
1559766804126:# TODO: update to allow it to pick between CLM4.5 and CLM5 (CLM5 == CTSM) parameter set based on refcase, user selection
1559766804128:## See issue https://github.com/PecanProject/pecan/issues/1008
1559766804130:ctsm.param.default <-
1559766804132:system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM')
1559766804297:if (!exists('local.rundir'))
1559766804452:local.rundir <- tempdir()
1559766804777:if (!exists('run.id'))
1559766805074:run.id <- 1
1559766805382:ctsm.param.file <-
1559766805384:file.path(local.rundir, paste0("ctsm_params.", run.id, ".nc"))
1559766805771:file.copy(ctsm.param.default, ctsm.param.file)
1559766806197:ctsm.param.nc <- ncdf4::nc_open(ctsm.param.file, write = TRUE)
1559766809965:trait.values <- list(c4_grass = list(vmax = 1, SLA = 0.03))
1559766812419:## Loop over PFTS
1559766812421:# for testing
1559766812422:# trait.values <- list(c4_grass = list(vmax = 1, SLA = 0.03))
1559766812424:npft <- length(trait.values)
1559766812870:PEcAn.logger::logger.debug('there are ',
1559766812872:npft,
1559766812874:'PFTs in this run, they are named:',
1559766812876:names(trait.values))
1559766814346:ctsm_pftnames <-
1559766814348:stringr::str_trim(tolower(ncdf4::ncvar_get(ctsm.param.nc, "pftname")))
1559766815241:for (i in seq_len(npft)) {
1559766815243:pft.name <- names(trait.values)[i]
1559766815245:if (is.null(pft.name) | is.na(pft.name)) {
1559766815247:PEcAn.logger::logger.error("pft.name missing")
1559766815249:} else {
1559766815250:PEcAn.logger::logger.info(paste("PFT =", pft.name))
1559766815251:## need to find a better way to match PEcAn pft names w/ CTSM pft names
1559766815252:## probably using the clm5_pfts.csv file
1559766815253:PEcAn.logger::logger.debug(paste0("ctsm PFT number: ", which(ctsm_pftnames == pft.name)))
1559766815254:}
1559766815256:if (pft.name == 'env')
1559766815257:next   ## HACK, need to remove env from default
1559766815259:## Match PFT name to COLUMN
1559766815260:ipft <- match(tolower(pft.name), ctsm_pftnames)
1559766815261:PEcAn.logger::logger.debug(paste0("CTSM pft index number: ", ipft))
1559766815263:if (is.na(ipft)) {
1559766815264:PEcAn.logger::logger.severe(
1559766815266:paste(
1559766815267:"Unmatched PFT",
1559766815268:pft.name,
1559766815274:"in CTSM PEcAn does not yet support non-default PFTs for this model"
1559766815275:)
1559766815276:)
1559766815277:}
1559766815279:## Special variables used in conversions
1559766815280:leafC <- 0.48
1559766815282:# # determine photo pathway
1559766815283:# photo_flag <-
1559766815284:#   ncdf4::ncvar_get(ctsm.param.nc,
1559766815286:#                    varid = "c3psn",
1559766815287:#                    start = ipft,
1559766815288:#                    count = 1)
1559766815289:# photo_pathway <- ifelse(photo_flag == 1, "C3", "C4")
1559766815290:# PEcAn.logger::logger.debug(paste0(
1559766815291:#   "Photosynthesis pathway: ",
1559766815292:#   photo_pathway,
1559766815293:#   "; flag value: ",
1559766815295:#   photo_flag
1559766815296:# ))
1559766815298:## Loop over VARIABLES
1559766815299:pft.trait.values <- trait.values[[i]]
1559766815300:for (v in seq_along(pft.trait.values)) {
1559766815302:var <- names(pft.trait.values)[v]
1559766815304:## THESE NEED SOME FOLLOW UP
1559766815306:### ----- Leaf physiological parameters
1559766815307:# Vcmax
1559766815308:# if (var == "vmax") { #TODO change back to Vcmax
1559766815309:#   ncdf4::ncvar_put(
1559766815310:#     nc = ctsm.param.nc,
1559766815311:#     varid = 'vcmax25top',
1559766815313:#     start = ipft,
1559766815314:#     count = 1,
1559766815315:#     vals = pft[v]
1559766815316:#   )  ## (umol CO2 m-2 s-1)
1559766815317:# }
1559766815318:if (var == "SLA") {
1559766815319:## default 0.012
1559766815321:ncdf4::ncvar_put(
1559766815322:nc = ctsm.param.nc,
1559766815323:varid = 'slatop',
1559766815324:start = ipft,
1559766815325:count = 1,
1559766815326:vals = pft.trait.values[v]
1559766815328:#vals = udunits2::ud.convert(pft[v], "m2 kg-1", "m2 g-1") / leafC  TODO: add conversion back in
1559766815329:)
1559766815330:}
1559766815331:} ## end loop over VARIABLES
1559766815332:} ## end loop over PFTs
1559766818026:ncdf4::nc_close(ctsm.param.nc)
1559766819573:return(ctsm.param.nc)
1559766847946:sla_new <- ncvar_get(ctsm.param.nc, varid = "slatop")
1559766856111:library(ncdf4)
1559766857518:sla_new <- ncvar_get(ctsm.param.nc, varid = "slatop")
1559767473898:.libPaths("~/R_libs/")
1559767480962:library(PEcAn.CTSM)
1559767503380:#' @param run.id
1559767503382:#'
1559767503385:#' @return
1559767503387:#' @export
1559767503389:#'
1559767503391:#' @examples
1559767503392:#' /dontrun{
1559767503393:#' trait.values <- list(c4_grass = list(vmax = 1, SLA = 0.03))
1559767503394:#' write_params_ctsm(trait.values = trait.values, run.id = 1)
1559767503395:#' }
1559767503396:write_params_ctsm <-
1559767503397:function(defaults = system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM'),
1559767503398:trait.values,
1559767503399:settings,
1559767503400:run.id) {
1559767503401:## Copy and open default parameter files
1559767503402:# TODO: update this to read param files (CTSM and FATES) out of the refcase directory, not the PEcAn package
1559767503403:# TODO: update to allow it to pick between CLM4.5 and CLM5 (CLM5 == CTSM) parameter set based on refcase, user selection
1559767503405:## See issue https://github.com/PecanProject/pecan/issues/1008
1559767503406:ctsm.param.default <-
1559767503407:system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM')
1559767503408:if (!exists('local.rundir'))
1559767503409:local.rundir <- tempdir()
1559767503410:if (!exists('run.id'))
1559767503411:run.id <- 1
1559767503412:ctsm.param.file <-
1559767503413:file.path(local.rundir, paste0("ctsm_params.", run.id, ".nc"))
1559767503414:file.copy(ctsm.param.default, ctsm.param.file)
1559767503415:ctsm.param.nc <- ncdf4::nc_open(ctsm.param.file, write = TRUE)
1559767503417:## Loop over PFTS
1559767503418:# for testing
1559767503419:# trait.values <- list(c4_grass = list(vmax = 1, SLA = 0.03))
1559767503420:npft <- length(trait.values)
1559767503421:PEcAn.logger::logger.debug('there are ',
1559767503423:npft,
1559767503424:'PFTs in this run, they are named:',
1559767503425:names(trait.values))
1559767503426:ctsm_pftnames <-
1559767503427:stringr::str_trim(tolower(ncdf4::ncvar_get(ctsm.param.nc, "pftname")))
1559767503428:for (i in seq_len(npft)) {
1559767503429:pft.name <- names(trait.values)[i]
1559767503430:if (is.null(pft.name) | is.na(pft.name)) {
1559767503431:PEcAn.logger::logger.error("pft.name missing")
1559767503433:} else {
1559767503434:PEcAn.logger::logger.info(paste("PFT =", pft.name))
1559767503435:## need to find a better way to match PEcAn pft names w/ CTSM pft names
1559767503436:## probably using the clm5_pfts.csv file
1559767503437:PEcAn.logger::logger.debug(paste0("ctsm PFT number: ", which(ctsm_pftnames == pft.name)))
1559767503439:}
1559767503440:if (pft.name == 'env')
1559767503441:next   ## HACK, need to remove env from default
1559767503443:## Match PFT name to COLUMN
1559767503444:ipft <- match(tolower(pft.name), ctsm_pftnames)
1559767503446:PEcAn.logger::logger.debug(paste0("CTSM pft index number: ", ipft))
1559767503448:if (is.na(ipft)) {
1559767503449:PEcAn.logger::logger.severe(
1559767503450:paste(
1559767503452:"Unmatched PFT",
1559767503453:pft.name,
1559767503454:"in CTSM PEcAn does not yet support non-default PFTs for this model"
1559767503455:)
1559767503457:)
1559767503458:}
1559767503460:## Special variables used in conversions
1559767503462:leafC <- 0.48
1559767503464:# # determine photo pathway
1559767503465:# photo_flag <-
1559767503467:#   ncdf4::ncvar_get(ctsm.param.nc,
1559767503468:#                    varid = "c3psn",
1559767503469:#                    start = ipft,
1559767503470:#                    count = 1)
1559767503472:# photo_pathway <- ifelse(photo_flag == 1, "C3", "C4")
1559767503473:# PEcAn.logger::logger.debug(paste0(
1559767503474:#   "Photosynthesis pathway: ",
1559767503475:#   photo_pathway,
1559767503476:#   "; flag value: ",
1559767503478:#   photo_flag
1559767503480:# ))
1559767503482:## Loop over VARIABLES
1559767503483:pft.trait.values <- trait.values[[i]]
1559767503484:for (v in seq_along(pft.trait.values)) {
1559767503486:var <- names(pft.trait.values)[v]
1559767503488:## THESE NEED SOME FOLLOW UP
1559767503491:### ----- Leaf physiological parameters
1559767503492:# Vcmax
1559767503493:# if (var == "vmax") { #TODO change back to Vcmax
1559767503494:#   ncdf4::ncvar_put(
1559767503496:#     nc = ctsm.param.nc,
1559767503497:#     varid = 'vcmax25top',
1559767503498:#     start = ipft,
1559767503500:#     count = 1,
1559767503501:#     vals = pft[v]
1559767503502:#   )  ## (umol CO2 m-2 s-1)
1559767503504:# }
1559767503505:if (var == "SLA") {
1559767503506:## default 0.012
1559767503507:ncdf4::ncvar_put(
1559767503509:nc = ctsm.param.nc,
1559767503510:varid = 'slatop',
1559767503511:start = ipft,
1559767503513:count = 1,
1559767503514:vals = pft.trait.values[v]
1559767503515:#vals = udunits2::ud.convert(pft[v], "m2 kg-1", "m2 g-1") / leafC  TODO: add conversion back in
1559767503517:)
1559767503518:}
1559767503519:} ## end loop over VARIABLES
1559767503521:} ## end loop over PFTs
1559767503522:#ncdf4::nc_close(ctsm.param.nc)
1559767503523:return(ctsm.param.nc)
1559767503525:}
1559767533822:trait.values <- list(c4_grass = list(vmax = 1, SLA = 0.03))
1559767534990:write_params_ctsm(trait.values = trait.values, run.id = 1)
1559767543751:test_fx <- write_params_ctsm(trait.values = trait.values, run.id = 1)
1559767547963:test_fx
1559767566122:sla_new <- ncvar_get(ctsm.param.nc, varid = "slatop")
1559767574057:sla_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")
1559768080388:#' @param run.id
1559768080390:#'
1559768080392:#' @return
1559768080394:#' @export
1559768080396:#'
1559768080398:#' @examples
1559768080399:#' /dontrun{
1559768080400:#' trait.values <- list(c4_grass = list(vmax = 1, SLA = 0.03))
1559768080401:#' write_params_ctsm(trait.values = trait.values, run.id = 1)
1559768080402:#' }
1559768080403:write_params_ctsm <-
1559768080404:function(defaults = system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM'),
1559768080405:trait.values,
1559768080406:settings,
1559768080407:run.id) {
1559768080408:## Copy and open default parameter files
1559768080409:# TODO: update this to read param files (CTSM and FATES) out of the refcase directory, not the PEcAn package
1559768080410:# TODO: update to allow it to pick between CLM4.5 and CLM5 (CLM5 == CTSM) parameter set based on refcase, user selection
1559768080411:## See issue https://github.com/PecanProject/pecan/issues/1008
1559768080412:ctsm.param.default <-
1559768080413:system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM')
1559768080414:if (!exists('local.rundir'))
1559768080415:local.rundir <- tempdir()
1559768080416:if (!exists('run.id'))
1559768080417:run.id <- 1
1559768080418:ctsm.param.file <-
1559768080419:file.path(local.rundir, paste0("ctsm_params.", run.id, ".nc"))
1559768080419:file.copy(ctsm.param.default, ctsm.param.file)
1559768080420:ctsm.param.nc <- ncdf4::nc_open(ctsm.param.file, write = TRUE)
1559768080422:## Loop over PFTS
1559768080423:# for testing
1559768080424:# trait.values <- list(c4_grass = list(vmax = 1, SLA = 0.03))
1559768080425:npft <- length(trait.values)
1559768080426:PEcAn.logger::logger.debug('there are ',
1559768080427:npft,
1559768080428:'PFTs in this run, they are named:',
1559768080429:names(trait.values))
1559768080430:ctsm_pftnames <-
1559768080431:stringr::str_trim(tolower(ncdf4::ncvar_get(ctsm.param.nc, "pftname")))
1559768080432:for (i in seq_len(npft)) {
1559768080433:pft.name <- names(trait.values)[i]
1559768080434:if (is.null(pft.name) | is.na(pft.name)) {
1559768080435:PEcAn.logger::logger.error("pft.name missing")
1559768080437:} else {
1559768080438:PEcAn.logger::logger.info(paste("PFT =", pft.name))
1559768080439:## need to find a better way to match PEcAn pft names w/ CTSM pft names
1559768080440:## probably using the clm5_pfts.csv file
1559768080441:PEcAn.logger::logger.debug(paste0("ctsm PFT number: ", which(ctsm_pftnames == pft.name)))
1559768080442:}
1559768080443:if (pft.name == 'env')
1559768080444:next   ## HACK, need to remove env from default
1559768080446:## Match PFT name to COLUMN
1559768080447:ipft <- match(tolower(pft.name), ctsm_pftnames)
1559768080449:PEcAn.logger::logger.debug(paste0("CTSM pft index number: ", ipft))
1559768080451:if (is.na(ipft)) {
1559768080452:PEcAn.logger::logger.severe(
1559768080453:paste(
1559768080454:"Unmatched PFT",
1559768080455:pft.name,
1559768080457:"in CTSM PEcAn does not yet support non-default PFTs for this model"
1559768080458:)
1559768080459:)
1559768080460:}
1559768080462:## Special variables used in conversions
1559768080463:leafC <- 0.48
1559768080466:# # determine photo pathway
1559768080467:# photo_flag <-
1559768080468:#   ncdf4::ncvar_get(ctsm.param.nc,
1559768080469:#                    varid = "c3psn",
1559768080470:#                    start = ipft,
1559768080472:#                    count = 1)
1559768080473:# photo_pathway <- ifelse(photo_flag == 1, "C3", "C4")
1559768080474:# PEcAn.logger::logger.debug(paste0(
1559768080475:#   "Photosynthesis pathway: ",
1559768080476:#   photo_pathway,
1559768080478:#   "; flag value: ",
1559768080479:#   photo_flag
1559768080481:# ))
1559768080483:## Loop over VARIABLES
1559768080484:pft.trait.values <- trait.values[[i]]
1559768080485:for (v in seq_along(pft.trait.values)) {
1559768080486:var <- names(pft.trait.values)[v]
1559768080489:## THESE NEED SOME FOLLOW UP
1559768080491:### ----- Leaf physiological parameters
1559768080492:# Vcmax
1559768080493:# if (var == "vmax") { #TODO change back to Vcmax
1559768080495:#   ncdf4::ncvar_put(
1559768080496:#     nc = ctsm.param.nc,
1559768080497:#     varid = 'vcmax25top',
1559768080498:#     start = ipft,
1559768080499:#     count = 1,
1559768080501:#     vals = pft[v]
1559768080502:#   )  ## (umol CO2 m-2 s-1)
1559768080503:# }
1559768080504:if (var == "SLA") {
1559768080506:## default 0.012
1559768080507:ncdf4::ncvar_put(
1559768080508:nc = ctsm.param.nc,
1559768080509:varid = 'slatop',
1559768080511:start = ipft,
1559768080512:count = 1,
1559768080513:#vals = pft.trait.values[v]
1559768080514:vals = udunits2::ud.convert(pft[v], "m2 kg-1", "m2 g-1") / leafC  TODO: add conversion back in
1559768080516:)
1559768080517:}
1559768080518:} ## end loop over VARIABLES
1559768080519:} ## end loop over PFTs
1559768080520:ncdf4::nc_close(ctsm.param.nc)
1559768080522:return(ctsm.param.nc)
1559768080523:}
1559768112000:#' @param run.id
1559768112001:#'
1559768112003:#' @return
1559768112005:#' @export
1559768112006:#'
1559768112007:#' @examples
1559768112009:#' /dontrun{
1559768112010:#' trait.values <- list(c4_grass = list(vmax = 1, SLA = 0.03))
1559768112012:#' write_params_ctsm(trait.values = trait.values, run.id = 1)
1559768112013:#' }
1559768112014:write_params_ctsm <-
1559768112016:function(defaults = system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM'),
1559768112017:trait.values,
1559768112019:settings,
1559768112020:run.id) {
1559768112021:## Copy and open default parameter files
1559768112022:# TODO: update this to read param files (CTSM and FATES) out of the refcase directory, not the PEcAn package
1559768112023:# TODO: update to allow it to pick between CLM4.5 and CLM5 (CLM5 == CTSM) parameter set based on refcase, user selection
1559768112024:## See issue https://github.com/PecanProject/pecan/issues/1008
1559768112026:ctsm.param.default <-
1559768112027:system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM')
1559768112028:if (!exists('local.rundir'))
1559768112029:local.rundir <- tempdir()
1559768112030:if (!exists('run.id'))
1559768112031:run.id <- 1
1559768112032:ctsm.param.file <-
1559768112033:file.path(local.rundir, paste0("ctsm_params.", run.id, ".nc"))
1559768112035:file.copy(ctsm.param.default, ctsm.param.file)
1559768112036:ctsm.param.nc <- ncdf4::nc_open(ctsm.param.file, write = TRUE)
1559768112039:## Loop over PFTS
1559768112041:# for testing
1559768112042:# trait.values <- list(c4_grass = list(vmax = 1, SLA = 0.03))
1559768112043:npft <- length(trait.values)
1559768112044:PEcAn.logger::logger.debug('there are ',
1559768112045:npft,
1559768112047:'PFTs in this run, they are named:',
1559768112048:names(trait.values))
1559768112050:ctsm_pftnames <-
1559768112051:stringr::str_trim(tolower(ncdf4::ncvar_get(ctsm.param.nc, "pftname")))
1559768112052:for (i in seq_len(npft)) {
1559768112053:pft.name <- names(trait.values)[i]
1559768112054:if (is.null(pft.name) | is.na(pft.name)) {
1559768112055:PEcAn.logger::logger.error("pft.name missing")
1559768112056:} else {
1559768112057:PEcAn.logger::logger.info(paste("PFT =", pft.name))
1559768112059:## need to find a better way to match PEcAn pft names w/ CTSM pft names
1559768112060:## probably using the clm5_pfts.csv file
1559768112061:PEcAn.logger::logger.debug(paste0("ctsm PFT number: ", which(ctsm_pftnames == pft.name)))
1559768112062:}
1559768112063:if (pft.name == 'env')
1559768112065:next   ## HACK, need to remove env from default
1559768112068:## Match PFT name to COLUMN
1559768112070:ipft <- match(tolower(pft.name), ctsm_pftnames)
1559768112071:PEcAn.logger::logger.debug(paste0("CTSM pft index number: ", ipft))
1559768112074:if (is.na(ipft)) {
1559768112075:PEcAn.logger::logger.severe(
1559768112076:paste(
1559768112078:"Unmatched PFT",
1559768112080:pft.name,
1559768112081:"in CTSM PEcAn does not yet support non-default PFTs for this model"
1559768112082:)
1559768112083:)
1559768112085:}
1559768112087:## Special variables used in conversions
1559768112088:leafC <- 0.48
1559768112090:# # determine photo pathway
1559768112092:# photo_flag <-
1559768112093:#   ncdf4::ncvar_get(ctsm.param.nc,
1559768112094:#                    varid = "c3psn",
1559768112095:#                    start = ipft,
1559768112097:#                    count = 1)
1559768112098:# photo_pathway <- ifelse(photo_flag == 1, "C3", "C4")
1559768112099:# PEcAn.logger::logger.debug(paste0(
1559768112100:#   "Photosynthesis pathway: ",
1559768112101:#   photo_pathway,
1559768112103:#   "; flag value: ",
1559768112104:#   photo_flag
1559768112105:# ))
1559768112108:## Loop over VARIABLES
1559768112109:pft.trait.values <- trait.values[[i]]
1559768112110:for (v in seq_along(pft.trait.values)) {
1559768112112:var <- names(pft.trait.values)[v]
1559768112114:## THESE NEED SOME FOLLOW UP
1559768112116:### ----- Leaf physiological parameters
1559768112118:# Vcmax
1559768112119:# if (var == "vmax") { #TODO change back to Vcmax
1559768112120:#   ncdf4::ncvar_put(
1559768112122:#     nc = ctsm.param.nc,
1559768112123:#     varid = 'vcmax25top',
1559768112124:#     start = ipft,
1559768112125:#     count = 1,
1559768112127:#     vals = pft[v]
1559768112128:#   )  ## (umol CO2 m-2 s-1)
1559768112129:# }
1559768112130:if (var == "SLA") {
1559768112132:## default 0.012
1559768112133:ncdf4::ncvar_put(
1559768112134:nc = ctsm.param.nc,
1559768112136:varid = 'slatop',
1559768112137:start = ipft,
1559768112138:count = 1,
1559768112139:#vals = pft.trait.values[v]
1559768112141:vals = udunits2::ud.convert(pft[v], "m2 kg-1", "m2 g-1") / leafC  #TODO: add conversion back in
1559768112142:)
1559768112143:}
1559768112144:} ## end loop over VARIABLES
1559768112145:} ## end loop over PFTs
1559768112147:ncdf4::nc_close(ctsm.param.nc)
1559768112148:return(ctsm.param.nc)
1559768112149:}
1559768121437:trait.values <- list(c4_grass = list(vmax = 1, SLA = 0.03))
1559768122381:test_fx <- write_params_ctsm(trait.values = trait.values, run.id = 1)
1559768140854:#' @param run.id
1559768140856:#'
1559768140857:#' @return
1559768140859:#' @export
1559768140860:#'
1559768140861:#' @examples
1559768140862:#' /dontrun{
1559768140863:#' trait.values <- list(c4_grass = list(vmax = 1, SLA = 0.03))
1559768140864:#' write_params_ctsm(trait.values = trait.values, run.id = 1)
1559768140865:#' }
1559768140866:write_params_ctsm <-
1559768140867:function(defaults = system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM'),
1559768140868:trait.values,
1559768140869:settings,
1559768140870:run.id) {
1559768140871:## Copy and open default parameter files
1559768140872:# TODO: update this to read param files (CTSM and FATES) out of the refcase directory, not the PEcAn package
1559768140873:# TODO: update to allow it to pick between CLM4.5 and CLM5 (CLM5 == CTSM) parameter set based on refcase, user selection
1559768140874:## See issue https://github.com/PecanProject/pecan/issues/1008
1559768140875:ctsm.param.default <-
1559768140876:system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM')
1559768140877:if (!exists('local.rundir'))
1559768140878:local.rundir <- tempdir()
1559768140879:if (!exists('run.id'))
1559768140880:run.id <- 1
1559768140881:ctsm.param.file <-
1559768140882:file.path(local.rundir, paste0("ctsm_params.", run.id, ".nc"))
1559768140883:file.copy(ctsm.param.default, ctsm.param.file)
1559768140884:ctsm.param.nc <- ncdf4::nc_open(ctsm.param.file, write = TRUE)
1559768140886:## Loop over PFTS
1559768140887:# for testing
1559768140888:# trait.values <- list(c4_grass = list(vmax = 1, SLA = 0.03))
1559768140889:npft <- length(trait.values)
1559768140890:PEcAn.logger::logger.debug('there are ',
1559768140891:npft,
1559768140892:'PFTs in this run, they are named:',
1559768140893:names(trait.values))
1559768140894:ctsm_pftnames <-
1559768140895:stringr::str_trim(tolower(ncdf4::ncvar_get(ctsm.param.nc, "pftname")))
1559768140897:for (i in seq_len(npft)) {
1559768140898:pft.name <- names(trait.values)[i]
1559768140899:if (is.null(pft.name) | is.na(pft.name)) {
1559768140900:PEcAn.logger::logger.error("pft.name missing")
1559768140901:} else {
1559768140902:PEcAn.logger::logger.info(paste("PFT =", pft.name))
1559768140903:## need to find a better way to match PEcAn pft names w/ CTSM pft names
1559768140904:## probably using the clm5_pfts.csv file
1559768140905:PEcAn.logger::logger.debug(paste0("ctsm PFT number: ", which(ctsm_pftnames == pft.name)))
1559768140907:}
1559768140908:if (pft.name == 'env')
1559768140909:next   ## HACK, need to remove env from default
1559768140911:## Match PFT name to COLUMN
1559768140912:ipft <- match(tolower(pft.name), ctsm_pftnames)
1559768140913:PEcAn.logger::logger.debug(paste0("CTSM pft index number: ", ipft))
1559768140916:if (is.na(ipft)) {
1559768140917:PEcAn.logger::logger.severe(
1559768140918:paste(
1559768140919:"Unmatched PFT",
1559768140921:pft.name,
1559768140922:"in CTSM PEcAn does not yet support non-default PFTs for this model"
1559768140923:)
1559768140924:)
1559768140925:}
1559768140928:## Special variables used in conversions
1559768140929:leafC <- 0.48
1559768140931:# # determine photo pathway
1559768140932:# photo_flag <-
1559768140933:#   ncdf4::ncvar_get(ctsm.param.nc,
1559768140935:#                    varid = "c3psn",
1559768140936:#                    start = ipft,
1559768140937:#                    count = 1)
1559768140938:# photo_pathway <- ifelse(photo_flag == 1, "C3", "C4")
1559768140940:# PEcAn.logger::logger.debug(paste0(
1559768140941:#   "Photosynthesis pathway: ",
1559768140942:#   photo_pathway,
1559768140943:#   "; flag value: ",
1559768140945:#   photo_flag
1559768140946:# ))
1559768140948:## Loop over VARIABLES
1559768140950:pft.trait.values <- trait.values[[i]]
1559768140951:for (v in seq_along(pft.trait.values)) {
1559768140952:var <- names(pft.trait.values)[v]
1559768140954:## THESE NEED SOME FOLLOW UP
1559768140957:### ----- Leaf physiological parameters
1559768140958:# Vcmax
1559768140959:# if (var == "vmax") { #TODO change back to Vcmax
1559768140961:#   ncdf4::ncvar_put(
1559768140962:#     nc = ctsm.param.nc,
1559768140963:#     varid = 'vcmax25top',
1559768140964:#     start = ipft,
1559768140966:#     count = 1,
1559768140967:#     vals = pft[v]
1559768140968:#   )  ## (umol CO2 m-2 s-1)
1559768140969:# }
1559768140971:if (var == "SLA") {
1559768140972:## default 0.012
1559768140973:ncdf4::ncvar_put(
1559768140975:nc = ctsm.param.nc,
1559768140976:varid = 'slatop',
1559768140977:start = ipft,
1559768140979:count = 1,
1559768140980:#vals = pft.trait.values[v]
1559768140981:vals = udunits2::ud.convert(pft.trait.values[v], "m2 kg-1", "m2 g-1") / leafC  #TODO: add conversion back in
1559768140982:)
1559768140984:}
1559768140985:} ## end loop over VARIABLES
1559768140986:} ## end loop over PFTs
1559768140988:ncdf4::nc_close(ctsm.param.nc)
1559768140989:return(ctsm.param.nc)
1559768140990:}
1559768155675:#' @param run.id
1559768155678:#'
1559768155680:#' @return
1559768155682:#' @export
1559768155684:#'
1559768155685:#' @examples
1559768155686:#' /dontrun{
1559768155687:#' trait.values <- list(c4_grass = list(vmax = 1, SLA = 0.03))
1559768155689:#' write_params_ctsm(trait.values = trait.values, run.id = 1)
1559768155690:#' }
1559768155691:write_params_ctsm <-
1559768155692:function(defaults = system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM'),
1559768155693:trait.values,
1559768155694:settings,
1559768155695:run.id) {
1559768155696:## Copy and open default parameter files
1559768155697:# TODO: update this to read param files (CTSM and FATES) out of the refcase directory, not the PEcAn package
1559768155698:# TODO: update to allow it to pick between CLM4.5 and CLM5 (CLM5 == CTSM) parameter set based on refcase, user selection
1559768155699:## See issue https://github.com/PecanProject/pecan/issues/1008
1559768155700:ctsm.param.default <-
1559768155701:system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM')
1559768155702:if (!exists('local.rundir'))
1559768155703:local.rundir <- tempdir()
1559768155704:if (!exists('run.id'))
1559768155705:run.id <- 1
1559768155706:ctsm.param.file <-
1559768155707:file.path(local.rundir, paste0("ctsm_params.", run.id, ".nc"))
1559768155708:file.copy(ctsm.param.default, ctsm.param.file)
1559768155709:ctsm.param.nc <- ncdf4::nc_open(ctsm.param.file, write = TRUE)
1559768155711:## Loop over PFTS
1559768155712:# for testing
1559768155713:# trait.values <- list(c4_grass = list(vmax = 1, SLA = 0.03))
1559768155714:npft <- length(trait.values)
1559768155715:PEcAn.logger::logger.debug('there are ',
1559768155717:npft,
1559768155718:'PFTs in this run, they are named:',
1559768155719:names(trait.values))
1559768155720:ctsm_pftnames <-
1559768155721:stringr::str_trim(tolower(ncdf4::ncvar_get(ctsm.param.nc, "pftname")))
1559768155722:for (i in seq_len(npft)) {
1559768155723:pft.name <- names(trait.values)[i]
1559768155724:if (is.null(pft.name) | is.na(pft.name)) {
1559768155725:PEcAn.logger::logger.error("pft.name missing")
1559768155726:} else {
1559768155728:PEcAn.logger::logger.info(paste("PFT =", pft.name))
1559768155729:## need to find a better way to match PEcAn pft names w/ CTSM pft names
1559768155730:## probably using the clm5_pfts.csv file
1559768155731:PEcAn.logger::logger.debug(paste0("ctsm PFT number: ", which(ctsm_pftnames == pft.name)))
1559768155732:}
1559768155733:if (pft.name == 'env')
1559768155734:next   ## HACK, need to remove env from default
1559768155737:## Match PFT name to COLUMN
1559768155738:ipft <- match(tolower(pft.name), ctsm_pftnames)
1559768155739:PEcAn.logger::logger.debug(paste0("CTSM pft index number: ", ipft))
1559768155741:if (is.na(ipft)) {
1559768155743:PEcAn.logger::logger.severe(
1559768155744:paste(
1559768155745:"Unmatched PFT",
1559768155746:pft.name,
1559768155748:"in CTSM PEcAn does not yet support non-default PFTs for this model"
1559768155749:)
1559768155750:)
1559768155751:}
1559768155754:## Special variables used in conversions
1559768155755:leafC <- 0.48
1559768155757:# # determine photo pathway
1559768155759:# photo_flag <-
1559768155760:#   ncdf4::ncvar_get(ctsm.param.nc,
1559768155761:#                    varid = "c3psn",
1559768155762:#                    start = ipft,
1559768155764:#                    count = 1)
1559768155765:# photo_pathway <- ifelse(photo_flag == 1, "C3", "C4")
1559768155766:# PEcAn.logger::logger.debug(paste0(
1559768155767:#   "Photosynthesis pathway: ",
1559768155769:#   photo_pathway,
1559768155770:#   "; flag value: ",
1559768155772:#   photo_flag
1559768155773:# ))
1559768155775:## Loop over VARIABLES
1559768155777:pft.trait.values <- trait.values[[i]]
1559768155778:for (v in seq_along(pft.trait.values)) {
1559768155779:var <- names(pft.trait.values)[v]
1559768155782:## THESE NEED SOME FOLLOW UP
1559768155784:### ----- Leaf physiological parameters
1559768155785:# Vcmax
1559768155787:# if (var == "vmax") { #TODO change back to Vcmax
1559768155788:#   ncdf4::ncvar_put(
1559768155789:#     nc = ctsm.param.nc,
1559768155790:#     varid = 'vcmax25top',
1559768155792:#     start = ipft,
1559768155793:#     count = 1,
1559768155794:#     vals = pft[v]
1559768155796:#   )  ## (umol CO2 m-2 s-1)
1559768155797:# }
1559768155798:if (var == "SLA") {
1559768155800:## default 0.012
1559768155801:ncdf4::ncvar_put(
1559768155802:nc = ctsm.param.nc,
1559768155804:varid = 'slatop',
1559768155805:start = ipft,
1559768155806:count = 1,
1559768155807:#vals = pft.trait.values[v]
1559768155809:vals = udunits2::ud.convert(pft.trait.values[v], "m2 kg-1", "m2 g-1") / leafC  #TODO: add conversion back in
1559768155810:)
1559768155811:}
1559768155813:} ## end loop over VARIABLES
1559768155814:} ## end loop over PFTs
1559768155815:ncdf4::nc_close(ctsm.param.nc)
1559768155817:return(ctsm.param.nc)
1559768155818:}
1559768165384:write_params_ctsm
1559768178541:test_fx <- write_params_ctsm(trait.values = trait.values, run.id = 1)
1559768180335:sla_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")
1559768252052:#' @param run.id
1559768252054:#'
1559768252056:#' @return
1559768252058:#' @export
1559768252059:#'
1559768252060:#' @examples
1559768252061:#' /dontrun{
1559768252062:#' trait.values <- list(c4_grass = list(vmax = 1, SLA = 0.03))
1559768252063:#' write_params_ctsm(trait.values = trait.values, run.id = 1)
1559768252064:#' }
1559768252065:write_params_ctsm <-
1559768252066:function(defaults = system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM'),
1559768252067:trait.values,
1559768252068:settings,
1559768252070:run.id) {
1559768252071:## Copy and open default parameter files
1559768252071:# TODO: update this to read param files (CTSM and FATES) out of the refcase directory, not the PEcAn package
1559768252072:# TODO: update to allow it to pick between CLM4.5 and CLM5 (CLM5 == CTSM) parameter set based on refcase, user selection
1559768252073:## See issue https://github.com/PecanProject/pecan/issues/1008
1559768252074:ctsm.param.default <-
1559768252075:system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM')
1559768252076:if (!exists('local.rundir'))
1559768252077:local.rundir <- tempdir()
1559768252078:if (!exists('run.id'))
1559768252079:run.id <- 1
1559768252080:ctsm.param.file <-
1559768252081:file.path(local.rundir, paste0("ctsm_params.", run.id, ".nc"))
1559768252082:file.copy(ctsm.param.default, ctsm.param.file)
1559768252083:ctsm.param.nc <- ncdf4::nc_open(ctsm.param.file, write = TRUE)
1559768252085:## Loop over PFTS
1559768252086:# for testing
1559768252087:# trait.values <- list(c4_grass = list(vmax = 1, SLA = 0.03))
1559768252088:npft <- length(trait.values)
1559768252089:PEcAn.logger::logger.debug('there are ',
1559768252090:npft,
1559768252091:'PFTs in this run, they are named:',
1559768252092:names(trait.values))
1559768252093:ctsm_pftnames <-
1559768252094:stringr::str_trim(tolower(ncdf4::ncvar_get(ctsm.param.nc, "pftname")))
1559768252096:for (i in seq_len(npft)) {
1559768252097:pft.name <- names(trait.values)[i]
1559768252098:if (is.null(pft.name) | is.na(pft.name)) {
1559768252099:PEcAn.logger::logger.error("pft.name missing")
1559768252100:} else {
1559768252101:PEcAn.logger::logger.info(paste("PFT =", pft.name))
1559768252102:## need to find a better way to match PEcAn pft names w/ CTSM pft names
1559768252103:## probably using the clm5_pfts.csv file
1559768252104:PEcAn.logger::logger.debug(paste0("ctsm PFT number: ", which(ctsm_pftnames == pft.name)))
1559768252105:}
1559768252107:if (pft.name == 'env')
1559768252108:next   ## HACK, need to remove env from default
1559768252110:## Match PFT name to COLUMN
1559768252111:ipft <- match(tolower(pft.name), ctsm_pftnames)
1559768252112:PEcAn.logger::logger.debug(paste0("CTSM pft index number: ", ipft))
1559768252115:if (is.na(ipft)) {
1559768252116:PEcAn.logger::logger.severe(
1559768252117:paste(
1559768252118:"Unmatched PFT",
1559768252119:pft.name,
1559768252120:"in CTSM PEcAn does not yet support non-default PFTs for this model"
1559768252122:)
1559768252123:)
1559768252124:}
1559768252126:## Special variables used in conversions
1559768252127:leafC <- 0.48
1559768252130:# # determine photo pathway
1559768252131:# photo_flag <-
1559768252132:#   ncdf4::ncvar_get(ctsm.param.nc,
1559768252133:#                    varid = "c3psn",
1559768252134:#                    start = ipft,
1559768252135:#                    count = 1)
1559768252137:# photo_pathway <- ifelse(photo_flag == 1, "C3", "C4")
1559768252138:# PEcAn.logger::logger.debug(paste0(
1559768252139:#   "Photosynthesis pathway: ",
1559768252140:#   photo_pathway,
1559768252141:#   "; flag value: ",
1559768252143:#   photo_flag
1559768252144:# ))
1559768252147:## Loop over VARIABLES
1559768252148:pft.trait.values <- trait.values[[i]]
1559768252149:for (v in seq_along(pft.trait.values)) {
1559768252150:var <- names(pft.trait.values)[v]
1559768252153:## THESE NEED SOME FOLLOW UP
1559768252155:### ----- Leaf physiological parameters
1559768252156:# Vcmax
1559768252157:# if (var == "vmax") { #TODO change back to Vcmax
1559768252159:#   ncdf4::ncvar_put(
1559768252160:#     nc = ctsm.param.nc,
1559768252161:#     varid = 'vcmax25top',
1559768252162:#     start = ipft,
1559768252164:#     count = 1,
1559768252165:#     vals = pft[v]
1559768252166:#   )  ## (umol CO2 m-2 s-1)
1559768252167:# }
1559768252168:if (var == "SLA") {
1559768252170:## default 0.012
1559768252171:ncdf4::ncvar_put(
1559768252172:nc = ctsm.param.nc,
1559768252173:varid = 'slatop',
1559768252175:start = ipft,
1559768252176:count = 1,
1559768252177:#vals = pft.trait.values[v]
1559768252178:vals = udunits2::ud.convert(pft.trait.values[v], "m2 kg-1", "m2 g-1") / leafC  #TODO: add conversion back in
1559768252180:)
1559768252181:}
1559768252182:} ## end loop over VARIABLES
1559768252183:} ## end loop over PFTs
1559768252185:print(ctsm.param.nc)
1559768252186:ncdf4::nc_close(ctsm.param.nc)
1559768252187:#return(ctsm.param.nc)
1559768252188:}
1559768256453:test_fx <- write_params_ctsm(trait.values = trait.values, run.id = 1)
1559768267506:sla_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")
1559768293000:#' @param run.id
1559768293002:#'
1559768293004:#' @return
1559768293005:#' @export
1559768293006:#'
1559768293008:#' @examples
1559768293009:#' /dontrun{
1559768293010:#' trait.values <- list(c4_grass = list(vmax = 1, SLA = 0.03))
1559768293012:#' write_params_ctsm(trait.values = trait.values, run.id = 1)
1559768293013:#' }
1559768293014:write_params_ctsm <-
1559768293015:function(defaults = system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM'),
1559768293016:trait.values,
1559768293018:settings,
1559768293019:run.id) {
1559768293020:## Copy and open default parameter files
1559768293021:# TODO: update this to read param files (CTSM and FATES) out of the refcase directory, not the PEcAn package
1559768293022:# TODO: update to allow it to pick between CLM4.5 and CLM5 (CLM5 == CTSM) parameter set based on refcase, user selection
1559768293023:## See issue https://github.com/PecanProject/pecan/issues/1008
1559768293024:ctsm.param.default <-
1559768293025:system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM')
1559768293026:if (!exists('local.rundir'))
1559768293027:local.rundir <- tempdir()
1559768293028:if (!exists('run.id'))
1559768293030:run.id <- 1
1559768293031:ctsm.param.file <-
1559768293032:file.path(local.rundir, paste0("ctsm_params.", run.id, ".nc"))
1559768293033:file.copy(ctsm.param.default, ctsm.param.file)
1559768293034:ctsm.param.nc <- ncdf4::nc_open(ctsm.param.file, write = TRUE)
1559768293036:## Loop over PFTS
1559768293037:# for testing
1559768293039:# trait.values <- list(c4_grass = list(vmax = 1, SLA = 0.03))
1559768293040:npft <- length(trait.values)
1559768293041:PEcAn.logger::logger.debug('there are ',
1559768293042:npft,
1559768293043:'PFTs in this run, they are named:',
1559768293044:names(trait.values))
1559768293046:ctsm_pftnames <-
1559768293047:stringr::str_trim(tolower(ncdf4::ncvar_get(ctsm.param.nc, "pftname")))
1559768293048:for (i in seq_len(npft)) {
1559768293049:pft.name <- names(trait.values)[i]
1559768293050:if (is.null(pft.name) | is.na(pft.name)) {
1559768293052:PEcAn.logger::logger.error("pft.name missing")
1559768293053:} else {
1559768293054:PEcAn.logger::logger.info(paste("PFT =", pft.name))
1559768293055:## need to find a better way to match PEcAn pft names w/ CTSM pft names
1559768293057:## probably using the clm5_pfts.csv file
1559768293058:PEcAn.logger::logger.debug(paste0("ctsm PFT number: ", which(ctsm_pftnames == pft.name)))
1559768293059:}
1559768293060:if (pft.name == 'env')
1559768293062:next   ## HACK, need to remove env from default
1559768293064:## Match PFT name to COLUMN
1559768293065:ipft <- match(tolower(pft.name), ctsm_pftnames)
1559768293067:PEcAn.logger::logger.debug(paste0("CTSM pft index number: ", ipft))
1559768293069:if (is.na(ipft)) {
1559768293070:PEcAn.logger::logger.severe(
1559768293072:paste(
1559768293073:"Unmatched PFT",
1559768293074:pft.name,
1559768293075:"in CTSM PEcAn does not yet support non-default PFTs for this model"
1559768293077:)
1559768293078:)
1559768293079:}
1559768293082:## Special variables used in conversions
1559768293083:leafC <- 0.48
1559768293086:# # determine photo pathway
1559768293087:# photo_flag <-
1559768293088:#   ncdf4::ncvar_get(ctsm.param.nc,
1559768293090:#                    varid = "c3psn",
1559768293091:#                    start = ipft,
1559768293092:#                    count = 1)
1559768293094:# photo_pathway <- ifelse(photo_flag == 1, "C3", "C4")
1559768293095:# PEcAn.logger::logger.debug(paste0(
1559768293096:#   "Photosynthesis pathway: ",
1559768293098:#   photo_pathway,
1559768293099:#   "; flag value: ",
1559768293101:#   photo_flag
1559768293102:# ))
1559768293105:## Loop over VARIABLES
1559768293106:pft.trait.values <- trait.values[[i]]
1559768293107:for (v in seq_along(pft.trait.values)) {
1559768293109:var <- names(pft.trait.values)[v]
1559768293111:## THESE NEED SOME FOLLOW UP
1559768293114:### ----- Leaf physiological parameters
1559768293115:# Vcmax
1559768293117:# if (var == "vmax") { #TODO change back to Vcmax
1559768293118:#   ncdf4::ncvar_put(
1559768293119:#     nc = ctsm.param.nc,
1559768293121:#     varid = 'vcmax25top',
1559768293122:#     start = ipft,
1559768293123:#     count = 1,
1559768293125:#     vals = pft[v]
1559768293126:#   )  ## (umol CO2 m-2 s-1)
1559768293127:# }
1559768293129:if (var == "SLA") {
1559768293130:## default 0.012
1559768293132:ncdf4::ncvar_put(
1559768293133:nc = ctsm.param.nc,
1559768293134:varid = 'slatop',
1559768293136:start = ipft,
1559768293137:count = 1,
1559768293138:#vals = pft.trait.values[v]
1559768293140:vals = udunits2::ud.convert(pft.trait.values[v], "m2 kg-1", "m2 g-1") / leafC  #TODO: add conversion back in
1559768293141:)
1559768293142:}
1559768293144:} ## end loop over VARIABLES
1559768293145:} ## end loop over PFTs
1559768293147:print(ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop"))
1559768293148:ncdf4::nc_close(ctsm.param.nc)
1559768293149:#return(ctsm.param.nc)
1559768293151:}
1559768298046:test_fx <- write_params_ctsm(trait.values = trait.values, run.id = 1)
1559768349676:#' @param run.id
1559768349678:#'
1559768349680:#' @return
1559768349681:#' @export
1559768349683:#'
1559768349684:#' @examples
1559768349685:#' /dontrun{
1559768349686:#' trait.values <- list(c4_grass = list(vmax = 1, SLA = 0.03))
1559768349687:#' write_params_ctsm(trait.values = trait.values, run.id = 1)
1559768349688:#' }
1559768349689:write_params_ctsm <-
1559768349691:function(defaults = system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM'),
1559768349692:trait.values,
1559768349693:settings,
1559768349694:run.id) {
1559768349695:## Copy and open default parameter files
1559768349696:# TODO: update this to read param files (CTSM and FATES) out of the refcase directory, not the PEcAn package
1559768349697:# TODO: update to allow it to pick between CLM4.5 and CLM5 (CLM5 == CTSM) parameter set based on refcase, user selection
1559768349698:## See issue https://github.com/PecanProject/pecan/issues/1008
1559768349699:ctsm.param.default <-
1559768349700:system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM')
1559768349701:if (!exists('local.rundir'))
1559768349702:local.rundir <- tempdir()
1559768349703:if (!exists('run.id'))
1559768349704:run.id <- 1
1559768349705:ctsm.param.file <-
1559768349706:file.path(local.rundir, paste0("ctsm_params.", run.id, ".nc"))
1559768349707:file.copy(ctsm.param.default, ctsm.param.file)
1559768349708:ctsm.param.nc <- ncdf4::nc_open(ctsm.param.file, write = TRUE)
1559768349710:## Loop over PFTS
1559768349711:# for testing
1559768349712:# trait.values <- list(c4_grass = list(vmax = 1, SLA = 0.03))
1559768349713:npft <- length(trait.values)
1559768349714:PEcAn.logger::logger.debug('there are ',
1559768349715:npft,
1559768349716:'PFTs in this run, they are named:',
1559768349717:names(trait.values))
1559768349718:ctsm_pftnames <-
1559768349719:stringr::str_trim(tolower(ncdf4::ncvar_get(ctsm.param.nc, "pftname")))
1559768349720:for (i in seq_len(npft)) {
1559768349722:pft.name <- names(trait.values)[i]
1559768349723:if (is.null(pft.name) | is.na(pft.name)) {
1559768349724:PEcAn.logger::logger.error("pft.name missing")
1559768349725:} else {
1559768349726:PEcAn.logger::logger.info(paste("PFT =", pft.name))
1559768349727:## need to find a better way to match PEcAn pft names w/ CTSM pft names
1559768349728:## probably using the clm5_pfts.csv file
1559768349729:PEcAn.logger::logger.debug(paste0("ctsm PFT number: ", which(ctsm_pftnames == pft.name)))
1559768349731:}
1559768349732:if (pft.name == 'env')
1559768349733:next   ## HACK, need to remove env from default
1559768349735:## Match PFT name to COLUMN
1559768349736:ipft <- match(tolower(pft.name), ctsm_pftnames)
1559768349737:PEcAn.logger::logger.debug(paste0("CTSM pft index number: ", ipft))
1559768349740:if (is.na(ipft)) {
1559768349741:PEcAn.logger::logger.severe(
1559768349742:paste(
1559768349743:"Unmatched PFT",
1559768349744:pft.name,
1559768349745:"in CTSM PEcAn does not yet support non-default PFTs for this model"
1559768349747:)
1559768349748:)
1559768349749:}
1559768349751:## Special variables used in conversions
1559768349753:leafC <- 0.48
1559768349755:# # determine photo pathway
1559768349756:# photo_flag <-
1559768349757:#   ncdf4::ncvar_get(ctsm.param.nc,
1559768349758:#                    varid = "c3psn",
1559768349760:#                    start = ipft,
1559768349761:#                    count = 1)
1559768349762:# photo_pathway <- ifelse(photo_flag == 1, "C3", "C4")
1559768349763:# PEcAn.logger::logger.debug(paste0(
1559768349764:#   "Photosynthesis pathway: ",
1559768349766:#   photo_pathway,
1559768349767:#   "; flag value: ",
1559768349769:#   photo_flag
1559768349770:# ))
1559768349772:## Loop over VARIABLES
1559768349773:pft.trait.values <- trait.values[[i]]
1559768349775:for (v in seq_along(pft.trait.values)) {
1559768349776:var <- names(pft.trait.values)[v]
1559768349778:## THESE NEED SOME FOLLOW UP
1559768349781:### ----- Leaf physiological parameters
1559768349782:# Vcmax
1559768349783:# if (var == "vmax") { #TODO change back to Vcmax
1559768349785:#   ncdf4::ncvar_put(
1559768349786:#     nc = ctsm.param.nc,
1559768349787:#     varid = 'vcmax25top',
1559768349788:#     start = ipft,
1559768349790:#     count = 1,
1559768349791:#     vals = pft[v]
1559768349792:#   )  ## (umol CO2 m-2 s-1)
1559768349793:# }
1559768349795:if (var == "SLA") {
1559768349796:## default 0.012
1559768349797:ncdf4::ncvar_put(
1559768349799:nc = ctsm.param.nc,
1559768349800:varid = 'slatop',
1559768349801:start = ipft,
1559768349802:count = 1,
1559768349804:#vals = pft.trait.values[v]
1559768349805:vals = udunits2::ud.convert(pft.trait.values[v], "m2 kg-1", "m2 g-1") / leafC  #TODO: add conversion back in
1559768349806:)
1559768349807:}
1559768349809:} ## end loop over VARIABLES
1559768349810:} ## end loop over PFTs
1559768349811:sla_all <- ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")
1559768349813:print(sla_all)
1559768349814:print(sla_all[15])
1559768349815:ncdf4::nc_close(ctsm.param.nc)
1559768349817:#return(ctsm.param.nc)
1559768349818:}
1559768355616:test_fx <- write_params_ctsm(trait.values = trait.values, run.id = 1)
1559854233177:.libPaths("~/R_libs/")
1559854233711:library(PEcAn.CTSM)
1559854236056:trait.values <- list(c4_grass = list(vmax = 1, SLA = 0.03))
1559854242936:#' @param run.id
1559854242938:#'
1559854242940:#' @return
1559854242942:#' @export
1559854242944:#'
1559854242945:#' @examples
1559854242947:#' /dontrun{
1559854242949:#' trait.values <- list(c4_grass = list(vmax = 1, SLA = 0.03))
1559854242950:#' write_params_ctsm(trait.values = trait.values, run.id = 1)
1559854242951:#' }
1559854242952:write_params_ctsm <-
1559854242953:function(defaults = system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM'),
1559854242954:trait.values,
1559854242955:settings,
1559854242956:run.id) {
1559854242957:## Copy and open default parameter files
1559854242958:# TODO: update this to read param files (CTSM and FATES) out of the refcase directory, not the PEcAn package
1559854242959:# TODO: update to allow it to pick between CLM4.5 and CLM5 (CLM5 == CTSM) parameter set based on refcase, user selection
1559854242960:## See issue https://github.com/PecanProject/pecan/issues/1008
1559854242961:ctsm.param.default <-
1559854242962:system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM')
1559854242963:if (!exists('local.rundir'))
1559854242964:local.rundir <- tempdir()
1559854242965:if (!exists('run.id'))
1559854242966:run.id <- 1
1559854242967:ctsm.param.file <-
1559854242968:file.path(local.rundir, paste0("ctsm_params.", run.id, ".nc"))
1559854242969:file.copy(ctsm.param.default, ctsm.param.file)
1559854242970:ctsm.param.nc <- ncdf4::nc_open(ctsm.param.file, write = TRUE)
1559854242972:## Loop over PFTS
1559854242973:# for testing
1559854242974:# trait.values <- list(c4_grass = list(vmax = 1, SLA = 0.03))
1559854242975:npft <- length(trait.values)
1559854242976:PEcAn.logger::logger.debug('there are ',
1559854242977:npft,
1559854242978:'PFTs in this run, they are named:',
1559854242979:names(trait.values))
1559854242981:ctsm_pftnames <-
1559854242982:stringr::str_trim(tolower(ncdf4::ncvar_get(ctsm.param.nc, "pftname")))
1559854242983:for (i in seq_len(npft)) {
1559854242984:pft.name <- names(trait.values)[i]
1559854242985:if (is.null(pft.name) | is.na(pft.name)) {
1559854243021:PEcAn.logger::logger.error("pft.name missing")
1559854243023:} else {
1559854243025:PEcAn.logger::logger.info(paste("PFT =", pft.name))
1559854243027:## need to find a better way to match PEcAn pft names w/ CTSM pft names
1559854243029:## probably using the clm5_pfts.csv file
1559854243030:PEcAn.logger::logger.debug(paste0("ctsm PFT number: ", which(ctsm_pftnames == pft.name)))
1559854243032:}
1559854243033:if (pft.name == 'env')
1559854243034:next   ## HACK, need to remove env from default
1559854243036:## Match PFT name to COLUMN
1559854243037:ipft <- match(tolower(pft.name), ctsm_pftnames)
1559854243038:PEcAn.logger::logger.debug(paste0("CTSM pft index number: ", ipft))
1559854243040:if (is.na(ipft)) {
1559854243042:PEcAn.logger::logger.severe(
1559854243043:paste(
1559854243044:"Unmatched PFT",
1559854243045:pft.name,
1559854243046:"in CTSM PEcAn does not yet support non-default PFTs for this model"
1559854243048:)
1559854243049:)
1559854243050:}
1559854243052:## Special variables used in conversions
1559854243053:leafC <- 0.48
1559854243055:# # determine photo pathway
1559854243057:# photo_flag <-
1559854243058:#   ncdf4::ncvar_get(ctsm.param.nc,
1559854243059:#                    varid = "c3psn",
1559854243060:#                    start = ipft,
1559854243061:#                    count = 1)
1559854243062:# photo_pathway <- ifelse(photo_flag == 1, "C3", "C4")
1559854243064:# PEcAn.logger::logger.debug(paste0(
1559854243065:#   "Photosynthesis pathway: ",
1559854243066:#   photo_pathway,
1559854243067:#   "; flag value: ",
1559854243069:#   photo_flag
1559854243070:# ))
1559854243072:## Loop over VARIABLES
1559854243074:pft.trait.values <- trait.values[[i]]
1559854243096:for (v in seq_along(pft.trait.values)) {
1559854243098:var <- names(pft.trait.values)[v]
1559854243101:## THESE NEED SOME FOLLOW UP
1559854243104:### ----- Leaf physiological parameters
1559854243106:# Vcmax
1559854243108:# if (var == "vmax") { #TODO change back to Vcmax
1559854243110:#   ncdf4::ncvar_put(
1559854243111:#     nc = ctsm.param.nc,
1559854243113:#     varid = 'vcmax25top',
1559854243114:#     start = ipft,
1559854243115:#     count = 1,
1559854243116:#     vals = pft[v]
1559854243118:#   )  ## (umol CO2 m-2 s-1)
1559854243119:# }
1559854243120:if (var == "SLA") {
1559854243121:## default 0.012
1559854243122:ncdf4::ncvar_put(
1559854243124:nc = ctsm.param.nc,
1559854243125:varid = 'slatop',
1559854243126:start = ipft,
1559854243128:count = 1,
1559854243129:#vals = pft.trait.values[v]
1559854243130:vals = udunits2::ud.convert(pft.trait.values[v], "m2 kg-1", "m2 g-1") / leafC  #TODO: add conversion back in
1559854243131:)
1559854243133:}
1559854243134:} ## end loop over VARIABLES
1559854243135:} ## end loop over PFTs
1559854243136:# sla_all <- ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")
1559854243138:# print(sla_all)
1559854243139:# print(sla_all[15])
1559854243140:# ncdf4::nc_close(ctsm.param.nc)
1559854243141:# return(ctsm.param.nc)
1559854243143:}
1559854250319:.libPaths("~/R_libs/")
1559854250856:library(PEcAn.CTSM)
1559854257277:## Copy and open default parameter files
1559854257279:# TODO: update this to read param files (CTSM and FATES) out of the refcase directory, not the PEcAn package
1559854257281:# TODO: update to allow it to pick between CLM4.5 and CLM5 (CLM5 == CTSM) parameter set based on refcase, user selection
1559854257283:## See issue https://github.com/PecanProject/pecan/issues/1008
1559854257285:ctsm.param.default <-
1559854257287:system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM')
1559854257955:if (!exists('local.rundir'))
1559854258194:local.rundir <- tempdir()
1559854258439:if (!exists('run.id'))
1559854258880:run.id <- 1
1559854260124:ctsm.param.file <-
1559854260126:file.path(local.rundir, paste0("ctsm_params.", run.id, ".nc"))
1559854260514:file.copy(ctsm.param.default, ctsm.param.file)
1559854261402:ctsm.param.nc <- ncdf4::nc_open(ctsm.param.file, write = TRUE)
1559854284277:sla_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")
1559854288871:sla_old
1559854294438:sla_old[15]
1559854327302:1/0.48
1559854339926:sla <- 0.3
1559854344464:sla <- 0.03
1559854345910:sla
1559854357650:(sla/1000) * (1/0.48)
1559854423353:options(scipen = 999)
1559854424581:(sla/1000) * (1/0.48)
1559854439528:## Loop over PFTS
1559854439530:# for testing
1559854439532:# trait.values <- list(c4_grass = list(vmax = 1, SLA = 0.03))
1559854439533:npft <- length(trait.values)
1559854443504:trait.values <- list(c4_grass = list(vmax = 1, SLA = 0.03))
1559854448078:## Loop over PFTS
1559854448082:# for testing
1559854448085:# trait.values <- list(c4_grass = list(vmax = 1, SLA = 0.03))
1559854448089:npft <- length(trait.values)
1559854450402:PEcAn.logger::logger.debug('there are ',
1559854450403:npft,
1559854450405:'PFTs in this run, they are named:',
1559854450407:names(trait.values))
1559854452530:ctsm_pftnames <-
1559854452532:stringr::str_trim(tolower(ncdf4::ncvar_get(ctsm.param.nc, "pftname")))
1559854461354:i <- 1
1559854463820:pft.name <- names(trait.values)[i]
1559854469224:if (is.null(pft.name) | is.na(pft.name)) {
1559854469225:PEcAn.logger::logger.error("pft.name missing")
1559854469227:} else {
1559854469228:PEcAn.logger::logger.info(paste("PFT =", pft.name))
1559854469229:## need to find a better way to match PEcAn pft names w/ CTSM pft names
1559854469230:## probably using the clm5_pfts.csv file
1559854469231:PEcAn.logger::logger.debug(paste0("ctsm PFT number: ", which(ctsm_pftnames == pft.name)))
1559854469233:}
1559854471219:if (pft.name == 'env')
1559854471447:next   ## HACK, need to remove env from default
1559854474698:## Match PFT name to COLUMN
1559854474699:ipft <- match(tolower(pft.name), ctsm_pftnames)
1559854477418:PEcAn.logger::logger.debug(paste0("CTSM pft index number: ", ipft))
1559854481516:if (is.na(ipft)) {
1559854481518:PEcAn.logger::logger.severe(
1559854481520:paste(
1559854481522:"Unmatched PFT",
1559854481523:pft.name,
1559854481525:"in CTSM PEcAn does not yet support non-default PFTs for this model"
1559854481527:)
1559854481528:)
1559854481529:}
1559854483122:## Special variables used in conversions
1559854483123:leafC <- 0.48
1559854490484:## Loop over VARIABLES
1559854490485:pft.trait.values <- trait.values[[i]]
1559854493757:pft.trait.values
1559854499234:v <- 2
1559854502732:var <- names(pft.trait.values)[v]
1559854504606:var
1559854523609:sla_old[15]
1559854532179:# Vcmax
1559854532180:# if (var == "vmax") { #TODO change back to Vcmax
1559854532182:#   ncdf4::ncvar_put(
1559854532183:#     nc = ctsm.param.nc,
1559854532184:#     varid = 'vcmax25top',
1559854532185:#     start = ipft,
1559854532186:#     count = 1,
1559854532186:#     vals = pft[v]
1559854532187:#   )  ## (umol CO2 m-2 s-1)
1559854532188:# }
1559854532189:if (var == "SLA") {
1559854532190:## default 0.012
1559854532191:ncdf4::ncvar_put(
1559854532193:nc = ctsm.param.nc,
1559854532193:varid = 'slatop',
1559854532194:start = ipft,
1559854532196:count = 1,
1559854532197:#vals = pft.trait.values[v]
1559854532198:vals = udunits2::ud.convert(pft.trait.values[v], "m2 kg-1", "m2 g-1") / leafC  #TODO: add conversion back in
1559854532198:)
1559854532200:}
1559854543480:sla_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")
1559854547450:sla_new[15]
1559854550890:sla_old[15]
1559854562030:(sla/1000) * (1/0.48)
1559854568596:(sla/1000) * (1/0.48) == sla_new[15]
1559854655338:names(ctsm.param.nc$var)
1559854911525:c2n_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")
1559854915886:c2n_new
1559854922657:c2n_new[15]
1559854960023:trait.values
1559854985712:sla_old[15]
1559854990526:sla_new[15]
1559855256947:.libPaths("~/R_libs/")
1559855257493:library(PEcAn.CTSM)
1559855270168:## Copy and open default parameter files
1559855270170:# TODO: update this to read param files (CTSM and FATES) out of the refcase directory, not the PEcAn package
1559855270172:# TODO: update to allow it to pick between CLM4.5 and CLM5 (CLM5 == CTSM) parameter set based on refcase, user selection
1559855270174:## See issue https://github.com/PecanProject/pecan/issues/1008
1559855270176:ctsm.param.default <-
1559855270178:system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM')
1559855270903:if (!exists('local.rundir'))
1559855271057:local.rundir <- tempdir()
1559855271684:if (!exists('run.id'))
1559855271946:run.id <- 1
1559855272437:ctsm.param.file <-
1559855272439:file.path(local.rundir, paste0("ctsm_params.", run.id, ".nc"))
1559855273121:file.copy(ctsm.param.default, ctsm.param.file)
1559855273910:ctsm.param.nc <- ncdf4::nc_open(ctsm.param.file, write = TRUE)
1559855282451:sla_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")
1559855282699:c2n_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")
1559855291776:sla_old[15]
1559855291919:sla_new[15]
1559855294438:c2n_old[15]
1559855303255:trait.values <- list(c4_grass = list(vmax = 1, SLA = 0.03, c2n_leaf = 35))
1559855305073:## Loop over PFTS
1559855305074:# for testing
1559855305076:# trait.values <- list(c4_grass = list(vmax = 1, SLA = 0.03, c2n_leaf = 35))
1559855305077:npft <- length(trait.values)
1559855305275:PEcAn.logger::logger.debug('there are ',
1559855305277:npft,
1559855305278:'PFTs in this run, they are named:',
1559855305280:names(trait.values))
1559855306312:ctsm_pftnames <-
1559855306314:stringr::str_trim(tolower(ncdf4::ncvar_get(ctsm.param.nc, "pftname")))
1559855313684:i <- 1
1559855316687:pft.name <- names(trait.values)[i]
1559855317327:if (is.null(pft.name) | is.na(pft.name)) {
1559855317329:PEcAn.logger::logger.error("pft.name missing")
1559855317330:} else {
1559855317332:PEcAn.logger::logger.info(paste("PFT =", pft.name))
1559855317333:## need to find a better way to match PEcAn pft names w/ CTSM pft names
1559855317334:## probably using the clm5_pfts.csv file
1559855317336:PEcAn.logger::logger.debug(paste0("ctsm PFT number: ", which(ctsm_pftnames == pft.name)))
1559855317337:}
1559855318609:if (pft.name == 'env')
1559855319014:next   ## HACK, need to remove env from default
1559855320305:## Match PFT name to COLUMN
1559855320307:ipft <- match(tolower(pft.name), ctsm_pftnames)
1559855321552:PEcAn.logger::logger.debug(paste0("CTSM pft index number: ", ipft))
1559855325023:if (is.na(ipft)) {
1559855325025:PEcAn.logger::logger.severe(
1559855325027:paste(
1559855325029:"Unmatched PFT",
1559855325031:pft.name,
1559855325032:"in CTSM PEcAn does not yet support non-default PFTs for this model"
1559855325033:)
1559855325034:)
1559855325035:}
1559855325694:## Special variables used in conversions
1559855325697:leafC <- 0.48
1559855333952:## Loop over VARIABLES
1559855333953:pft.trait.values <- trait.values[[i]]
1559855341214:pft.trait.values
1559855349861:v <- 2
1559855354370:var <- names(pft.trait.values)[v]
1559855358865:# Vcmax
1559855358867:# if (var == "vmax") { #TODO change back to Vcmax
1559855358869:#   ncdf4::ncvar_put(
1559855358871:#     nc = ctsm.param.nc,
1559855358873:#     varid = 'vcmax25top',
1559855358875:#     start = ipft,
1559855358877:#     count = 1,
1559855358878:#     vals = pft[v]
1559855358879:#   )  ## (umol CO2 m-2 s-1)
1559855358880:# }
1559855358882:if (var == "SLA") {
1559855358883:## default 0.03846
1559855358884:ncdf4::ncvar_put(
1559855358885:nc = ctsm.param.nc,
1559855358886:varid = "slatop",
1559855358887:start = ipft,
1559855358888:count = 1,
1559855358889:vals = udunits2::ud.convert(pft.trait.values[v], "m2 kg-1", "m2 g-1") / leafC  #TODO: add conversion back in
1559855358890:)
1559855358891:}
1559855360483:if (var == "c2n_leaf"){
1559855360485:## default 35.36068
1559855360487:ncdf4::ncvar_put(
1559855360489:nc = ctsm.param.nc,
1559855360490:varid = "leafcn",
1559855360492:start = ipft,
1559855360494:count = 1,
1559855360495:vals = pft.trait.values[v]
1559855360496:)
1559855360497:}
1559855366384:sla_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")
1559855366667:c2n_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")
1559855368340:sla_old[15]
1559855368572:sla_new[15]
1559855369863:c2n_old[15]
1559855370259:c2n_new[15]
1559855379655:v <- 3
1559855386676:var <- names(pft.trait.values)[v]
1559855388341:# Vcmax
1559855388343:# if (var == "vmax") { #TODO change back to Vcmax
1559855388345:#   ncdf4::ncvar_put(
1559855388346:#     nc = ctsm.param.nc,
1559855388348:#     varid = 'vcmax25top',
1559855388349:#     start = ipft,
1559855388351:#     count = 1,
1559855388352:#     vals = pft[v]
1559855388354:#   )  ## (umol CO2 m-2 s-1)
1559855388355:# }
1559855388356:if (var == "SLA") {
1559855388357:## default 0.03846
1559855388358:ncdf4::ncvar_put(
1559855388359:nc = ctsm.param.nc,
1559855388360:varid = "slatop",
1559855388362:start = ipft,
1559855388363:count = 1,
1559855388364:vals = udunits2::ud.convert(pft.trait.values[v], "m2 kg-1", "m2 g-1") / leafC  #TODO: add conversion back in
1559855388365:)
1559855388366:}
1559855389044:if (var == "c2n_leaf"){
1559855389046:## default 35.36068
1559855389048:ncdf4::ncvar_put(
1559855389050:nc = ctsm.param.nc,
1559855389052:varid = "leafcn",
1559855389054:start = ipft,
1559855389055:count = 1,
1559855389056:vals = pft.trait.values[v]
1559855389057:)
1559855389058:}
1559855397179:sla_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")
1559855397328:c2n_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")
1559855398230:sla_old[15]
1559855398361:sla_new[15]
1559855398783:c2n_old[15]
1559855399007:c2n_new[15]
1559855854322:.libPaths("~/R_libs/")
1559855854858:library(PEcAn.CTSM)
1559855897540:## Copy and open default parameter files
1559855897542:# TODO: update this to read param files (CTSM and FATES) out of the refcase directory, not the PEcAn package
1559855897544:# TODO: update to allow it to pick between CLM4.5 and CLM5 (CLM5 == CTSM) parameter set based on refcase, user selection
1559855897546:## See issue https://github.com/PecanProject/pecan/issues/1008
1559855897547:ctsm.param.default <-
1559855897548:system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM')
1559855898259:if (!exists('local.rundir'))
1559855898397:local.rundir <- tempdir()
1559855898713:if (!exists('run.id'))
1559855899242:run.id <- 1
1559855899620:ctsm.param.file <-
1559855899622:file.path(local.rundir, paste0("ctsm_params.", run.id, ".nc"))
1559855899790:file.copy(ctsm.param.default, ctsm.param.file)
1559855900516:ctsm.param.nc <- ncdf4::nc_open(ctsm.param.file, write = TRUE)
1559855908163:sla_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")
1559855908325:c2n_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")
1559855908581:sto_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "mbbopt")
1559855911223:sto_old[15]
1559855941438:trait.values <- list(c4_grass = list(sla = 0.03, c2n_leaf = 35, stom_slope = 10))
1559855944557:## Loop over PFTS
1559855944559:# for testing
1559855944561:# trait.values <- list(c4_grass = list(sla = 0.03, c2n_leaf = 35, stom_slope = 10))
1559855944562:#fineroot2leaf = 2, vcmax = 28,
1559855944563:npft <- length(trait.values)
1559855945768:PEcAn.logger::logger.debug('there are ',
1559855945769:npft,
1559855945771:'PFTs in this run, they are named:',
1559855945772:names(trait.values))
1559855946823:ctsm_pftnames <-
1559855946825:stringr::str_trim(tolower(ncdf4::ncvar_get(ctsm.param.nc, "pftname")))
1559855952325:i <- 1
1559855954752:pft.name <- names(trait.values)[i]
1559855955561:if (is.null(pft.name) | is.na(pft.name)) {
1559855955562:PEcAn.logger::logger.error("pft.name missing")
1559855955563:} else {
1559855955564:PEcAn.logger::logger.info(paste("PFT =", pft.name))
1559855955565:## need to find a better way to match PEcAn pft names w/ CTSM pft names
1559855955566:## probably using the clm5_pfts.csv file
1559855955567:PEcAn.logger::logger.debug(paste0("ctsm PFT number: ", which(ctsm_pftnames == pft.name)))
1559855955568:}
1559855956685:if (pft.name == 'env')
1559855956880:next   ## HACK, need to remove env from default
1559855957963:## Match PFT name to COLUMN
1559855957965:ipft <- match(tolower(pft.name), ctsm_pftnames)
1559855958882:PEcAn.logger::logger.debug(paste0("CTSM pft index number: ", ipft))
1559855959569:if (is.na(ipft)) {
1559855959571:PEcAn.logger::logger.severe(
1559855959573:paste(
1559855959575:"Unmatched PFT",
1559855959577:pft.name,
1559855959579:"in CTSM PEcAn does not yet support non-default PFTs for this model"
1559855959580:)
1559855959581:)
1559855959583:}
1559855960618:## Special variables used in conversions
1559855960620:leafC <- 0.48
1559855969669:## Loop over VARIABLES
1559855969671:pft.trait.values <- trait.values[[i]]
1559855975886:seq_along(pft.trait.values)
1559855980131:for (v in seq_along(pft.trait.values)) {
1559855980133:var <- names(pft.trait.values)[v]
1559855980136:## THESE NEED SOME FOLLOW UP
1559855980139:### ----- Leaf physiological parameters
1559855980139:# Vcmax
1559855980140:# if (var == "vmax") { #TODO change back to Vcmax
1559855980141:#   ncdf4::ncvar_put(
1559855980142:#     nc = ctsm.param.nc,
1559855980143:#     varid = 'vcmax25top',
1559855980144:#     start = ipft,
1559855980145:#     count = 1,
1559855980146:#     vals = pft[v]
1559855980147:#   )  ## (umol CO2 m-2 s-1)
1559855980148:# }
1559855980149:if (var == "sla") {
1559855980150:## default 0.03846
1559855980151:ncdf4::ncvar_put(
1559855980152:nc = ctsm.param.nc,
1559855980153:varid = "slatop",
1559855980154:start = ipft,
1559855980155:count = 1,
1559855980156:vals = udunits2::ud.convert(pft.trait.values[v], "m2 kg-1", "m2 g-1") / leafC  #TODO: add conversion back in
1559855980156:)
1559855980157:}
1559855980158:if (var == "c2n_leaf"){
1559855980159:## default 35.36068
1559855980160:ncdf4::ncvar_put(
1559855980161:nc = ctsm.param.nc,
1559855980162:varid = "leafcn",
1559855980163:start = ipft,
1559855980164:count = 1,
1559855980165:vals = pft.trait.values[v]
1559855980166:)
1559855980167:}
1559855980168:if (var == "stom_slope"){
1559855980169:## default 9.757532
1559855980170:ncdf4::ncvar_put(
1559855980171:nc = ctsm.param.nc,
1559855980172:varid = "mbbopt",
1559855980173:start = ipft,
1559855980174:count = 1,
1559855980175:vals = pft.trait.values[v]
1559855980176:)
1559855980177:}
1559855980178:if (var == "fineroot2leaf"){
1559855980179:## default 1.5
1559855980180:ncdf4::ncvar_put(
1559855980181:nc = ctsm.param.nc,
1559855980182:varid = "leafcn",
1559855980183:start = ipft,
1559855980184:count = 1,
1559855980185:vals = pft.trait.values[v]
1559855980186:)
1559855980187:}
1559855980188:if (var == "vcmax"){
1559855980189:## default 28.4
1559855980190:ncdf4::ncvar_put(
1559855980191:nc = ctsm.param.nc,
1559855980192:varid = "leafcn",
1559855980193:start = ipft,
1559855980194:count = 1,
1559855980195:vals = pft.trait.values[v]
1559855980196:)
1559855980198:}
1559855980199:} ## end loop over VARIABLES
1559855988313:sla_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")
1559855988483:c2n_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")
1559855988925:sto_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "mbbopt")
1559855990135:sla_old[15]
1559855990285:sla_new[15]
1559855990450:c2n_old[15]
1559855990599:c2n_new[15]
1559855990778:sto_old[15]
1559855990977:sto_new[15]
1559858518330:.libPaths("~/R_libs/")
1559858518888:library(PEcAn.CTSM)
1559858523491:## Copy and open default parameter files
1559858523493:# TODO: update this to read param files (CTSM and FATES) out of the refcase directory, not the PEcAn package
1559858523495:# TODO: update to allow it to pick between CLM4.5 and CLM5 (CLM5 == CTSM) parameter set based on refcase, user selection
1559858523497:## See issue https://github.com/PecanProject/pecan/issues/1008
1559858523499:ctsm.param.default <-
1559858523500:system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM')
1559858523991:if (!exists('local.rundir'))
1559858524135:local.rundir <- tempdir()
1559858524393:if (!exists('run.id'))
1559858524766:run.id <- 1
1559858525154:ctsm.param.file <-
1559858525155:file.path(local.rundir, paste0("ctsm_params.", run.id, ".nc"))
1559858525510:file.copy(ctsm.param.default, ctsm.param.file)
1559858525887:ctsm.param.nc <- ncdf4::nc_open(ctsm.param.file, write = TRUE)
1559858531094:sla_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")
1559858531268:c2n_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")
1559858531443:sto_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "mbbopt")
1559858531930:frl_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "froot_leaf")
1559858536895:## Loop over PFTS
1559858536896:# for testing
1559858536897:# trait.values <- list(c4_grass = list(sla = 0.03, c2n_leaf = 35, stom_slope = 10, fineroot2leaf = 2))
1559858536898:#, vcmax = 28,
1559858536898:npft <- length(trait.values)
1559858537239:PEcAn.logger::logger.debug('there are ',
1559858537240:npft,
1559858537241:'PFTs in this run, they are named:',
1559858537242:names(trait.values))
1559858537627:ctsm_pftnames <-
1559858537628:stringr::str_trim(tolower(ncdf4::ncvar_get(ctsm.param.nc, "pftname")))
1559858540866:i <- 1
1559858543625:pft.name <- names(trait.values)[i]
1559858543840:if (is.null(pft.name) | is.na(pft.name)) {
1559858543841:PEcAn.logger::logger.error("pft.name missing")
1559858543842:} else {
1559858543843:PEcAn.logger::logger.info(paste("PFT =", pft.name))
1559858543844:## need to find a better way to match PEcAn pft names w/ CTSM pft names
1559858543845:## probably using the clm5_pfts.csv file
1559858543846:PEcAn.logger::logger.debug(paste0("ctsm PFT number: ", which(ctsm_pftnames == pft.name)))
1559858543847:}
1559858544217:if (pft.name == 'env')
1559858545267:next   ## HACK, need to remove env from default
1559858548932:## Match PFT name to COLUMN
1559858548933:ipft <- match(tolower(pft.name), ctsm_pftnames)
1559858549129:PEcAn.logger::logger.debug(paste0("CTSM pft index number: ", ipft))
1559858549279:if (is.na(ipft)) {
1559858549280:PEcAn.logger::logger.severe(
1559858549281:paste(
1559858549282:"Unmatched PFT",
1559858549283:pft.name,
1559858549284:"in CTSM PEcAn does not yet support non-default PFTs for this model"
1559858549285:)
1559858549286:)
1559858549287:}
1559858549661:## Special variables used in conversions
1559858549662:leafC <- 0.48
1559858560570:trait.values <- list(c4_grass = list(sla = 0.03, c2n_leaf = 35, stom_slope = 10, fineroot2leaf = 2))
1559858564288:## Loop over PFTS
1559858564289:# for testing
1559858564290:# trait.values <- list(c4_grass = list(sla = 0.03, c2n_leaf = 35, stom_slope = 10, fineroot2leaf = 2))
1559858564291:#, vcmax = 28,
1559858564292:npft <- length(trait.values)
1559858564816:PEcAn.logger::logger.debug('there are ',
1559858564817:npft,
1559858564818:'PFTs in this run, they are named:',
1559858564819:names(trait.values))
1559858565623:ctsm_pftnames <-
1559858565624:stringr::str_trim(tolower(ncdf4::ncvar_get(ctsm.param.nc, "pftname")))
1559858567610:pft.name <- names(trait.values)[i]
1559858568430:if (is.null(pft.name) | is.na(pft.name)) {
1559858568431:PEcAn.logger::logger.error("pft.name missing")
1559858568432:} else {
1559858568433:PEcAn.logger::logger.info(paste("PFT =", pft.name))
1559858568434:## need to find a better way to match PEcAn pft names w/ CTSM pft names
1559858568435:## probably using the clm5_pfts.csv file
1559858568436:PEcAn.logger::logger.debug(paste0("ctsm PFT number: ", which(ctsm_pftnames == pft.name)))
1559858568437:}
1559858569637:if (pft.name == 'env')
1559858570079:next   ## HACK, need to remove env from default
1559858571599:## Match PFT name to COLUMN
1559858571600:ipft <- match(tolower(pft.name), ctsm_pftnames)
1559858572253:PEcAn.logger::logger.debug(paste0("CTSM pft index number: ", ipft))
1559858651609:if (is.na(ipft)) {
1559858651611:PEcAn.logger::logger.severe(
1559858651612:paste(
1559858651612:"Unmatched PFT",
1559858651614:pft.name,
1559858651615:"in CTSM PEcAn does not yet support non-default PFTs for this model"
1559858651616:)
1559858651616:)
1559858651617:}
1559858651766:## Special variables used in conversions
1559858651767:leafC <- 0.48
1559858659447:## Loop over VARIABLES
1559858659448:pft.trait.values <- trait.values[[i]]
1559858660028:for (v in seq_along(pft.trait.values)) {
1559858660029:var <- names(pft.trait.values)[v]
1559858660031:## THESE NEED SOME FOLLOW UP
1559858660033:### ----- Leaf physiological parameters
1559858660035:if (var == "sla") {
1559858660036:## default 0.03846
1559858660037:ncdf4::ncvar_put(
1559858660038:nc = ctsm.param.nc,
1559858660039:varid = "slatop",
1559858660040:start = ipft,
1559858660041:count = 1,
1559858660042:vals = udunits2::ud.convert(pft.trait.values[v], "m2 kg-1", "m2 g-1") / leafC  #TODO: add conversion back in
1559858660043:)
1559858660044:}
1559858660045:if (var == "c2n_leaf"){
1559858660046:## default 35.36068
1559858660047:ncdf4::ncvar_put(
1559858660048:nc = ctsm.param.nc,
1559858660049:varid = "leafcn",
1559858660050:start = ipft,
1559858660050:count = 1,
1559858660052:vals = pft.trait.values[v]
1559858660053:)
1559858660054:}
1559858660055:if (var == "stom_slope"){
1559858660056:## default 9.757532
1559858660057:ncdf4::ncvar_put(
1559858660058:nc = ctsm.param.nc,
1559858660059:varid = "mbbopt",
1559858660060:start = ipft,
1559858660061:count = 1,
1559858660062:vals = pft.trait.values[v]
1559858660063:)
1559858660064:}
1559858660065:if (var == "fineroot2leaf"){
1559858660066:## default 1.5
1559858660067:ncdf4::ncvar_put(
1559858660068:nc = ctsm.param.nc,
1559858660069:varid = "froot_leaf",
1559858660072:start = ipft,
1559858660073:count = 1,
1559858660074:vals = pft.trait.values[v]
1559858660075:)
1559858660076:}
1559858660077:# if (var == "vcmax"){
1559858660078:#   ## default 28.4
1559858660079:#   ncdf4::ncvar_put(
1559858660080:#     nc = ctsm.param.nc,
1559858660081:#     varid = "leafcn",
1559858660082:#     start = ipft,
1559858660083:#     count = 1,
1559858660084:#     vals = pft.trait.values[v]
1559858660085:#   )
1559858660087:# }
1559858660088:} ## end loop over VARIABLES
1559858664512:sla_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")
1559858664680:c2n_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")
1559858664858:sto_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "mbbopt")
1559858665182:frl_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "froot_leaf")
1559858666113:sla_old[15]
1559858666374:sla_new[15]
1559858667256:c2n_old[15]
1559858667422:c2n_new[15]
1559858668278:sto_old[15]
1559858668464:sto_new[15]
1559858669488:frl_old[15]
1559858669661:frl_new[15]
1559859217763:pft.trait.values
1559859231934:pft.trait.values[1]
1559859235634:pft.trait.values["sla"]
1559859698563:.libPaths("~/R_libs/")
1559859699113:library(PEcAn.CTSM)
1559859705111:## Copy and open default parameter files
1559859705113:# TODO: update this to read param files (CTSM and FATES) out of the refcase directory, not the PEcAn package
1559859705115:# TODO: update to allow it to pick between CLM4.5 and CLM5 (CLM5 == CTSM) parameter set based on refcase, user selection
1559859705117:## See issue https://github.com/PecanProject/pecan/issues/1008
1559859705118:ctsm.param.default <-
1559859705119:system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM')
1559859705331:if (!exists('local.rundir'))
1559859705546:local.rundir <- tempdir()
1559859705704:if (!exists('run.id'))
1559859705880:run.id <- 1
1559859706061:ctsm.param.file <-
1559859706063:file.path(local.rundir, paste0("ctsm_params.", run.id, ".nc"))
1559859706266:file.copy(ctsm.param.default, ctsm.param.file)
1559859706727:ctsm.param.nc <- ncdf4::nc_open(ctsm.param.file, write = TRUE)
1559859712940:sla_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")
1559859713146:c2n_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")
1559859713321:sto_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "mbbopt")
1559859713521:frl_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "froot_leaf")
1559859714156:flnr_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "flnr")
1559859717936:flnr_old[15]
1559859726138:frl_old[15]
1559859748160:## Loop over PFTS
1559859748162:# for testing
1559859748164:# trait.values <- list(c4_grass = list(sla = 0.03, c2n_leaf = 35, stom_slope = 10, fineroot2leaf = 2, vcmax = 50))
1559859748166:npft <- length(trait.values)
1559859748502:PEcAn.logger::logger.debug('there are ',
1559859748504:npft,
1559859748506:'PFTs in this run, they are named:',
1559859748508:names(trait.values))
1559859748908:ctsm_pftnames <-
1559859748910:stringr::str_trim(tolower(ncdf4::ncvar_get(ctsm.param.nc, "pftname")))
1559859753054:i <- 1
1559859755600:pft.name <- names(trait.values)[i]
1559859755944:if (is.null(pft.name) | is.na(pft.name)) {
1559859755946:PEcAn.logger::logger.error("pft.name missing")
1559859755948:} else {
1559859755950:PEcAn.logger::logger.info(paste("PFT =", pft.name))
1559859755952:## need to find a better way to match PEcAn pft names w/ CTSM pft names
1559859755954:## probably using the clm5_pfts.csv file
1559859755955:PEcAn.logger::logger.debug(paste0("ctsm PFT number: ", which(ctsm_pftnames == pft.name)))
1559859755956:}
1559859756421:if (pft.name == 'env')
1559859761346:trait.values <- list(c4_grass = list(sla = 0.03, c2n_leaf = 35, stom_slope = 10, fineroot2leaf = 2, vcmax = 50))
1559859771949:trait.values <- list(c4_grass = list(sla = 0.03, c2n_leaf = 35, stom_slope = 10, fineroot2leaf = 2, vcmax = 50))
1559859774126:## Loop over PFTS
1559859774127:# for testing
1559859774128:# trait.values <- list(c4_grass = list(sla = 0.03, c2n_leaf = 35, stom_slope = 10, fineroot2leaf = 2, vcmax = 50))
1559859774129:npft <- length(trait.values)
1559859774956:PEcAn.logger::logger.debug('there are ',
1559859774959:npft,
1559859774960:'PFTs in this run, they are named:',
1559859774962:names(trait.values))
1559859776576:ctsm_pftnames <-
1559859776577:stringr::str_trim(tolower(ncdf4::ncvar_get(ctsm.param.nc, "pftname")))
1559859777770:pft.name <- names(trait.values)[i]
1559859778400:if (is.null(pft.name) | is.na(pft.name)) {
1559859778402:PEcAn.logger::logger.error("pft.name missing")
1559859778403:} else {
1559859778404:PEcAn.logger::logger.info(paste("PFT =", pft.name))
1559859778405:## need to find a better way to match PEcAn pft names w/ CTSM pft names
1559859778406:## probably using the clm5_pfts.csv file
1559859778407:PEcAn.logger::logger.debug(paste0("ctsm PFT number: ", which(ctsm_pftnames == pft.name)))
1559859778408:}
1559859779532:if (pft.name == 'env')
1559859781256:next   ## HACK, need to remove env from default
1559859782100:## Match PFT name to COLUMN
1559859782101:ipft <- match(tolower(pft.name), ctsm_pftnames)
1559859783069:PEcAn.logger::logger.debug(paste0("CTSM pft index number: ", ipft))
1559859784064:if (is.na(ipft)) {
1559859784066:PEcAn.logger::logger.severe(
1559859784068:paste(
1559859784070:"Unmatched PFT",
1559859784072:pft.name,
1559859784074:"in CTSM PEcAn does not yet support non-default PFTs for this model"
1559859784076:)
1559859784078:)
1559859784079:}
1559859785029:## Special variables used in conversions
1559859785031:leafC <- 0.48
1559859785544:fnr <- 7.16 #mass ratio of total Rubisco molecular mass to nitrogen in Rubisco (g Rubisco g-1 N in Rubisco)
1559859787645:ar <- 60 #specific activity of Rubisco (µmol CO2 g-1 Rubisco s-1)
1559859794451:## Loop over VARIABLES
1559859794453:pft.trait.values <- trait.values[[i]]
1559859795496:for (v in seq_along(pft.trait.values)) {
1559859795497:var <- names(pft.trait.values)[v]
1559859795501:## THESE NEED SOME FOLLOW UP
1559859795504:### ----- Leaf physiological parameters
1559859795507:if (var == "sla") {
1559859795508:## default 0.03846
1559859795509:ncdf4::ncvar_put(
1559859795510:nc = ctsm.param.nc,
1559859795511:varid = "slatop",
1559859795512:start = ipft,
1559859795513:count = 1,
1559859795514:vals = udunits2::ud.convert(pft.trait.values[v], "m2 kg-1", "m2 g-1") / leafC  #TODO: add conversion back in
1559859795515:)
1559859795516:}
1559859795517:if (var == "c2n_leaf"){
1559859795518:## default 35.36068
1559859795519:ncdf4::ncvar_put(
1559859795520:nc = ctsm.param.nc,
1559859795521:varid = "leafcn",
1559859795522:start = ipft,
1559859795523:count = 1,
1559859795524:vals = pft.trait.values[v]
1559859795525:)
1559859795526:}
1559859795527:if (var == "stom_slope"){
1559859795528:## default 9.757532
1559859795529:ncdf4::ncvar_put(
1559859795530:nc = ctsm.param.nc,
1559859795531:varid = "mbbopt",
1559859795532:start = ipft,
1559859795533:count = 1,
1559859795534:vals = pft.trait.values[v]
1559859795535:)
1559859795536:}
1559859795537:if (var == "fineroot2leaf"){
1559859795538:## default 1.5
1559859795539:ncdf4::ncvar_put(
1559859795540:nc = ctsm.param.nc,
1559859795542:varid = "froot_leaf",
1559859795543:start = ipft,
1559859795544:count = 1,
1559859795545:vals = pft.trait.values[v]
1559859795546:)
1559859795547:}
1559859795548:if (var == "vcmax"){
1559859795549:## default 0.09
1559859795550:ncdf4::ncvar_put(
1559859795551:nc = ctsm.param.nc,
1559859795552:varid = "flnr",
1559859795553:start = ipft,
1559859795554:count = 1,
1559859795555:vals = pft.trait.values[v] / (
1559859795556:(1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn") * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop"))) * fnr * ar)
1559859795557:)
1559859795558:}
1559859795560:} ## end loop over VARIABLES
1559859813083:trait.values
1559859824239:pft.trait.values[5]
1559859844193:pft.trait.values[5] / (
1559859844196:(1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn") * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop"))) * fnr * ar)
1559859856368:pft.trait.values[5] / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn") * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop"))) * fnr * ar)
1559859869215:ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")
1559859937118:ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[15]
1559859953356:ipft
1559859982978:ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft]
1559859993084:pft.trait.values[5] / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar)
1559860007035:ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft]
1559860018861:fnr
1559860046598:(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])
1559860057780:(1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft]))
1559860065404:((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar)
1559860075740:pft.trait.values[5]
1559860110694:v
1559860141942:class(pft.trait.values[5])
1559860166492:class(((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar))
1559860196733:pft.trait.values[5] * 1000
1559860240014:.libPaths("~/R_libs/")
1559860240554:library(PEcAn.CTSM)
1559860247192:## Copy and open default parameter files
1559860247194:# TODO: update this to read param files (CTSM and FATES) out of the refcase directory, not the PEcAn package
1559860247196:# TODO: update to allow it to pick between CLM4.5 and CLM5 (CLM5 == CTSM) parameter set based on refcase, user selection
1559860247198:## See issue https://github.com/PecanProject/pecan/issues/1008
1559860247200:ctsm.param.default <-
1559860247202:system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM')
1559860247378:if (!exists('local.rundir'))
1559860247486:local.rundir <- tempdir()
1559860247629:if (!exists('run.id'))
1559860247897:run.id <- 1
1559860247945:ctsm.param.file <-
1559860247947:file.path(local.rundir, paste0("ctsm_params.", run.id, ".nc"))
1559860248096:file.copy(ctsm.param.default, ctsm.param.file)
1559860248506:ctsm.param.nc <- ncdf4::nc_open(ctsm.param.file, write = TRUE)
1559860253072:sla_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")
1559860253218:c2n_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")
1559860253432:sto_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "mbbopt")
1559860253597:frl_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "froot_leaf")
1559860253990:flnr_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "flnr")
1559860271959:i <- 1
1559860274800:## Loop over PFTS
1559860274802:# for testing
1559860274804:# trait.values <- list(c4_grass = list(sla = 0.03, c2n_leaf = 35, stom_slope = 10, fineroot2leaf = 2, vcmax = 50))
1559860274806:npft <- length(trait.values)
1559860275112:PEcAn.logger::logger.debug('there are ',
1559860275114:npft,
1559860275116:'PFTs in this run, they are named:',
1559860275118:names(trait.values))
1559860275711:ctsm_pftnames <-
1559860275713:stringr::str_trim(tolower(ncdf4::ncvar_get(ctsm.param.nc, "pftname")))
1559860276803:pft.name <- names(trait.values)[i]
1559860277281:if (is.null(pft.name) | is.na(pft.name)) {
1559860277283:PEcAn.logger::logger.error("pft.name missing")
1559860277285:} else {
1559860277287:PEcAn.logger::logger.info(paste("PFT =", pft.name))
1559860277289:## need to find a better way to match PEcAn pft names w/ CTSM pft names
1559860277291:## probably using the clm5_pfts.csv file
1559860277292:PEcAn.logger::logger.debug(paste0("ctsm PFT number: ", which(ctsm_pftnames == pft.name)))
1559860277293:}
1559860278145:if (pft.name == 'env')
1559860278621:next   ## HACK, need to remove env from default
1559860279422:## Match PFT name to COLUMN
1559860279424:ipft <- match(tolower(pft.name), ctsm_pftnames)
1559860279791:PEcAn.logger::logger.debug(paste0("CTSM pft index number: ", ipft))
1559860280805:if (is.na(ipft)) {
1559860280807:PEcAn.logger::logger.severe(
1559860280809:paste(
1559860280811:"Unmatched PFT",
1559860280813:pft.name,
1559860280815:"in CTSM PEcAn does not yet support non-default PFTs for this model"
1559860280817:)
1559860280818:)
1559860280819:}
1559860286391:trait.values <- list(c4_grass = list(sla = 0.03, c2n_leaf = 35, stom_slope = 10, fineroot2leaf = 2, vcmax = 50))
1559860288185:## Loop over PFTS
1559860288187:# for testing
1559860288189:# trait.values <- list(c4_grass = list(sla = 0.03, c2n_leaf = 35, stom_slope = 10, fineroot2leaf = 2, vcmax = 50))
1559860288190:npft <- length(trait.values)
1559860289023:PEcAn.logger::logger.debug('there are ',
1559860289025:npft,
1559860289027:'PFTs in this run, they are named:',
1559860289029:names(trait.values))
1559860289786:ctsm_pftnames <-
1559860289789:stringr::str_trim(tolower(ncdf4::ncvar_get(ctsm.param.nc, "pftname")))
1559860291490:pft.name <- names(trait.values)[i]
1559860291857:if (is.null(pft.name) | is.na(pft.name)) {
1559860291859:PEcAn.logger::logger.error("pft.name missing")
1559860291861:} else {
1559860291863:PEcAn.logger::logger.info(paste("PFT =", pft.name))
1559860291865:## need to find a better way to match PEcAn pft names w/ CTSM pft names
1559860291867:## probably using the clm5_pfts.csv file
1559860291869:PEcAn.logger::logger.debug(paste0("ctsm PFT number: ", which(ctsm_pftnames == pft.name)))
1559860291870:}
1559860292839:if (pft.name == 'env')
1559860293174:next   ## HACK, need to remove env from default
1559860294183:## Match PFT name to COLUMN
1559860294185:ipft <- match(tolower(pft.name), ctsm_pftnames)
1559860294487:PEcAn.logger::logger.debug(paste0("CTSM pft index number: ", ipft))
1559860295325:if (is.na(ipft)) {
1559860295326:PEcAn.logger::logger.severe(
1559860295327:paste(
1559860295329:"Unmatched PFT",
1559860295330:pft.name,
1559860295331:"in CTSM PEcAn does not yet support non-default PFTs for this model"
1559860295332:)
1559860295334:)
1559860295335:}
1559860296254:## Special variables used in conversions
1559860296256:leafC <- 0.48
1559860296477:fnr <- 7.16 #mass ratio of total Rubisco molecular mass to nitrogen in Rubisco (g Rubisco g-1 N in Rubisco)
1559860296783:ar <- 60 #specific activity of Rubisco (µmol CO2 g-1 Rubisco s-1)
1559860302462:## Loop over VARIABLES
1559860302464:pft.trait.values <- trait.values[[i]]
1559860302895:for (v in seq_along(pft.trait.values)) {
1559860302897:var <- names(pft.trait.values)[v]
1559860302900:## THESE NEED SOME FOLLOW UP
1559860302902:### ----- Leaf physiological parameters
1559860302904:if (var == "sla") {
1559860302905:## default 0.03846
1559860302906:ncdf4::ncvar_put(
1559860302907:nc = ctsm.param.nc,
1559860302908:varid = "slatop",
1559860302909:start = ipft,
1559860302910:count = 1,
1559860302911:vals = udunits2::ud.convert(pft.trait.values[v], "m2 kg-1", "m2 g-1") / leafC  #TODO: add conversion back in
1559860302912:)
1559860302913:}
1559860302914:if (var == "c2n_leaf"){
1559860302915:## default 35.36068
1559860302916:ncdf4::ncvar_put(
1559860302917:nc = ctsm.param.nc,
1559860302918:varid = "leafcn",
1559860302919:start = ipft,
1559860302920:count = 1,
1559860302921:vals = pft.trait.values[v]
1559860302922:)
1559860302923:}
1559860302924:if (var == "stom_slope"){
1559860302925:## default 9.757532
1559860302926:ncdf4::ncvar_put(
1559860302927:nc = ctsm.param.nc,
1559860302928:varid = "mbbopt",
1559860302929:start = ipft,
1559860302930:count = 1,
1559860302931:vals = pft.trait.values[v]
1559860302933:)
1559860302934:}
1559860302935:if (var == "fineroot2leaf"){
1559860302936:## default 1.5
1559860302937:ncdf4::ncvar_put(
1559860302938:nc = ctsm.param.nc,
1559860302939:varid = "froot_leaf",
1559860302940:start = ipft,
1559860302941:count = 1,
1559860302943:vals = pft.trait.values[v]
1559860302944:)
1559860302945:}
1559860302946:if (var == "vcmax"){
1559860302947:## default 0.09
1559860302948:ncdf4::ncvar_put(
1559860302949:nc = ctsm.param.nc,
1559860302950:varid = "flnr",
1559860302952:start = ipft,
1559860302953:count = 1,
1559860302954:vals = pft.trait.values[v] / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar)
1559860302955:)
1559860302956:}
1559860302957:} ## end loop over VARIABLES
1559860347994:pft.trait.values[5]
1559860351627:pft.trait.values[5] * 1000
1559860422285:udunits2::ud.convert(pft.trait.values[1], "m2 kg-1", "m2 g-1")
1559860426879:udunits2::ud.convert(pft.trait.values[1], "m2 kg-1", "m2 g-1") / leafC
1559860433235:class(udunits2::ud.convert(pft.trait.values[1], "m2 kg-1", "m2 g-1"))
1559860460678:udunits2::ud.convert(pft.trait.values[1], "m2 kg-1", "m2 g-1") / leafC  #TODO: add conversion back in
1559860472133:class(udunits2::ud.convert(pft.trait.values[1], "m2 kg-1", "m2 g-1") / leafC)  #TODO: add conversion back in
1559860480546:as.numeric(pft.trait.values[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar)
1559860503440:.libPaths("~/R_libs/")
1559860503982:library(PEcAn.CTSM)
1559860512175:## Copy and open default parameter files
1559860512177:# TODO: update this to read param files (CTSM and FATES) out of the refcase directory, not the PEcAn package
1559860512179:# TODO: update to allow it to pick between CLM4.5 and CLM5 (CLM5 == CTSM) parameter set based on refcase, user selection
1559860512181:## See issue https://github.com/PecanProject/pecan/issues/1008
1559860512183:ctsm.param.default <-
1559860512185:system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM')
1559860512340:if (!exists('local.rundir'))
1559860512551:local.rundir <- tempdir()
1559860512708:if (!exists('run.id'))
1559860512978:run.id <- 1
1559860513312:ctsm.param.file <-
1559860513314:file.path(local.rundir, paste0("ctsm_params.", run.id, ".nc"))
1559860513733:file.copy(ctsm.param.default, ctsm.param.file)
1559860514154:ctsm.param.nc <- ncdf4::nc_open(ctsm.param.file, write = TRUE)
1559860517124:sla_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")
1559860517267:c2n_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")
1559860517401:sto_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "mbbopt")
1559860517518:frl_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "froot_leaf")
1559860517787:flnr_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "flnr")
1559860524281:trait.values <- list(c4_grass = list(sla = 0.03, c2n_leaf = 35, stom_slope = 10, fineroot2leaf = 2, vcmax = 50))
1559860529291:## Loop over PFTS
1559860529293:# for testing
1559860529295:# trait.values <- list(c4_grass = list(sla = 0.03, c2n_leaf = 35, stom_slope = 10, fineroot2leaf = 2, vcmax = 50))
1559860529297:npft <- length(trait.values)
1559860529683:PEcAn.logger::logger.debug('there are ',
1559860529685:npft,
1559860529687:'PFTs in this run, they are named:',
1559860529689:names(trait.values))
1559860530260:ctsm_pftnames <-
1559860530262:stringr::str_trim(tolower(ncdf4::ncvar_get(ctsm.param.nc, "pftname")))
1559860533170:i <-
1559860534357:1
1559860536771:pft.name <- names(trait.values)[i]
1559860537090:if (is.null(pft.name) | is.na(pft.name)) {
1559860537092:PEcAn.logger::logger.error("pft.name missing")
1559860537094:} else {
1559860537096:PEcAn.logger::logger.info(paste("PFT =", pft.name))
1559860537098:## need to find a better way to match PEcAn pft names w/ CTSM pft names
1559860537099:## probably using the clm5_pfts.csv file
1559860537100:PEcAn.logger::logger.debug(paste0("ctsm PFT number: ", which(ctsm_pftnames == pft.name)))
1559860537101:}
1559860537537:if (pft.name == 'env')
1559860538268:next   ## HACK, need to remove env from default
1559860539282:## Match PFT name to COLUMN
1559860539283:ipft <- match(tolower(pft.name), ctsm_pftnames)
1559860539688:PEcAn.logger::logger.debug(paste0("CTSM pft index number: ", ipft))
1559860540122:if (is.na(ipft)) {
1559860540123:PEcAn.logger::logger.severe(
1559860540124:paste(
1559860540125:"Unmatched PFT",
1559860540127:pft.name,
1559860540128:"in CTSM PEcAn does not yet support non-default PFTs for this model"
1559860540129:)
1559860540130:)
1559860540131:}
1559860541181:## Special variables used in conversions
1559860541183:leafC <- 0.48
1559860541280:fnr <- 7.16 #mass ratio of total Rubisco molecular mass to nitrogen in Rubisco (g Rubisco g-1 N in Rubisco)
1559860541650:ar <- 60 #specific activity of Rubisco (µmol CO2 g-1 Rubisco s-1)
1559860547760:## Loop over VARIABLES
1559860547762:pft.trait.values <- trait.values[[i]]
1559860550571:for (v in seq_along(pft.trait.values)) {
1559860550573:var <- names(pft.trait.values)[v]
1559860550577:## THESE NEED SOME FOLLOW UP
1559860550580:### ----- Leaf physiological parameters
1559860550584:if (var == "sla") {
1559860550585:## default 0.03846
1559860550586:ncdf4::ncvar_put(
1559860550587:nc = ctsm.param.nc,
1559860550588:varid = "slatop",
1559860550589:start = ipft,
1559860550590:count = 1,
1559860550591:vals = udunits2::ud.convert(pft.trait.values[1], "m2 kg-1", "m2 g-1") / leafC  #TODO: add conversion back in
1559860550592:)
1559860550593:}
1559860550594:if (var == "c2n_leaf"){
1559860550595:## default 35.36068
1559860550596:ncdf4::ncvar_put(
1559860550597:nc = ctsm.param.nc,
1559860550598:varid = "leafcn",
1559860550599:start = ipft,
1559860550600:count = 1,
1559860550601:vals = pft.trait.values[v]
1559860550602:)
1559860550603:}
1559860550604:if (var == "stom_slope"){
1559860550605:## default 9.757532
1559860550606:ncdf4::ncvar_put(
1559860550607:nc = ctsm.param.nc,
1559860550608:varid = "mbbopt",
1559860550609:start = ipft,
1559860550610:count = 1,
1559860550611:vals = pft.trait.values[v]
1559860550612:)
1559860550613:}
1559860550614:if (var == "fineroot2leaf"){
1559860550615:## default 1.5
1559860550616:ncdf4::ncvar_put(
1559860550617:nc = ctsm.param.nc,
1559860550618:varid = "froot_leaf",
1559860550620:start = ipft,
1559860550621:count = 1,
1559860550622:vals = pft.trait.values[v]
1559860550623:)
1559860550624:}
1559860550625:if (var == "vcmax"){
1559860550626:## default 0.09
1559860550627:ncdf4::ncvar_put(
1559860550628:nc = ctsm.param.nc,
1559860550629:varid = "flnr",
1559860550630:start = ipft,
1559860550631:count = 1,
1559860550632:vals = as.numeric(pft.trait.values[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar)
1559860550634:)
1559860550635:}
1559860550636:} ## end loop over VARIABLES
1559860556799:sla_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")
1559860556956:c2n_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")
1559860557092:sto_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "mbbopt")
1559860557239:frl_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "froot_leaf")
1559860558057:flnr_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "flnr")
1559860558699:sla_old[15]
1559860558877:sla_new[15]
1559860559623:c2n_old[15]
1559860560218:c2n_new[15]
1559860561690:sto_old[15]
1559860561862:sto_new[15]
1559860562791:frl_old[15]
1559860562948:frl_new[15]
1559860563900:flnr_old[15]
1559860564214:flnr_new[15]
1559860788336:.libPaths("~/R_libs/")
1559860788874:library(PEcAn.CTSM)
1559860796674:write_params_ctsm <-
1559860796676:function(defaults = system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM'),
1559860796678:trait.values,
1559860796680:settings,
1559860796681:run.id) {
1559860796683:## Copy and open default parameter files
1559860796685:ctsm.param.default <-
1559860796687:system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM')
1559860796688:if (!exists('local.rundir'))
1559860796689:local.rundir <- tempdir()
1559860796690:if (!exists('run.id'))
1559860796691:run.id <- 1
1559860796692:ctsm.param.file <-
1559860796693:file.path(local.rundir, paste0("ctsm_params.", run.id, ".nc"))
1559860796694:file.copy(ctsm.param.default, ctsm.param.file)
1559860796695:ctsm.param.nc <- ncdf4::nc_open(ctsm.param.file, write = TRUE)
1559860796697:## Loop over PFTS
1559860796698:npft <- length(trait.values)
1559860796699:PEcAn.logger::logger.debug('there are ',
1559860796700:npft,
1559860796701:'PFTs in this run, they are named:',
1559860796702:names(trait.values))
1559860796703:ctsm_pftnames <-
1559860796704:stringr::str_trim(tolower(ncdf4::ncvar_get(ctsm.param.nc, "pftname")))
1559860796705:for (i in seq_len(npft)) {
1559860796706:pft.name <- names(trait.values)[i]
1559860796707:if (is.null(pft.name) | is.na(pft.name)) {
1559860796708:PEcAn.logger::logger.error("pft.name missing")
1559860796710:} else {
1559860796711:PEcAn.logger::logger.info(paste("PFT =", pft.name))
1559860796712:PEcAn.logger::logger.debug(paste0("ctsm PFT number: ", which(ctsm_pftnames == pft.name)))
1559860796713:}
1559860796714:if (pft.name == 'env')
1559860796715:next   ## HACK, need to remove env from default
1559860796717:## Match PFT name to COLUMN
1559860796718:ipft <- match(tolower(pft.name), ctsm_pftnames)
1559860796720:PEcAn.logger::logger.debug(paste0("CTSM pft index number: ", ipft))
1559860796722:if (is.na(ipft)) {
1559860796723:PEcAn.logger::logger.severe(
1559860796724:paste(
1559860796725:"Unmatched PFT",
1559860796726:pft.name,
1559860796728:"in CTSM PEcAn does not yet support non-default PFTs for this model"
1559860796729:)
1559860796730:)
1559860796731:}
1559860796733:## Special variables used in conversions
1559860796734:leafC <- 0.48
1559860796736:fnr <- 7.16 #mass ratio of total Rubisco molecular mass to nitrogen in Rubisco (g Rubisco g-1 N in Rubisco)
1559860796737:ar <- 60 #specific activity of Rubisco (µmol CO2 g-1 Rubisco s-1)
1559860796739:## Loop over VARIABLES
1559860796740:pft.trait.values <- trait.values[[i]]
1559860796741:for (v in seq_along(pft.trait.values)) {
1559860796743:var <- names(pft.trait.values)[v]
1559860796745:### ----- Leaf physiological parameters
1559860796747:if (var == "sla") {
1559860796748:## default 0.03846
1559860796750:ncdf4::ncvar_put(
1559860796751:nc = ctsm.param.nc,
1559860796752:varid = "slatop",
1559860796754:start = ipft,
1559860796755:count = 1,
1559860796756:vals = udunits2::ud.convert(pft.trait.values[1], "m2 kg-1", "m2 g-1") / leafC  #TODO: add conversion back in
1559860796757:)
1559860796758:}
1559860796760:if (var == "c2n_leaf"){
1559860796761:## default 35.36068
1559860796762:ncdf4::ncvar_put(
1559860796763:nc = ctsm.param.nc,
1559860796765:varid = "leafcn",
1559860796766:start = ipft,
1559860796767:count = 1,
1559860796768:vals = pft.trait.values[v]
1559860796770:)
1559860796771:}
1559860796772:if (var == "stom_slope"){
1559860796774:## default 9.757532
1559860796775:ncdf4::ncvar_put(
1559860796776:nc = ctsm.param.nc,
1559860796777:varid = "mbbopt",
1559860796779:start = ipft,
1559860796780:count = 1,
1559860796781:vals = pft.trait.values[v]
1559860796783:)
1559860796784:}
1559860796785:if (var == "fineroot2leaf"){
1559860796786:## default 1.5
1559860796788:ncdf4::ncvar_put(
1559860796789:nc = ctsm.param.nc,
1559860796790:varid = "froot_leaf",
1559860796792:start = ipft,
1559860796793:count = 1,
1559860796794:vals = pft.trait.values[v]
1559860796796:)
1559860796797:}
1559860796798:if (var == "vcmax"){
1559860796800:## default 0.09
1559860796801:ncdf4::ncvar_put(
1559860796802:nc = ctsm.param.nc,
1559860796804:varid = "flnr",
1559860796805:start = ipft,
1559860796806:count = 1,
1559860796808:vals = as.numeric(pft.trait.values[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar)
1559860796809:)
1559860796810:}
1559860796812:} ## end loop over VARIABLES
1559860796813:} ## end loop over PFTs
1559860796814:}
1559860809071:trait.values <- list(c4_grass = list(sla = 0.03, c2n_leaf = 35, stom_slope = 10, fineroot2leaf = 2, vcmax = 50))
1559860828957:write_params_ctsm(trait.values = trait.values, run.id = 1)
1560175890282:# R Data Frame
1560175890323:celebrities = data.frame(name = c("Andrew", "Mathew", "Dany", "Philip", "John", "Bing", "Monica"),
1560175890325:age = c(28, 23, 49, 29, 38, 23, 29),
1560175890327:income = c(25.2, 10.5, 11, 21.9, 44, 11.5, 45))
1560175903247:# R function
1560175903249:f = function(x, output) {
1560175903251:# x is the row of type Character
1560175903253:# access element in first column
1560175903255:name = x[1]
1560175903257:# access element in second column
1560175903258:income = x[3]
1560175903259:#your code to process x
1560175903260:cat(name, income, "\n")
1560175903261:}
1560175904930:#apply(X, MARGIN, FUN, …)
1560175904932:apply(celebrities, 1, f)
1560176468548:.libPaths("~/R_libs/")
1560176474675:library(PEcAn.CTSM)
1560176477081:## Copy and open default parameter files
1560176477083:ctsm.param.default <-
1560176477085:system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM')
1560176477460:if (!exists('local.rundir'))
1560176477895:local.rundir <- tempdir()
1560176478245:if (!exists('run.id'))
1560176478782:run.id <- 1
1560176479170:ctsm.param.file <-
1560176479172:file.path(local.rundir, paste0("ctsm_params.", run.id, ".nc"))
1560176479526:file.copy(ctsm.param.default, ctsm.param.file)
1560176479922:ctsm.param.nc <- ncdf4::nc_open(ctsm.param.file, write = TRUE)
1560176481901:## Loop over PFTS
1560176481903:npft <- length(trait.values)
1560176482294:PEcAn.logger::logger.debug('there are ',
1560176482296:npft,
1560176482298:'PFTs in this run, they are named:',
1560176482301:names(trait.values))
1560176490386:trait.values <- list(c4_grass = list(sla = 0.03, c2n_leaf = 35, stom_slope = 10, fineroot2leaf = 2, vcmax = 50))
1560176499172:## Loop over PFTS
1560176499173:npft <- length(trait.values)
1560176500924:PEcAn.logger::logger.debug('there are ',
1560176500926:npft,
1560176500928:'PFTs in this run, they are named:',
1560176500931:names(trait.values))
1560176502492:ctsm_pftnames <-
1560176502494:stringr::str_trim(tolower(ncdf4::ncvar_get(ctsm.param.nc, "pftname")))
1560176508009:i <- 1
1560176511992:pft.name <- names(trait.values)[i]
1560176512512:if (is.null(pft.name) | is.na(pft.name)) {
1560176512515:PEcAn.logger::logger.error("pft.name missing")
1560176512517:} else {
1560176512519:PEcAn.logger::logger.info(paste("PFT =", pft.name))
1560176512521:PEcAn.logger::logger.debug(paste0("ctsm PFT number: ", which(ctsm_pftnames == pft.name)))
1560176512523:}
1560176514190:if (pft.name == 'env')
1560176515404:next   ## HACK, need to remove env from default
1560176516708:## Match PFT name to COLUMN
1560176516710:ipft <- match(tolower(pft.name), ctsm_pftnames)
1560176517264:PEcAn.logger::logger.debug(paste0("CTSM pft index number: ", ipft))
1560176519477:if (is.na(ipft)) {
1560176519479:PEcAn.logger::logger.severe(
1560176519481:paste(
1560176519483:"Unmatched PFT",
1560176519485:pft.name,
1560176519487:"in CTSM PEcAn does not yet support non-default PFTs for this model"
1560176519489:)
1560176519490:)
1560176519491:}
1560176520680:## Special variables used in conversions
1560176520682:leafC <- 0.48
1560176520766:fnr <- 7.16 #mass ratio of total Rubisco molecular mass to nitrogen in Rubisco (g Rubisco g-1 N in Rubisco)
1560176521232:ar <- 60 #specific activity of Rubisco (µmol CO2 g-1 Rubisco s-1)
1560176526529:## Loop over VARIABLES
1560176526531:pft.trait.values <- trait.values[[i]]
1560176538016:sla_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")
1560176538204:c2n_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")
1560176538364:sto_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "mbbopt")
1560176538448:frl_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "froot_leaf")
1560176538853:flnr_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "flnr")
1560176540451:sla_old[15]
1560176546161:for (v in seq_along(pft.trait.values)) {
1560176546163:var <- names(pft.trait.values)[v]
1560176546167:### ----- Leaf physiological parameters
1560176546170:if (var == "sla") {
1560176546171:## default 0.03846
1560176546172:ncdf4::ncvar_put(
1560176546174:nc = ctsm.param.nc,
1560176546175:varid = "slatop",
1560176546176:start = ipft,
1560176546177:count = 1,
1560176546178:vals = udunits2::ud.convert(pft.trait.values[1], "m2 kg-1", "m2 g-1") / leafC
1560176546179:)
1560176546180:}
1560176546181:if (var == "c2n_leaf"){
1560176546182:## default 35.36068
1560176546183:ncdf4::ncvar_put(
1560176546184:nc = ctsm.param.nc,
1560176546185:varid = "leafcn",
1560176546187:start = ipft,
1560176546188:count = 1,
1560176546189:vals = pft.trait.values[v]
1560176546190:)
1560176546191:}
1560176546192:if (var == "stom_slope"){
1560176546193:## default 9.757532
1560176546194:ncdf4::ncvar_put(
1560176546195:nc = ctsm.param.nc,
1560176546196:varid = "mbbopt",
1560176546197:start = ipft,
1560176546198:count = 1,
1560176546200:vals = pft.trait.values[v]
1560176546201:)
1560176546202:}
1560176546203:if (var == "fineroot2leaf"){
1560176546204:## default 1.5
1560176546205:ncdf4::ncvar_put(
1560176546206:nc = ctsm.param.nc,
1560176546207:varid = "froot_leaf",
1560176546208:start = ipft,
1560176546210:count = 1,
1560176546211:vals = pft.trait.values[v]
1560176546212:)
1560176546213:}
1560176546214:if (var == "vcmax"){
1560176546215:## default 0.09
1560176546216:ncdf4::ncvar_put(
1560176546217:nc = ctsm.param.nc,
1560176546218:varid = "flnr",
1560176546220:start = ipft,
1560176546221:count = 1,
1560176546222:vals = as.numeric(pft.trait.values[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar)
1560176546223:)
1560176546224:}
1560176546225:} ## end loop over VARIABLES
1560176552208:sla_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")
1560176552425:c2n_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")
1560176552585:sto_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "mbbopt")
1560176552754:frl_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "froot_leaf")
1560176553148:flnr_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "flnr")
1560176554153:sla_old[15]
1560176554509:sla_new[15]
1560176555121:c2n_old[15]
1560176555491:c2n_new[15]
1560176555992:sto_old[15]
1560176556389:sto_new[15]
1560176556868:frl_old[15]
1560176557437:frl_new[15]
1560176557980:flnr_old[15]
1560176558339:flnr_new[15]
1560176638018:.libPaths("~/R_libs/")
1560176638553:library(PEcAn.CTSM)
1560176643616:## Copy and open default parameter files
1560176643618:ctsm.param.default <-
1560176643620:system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM')
1560176643779:if (!exists('local.rundir'))
1560176644041:local.rundir <- tempdir()
1560176644322:if (!exists('run.id'))
1560176644525:run.id <- 1
1560176644759:ctsm.param.file <-
1560176644761:file.path(local.rundir, paste0("ctsm_params.", run.id, ".nc"))
1560176644915:file.copy(ctsm.param.default, ctsm.param.file)
1560176645340:ctsm.param.nc <- ncdf4::nc_open(ctsm.param.file, write = TRUE)
1560176649059:trait.values <- list(c4_grass = list(sla = 0.03, c2n_leaf = 35, stom_slope = 10, fineroot2leaf = 2, vcmax = 50))
1560176655017:## Loop over PFTS
1560176655019:npft <- length(trait.values)
1560176655318:PEcAn.logger::logger.debug('there are ',
1560176655320:npft,
1560176655321:'PFTs in this run, they are named:',
1560176655323:names(trait.values))
1560176655707:ctsm_pftnames <-
1560176655709:stringr::str_trim(tolower(ncdf4::ncvar_get(ctsm.param.nc, "pftname")))
1560176656182:for (i in seq_len(npft)) {
1560176656184:pft.name <- names(trait.values)[i]
1560176656186:if (is.null(pft.name) | is.na(pft.name)) {
1560176656188:PEcAn.logger::logger.error("pft.name missing")
1560176656190:} else {
1560176656192:PEcAn.logger::logger.info(paste("PFT =", pft.name))
1560176656194:PEcAn.logger::logger.debug(paste0("ctsm PFT number: ", which(ctsm_pftnames == pft.name)))
1560176656195:}
1560176656196:if (pft.name == 'env')
1560176656197:next   ## HACK, need to remove env from default
1560176656199:## Match PFT name to COLUMN
1560176656200:ipft <- match(tolower(pft.name), ctsm_pftnames)
1560176656201:PEcAn.logger::logger.debug(paste0("CTSM pft index number: ", ipft))
1560176656203:if (is.na(ipft)) {
1560176656204:PEcAn.logger::logger.severe(
1560176656205:paste(
1560176656206:"Unmatched PFT",
1560176656207:pft.name,
1560176656208:"in CTSM PEcAn does not yet support non-default PFTs for this model"
1560176656209:)
1560176656210:)
1560176656211:}
1560176656213:## Special variables used in conversions
1560176656214:leafC <- 0.48
1560176656215:fnr <- 7.16 #mass ratio of total Rubisco molecular mass to nitrogen in Rubisco (g Rubisco g-1 N in Rubisco)
1560176656216:ar <- 60 #specific activity of Rubisco (µmol CO2 g-1 Rubisco s-1)
1560176656218:## Loop over VARIABLES
1560176656219:pft.trait.values <- trait.values[[i]]
1560176656220:for (v in seq_along(pft.trait.values)) {
1560176656222:var <- names(pft.trait.values)[v]
1560176656224:### ----- Leaf physiological parameters
1560176656225:update_vars <- function(var, nc, varid, start = ipft, count = 1, vals){
1560176656226:if(var == var){
1560176656227:ncdf4::ncvar_put(nc = nc, varid = varid, varid = varid, vals = vals)
1560176656228:}
1560176656229:}
1560176656231:update_vars("sla", ctsm.param.nc, "slatop", udunits2::ud.convert(pft.trait.values[1], "m2 kg-1", "m2 g-1") / leafC)
1560176656232:update_vars("c2n_leaf", ctsm.param.nc, "leafcn", vals = pft.trait.values[v])
1560176656233:update_vars("stom_slope", ctsm.param.nc, "mbbopt", vals = pft.trait.values[v])
1560176656234:update_vars("fineroot2leaf", ctsm.param.nc, "froot_leaf", pft.trait.values[v])
1560176656235:update_vars("vcmax", ctsm.param.nc, "flnr", as.numeric(pft.trait.values[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar))
1560176656237:# if (var == "sla") {
1560176656239:#   ## default 0.03846
1560176656240:#   ncdf4::ncvar_put(
1560176656241:#     nc = ctsm.param.nc,
1560176656242:#     varid = "slatop",
1560176656243:#     start = ipft,
1560176656245:#     count = 1,
1560176656246:#     vals = udunits2::ud.convert(pft.trait.values[1], "m2 kg-1", "m2 g-1") / leafC
1560176656247:#   )
1560176656248:# }
1560176656249:# if (var == "c2n_leaf"){
1560176656251:#   ## default 35.36068
1560176656252:#   ncdf4::ncvar_put(
1560176656253:#     nc = ctsm.param.nc,
1560176656254:#     varid = "leafcn",
1560176656255:#     start = ipft,
1560176656256:#     count = 1,
1560176656258:#     vals = pft.trait.values[v]
1560176656259:#   )
1560176656260:# }
1560176656262:# if (var == "stom_slope"){
1560176656263:#   ## default 9.757532
1560176656264:#   ncdf4::ncvar_put(
1560176656265:#     nc = ctsm.param.nc,
1560176656266:#     varid = "mbbopt",
1560176656268:#     start = ipft,
1560176656269:#     count = 1,
1560176656270:#     vals = pft.trait.values[v]
1560176656271:#   )
1560176656272:# }
1560176656274:# if (var == "fineroot2leaf"){
1560176656275:#   ## default 1.5
1560176656276:#   ncdf4::ncvar_put(
1560176656277:#     nc = ctsm.param.nc,
1560176656278:#     varid = "froot_leaf",
1560176656280:#     start = ipft,
1560176656281:#     count = 1,
1560176656282:#     vals = pft.trait.values[v]
1560176656283:#   )
1560176656285:# }
1560176656286:# if (var == "vcmax"){
1560176656287:#   ## default 0.09
1560176656288:#   ncdf4::ncvar_put(
1560176656290:#     nc = ctsm.param.nc,
1560176656291:#     varid = "flnr",
1560176656292:#     start = ipft,
1560176656293:#     count = 1,
1560176656294:#     vals = as.numeric(pft.trait.values[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar)
1560176656296:#   )
1560176656297:# }
1560176656298:} ## end loop over VARIABLES
1560176656299:} ## end loop over PFTs
1560176670754:.libPaths("~/R_libs/")
1560176673391:library(PEcAn.CTSM)
1560176679743:## Copy and open default parameter files
1560176679745:ctsm.param.default <-
1560176679747:system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM')
1560176679944:if (!exists('local.rundir'))
1560176680093:local.rundir <- tempdir()
1560176680202:if (!exists('run.id'))
1560176680359:run.id <- 1
1560176680572:ctsm.param.file <-
1560176680574:file.path(local.rundir, paste0("ctsm_params.", run.id, ".nc"))
1560176680856:file.copy(ctsm.param.default, ctsm.param.file)
1560176681309:ctsm.param.nc <- ncdf4::nc_open(ctsm.param.file, write = TRUE)
1560176684807:trait.values <- list(c4_grass = list(sla = 0.03, c2n_leaf = 35, stom_slope = 10, fineroot2leaf = 2, vcmax = 50))
1560176690233:## Loop over PFTS
1560176690235:npft <- length(trait.values)
1560176690992:PEcAn.logger::logger.debug('there are ',
1560176690994:npft,
1560176690996:'PFTs in this run, they are named:',
1560176690998:names(trait.values))
1560176691993:ctsm_pftnames <-
1560176691995:stringr::str_trim(tolower(ncdf4::ncvar_get(ctsm.param.nc, "pftname")))
1560176695013:i <- 1
1560176697856:pft.name <- names(trait.values)[i]
1560176699070:if (is.null(pft.name) | is.na(pft.name)) {
1560176699071:PEcAn.logger::logger.error("pft.name missing")
1560176699073:} else {
1560176699074:PEcAn.logger::logger.info(paste("PFT =", pft.name))
1560176699076:PEcAn.logger::logger.debug(paste0("ctsm PFT number: ", which(ctsm_pftnames == pft.name)))
1560176699077:}
1560176700079:if (pft.name == 'env')
1560176700477:next   ## HACK, need to remove env from default
1560176701277:## Match PFT name to COLUMN
1560176701279:ipft <- match(tolower(pft.name), ctsm_pftnames)
1560176701788:PEcAn.logger::logger.debug(paste0("CTSM pft index number: ", ipft))
1560176702807:if (is.na(ipft)) {
1560176702809:PEcAn.logger::logger.severe(
1560176702811:paste(
1560176702813:"Unmatched PFT",
1560176702815:pft.name,
1560176702817:"in CTSM PEcAn does not yet support non-default PFTs for this model"
1560176702818:)
1560176702819:)
1560176702820:}
1560176703861:## Special variables used in conversions
1560176703863:leafC <- 0.48
1560176704162:fnr <- 7.16 #mass ratio of total Rubisco molecular mass to nitrogen in Rubisco (g Rubisco g-1 N in Rubisco)
1560176704633:ar <- 60 #specific activity of Rubisco (µmol CO2 g-1 Rubisco s-1)
1560176708603:sla_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")
1560176708739:c2n_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")
1560176708828:sto_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "mbbopt")
1560176709037:frl_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "froot_leaf")
1560176709411:flnr_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "flnr")
1560176714991:## Loop over VARIABLES
1560176714993:pft.trait.values <- trait.values[[i]]
1560176715516:for (v in seq_along(pft.trait.values)) {
1560176715518:var <- names(pft.trait.values)[v]
1560176715522:### ----- Leaf physiological parameters
1560176715524:update_vars <- function(var, nc, varid, start = ipft, count = 1, vals){
1560176715526:if(var == var){
1560176715528:ncdf4::ncvar_put(nc = nc, varid = varid, varid = varid, vals = vals)
1560176715529:}
1560176715530:}
1560176715532:update_vars("sla", ctsm.param.nc, "slatop", udunits2::ud.convert(pft.trait.values[1], "m2 kg-1", "m2 g-1") / leafC)
1560176715533:update_vars("c2n_leaf", ctsm.param.nc, "leafcn", vals = pft.trait.values[v])
1560176715534:update_vars("stom_slope", ctsm.param.nc, "mbbopt", vals = pft.trait.values[v])
1560176715535:update_vars("fineroot2leaf", ctsm.param.nc, "froot_leaf", pft.trait.values[v])
1560176715536:update_vars("vcmax", ctsm.param.nc, "flnr", as.numeric(pft.trait.values[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar))
1560176715538:# if (var == "sla") {
1560176715539:#   ## default 0.03846
1560176715541:#   ncdf4::ncvar_put(
1560176715542:#     nc = ctsm.param.nc,
1560176715543:#     varid = "slatop",
1560176715544:#     start = ipft,
1560176715545:#     count = 1,
1560176715546:#     vals = udunits2::ud.convert(pft.trait.values[1], "m2 kg-1", "m2 g-1") / leafC
1560176715547:#   )
1560176715548:# }
1560176715549:# if (var == "c2n_leaf"){
1560176715550:#   ## default 35.36068
1560176715552:#   ncdf4::ncvar_put(
1560176715553:#     nc = ctsm.param.nc,
1560176715554:#     varid = "leafcn",
1560176715555:#     start = ipft,
1560176715556:#     count = 1,
1560176715557:#     vals = pft.trait.values[v]
1560176715558:#   )
1560176715559:# }
1560176715560:# if (var == "stom_slope"){
1560176715562:#   ## default 9.757532
1560176715563:#   ncdf4::ncvar_put(
1560176715564:#     nc = ctsm.param.nc,
1560176715565:#     varid = "mbbopt",
1560176715566:#     start = ipft,
1560176715567:#     count = 1,
1560176715568:#     vals = pft.trait.values[v]
1560176715569:#   )
1560176715570:# }
1560176715572:# if (var == "fineroot2leaf"){
1560176715573:#   ## default 1.5
1560176715574:#   ncdf4::ncvar_put(
1560176715575:#     nc = ctsm.param.nc,
1560176715576:#     varid = "froot_leaf",
1560176715577:#     start = ipft,
1560176715578:#     count = 1,
1560176715579:#     vals = pft.trait.values[v]
1560176715580:#   )
1560176715582:# }
1560176715583:# if (var == "vcmax"){
1560176715584:#   ## default 0.09
1560176715585:#   ncdf4::ncvar_put(
1560176715586:#     nc = ctsm.param.nc,
1560176715587:#     varid = "flnr",
1560176715588:#     start = ipft,
1560176715589:#     count = 1,
1560176715591:#     vals = as.numeric(pft.trait.values[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar)
1560176715592:#   )
1560176715593:# }
1560176715594:} ## end loop over VARIABLES
1560176731348:sla_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")
1560176731514:c2n_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")
1560176731723:sto_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "mbbopt")
1560176731914:frl_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "froot_leaf")
1560176732316:flnr_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "flnr")
1560176733253:sla_old[15]
1560176733640:sla_new[15]
1560176734334:c2n_old[15]
1560176734676:c2n_new[15]
1560176735260:sto_old[15]
1560176735476:sto_new[15]
1560176736343:frl_old[15]
1560176736556:frl_new[15]
1560176736928:flnr_old[15]
1560176737101:flnr_new[15]
1560176789870:.libPaths("~/R_libs/")
1560176790407:library(PEcAn.CTSM)
1560176796773:trait.values <- list(c4_grass = list(sla = 0.03, c2n_leaf = 35, stom_slope = 10, fineroot2leaf = 2, vcmax = 50))
1560176800306:## Copy and open default parameter files
1560176800308:ctsm.param.default <-
1560176800310:system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM')
1560176800492:if (!exists('local.rundir'))
1560176800684:local.rundir <- tempdir()
1560176800931:if (!exists('run.id'))
1560176801260:run.id <- 1
1560176801682:ctsm.param.file <-
1560176801684:file.path(local.rundir, paste0("ctsm_params.", run.id, ".nc"))
1560176801986:file.copy(ctsm.param.default, ctsm.param.file)
1560176802367:ctsm.param.nc <- ncdf4::nc_open(ctsm.param.file, write = TRUE)
1560176803539:## Loop over PFTS
1560176803540:npft <- length(trait.values)
1560176804242:PEcAn.logger::logger.debug('there are ',
1560176804244:npft,
1560176804246:'PFTs in this run, they are named:',
1560176804249:names(trait.values))
1560176807268:ctsm_pftnames <-
1560176807270:stringr::str_trim(tolower(ncdf4::ncvar_get(ctsm.param.nc, "pftname")))
1560176811103:i <- 1
1560176814120:pft.name <- names(trait.values)[i]
1560176814619:if (is.null(pft.name) | is.na(pft.name)) {
1560176814621:PEcAn.logger::logger.error("pft.name missing")
1560176814622:} else {
1560176814623:PEcAn.logger::logger.info(paste("PFT =", pft.name))
1560176814624:PEcAn.logger::logger.debug(paste0("ctsm PFT number: ", which(ctsm_pftnames == pft.name)))
1560176814625:}
1560176815461:if (pft.name == 'env')
1560176815909:next   ## HACK, need to remove env from default
1560176817566:## Match PFT name to COLUMN
1560176817568:ipft <- match(tolower(pft.name), ctsm_pftnames)
1560176818116:PEcAn.logger::logger.debug(paste0("CTSM pft index number: ", ipft))
1560176818680:if (is.na(ipft)) {
1560176818681:PEcAn.logger::logger.severe(
1560176818682:paste(
1560176818683:"Unmatched PFT",
1560176818684:pft.name,
1560176818685:"in CTSM PEcAn does not yet support non-default PFTs for this model"
1560176818686:)
1560176818687:)
1560176818688:}
1560176820395:## Special variables used in conversions
1560176820397:leafC <- 0.48
1560176820749:fnr <- 7.16 #mass ratio of total Rubisco molecular mass to nitrogen in Rubisco (g Rubisco g-1 N in Rubisco)
1560176821157:ar <- 60 #specific activity of Rubisco (µmol CO2 g-1 Rubisco s-1)
1560176825476:sla_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")
1560176825616:c2n_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")
1560176825768:sto_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "mbbopt")
1560176825899:frl_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "froot_leaf")
1560176826356:flnr_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "flnr")
1560176830350:## Loop over VARIABLES
1560176830352:pft.trait.values <- trait.values[[i]]
1560176830907:for (v in seq_along(pft.trait.values)) {
1560176830908:var <- names(pft.trait.values)[v]
1560176830910:### ----- Leaf physiological parameters
1560176830911:update_vars <- function(var, nc, varid, start = ipft, count = 1, vals){
1560176830912:if(var == var){
1560176830913:ncdf4::ncvar_put(nc = nc, varid = varid, vals = vals)
1560176830914:}
1560176830915:}
1560176830917:update_vars("sla", ctsm.param.nc, "slatop", udunits2::ud.convert(pft.trait.values[1], "m2 kg-1", "m2 g-1") / leafC)
1560176830918:update_vars("c2n_leaf", ctsm.param.nc, "leafcn", vals = pft.trait.values[v])
1560176830919:update_vars("stom_slope", ctsm.param.nc, "mbbopt", vals = pft.trait.values[v])
1560176830920:update_vars("fineroot2leaf", ctsm.param.nc, "froot_leaf", pft.trait.values[v])
1560176830921:update_vars("vcmax", ctsm.param.nc, "flnr", as.numeric(pft.trait.values[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar))
1560176830923:# if (var == "sla") {
1560176830924:#   ## default 0.03846
1560176830925:#   ncdf4::ncvar_put(
1560176830926:#     nc = ctsm.param.nc,
1560176830927:#     varid = "slatop",
1560176830928:#     start = ipft,
1560176830929:#     count = 1,
1560176830930:#     vals = udunits2::ud.convert(pft.trait.values[1], "m2 kg-1", "m2 g-1") / leafC
1560176830931:#   )
1560176830932:# }
1560176830933:# if (var == "c2n_leaf"){
1560176830934:#   ## default 35.36068
1560176830935:#   ncdf4::ncvar_put(
1560176830936:#     nc = ctsm.param.nc,
1560176830937:#     varid = "leafcn",
1560176830938:#     start = ipft,
1560176830939:#     count = 1,
1560176830940:#     vals = pft.trait.values[v]
1560176830941:#   )
1560176830942:# }
1560176830943:# if (var == "stom_slope"){
1560176830944:#   ## default 9.757532
1560176830945:#   ncdf4::ncvar_put(
1560176830946:#     nc = ctsm.param.nc,
1560176830947:#     varid = "mbbopt",
1560176830948:#     start = ipft,
1560176830949:#     count = 1,
1560176830950:#     vals = pft.trait.values[v]
1560176830951:#   )
1560176830953:# }
1560176830954:# if (var == "fineroot2leaf"){
1560176830955:#   ## default 1.5
1560176830956:#   ncdf4::ncvar_put(
1560176830957:#     nc = ctsm.param.nc,
1560176830958:#     varid = "froot_leaf",
1560176830959:#     start = ipft,
1560176830960:#     count = 1,
1560176830961:#     vals = pft.trait.values[v]
1560176830962:#   )
1560176830963:# }
1560176830964:# if (var == "vcmax"){
1560176830965:#   ## default 0.09
1560176830966:#   ncdf4::ncvar_put(
1560176830967:#     nc = ctsm.param.nc,
1560176830968:#     varid = "flnr",
1560176830969:#     start = ipft,
1560176830970:#     count = 1,
1560176830971:#     vals = as.numeric(pft.trait.values[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar)
1560176830972:#   )
1560176830974:# }
1560176830975:} ## end loop over VARIABLES
1560176855683:exit
1560176857935:q
1560176869212:traceback()
1560176978943:var
1560177017449:v
1560178495192:.libPaths("~/R_libs/")
1560178495728:library(PEcAn.CTSM)
1560178504484:trait.values <- list(c4_grass = list(sla = 0.03, c2n_leaf = 35, stom_slope = 10, fineroot2leaf = 2, vcmax = 50))
1560178509331:## Copy and open default parameter files
1560178509333:ctsm.param.default <-
1560178509335:system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM')
1560178509503:if (!exists('local.rundir'))
1560178509692:local.rundir <- tempdir()
1560178509807:if (!exists('run.id'))
1560178510083:ctsm.param.file <-
1560178510085:file.path(local.rundir, paste0("ctsm_params.", run.id, ".nc"))
1560178510186:run.id <- 1
1560178510322:file.copy(ctsm.param.default, ctsm.param.file)
1560178510495:ctsm.param.nc <- ncdf4::nc_open(ctsm.param.file, write = TRUE)
1560178512149:## Loop over PFTS
1560178512151:npft <- length(trait.values)
1560178512480:PEcAn.logger::logger.debug('there are ',
1560178512482:npft,
1560178512484:'PFTs in this run, they are named:',
1560178512486:names(trait.values))
1560178513416:ctsm_pftnames <-
1560178513418:stringr::str_trim(tolower(ncdf4::ncvar_get(ctsm.param.nc, "pftname")))
1560178529201:.libPaths("~/R_libs/")
1560178529740:library(PEcAn.CTSM)
1560178535472:trait.values <- list(c4_grass = list(sla = 0.03, c2n_leaf = 35, stom_slope = 10, fineroot2leaf = 2, vcmax = 50))
1560178542141:## Copy and open default parameter files
1560178542142:ctsm.param.default <-
1560178542144:system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM')
1560178542882:if (!exists('local.rundir'))
1560178543558:local.rundir <- tempdir()
1560178544213:if (!exists('run.id'))
1560178545070:run.id <- 1
1560178546160:ctsm.param.file <-
1560178546161:file.path(local.rundir, paste0("ctsm_params.", run.id, ".nc"))
1560178546944:file.copy(ctsm.param.default, ctsm.param.file)
1560178547920:ctsm.param.nc <- ncdf4::nc_open(ctsm.param.file, write = TRUE)
1560178550072:## Loop over PFTS
1560178550073:npft <- length(trait.values)
1560178550767:PEcAn.logger::logger.debug('there are ',
1560178550768:npft,
1560178550770:'PFTs in this run, they are named:',
1560178550770:names(trait.values))
1560178552111:ctsm_pftnames <-
1560178552112:stringr::str_trim(tolower(ncdf4::ncvar_get(ctsm.param.nc, "pftname")))
1560178556490:i <- 1
1560178559260:pft.name <- names(trait.values)[i]
1560178559824:if (is.null(pft.name) | is.na(pft.name)) {
1560178559826:PEcAn.logger::logger.error("pft.name missing")
1560178559827:} else {
1560178559828:PEcAn.logger::logger.info(paste("PFT =", pft.name))
1560178559829:PEcAn.logger::logger.debug(paste0("ctsm PFT number: ", which(ctsm_pftnames == pft.name)))
1560178559830:}
1560178560691:if (pft.name == 'env')
1560178561083:next   ## HACK, need to remove env from default
1560178561744:## Match PFT name to COLUMN
1560178561746:ipft <- match(tolower(pft.name), ctsm_pftnames)
1560178562034:PEcAn.logger::logger.debug(paste0("CTSM pft index number: ", ipft))
1560178562587:if (is.na(ipft)) {
1560178562589:PEcAn.logger::logger.severe(
1560178562591:paste(
1560178562592:"Unmatched PFT",
1560178562594:pft.name,
1560178562595:"in CTSM PEcAn does not yet support non-default PFTs for this model"
1560178562596:)
1560178562598:)
1560178562600:}
1560178563533:## Special variables used in conversions
1560178563535:leafC <- 0.48
1560178563762:fnr <- 7.16 #mass ratio of total Rubisco molecular mass to nitrogen in Rubisco (g Rubisco g-1 N in Rubisco)
1560178564234:ar <- 60 #specific activity of Rubisco (µmol CO2 g-1 Rubisco s-1)
1560178567781:sla_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")
1560178567901:c2n_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")
1560178568950:sto_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "mbbopt")
1560178569173:frl_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "froot_leaf")
1560178569545:flnr_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "flnr")
1560178572765:## Loop over VARIABLES
1560178572767:pft.trait.values <- trait.values[[i]]
1560178573776:for (v in seq_along(pft.trait.values)) {
1560178573778:var <- names(pft.trait.values)[v]
1560178573782:### ----- Leaf physiological parameters
1560178573783:update_vars <- function(varid, vals, nc = ctsm.param.nc, start = ipft, count = 1){
1560178573784:ncdf4::ncvar_put(varid = varid, vals = vals)
1560178573785:}
1560178573788:if(var == "sla") {update_vars("slatop", udunits2::ud.convert(pft.trait.values[1], "m2 kg-1", "m2 g-1") / leafC)}
1560178573789:if(var == "c2n_leaf") {update_vars("leafcn", vals = pft.trait.values[v])}
1560178573791:#update_vars("stom_slope", "mbbopt", vals = pft.trait.values[v])
1560178573793:#update_vars("fineroot2leaf", "froot_leaf", pft.trait.values[v])
1560178573794:#update_vars("vcmax", "flnr", as.numeric(pft.trait.values[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar))
1560178573796:# if (var == "sla") {
1560178573797:#   ## default 0.03846
1560178573798:#   ncdf4::ncvar_put(
1560178573799:#     nc = ctsm.param.nc,
1560178573800:#     varid = "slatop",
1560178573801:#     start = ipft,
1560178573803:#     count = 1,
1560178573804:#     vals = udunits2::ud.convert(pft.trait.values[1], "m2 kg-1", "m2 g-1") / leafC
1560178573805:#   )
1560178573806:# }
1560178573807:# if (var == "c2n_leaf"){
1560178573808:#   ## default 35.36068
1560178573809:#   ncdf4::ncvar_put(
1560178573810:#     nc = ctsm.param.nc,
1560178573811:#     varid = "leafcn",
1560178573812:#     start = ipft,
1560178573814:#     count = 1,
1560178573815:#     vals = pft.trait.values[v]
1560178573816:#   )
1560178573817:# }
1560178573818:# if (var == "stom_slope"){
1560178573819:#   ## default 9.757532
1560178573820:#   ncdf4::ncvar_put(
1560178573821:#     nc = ctsm.param.nc,
1560178573822:#     varid = "mbbopt",
1560178573823:#     start = ipft,
1560178573824:#     count = 1,
1560178573826:#     vals = pft.trait.values[v]
1560178573827:#   )
1560178573828:# }
1560178573829:# if (var == "fineroot2leaf"){
1560178573830:#   ## default 1.5
1560178573831:#   ncdf4::ncvar_put(
1560178573832:#     nc = ctsm.param.nc,
1560178573833:#     varid = "froot_leaf",
1560178573834:#     start = ipft,
1560178573836:#     count = 1,
1560178573837:#     vals = pft.trait.values[v]
1560178573838:#   )
1560178573839:# }
1560178573840:# if (var == "vcmax"){
1560178573841:#   ## default 0.09
1560178573843:#   ncdf4::ncvar_put(
1560178573844:#     nc = ctsm.param.nc,
1560178573845:#     varid = "flnr",
1560178573846:#     start = ipft,
1560178573847:#     count = 1,
1560178573848:#     vals = as.numeric(pft.trait.values[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar)
1560178573849:#   )
1560178573850:# }
1560178573851:} ## end loop over VARIABLES
1560178606822:?ncdf4::ncvar_put
1560178681508:.libPaths("~/R_libs/")
1560178682034:library(PEcAn.CTSM)
1560178690108:trait.values <- list(c4_grass = list(sla = 0.03, c2n_leaf = 35, stom_slope = 10, fineroot2leaf = 2, vcmax = 50))
1560178695377:## Copy and open default parameter files
1560178695378:ctsm.param.default <-
1560178695379:system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM')
1560178695603:if (!exists('local.rundir'))
1560178696146:local.rundir <- tempdir()
1560178696484:if (!exists('run.id'))
1560178697047:run.id <- 1
1560178697255:ctsm.param.file <-
1560178697257:file.path(local.rundir, paste0("ctsm_params.", run.id, ".nc"))
1560178697448:file.copy(ctsm.param.default, ctsm.param.file)
1560178697835:ctsm.param.nc <- ncdf4::nc_open(ctsm.param.file, write = TRUE)
1560178698419:## Loop over PFTS
1560178698420:npft <- length(trait.values)
1560178699021:PEcAn.logger::logger.debug('there are ',
1560178699022:npft,
1560178699024:'PFTs in this run, they are named:',
1560178699025:names(trait.values))
1560178700077:ctsm_pftnames <-
1560178700079:stringr::str_trim(tolower(ncdf4::ncvar_get(ctsm.param.nc, "pftname")))
1560178704831:i <- 1
1560178708850:pft.name <- names(trait.values)[i]
1560178712212:pft.name <- names(trait.values)[i]
1560178713205:if (is.null(pft.name) | is.na(pft.name)) {
1560178713207:PEcAn.logger::logger.error("pft.name missing")
1560178713209:} else {
1560178713211:PEcAn.logger::logger.info(paste("PFT =", pft.name))
1560178713213:PEcAn.logger::logger.debug(paste0("ctsm PFT number: ", which(ctsm_pftnames == pft.name)))
1560178713215:}
1560178714055:if (pft.name == 'env')
1560178714242:next   ## HACK, need to remove env from default
1560178715151:## Match PFT name to COLUMN
1560178715152:ipft <- match(tolower(pft.name), ctsm_pftnames)
1560178715490:PEcAn.logger::logger.debug(paste0("CTSM pft index number: ", ipft))
1560178716180:if (is.na(ipft)) {
1560178716181:PEcAn.logger::logger.severe(
1560178716183:paste(
1560178716184:"Unmatched PFT",
1560178716185:pft.name,
1560178716186:"in CTSM PEcAn does not yet support non-default PFTs for this model"
1560178716188:)
1560178716189:)
1560178716190:}
1560178716828:## Special variables used in conversions
1560178716830:leafC <- 0.48
1560178717443:fnr <- 7.16 #mass ratio of total Rubisco molecular mass to nitrogen in Rubisco (g Rubisco g-1 N in Rubisco)
1560178718137:ar <- 60 #specific activity of Rubisco (µmol CO2 g-1 Rubisco s-1)
1560178719548:## Loop over VARIABLES
1560178719549:pft.trait.values <- trait.values[[i]]
1560178720817:for (v in seq_along(pft.trait.values)) {
1560178720818:var <- names(pft.trait.values)[v]
1560178720820:### ----- Leaf physiological parameters
1560178720822:update_vars <- function(varid, vals, nc = ctsm.param.nc, start = ipft, count = 1){
1560178720823:ncdf4::ncvar_put(nc = nc, varid = varid, vals = vals)
1560178720824:}
1560178720825:if(var == "sla") {update_vars("slatop", udunits2::ud.convert(pft.trait.values[1], "m2 kg-1", "m2 g-1") / leafC)}
1560178720826:if(var == "c2n_leaf") {update_vars("leafcn", vals = pft.trait.values[v])}
1560178720828:#update_vars("stom_slope", "mbbopt", vals = pft.trait.values[v])
1560178720829:#update_vars("fineroot2leaf", "froot_leaf", pft.trait.values[v])
1560178720830:#update_vars("vcmax", "flnr", as.numeric(pft.trait.values[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar))
1560178720832:# if (var == "sla") {
1560178720833:#   ## default 0.03846
1560178720834:#   ncdf4::ncvar_put(
1560178720835:#     nc = ctsm.param.nc,
1560178720836:#     varid = "slatop",
1560178720837:#     start = ipft,
1560178720838:#     count = 1,
1560178720839:#     vals = udunits2::ud.convert(pft.trait.values[1], "m2 kg-1", "m2 g-1") / leafC
1560178720840:#   )
1560178720841:# }
1560178720842:# if (var == "c2n_leaf"){
1560178720843:#   ## default 35.36068
1560178720844:#   ncdf4::ncvar_put(
1560178720845:#     nc = ctsm.param.nc,
1560178720846:#     varid = "leafcn",
1560178720847:#     start = ipft,
1560178720848:#     count = 1,
1560178720849:#     vals = pft.trait.values[v]
1560178720850:#   )
1560178720851:# }
1560178720852:# if (var == "stom_slope"){
1560178720853:#   ## default 9.757532
1560178720854:#   ncdf4::ncvar_put(
1560178720855:#     nc = ctsm.param.nc,
1560178720856:#     varid = "mbbopt",
1560178720857:#     start = ipft,
1560178720858:#     count = 1,
1560178720859:#     vals = pft.trait.values[v]
1560178720860:#   )
1560178720861:# }
1560178720862:# if (var == "fineroot2leaf"){
1560178720863:#   ## default 1.5
1560178720864:#   ncdf4::ncvar_put(
1560178720865:#     nc = ctsm.param.nc,
1560178720866:#     varid = "froot_leaf",
1560178720867:#     start = ipft,
1560178720868:#     count = 1,
1560178720870:#     vals = pft.trait.values[v]
1560178720871:#   )
1560178720872:# }
1560178720873:# if (var == "vcmax"){
1560178720874:#   ## default 0.09
1560178720875:#   ncdf4::ncvar_put(
1560178720876:#     nc = ctsm.param.nc,
1560178720877:#     varid = "flnr",
1560178720878:#     start = ipft,
1560178720879:#     count = 1,
1560178720880:#     vals = as.numeric(pft.trait.values[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar)
1560178720881:#   )
1560178720882:# }
1560178720883:} ## end loop over VARIABLES
1560179257236:.libPaths("~/R_libs/")
1560179257781:library(PEcAn.CTSM)
1560179262894:trait.values <- list(c4_grass = list(sla = 0.03, c2n_leaf = 35, stom_slope = 10, fineroot2leaf = 2, vcmax = 50))
1560179267923:## Copy and open default parameter files
1560179267925:ctsm.param.default <-
1560179267927:system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM')
1560179268138:if (!exists('local.rundir'))
1560179269100:local.rundir <- tempdir()
1560179269500:if (!exists('run.id'))
1560179269821:run.id <- 1
1560179270145:ctsm.param.file <-
1560179270147:file.path(local.rundir, paste0("ctsm_params.", run.id, ".nc"))
1560179270631:file.copy(ctsm.param.default, ctsm.param.file)
1560179270927:ctsm.param.nc <- ncdf4::nc_open(ctsm.param.file, write = TRUE)
1560179271397:## Loop over PFTS
1560179271399:npft <- length(trait.values)
1560179271733:PEcAn.logger::logger.debug('there are ',
1560179271734:npft,
1560179271736:'PFTs in this run, they are named:',
1560179271737:names(trait.values))
1560179272588:ctsm_pftnames <-
1560179272590:stringr::str_trim(tolower(ncdf4::ncvar_get(ctsm.param.nc, "pftname")))
1560179275380:i <- 1
1560179278056:pft.name <- names(trait.values)[i]
1560179279358:pft.name <- names(trait.values)[i]
1560179280534:if (is.null(pft.name) | is.na(pft.name)) {
1560179280536:PEcAn.logger::logger.error("pft.name missing")
1560179280538:} else {
1560179280540:PEcAn.logger::logger.info(paste("PFT =", pft.name))
1560179280542:PEcAn.logger::logger.debug(paste0("ctsm PFT number: ", which(ctsm_pftnames == pft.name)))
1560179280545:}
1560179281889:if (pft.name == 'env')
1560179282272:next   ## HACK, need to remove env from default
1560179282741:## Match PFT name to COLUMN
1560179282743:ipft <- match(tolower(pft.name), ctsm_pftnames)
1560179283125:PEcAn.logger::logger.debug(paste0("CTSM pft index number: ", ipft))
1560179283734:if (is.na(ipft)) {
1560179283736:PEcAn.logger::logger.severe(
1560179283738:paste(
1560179283740:"Unmatched PFT",
1560179283742:pft.name,
1560179283744:"in CTSM PEcAn does not yet support non-default PFTs for this model"
1560179283745:)
1560179283746:)
1560179283747:}
1560179284387:## Special variables used in conversions
1560179284388:leafC <- 0.48
1560179284595:fnr <- 7.16 #mass ratio of total Rubisco molecular mass to nitrogen in Rubisco (g Rubisco g-1 N in Rubisco)
1560179285127:ar <- 60 #specific activity of Rubisco (µmol CO2 g-1 Rubisco s-1)
1560179290894:sla_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")
1560179290898:c2n_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")
1560179290901:sto_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "mbbopt")
1560179290904:frl_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "froot_leaf")
1560179297360:## Loop over VARIABLES
1560179297362:pft.trait.values <- trait.values[[i]]
1560179297799:for (v in seq_along(pft.trait.values)) {
1560179297801:var <- names(pft.trait.values)[v]
1560179297805:### ----- Leaf physiological parameters
1560179297807:update_vars <- function(nc, varid, vals, start = ipft, count = 1){
1560179297808:ncdf4::ncvar_put(nc, varid, vals)
1560179297810:}
1560179297811:if(var == "sla") {update_vars(ctsm.param.nc, "slatop", udunits2::ud.convert(pft.trait.values[1], "m2 kg-1", "m2 g-1") / leafC)}
1560179297812:if(var == "c2n_leaf") {update_vars(ctsm.param.nc, "leafcn", vals = pft.trait.values[v])}
1560179297815:#update_vars("stom_slope", "mbbopt", vals = pft.trait.values[v])
1560179297815:#update_vars("fineroot2leaf", "froot_leaf", pft.trait.values[v])
1560179297816:#update_vars("vcmax", "flnr", as.numeric(pft.trait.values[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar))
1560179297818:# if (var == "sla") {
1560179297819:#   ## default 0.03846
1560179297821:#   ncdf4::ncvar_put(
1560179297822:#     nc = ctsm.param.nc,
1560179297823:#     varid = "slatop",
1560179297824:#     start = ipft,
1560179297825:#     count = 1,
1560179297826:#     vals = udunits2::ud.convert(pft.trait.values[1], "m2 kg-1", "m2 g-1") / leafC
1560179297827:#   )
1560179297828:# }
1560179297829:# if (var == "c2n_leaf"){
1560179297830:#   ## default 35.36068
1560179297831:#   ncdf4::ncvar_put(
1560179297832:#     nc = ctsm.param.nc,
1560179297833:#     varid = "leafcn",
1560179297834:#     start = ipft,
1560179297835:#     count = 1,
1560179297836:#     vals = pft.trait.values[v]
1560179297837:#   )
1560179297838:# }
1560179297839:# if (var == "stom_slope"){
1560179297840:#   ## default 9.757532
1560179297841:#   ncdf4::ncvar_put(
1560179297842:#     nc = ctsm.param.nc,
1560179297843:#     varid = "mbbopt",
1560179297844:#     start = ipft,
1560179297845:#     count = 1,
1560179297846:#     vals = pft.trait.values[v]
1560179297847:#   )
1560179297848:# }
1560179297849:# if (var == "fineroot2leaf"){
1560179297851:#   ## default 1.5
1560179297852:#   ncdf4::ncvar_put(
1560179297853:#     nc = ctsm.param.nc,
1560179297854:#     varid = "froot_leaf",
1560179297855:#     start = ipft,
1560179297856:#     count = 1,
1560179297857:#     vals = pft.trait.values[v]
1560179297858:#   )
1560179297859:# }
1560179297860:# if (var == "vcmax"){
1560179297861:#   ## default 0.09
1560179297862:#   ncdf4::ncvar_put(
1560179297863:#     nc = ctsm.param.nc,
1560179297864:#     varid = "flnr",
1560179297865:#     start = ipft,
1560179297866:#     count = 1,
1560179297867:#     vals = as.numeric(pft.trait.values[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar)
1560179297868:#   )
1560179297869:# }
1560179297870:} ## end loop over VARIABLES
1560179380057:q
1560179388711:ctsm.param.default <-
1560179388713:system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM')
1560179388945:if (!exists('local.rundir'))
1560179389371:local.rundir <- tempdir()
1560179389774:if (!exists('run.id'))
1560179390136:run.id <- 1
1560179390381:ctsm.param.file <-
1560179390382:file.path(local.rundir, paste0("ctsm_params.", run.id, ".nc"))
1560179390669:file.copy(ctsm.param.default, ctsm.param.file)
1560179391191:ctsm.param.nc <- ncdf4::nc_open(ctsm.param.file, write = TRUE)
1560179416379:.libPaths("~/R_libs/")
1560179416952:library(PEcAn.CTSM)
1560179416998:ctsm.param.default <-
1560179416999:system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM')
1560179417104:if (!exists('local.rundir'))
1560179417343:local.rundir <- tempdir()
1560179418004:if (!exists('run.id'))
1560179418020:run.id <- 1
1560179418036:ctsm.param.file <-
1560179418037:file.path(local.rundir, paste0("ctsm_params.", run.id, ".nc"))
1560179418046:file.copy(ctsm.param.default, ctsm.param.file)
1560179418052:ctsm.param.nc <- ncdf4::nc_open(ctsm.param.file, write = TRUE)
1560179422482:update_vars <- function(nc, varid, vals, start = ipft, count = 1){
1560179422484:ncdf4::ncvar_put(nc, varid, vals)
1560179422486:}
1560179423567:if(var == "sla") {update_vars(ctsm.param.nc, "slatop", udunits2::ud.convert(pft.trait.values[1], "m2 kg-1", "m2 g-1") / leafC)}
1560179445920:var <- "sla"
1560179446478:update_vars <- function(nc, varid, vals, start = ipft, count = 1){
1560179446480:ncdf4::ncvar_put(nc, varid, vals)
1560179446481:}
1560179447282:if(var == "sla") {update_vars(ctsm.param.nc, "slatop", udunits2::ud.convert(pft.trait.values[1], "m2 kg-1", "m2 g-1") / leafC)}
1560180078363:trait.values <- list(c4_grass = list(sla = 0.03, c2n_leaf = 35, stom_slope = 10, fineroot2leaf = 2, vcmax = 50))
1560180083541:trait.values
1560180092028:trait.values[1]
1560180096729:trait.values[[1]]
1560180109221:trait.values[[1]][1]
1560180119079:pft.trait.values <- trait.values[[1]][1]
1560180122845:pft.trait.values
1560180125623:if(var == "sla") {update_vars(ctsm.param.nc, "slatop", udunits2::ud.convert(pft.trait.values[v], "m2 kg-1", "m2 g-1") / leafC)}
1560180134674:if(var == "sla") {update_vars(ctsm.param.nc, "slatop", udunits2::ud.convert(pft.trait.values, "m2 kg-1", "m2 g-1") / leafC)}
1560180145276:.libPaths("~/R_libs/")
1560180145818:library(PEcAn.CTSM)
1560180145879:ctsm.param.default <-
1560180145880:system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM')
1560180145990:if (!exists('local.rundir'))
1560180146233:local.rundir <- tempdir()
1560180146987:if (!exists('run.id'))
1560180146999:run.id <- 1
1560180147021:ctsm.param.file <-
1560180147022:file.path(local.rundir, paste0("ctsm_params.", run.id, ".nc"))
1560180147029:file.copy(ctsm.param.default, ctsm.param.file)
1560180147761:ctsm.param.nc <- ncdf4::nc_open(ctsm.param.file, write = TRUE)
1560180148438:var <- "sla"
1560180149318:update_vars <- function(nc, varid, vals, start = ipft, count = 1){
1560180149320:ncdf4::ncvar_put(nc, varid, vals)
1560180149322:}
1560180150364:trait.values <- list(c4_grass = list(sla = 0.03, c2n_leaf = 35, stom_slope = 10, fineroot2leaf = 2, vcmax = 50))
1560180151044:pft.trait.values <- trait.values[[1]][1]
1560180151980:if(var == "sla") {update_vars(ctsm.param.nc, "slatop", udunits2::ud.convert(pft.trait.values, "m2 kg-1", "m2 g-1") / leafC)}
1560180171852:leafC <- 0.48
1560180173064:if(var == "sla") {update_vars(ctsm.param.nc, "slatop", udunits2::ud.convert(pft.trait.values, "m2 kg-1", "m2 g-1") / leafC)}
1560180183291:.libPaths("~/R_libs/")
1560180183832:library(PEcAn.CTSM)
1560180183891:ctsm.param.default <-
1560180183892:system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM')
1560180184929:if (!exists('local.rundir'))
1560180185593:local.rundir <- tempdir()
1560180185906:if (!exists('run.id'))
1560180186296:run.id <- 1
1560180186657:ctsm.param.file <-
1560180186658:file.path(local.rundir, paste0("ctsm_params.", run.id, ".nc"))
1560180187225:file.copy(ctsm.param.default, ctsm.param.file)
1560180187700:ctsm.param.nc <- ncdf4::nc_open(ctsm.param.file, write = TRUE)
1560180188557:var <- "sla"
1560180189005:update_vars <- function(nc, varid, vals, start = ipft, count = 1){
1560180189007:ncdf4::ncvar_put(nc, varid, vals)
1560180189009:}
1560180189996:leafC <- 0.48
1560180190923:trait.values <- list(c4_grass = list(sla = 0.03, c2n_leaf = 35, stom_slope = 10, fineroot2leaf = 2, vcmax = 50))
1560180191782:pft.trait.values <- trait.values[[1]][1]
1560180192929:if(var == "sla") {update_vars(ctsm.param.nc, "slatop", udunits2::ud.convert(pft.trait.values, "m2 kg-1", "m2 g-1") / leafC)}
1560180243369:if (var == "sla") {
1560180243371:ncdf4::ncvar_put(
1560180243373:nc = ctsm.param.nc,
1560180243375:varid = "slatop",
1560180243377:start = ipft,
1560180243379:count = 1,
1560180243380:vals = udunits2::ud.convert(pft.trait.values[v], "m2 kg-1", "m2 g-1") / leafC
1560180243382:)
1560180243383:}
1560180250105:if (var == "sla") {
1560180250107:ncdf4::ncvar_put(
1560180250109:nc = ctsm.param.nc,
1560180250111:varid = "slatop",
1560180250112:start = ipft,
1560180250115:count = 1,
1560180250116:vals = udunits2::ud.convert(pft.trait.values, "m2 kg-1", "m2 g-1") / leafC
1560180250117:)
1560180250118:}
1560180571215:.libPaths("~/R_libs/") #delete
1560180572767:library(PEcAn.CTSM) #delete
1560180574864:trait.values <- list(c4_grass = list(sla = 0.03, c2n_leaf = 35, stom_slope = 10, fineroot2leaf = 2, vcmax = 50)) #delete
1560180575577:## Copy and open default parameter files
1560180575578:ctsm.param.default <-
1560180575579:system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM')
1560180575804:if (!exists('local.rundir'))
1560180576102:local.rundir <- tempdir()
1560180576308:if (!exists('run.id'))
1560180576500:run.id <- 1
1560180576736:ctsm.param.file <-
1560180576737:file.path(local.rundir, paste0("ctsm_params.", run.id, ".nc"))
1560180576926:file.copy(ctsm.param.default, ctsm.param.file)
1560180577380:ctsm.param.nc <- ncdf4::nc_open(ctsm.param.file, write = TRUE)
1560180578159:## Loop over PFTS
1560180578160:npft <- length(trait.values)
1560180578521:PEcAn.logger::logger.debug('there are ',
1560180578523:npft,
1560180578524:'PFTs in this run, they are named:',
1560180578525:names(trait.values))
1560180579972:ctsm_pftnames <-
1560180579974:stringr::str_trim(tolower(ncdf4::ncvar_get(ctsm.param.nc, "pftname")))
1560180580783:i <- 1 #delete
1560180581650:#for (i in seq_len(npft)) {
1560180581651:pft.name <- names(trait.values)[i]
1560180582912:if (is.null(pft.name) | is.na(pft.name)) {
1560180582913:PEcAn.logger::logger.error("pft.name missing")
1560180582914:} else {
1560180582916:PEcAn.logger::logger.info(paste("PFT =", pft.name))
1560180582917:PEcAn.logger::logger.debug(paste0("ctsm PFT number: ", which(ctsm_pftnames == pft.name)))
1560180582919:}
1560180583879:if (pft.name == 'env')
1560180584232:next   ## HACK, need to remove env from default
1560180585251:## Match PFT name to COLUMN
1560180585253:ipft <- match(tolower(pft.name), ctsm_pftnames)
1560180585912:PEcAn.logger::logger.debug(paste0("CTSM pft index number: ", ipft))
1560180586356:if (is.na(ipft)) {
1560180586358:PEcAn.logger::logger.severe(
1560180586360:paste(
1560180586362:"Unmatched PFT",
1560180586364:pft.name,
1560180586366:"in CTSM PEcAn does not yet support non-default PFTs for this model"
1560180586368:)
1560180586369:)
1560180586370:}
1560180587188:## Special variables used in conversions
1560180587189:leafC <- 0.48
1560180587398:fnr <- 7.16 #mass ratio of total Rubisco molecular mass to nitrogen in Rubisco (g Rubisco g-1 N in Rubisco)
1560180587656:ar <- 60 #specific activity of Rubisco (µmol CO2 g-1 Rubisco s-1)
1560180588371:sla_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop") #delete
1560180588743:c2n_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn") #delete
1560180588949:sto_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "mbbopt") #delete
1560180589093:frl_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "froot_leaf") #delete
1560180589346:flnr_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "flnr") #delete
1560180590128:## Loop over VARIABLES
1560180590129:pft.trait.values <- trait.values[[i]]
1560180590906:for (v in seq_along(pft.trait.values)) {
1560180590908:var <- names(pft.trait.values)[v]
1560180590911:### ----- Leaf physiological parameters
1560180590913:update_vars <- function(nc, varid, vals, start = ipft, count = 1){
1560180590914:ncdf4::ncvar_put(nc, varid, vals)
1560180590916:}
1560180590919:if(var == "c2n_leaf") {update_vars(ctsm.param.nc, "leafcn", vals = pft.trait.values[v])}
1560180590921:#if(var == "sla") {update_vars(ctsm.param.nc, "slatop", udunits2::ud.convert(pft.trait.values[v], "m2 kg-1", "m2 g-1") / leafC)}
1560180590922:#update_vars("stom_slope", "mbbopt", vals = pft.trait.values[v])
1560180590923:#update_vars("fineroot2leaf", "froot_leaf", pft.trait.values[v])
1560180590924:#update_vars("vcmax", "flnr", as.numeric(pft.trait.values[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar))
1560180590927:# if (var == "sla") {
1560180590928:#   ## default 0.03846
1560180590929:#   ncdf4::ncvar_put(
1560180590930:#     nc = ctsm.param.nc,
1560180590931:#     varid = "slatop",
1560180590932:#     start = ipft,
1560180590933:#     count = 1,
1560180590934:#     vals = udunits2::ud.convert(pft.trait.values[v], "m2 kg-1", "m2 g-1") / leafC
1560180590935:#   )
1560180590936:# }
1560180590937:# if (var == "c2n_leaf"){
1560180590939:#   ## default 35.36068
1560180590940:#   ncdf4::ncvar_put(
1560180590941:#     nc = ctsm.param.nc,
1560180590943:#     varid = "leafcn",
1560180590944:#     start = ipft,
1560180590946:#     count = 1,
1560180590947:#     vals = pft.trait.values[v]
1560180590949:#   )
1560180590950:# }
1560180590951:# if (var == "stom_slope"){
1560180590953:#   ## default 9.757532
1560180590954:#   ncdf4::ncvar_put(
1560180590956:#     nc = ctsm.param.nc,
1560180590957:#     varid = "mbbopt",
1560180590959:#     start = ipft,
1560180590960:#     count = 1,
1560180590961:#     vals = pft.trait.values[v]
1560180590962:#   )
1560180590963:# }
1560180590964:# if (var == "fineroot2leaf"){
1560180590965:#   ## default 1.5
1560180590966:#   ncdf4::ncvar_put(
1560180590967:#     nc = ctsm.param.nc,
1560180590969:#     varid = "froot_leaf",
1560180590970:#     start = ipft,
1560180590971:#     count = 1,
1560180590972:#     vals = pft.trait.values[v]
1560180590974:#   )
1560180590975:# }
1560180590977:# if (var == "vcmax"){
1560180590978:#   ## default 0.09
1560180590979:#   ncdf4::ncvar_put(
1560180590981:#     nc = ctsm.param.nc,
1560180590982:#     varid = "flnr",
1560180590984:#     start = ipft,
1560180590985:#     count = 1,
1560180590986:#     vals = as.numeric(pft.trait.values[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar)
1560180590987:#   )
1560180590988:# }
1560180590989:} ## end loop over VARIABLES
1560181015516:.libPaths("~/R_libs/") #delete
1560181016056:library(PEcAn.CTSM) #delete
1560181016114:trait.values <- list(c4_grass = list(sla = 0.03, c2n_leaf = 35, stom_slope = 10, fineroot2leaf = 2, vcmax = 50)) #delete
1560181016116:## Copy and open default parameter files
1560181016117:ctsm.param.default <-
1560181016118:system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM')
1560181017749:if (!exists('local.rundir'))
1560181017905:local.rundir <- tempdir()
1560181018056:if (!exists('run.id'))
1560181018159:run.id <- 1
1560181018326:ctsm.param.file <-
1560181018328:file.path(local.rundir, paste0("ctsm_params.", run.id, ".nc"))
1560181018514:file.copy(ctsm.param.default, ctsm.param.file)
1560181018947:ctsm.param.nc <- ncdf4::nc_open(ctsm.param.file, write = TRUE)
1560181019763:## Loop over PFTS
1560181019765:npft <- length(trait.values)
1560181019997:PEcAn.logger::logger.debug('there are ',
1560181019998:npft,
1560181019999:'PFTs in this run, they are named:',
1560181020000:names(trait.values))
1560181020986:ctsm_pftnames <-
1560181020988:stringr::str_trim(tolower(ncdf4::ncvar_get(ctsm.param.nc, "pftname")))
1560181021535:i <- 1 #delete
1560181022067:#for (i in seq_len(npft)) {
1560181022069:pft.name <- names(trait.values)[i]
1560181022588:if (is.null(pft.name) | is.na(pft.name)) {
1560181022589:PEcAn.logger::logger.error("pft.name missing")
1560181022591:} else {
1560181022593:PEcAn.logger::logger.info(paste("PFT =", pft.name))
1560181022595:PEcAn.logger::logger.debug(paste0("ctsm PFT number: ", which(ctsm_pftnames == pft.name)))
1560181022596:}
1560181022969:if (pft.name == 'env')
1560181023385:next   ## HACK, need to remove env from default
1560181023740:## Match PFT name to COLUMN
1560181023742:ipft <- match(tolower(pft.name), ctsm_pftnames)
1560181023976:PEcAn.logger::logger.debug(paste0("CTSM pft index number: ", ipft))
1560181024400:if (is.na(ipft)) {
1560181024401:PEcAn.logger::logger.severe(
1560181024402:paste(
1560181024403:"Unmatched PFT",
1560181024404:pft.name,
1560181024405:"in CTSM PEcAn does not yet support non-default PFTs for this model"
1560181024407:)
1560181024408:)
1560181024410:}
1560181025076:## Special variables used in conversions
1560181025078:leafC <- 0.48
1560181025268:fnr <- 7.16 #mass ratio of total Rubisco molecular mass to nitrogen in Rubisco (g Rubisco g-1 N in Rubisco)
1560181025475:ar <- 60 #specific activity of Rubisco (µmol CO2 g-1 Rubisco s-1)
1560181025684:sla_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop") #delete
1560181025870:c2n_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn") #delete
1560181026043:sto_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "mbbopt") #delete
1560181026224:frl_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "froot_leaf") #delete
1560181026437:flnr_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "flnr") #delete
1560181026967:## Loop over VARIABLES
1560181026969:pft.trait.values <- trait.values[[i]]
1560181027420:for (v in seq_along(pft.trait.values)) {
1560181027422:var <- names(pft.trait.values)[v]
1560181027424:### ----- Leaf physiological parameters
1560181027426:update_vars <- function(nc_merp, varid_merp, vals_merp, start = ipft, count = 1){
1560181027427:ncdf4::ncvar_put(nc = nc_merp, varid = varid_merp, vals = vals_merp)
1560181027429:}
1560181027432:if (var == "c2n_leaf") {update_vars(ctsm.param.nc, "leafcn", vals = pft.trait.values[v])}
1560181027434:#if(var == "sla") {update_vars(ctsm.param.nc, "slatop", udunits2::ud.convert(pft.trait.values[v], "m2 kg-1", "m2 g-1") / leafC)}
1560181027435:#update_vars("stom_slope", "mbbopt", vals = pft.trait.values[v])
1560181027436:#update_vars("fineroot2leaf", "froot_leaf", pft.trait.values[v])
1560181027437:#update_vars("vcmax", "flnr", as.numeric(pft.trait.values[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar))
1560181027439:# if (var == "sla") {
1560181027440:#   ## default 0.03846
1560181027441:#   ncdf4::ncvar_put(
1560181027442:#     nc = ctsm.param.nc,
1560181027443:#     varid = "slatop",
1560181027445:#     start = ipft,
1560181027447:#     count = 1,
1560181027448:#     vals = udunits2::ud.convert(pft.trait.values[v], "m2 kg-1", "m2 g-1") / leafC
1560181027449:#   )
1560181027450:# }
1560181027451:# if (var == "c2n_leaf"){
1560181027452:#   ## default 35.36068
1560181027453:#   ncdf4::ncvar_put(
1560181027454:#     nc = ctsm.param.nc,
1560181027455:#     varid = "leafcn",
1560181027456:#     start = ipft,
1560181027457:#     count = 1,
1560181027458:#     vals = pft.trait.values[v]
1560181027459:#   )
1560181027460:# }
1560181027461:# if (var == "stom_slope"){
1560181027462:#   ## default 9.757532
1560181027463:#   ncdf4::ncvar_put(
1560181027464:#     nc = ctsm.param.nc,
1560181027466:#     varid = "mbbopt",
1560181027467:#     start = ipft,
1560181027468:#     count = 1,
1560181027469:#     vals = pft.trait.values[v]
1560181027470:#   )
1560181027471:# }
1560181027472:# if (var == "fineroot2leaf"){
1560181027473:#   ## default 1.5
1560181027474:#   ncdf4::ncvar_put(
1560181027475:#     nc = ctsm.param.nc,
1560181027476:#     varid = "froot_leaf",
1560181027477:#     start = ipft,
1560181027478:#     count = 1,
1560181027479:#     vals = pft.trait.values[v]
1560181027480:#   )
1560181027481:# }
1560181027482:# if (var == "vcmax"){
1560181027483:#   ## default 0.09
1560181027484:#   ncdf4::ncvar_put(
1560181027486:#     nc = ctsm.param.nc,
1560181027487:#     varid = "flnr",
1560181027488:#     start = ipft,
1560181027489:#     count = 1,
1560181027490:#     vals = as.numeric(pft.trait.values[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar)
1560181027491:#   )
1560181027492:# }
1560181027493:} ## end loop over VARIABLES
1560181185281:.libPaths("~/R_libs/") #delete
1560181185818:library(PEcAn.CTSM) #delete
1560181185877:trait.values <- list(c4_grass = list(sla = 0.03, c2n_leaf = 35, stom_slope = 10, fineroot2leaf = 2, vcmax = 50)) #delete
1560181186234:## Copy and open default parameter files
1560181186235:ctsm.param.default <-
1560181186237:system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM')
1560181187099:if (!exists('local.rundir'))
1560181187104:local.rundir <- tempdir()
1560181187632:if (!exists('run.id'))
1560181188013:run.id <- 1
1560181188164:ctsm.param.file <-
1560181188166:file.path(local.rundir, paste0("ctsm_params.", run.id, ".nc"))
1560181188345:file.copy(ctsm.param.default, ctsm.param.file)
1560181188430:ctsm.param.nc <- ncdf4::nc_open(ctsm.param.file, write = TRUE)
1560181188690:## Loop over PFTS
1560181188692:npft <- length(trait.values)
1560181188829:PEcAn.logger::logger.debug('there are ',
1560181188831:npft,
1560181188833:'PFTs in this run, they are named:',
1560181188835:names(trait.values))
1560181189036:ctsm_pftnames <-
1560181189038:stringr::str_trim(tolower(ncdf4::ncvar_get(ctsm.param.nc, "pftname")))
1560181189195:i <- 1 #delete
1560181189307:#for (i in seq_len(npft)) {
1560181189308:pft.name <- names(trait.values)[i]
1560181189527:if (is.null(pft.name) | is.na(pft.name)) {
1560181189529:PEcAn.logger::logger.error("pft.name missing")
1560181189531:} else {
1560181189533:PEcAn.logger::logger.info(paste("PFT =", pft.name))
1560181189535:PEcAn.logger::logger.debug(paste0("ctsm PFT number: ", which(ctsm_pftnames == pft.name)))
1560181189537:}
1560181189708:if (pft.name == 'env')
1560181189887:next   ## HACK, need to remove env from default
1560181190107:## Match PFT name to COLUMN
1560181190108:ipft <- match(tolower(pft.name), ctsm_pftnames)
1560181190299:PEcAn.logger::logger.debug(paste0("CTSM pft index number: ", ipft))
1560181190406:if (is.na(ipft)) {
1560181190407:PEcAn.logger::logger.severe(
1560181190409:paste(
1560181190411:"Unmatched PFT",
1560181190412:pft.name,
1560181190413:"in CTSM PEcAn does not yet support non-default PFTs for this model"
1560181190414:)
1560181190415:)
1560181190416:}
1560181190661:## Special variables used in conversions
1560181190663:leafC <- 0.48
1560181190888:fnr <- 7.16 #mass ratio of total Rubisco molecular mass to nitrogen in Rubisco (g Rubisco g-1 N in Rubisco)
1560181191246:ar <- 60 #specific activity of Rubisco (µmol CO2 g-1 Rubisco s-1)
1560181191399:sla_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop") #delete
1560181191577:c2n_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn") #delete
1560181191673:sto_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "mbbopt") #delete
1560181191906:frl_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "froot_leaf") #delete
1560181192053:flnr_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "flnr") #delete
1560181192237:## Loop over VARIABLES
1560181192238:pft.trait.values <- trait.values[[i]]
1560181192455:for (v in seq_along(pft.trait.values)) {
1560181192456:var <- names(pft.trait.values)[v]
1560181192460:### ----- Leaf physiological parameters
1560181192462:update_vars <- function(nc, varid, vals, start = ipft, count = 1){
1560181192464:ncdf4::ncvar_put(nc, varid, vals)
1560181192466:}
1560181192468:if (var == "c2n_leaf") {
1560181192469:update_vars(ctsm.param.nc, "leafcn", vals = pft.trait.values[v])
1560181192470:}
1560181192472:#if(var == "sla") {update_vars(ctsm.param.nc, "slatop", udunits2::ud.convert(pft.trait.values[v], "m2 kg-1", "m2 g-1") / leafC)}
1560181192473:#update_vars("stom_slope", "mbbopt", vals = pft.trait.values[v])
1560181192474:#update_vars("fineroot2leaf", "froot_leaf", pft.trait.values[v])
1560181192475:#update_vars("vcmax", "flnr", as.numeric(pft.trait.values[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar))
1560181192477:# if (var == "sla") {
1560181192478:#   ## default 0.03846
1560181192479:#   ncdf4::ncvar_put(
1560181192480:#     nc = ctsm.param.nc,
1560181192481:#     varid = "slatop",
1560181192482:#     start = ipft,
1560181192483:#     count = 1,
1560181192484:#     vals = udunits2::ud.convert(pft.trait.values[v], "m2 kg-1", "m2 g-1") / leafC
1560181192485:#   )
1560181192486:# }
1560181192487:# if (var == "c2n_leaf"){
1560181192488:#   ## default 35.36068
1560181192489:#   ncdf4::ncvar_put(
1560181192490:#     nc = ctsm.param.nc,
1560181192491:#     varid = "leafcn",
1560181192492:#     start = ipft,
1560181192493:#     count = 1,
1560181192494:#     vals = pft.trait.values[v]
1560181192495:#   )
1560181192496:# }
1560181192497:# if (var == "stom_slope"){
1560181192498:#   ## default 9.757532
1560181192499:#   ncdf4::ncvar_put(
1560181192500:#     nc = ctsm.param.nc,
1560181192501:#     varid = "mbbopt",
1560181192502:#     start = ipft,
1560181192503:#     count = 1,
1560181192504:#     vals = pft.trait.values[v]
1560181192505:#   )
1560181192506:# }
1560181192507:# if (var == "fineroot2leaf"){
1560181192508:#   ## default 1.5
1560181192509:#   ncdf4::ncvar_put(
1560181192510:#     nc = ctsm.param.nc,
1560181192511:#     varid = "froot_leaf",
1560181192512:#     start = ipft,
1560181192513:#     count = 1,
1560181192514:#     vals = pft.trait.values[v]
1560181192515:#   )
1560181192516:# }
1560181192517:# if (var == "vcmax"){
1560181192518:#   ## default 0.09
1560181192519:#   ncdf4::ncvar_put(
1560181192520:#     nc = ctsm.param.nc,
1560181192521:#     varid = "flnr",
1560181192522:#     start = ipft,
1560181192523:#     count = 1,
1560181192524:#     vals = as.numeric(pft.trait.values[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar)
1560181192525:#   )
1560181192526:# }
1560181192527:} ## end loop over VARIABLES
1560181192791:write_params_ctsm <-
1560181192792:function(defaults = system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM'),
1560181192793:trait.values,
1560181192794:settings,
1560181192795:run.id) {
1560181192796:.libPaths("~/R_libs/") #delete
1560181192797:library(PEcAn.CTSM) #delete
1560181192798:trait.values <- list(c4_grass = list(sla = 0.03, c2n_leaf = 35, stom_slope = 10, fineroot2leaf = 2, vcmax = 50)) #delete
1560181192799:## Copy and open default parameter files
1560181192799:ctsm.param.default <-
1560181192801:system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM')
1560181192802:if (!exists('local.rundir'))
1560181192802:local.rundir <- tempdir()
1560181192803:if (!exists('run.id'))
1560181192804:run.id <- 1
1560181192805:ctsm.param.file <-
1560181192806:file.path(local.rundir, paste0("ctsm_params.", run.id, ".nc"))
1560181192807:file.copy(ctsm.param.default, ctsm.param.file)
1560181192808:ctsm.param.nc <- ncdf4::nc_open(ctsm.param.file, write = TRUE)
1560181192810:## Loop over PFTS
1560181192811:npft <- length(trait.values)
1560181192812:PEcAn.logger::logger.debug('there are ',
1560181192813:npft,
1560181192815:'PFTs in this run, they are named:',
1560181192816:names(trait.values))
1560181192817:ctsm_pftnames <-
1560181192818:stringr::str_trim(tolower(ncdf4::ncvar_get(ctsm.param.nc, "pftname")))
1560181192819:i <- 1 #delete
1560181192820:#for (i in seq_len(npft)) {
1560181192821:pft.name <- names(trait.values)[i]
1560181192822:if (is.null(pft.name) | is.na(pft.name)) {
1560181192823:PEcAn.logger::logger.error("pft.name missing")
1560181192824:} else {
1560181192825:PEcAn.logger::logger.info(paste("PFT =", pft.name))
1560181192826:PEcAn.logger::logger.debug(paste0("ctsm PFT number: ", which(ctsm_pftnames == pft.name)))
1560181192827:}
1560181192828:if (pft.name == 'env')
1560181192829:next   ## HACK, need to remove env from default
1560181192832:## Match PFT name to COLUMN
1560181192833:ipft <- match(tolower(pft.name), ctsm_pftnames)
1560181192834:PEcAn.logger::logger.debug(paste0("CTSM pft index number: ", ipft))
1560181192836:if (is.na(ipft)) {
1560181192837:PEcAn.logger::logger.severe(
1560181192838:paste(
1560181192839:"Unmatched PFT",
1560181192841:pft.name,
1560181192842:"in CTSM PEcAn does not yet support non-default PFTs for this model"
1560181192843:)
1560181192844:)
1560181192845:}
1560181192847:## Special variables used in conversions
1560181192849:leafC <- 0.48
1560181192850:fnr <- 7.16 #mass ratio of total Rubisco molecular mass to nitrogen in Rubisco (g Rubisco g-1 N in Rubisco)
1560181192851:ar <- 60 #specific activity of Rubisco (µmol CO2 g-1 Rubisco s-1)
1560181192852:sla_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop") #delete
1560181192853:c2n_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn") #delete
1560181192855:sto_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "mbbopt") #delete
1560181192856:frl_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "froot_leaf") #delete
1560181192857:flnr_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "flnr") #delete
1560181192859:## Loop over VARIABLES
1560181192860:pft.trait.values <- trait.values[[i]]
1560181192862:for (v in seq_along(pft.trait.values)) {
1560181192863:var <- names(pft.trait.values)[v]
1560181192865:### ----- Leaf physiological parameters
1560181192867:update_vars <- function(nc, varid, vals, start = ipft, count = 1){
1560181192868:ncdf4::ncvar_put(nc, varid, vals)
1560181192869:}
1560181192872:if (var == "c2n_leaf") {
1560181192873:update_vars(ctsm.param.nc, "leafcn", vals = pft.trait.values[v])
1560181192874:}
1560181192877:#if(var == "sla") {update_vars(ctsm.param.nc, "slatop", udunits2::ud.convert(pft.trait.values[v], "m2 kg-1", "m2 g-1") / leafC)}
1560181192878:#update_vars("stom_slope", "mbbopt", vals = pft.trait.values[v])
1560181192879:#update_vars("fineroot2leaf", "froot_leaf", pft.trait.values[v])
1560181192881:#update_vars("vcmax", "flnr", as.numeric(pft.trait.values[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar))
1560181192883:# if (var == "sla") {
1560181192884:#   ## default 0.03846
1560181192886:#   ncdf4::ncvar_put(
1560181192887:#     nc = ctsm.param.nc,
1560181192888:#     varid = "slatop",
1560181192890:#     start = ipft,
1560181192891:#     count = 1,
1560181192892:#     vals = udunits2::ud.convert(pft.trait.values[v], "m2 kg-1", "m2 g-1") / leafC
1560181192894:#   )
1560181192895:# }
1560181192896:# if (var == "c2n_leaf"){
1560181192898:#   ## default 35.36068
1560181192899:#   ncdf4::ncvar_put(
1560181192900:#     nc = ctsm.param.nc,
1560181192902:#     varid = "leafcn",
1560181192903:#     start = ipft,
1560181192904:#     count = 1,
1560181192906:#     vals = pft.trait.values[v]
1560181192907:#   )
1560181192908:# }
1560181192910:# if (var == "stom_slope"){
1560181192912:#   ## default 9.757532
1560181192913:#   ncdf4::ncvar_put(
1560181192914:#     nc = ctsm.param.nc,
1560181192916:#     varid = "mbbopt",
1560181192917:#     start = ipft,
1560181192918:#     count = 1,
1560181192920:#     vals = pft.trait.values[v]
1560181192921:#   )
1560181192922:# }
1560181192924:# if (var == "fineroot2leaf"){
1560181192925:#   ## default 1.5
1560181192926:#   ncdf4::ncvar_put(
1560181192928:#     nc = ctsm.param.nc,
1560181192929:#     varid = "froot_leaf",
1560181192931:#     start = ipft,
1560181192932:#     count = 1,
1560181192933:#     vals = pft.trait.values[v]
1560181192935:#   )
1560181192936:# }
1560181192938:# if (var == "vcmax"){
1560181192939:#   ## default 0.09
1560181192940:#   ncdf4::ncvar_put(
1560181192942:#     nc = ctsm.param.nc,
1560181192943:#     varid = "flnr",
1560181192944:#     start = ipft,
1560181192946:#     count = 1,
1560181192947:#     vals = as.numeric(pft.trait.values[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar)
1560181192949:#   )
1560181192950:# }
1560181192951:} ## end loop over VARIABLES
1560181192953:} ## end loop over PFTs
1560181193761:function (nc, varid = NA, vals = NULL, start = NA, count = NA,
1560181193763:verbose = FALSE)
1560181257986:.libPaths("~/R_libs/") #delete
1560181258545:library(PEcAn.CTSM) #delete
1560181258606:trait.values <- list(c4_grass = list(sla = 0.03, c2n_leaf = 35, stom_slope = 10, fineroot2leaf = 2, vcmax = 50)) #delete
1560181258608:## Copy and open default parameter files
1560181258610:ctsm.param.default <-
1560181258611:system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM')
1560181258619:if (!exists('local.rundir'))
1560181258669:local.rundir <- tempdir()
1560181258805:if (!exists('run.id'))
1560181259026:run.id <- 1
1560181259863:ctsm.param.file <-
1560181259865:file.path(local.rundir, paste0("ctsm_params.", run.id, ".nc"))
1560181259879:file.copy(ctsm.param.default, ctsm.param.file)
1560181259909:ctsm.param.nc <- ncdf4::nc_open(ctsm.param.file, write = TRUE)
1560181260092:## Loop over PFTS
1560181260093:npft <- length(trait.values)
1560181260095:PEcAn.logger::logger.debug('there are ',
1560181260096:npft,
1560181260097:'PFTs in this run, they are named:',
1560181260098:names(trait.values))
1560181260502:ctsm_pftnames <-
1560181260504:stringr::str_trim(tolower(ncdf4::ncvar_get(ctsm.param.nc, "pftname")))
1560181260790:i <- 1 #delete
1560181260799:#for (i in seq_len(npft)) {
1560181260800:pft.name <- names(trait.values)[i]
1560181261002:if (is.null(pft.name) | is.na(pft.name)) {
1560181261004:PEcAn.logger::logger.error("pft.name missing")
1560181261005:} else {
1560181261006:PEcAn.logger::logger.info(paste("PFT =", pft.name))
1560181261006:PEcAn.logger::logger.debug(paste0("ctsm PFT number: ", which(ctsm_pftnames == pft.name)))
1560181261007:}
1560181261100:if (pft.name == 'env')
1560181261284:next   ## HACK, need to remove env from default
1560181261507:## Match PFT name to COLUMN
1560181261509:ipft <- match(tolower(pft.name), ctsm_pftnames)
1560181261690:PEcAn.logger::logger.debug(paste0("CTSM pft index number: ", ipft))
1560181261872:if (is.na(ipft)) {
1560181261874:PEcAn.logger::logger.severe(
1560181261875:paste(
1560181261877:"Unmatched PFT",
1560181261878:pft.name,
1560181261880:"in CTSM PEcAn does not yet support non-default PFTs for this model"
1560181261882:)
1560181261883:)
1560181261885:}
1560181262625:## Special variables used in conversions
1560181262626:leafC <- 0.48
1560181262951:fnr <- 7.16 #mass ratio of total Rubisco molecular mass to nitrogen in Rubisco (g Rubisco g-1 N in Rubisco)
1560181263252:ar <- 60 #specific activity of Rubisco (µmol CO2 g-1 Rubisco s-1)
1560181263426:sla_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop") #delete
1560181263573:c2n_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn") #delete
1560181263689:sto_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "mbbopt") #delete
1560181263846:frl_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "froot_leaf") #delete
1560181263922:flnr_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "flnr") #delete
1560181264216:## Loop over VARIABLES
1560181264218:pft.trait.values <- trait.values[[i]]
1560181264730:for (v in seq_along(pft.trait.values)) {
1560181264731:var <- names(pft.trait.values)[v]
1560181264734:### ----- Leaf physiological parameters
1560181264736:update_vars <- function(nc, varid, vals, start = ipft, count = 1){
1560181264737:ncdf4::ncvar_put(nc, varid, vals)
1560181264739:}
1560181264741:if (var == "c2n_leaf") {
1560181264742:update_vars(ctsm.param.nc, "leafcn", vals = pft.trait.values[v])
1560181264743:}
1560181264746:#if(var == "sla") {update_vars(ctsm.param.nc, "slatop", udunits2::ud.convert(pft.trait.values[v], "m2 kg-1", "m2 g-1") / leafC)}
1560181264747:#update_vars("stom_slope", "mbbopt", vals = pft.trait.values[v])
1560181264748:#update_vars("fineroot2leaf", "froot_leaf", pft.trait.values[v])
1560181264749:#update_vars("vcmax", "flnr", as.numeric(pft.trait.values[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar))
1560181264751:# if (var == "sla") {
1560181264752:#   ## default 0.03846
1560181264753:#   ncdf4::ncvar_put(
1560181264754:#     nc = ctsm.param.nc,
1560181264755:#     varid = "slatop",
1560181264756:#     start = ipft,
1560181264757:#     count = 1,
1560181264758:#     vals = udunits2::ud.convert(pft.trait.values[v], "m2 kg-1", "m2 g-1") / leafC
1560181264759:#   )
1560181264760:# }
1560181264761:# if (var == "c2n_leaf"){
1560181264762:#   ## default 35.36068
1560181264764:#   ncdf4::ncvar_put(
1560181264765:#     nc = ctsm.param.nc,
1560181264766:#     varid = "leafcn",
1560181264767:#     start = ipft,
1560181264768:#     count = 1,
1560181264769:#     vals = pft.trait.values[v]
1560181264770:#   )
1560181264771:# }
1560181264772:# if (var == "stom_slope"){
1560181264773:#   ## default 9.757532
1560181264774:#   ncdf4::ncvar_put(
1560181264775:#     nc = ctsm.param.nc,
1560181264776:#     varid = "mbbopt",
1560181264777:#     start = ipft,
1560181264779:#     count = 1,
1560181264780:#     vals = pft.trait.values[v]
1560181264781:#   )
1560181264782:# }
1560181264783:# if (var == "fineroot2leaf"){
1560181264784:#   ## default 1.5
1560181264785:#   ncdf4::ncvar_put(
1560181264786:#     nc = ctsm.param.nc,
1560181264787:#     varid = "froot_leaf",
1560181264788:#     start = ipft,
1560181264789:#     count = 1,
1560181264790:#     vals = pft.trait.values[v]
1560181264791:#   )
1560181264792:# }
1560181264793:# if (var == "vcmax"){
1560181264795:#   ## default 0.09
1560181264796:#   ncdf4::ncvar_put(
1560181264797:#     nc = ctsm.param.nc,
1560181264798:#     varid = "flnr",
1560181264799:#     start = ipft,
1560181264800:#     count = 1,
1560181264801:#     vals = as.numeric(pft.trait.values[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar)
1560181264802:#   )
1560181264803:# }
1560181264804:} ## end loop over VARIABLES
1560181329458:.libPaths("~/R_libs/") #delete
1560181329462:library(PEcAn.CTSM) #delete
1560181329555:trait.values <- list(c4_grass = list(sla = 0.03, c2n_leaf = 35, stom_slope = 10, fineroot2leaf = 2, vcmax = 50)) #delete
1560181329556:## Copy and open default parameter files
1560181329557:ctsm.param.default <-
1560181329558:system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM')
1560181329560:if (!exists('local.rundir'))
1560181329561:local.rundir <- tempdir()
1560181329562:if (!exists('run.id'))
1560181329563:run.id <- 1
1560181329564:ctsm.param.file <-
1560181329565:file.path(local.rundir, paste0("ctsm_params.", run.id, ".nc"))
1560181329566:file.copy(ctsm.param.default, ctsm.param.file)
1560181329569:ctsm.param.nc <- ncdf4::nc_open(ctsm.param.file, write = TRUE)
1560181329746:## Loop over PFTS
1560181329747:npft <- length(trait.values)
1560181329748:PEcAn.logger::logger.debug('there are ',
1560181329749:npft,
1560181329750:'PFTs in this run, they are named:',
1560181329751:names(trait.values))
1560181329755:ctsm_pftnames <-
1560181329756:stringr::str_trim(tolower(ncdf4::ncvar_get(ctsm.param.nc, "pftname")))
1560181329778:i <- 1 #delete
1560181329779:#for (i in seq_len(npft)) {
1560181329780:pft.name <- names(trait.values)[i]
1560181329782:if (is.null(pft.name) | is.na(pft.name)) {
1560181329782:PEcAn.logger::logger.error("pft.name missing")
1560181329783:} else {
1560181329784:PEcAn.logger::logger.info(paste("PFT =", pft.name))
1560181329785:PEcAn.logger::logger.debug(paste0("ctsm PFT number: ", which(ctsm_pftnames == pft.name)))
1560181329786:}
1560181329789:if (pft.name == 'env')
1560181329790:next   ## HACK, need to remove env from default
1560181329792:## Match PFT name to COLUMN
1560181329793:ipft <- match(tolower(pft.name), ctsm_pftnames)
1560181329794:PEcAn.logger::logger.debug(paste0("CTSM pft index number: ", ipft))
1560181329797:if (is.na(ipft)) {
1560181329798:PEcAn.logger::logger.severe(
1560181329799:paste(
1560181329800:"Unmatched PFT",
1560181329800:pft.name,
1560181329801:"in CTSM PEcAn does not yet support non-default PFTs for this model"
1560181329802:)
1560181329803:)
1560181329804:}
1560181329806:## Special variables used in conversions
1560181329807:leafC <- 0.48
1560181329808:fnr <- 7.16 #mass ratio of total Rubisco molecular mass to nitrogen in Rubisco (g Rubisco g-1 N in Rubisco)
1560181329809:ar <- 60 #specific activity of Rubisco (µmol CO2 g-1 Rubisco s-1)
1560181329810:sla_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop") #delete
1560181329813:c2n_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn") #delete
1560181329820:sto_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "mbbopt") #delete
1560181329823:frl_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "froot_leaf") #delete
1560181329826:flnr_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "flnr") #delete
1560181329829:## Loop over VARIABLES
1560181329830:pft.trait.values <- trait.values[[i]]
1560181329831:for (v in seq_along(pft.trait.values)) {
1560181329832:var <- names(pft.trait.values)[v]
1560181339436:### ----- Leaf physiological parameters
1560181339437:update_vars <- function(nc, varid, vals){
1560181339438:ncdf4::ncvar_put(nc, varid, vals)
1560181339439:}
1560181341945:if (var == "c2n_leaf") {
1560181341947:update_vars(ctsm.param.nc, "leafcn", vals = pft.trait.values[v], start = ipft, count = 1)
1560181341948:}
1560181344023:# if (var == "vcmax"){
1560181344024:#   ## default 0.09
1560181344025:#   ncdf4::ncvar_put(
1560181344026:#     nc = ctsm.param.nc,
1560181344027:#     varid = "flnr",
1560181344028:#     start = ipft,
1560181344029:#     count = 1,
1560181344031:#     vals = as.numeric(pft.trait.values[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar)
1560181344032:#   )
1560181344033:# }
1560181344034:} ## end loop over VARIABLES
1560181384677:.libPaths("~/R_libs/") #delete
1560181385227:library(PEcAn.CTSM) #delete
1560181386810:trait.values <- list(c4_grass = list(sla = 0.03, c2n_leaf = 35, stom_slope = 10, fineroot2leaf = 2, vcmax = 50)) #delete
1560181386990:## Copy and open default parameter files
1560181386992:ctsm.param.default <-
1560181386993:system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM')
1560181387150:if (!exists('local.rundir'))
1560181387241:local.rundir <- tempdir()
1560181387428:if (!exists('run.id'))
1560181387542:run.id <- 1
1560181387694:ctsm.param.file <-
1560181387696:file.path(local.rundir, paste0("ctsm_params.", run.id, ".nc"))
1560181387773:file.copy(ctsm.param.default, ctsm.param.file)
1560181387963:ctsm.param.nc <- ncdf4::nc_open(ctsm.param.file, write = TRUE)
1560181388142:## Loop over PFTS
1560181388143:npft <- length(trait.values)
1560181388230:PEcAn.logger::logger.debug('there are ',
1560181388232:npft,
1560181388233:'PFTs in this run, they are named:',
1560181388234:names(trait.values))
1560181388306:ctsm_pftnames <-
1560181388307:stringr::str_trim(tolower(ncdf4::ncvar_get(ctsm.param.nc, "pftname")))
1560181388581:i <- 1 #delete
1560181388658:#for (i in seq_len(npft)) {
1560181388659:pft.name <- names(trait.values)[i]
1560181389006:if (is.null(pft.name) | is.na(pft.name)) {
1560181389007:PEcAn.logger::logger.error("pft.name missing")
1560181389009:} else {
1560181389011:PEcAn.logger::logger.info(paste("PFT =", pft.name))
1560181389012:PEcAn.logger::logger.debug(paste0("ctsm PFT number: ", which(ctsm_pftnames == pft.name)))
1560181389014:}
1560181389160:if (pft.name == 'env')
1560181389343:next   ## HACK, need to remove env from default
1560181389438:## Match PFT name to COLUMN
1560181389439:ipft <- match(tolower(pft.name), ctsm_pftnames)
1560181390068:PEcAn.logger::logger.debug(paste0("CTSM pft index number: ", ipft))
1560181390411:if (is.na(ipft)) {
1560181390413:PEcAn.logger::logger.severe(
1560181390414:paste(
1560181390416:"Unmatched PFT",
1560181390418:pft.name,
1560181390420:"in CTSM PEcAn does not yet support non-default PFTs for this model"
1560181390421:)
1560181390423:)
1560181390424:}
1560181390852:## Special variables used in conversions
1560181390854:leafC <- 0.48
1560181391085:fnr <- 7.16 #mass ratio of total Rubisco molecular mass to nitrogen in Rubisco (g Rubisco g-1 N in Rubisco)
1560181391231:ar <- 60 #specific activity of Rubisco (µmol CO2 g-1 Rubisco s-1)
1560181391420:sla_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop") #delete
1560181391513:c2n_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn") #delete
1560181391719:sto_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "mbbopt") #delete
1560181391783:frl_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "froot_leaf") #delete
1560181392037:flnr_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "flnr") #delete
1560181392598:## Loop over VARIABLES
1560181392600:pft.trait.values <- trait.values[[i]]
1560181394210:for (v in seq_along(pft.trait.values)) {
1560181394212:var <- names(pft.trait.values)[v]
1560181394214:### ----- Leaf physiological parameters
1560181394216:update_vars <- function(nc, varid, vals, start, count){
1560181394217:ncdf4::ncvar_put(nc, varid, vals, start, count)
1560181394219:}
1560181394221:if (var == "c2n_leaf") {
1560181394222:update_vars(ctsm.param.nc, "leafcn", vals = pft.trait.values[v], ipft, 1)
1560181394223:}
1560181394225:#if(var == "sla") {update_vars(ctsm.param.nc, "slatop", udunits2::ud.convert(pft.trait.values[v], "m2 kg-1", "m2 g-1") / leafC)}
1560181394227:#update_vars("stom_slope", "mbbopt", vals = pft.trait.values[v])
1560181394228:#update_vars("fineroot2leaf", "froot_leaf", pft.trait.values[v])
1560181394229:#update_vars("vcmax", "flnr", as.numeric(pft.trait.values[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar))
1560181394231:# if (var == "sla") {
1560181394232:#   ## default 0.03846
1560181394233:#   ncdf4::ncvar_put(
1560181394235:#     nc = ctsm.param.nc,
1560181394236:#     varid = "slatop",
1560181394237:#     start = ipft,
1560181394238:#     count = 1,
1560181394239:#     vals = udunits2::ud.convert(pft.trait.values[v], "m2 kg-1", "m2 g-1") / leafC
1560181394240:#   )
1560181394241:# }
1560181394242:# if (var == "c2n_leaf"){
1560181394244:#   ## default 35.36068
1560181394245:#   ncdf4::ncvar_put(
1560181394246:#     nc = ctsm.param.nc,
1560181394247:#     varid = "leafcn",
1560181394248:#     start = ipft,
1560181394249:#     count = 1,
1560181394251:#     vals = pft.trait.values[v]
1560181394252:#   )
1560181394253:# }
1560181394254:# if (var == "stom_slope"){
1560181394255:#   ## default 9.757532
1560181394256:#   ncdf4::ncvar_put(
1560181394257:#     nc = ctsm.param.nc,
1560181394258:#     varid = "mbbopt",
1560181394260:#     start = ipft,
1560181394261:#     count = 1,
1560181394262:#     vals = pft.trait.values[v]
1560181394263:#   )
1560181394264:# }
1560181394265:# if (var == "fineroot2leaf"){
1560181394266:#   ## default 1.5
1560181394267:#   ncdf4::ncvar_put(
1560181394268:#     nc = ctsm.param.nc,
1560181394270:#     varid = "froot_leaf",
1560181394271:#     start = ipft,
1560181394272:#     count = 1,
1560181394273:#     vals = pft.trait.values[v]
1560181394274:#   )
1560181394275:# }
1560181394277:# if (var == "vcmax"){
1560181394278:#   ## default 0.09
1560181394279:#   ncdf4::ncvar_put(
1560181394280:#     nc = ctsm.param.nc,
1560181394282:#     varid = "flnr",
1560181394283:#     start = ipft,
1560181394284:#     count = 1,
1560181394285:#     vals = as.numeric(pft.trait.values[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar)
1560181394287:#   )
1560181394288:# }
1560181394289:} ## end loop over VARIABLES
1560182244022:.libPaths("~/R_libs/") #delete
1560182244026:library(PEcAn.CTSM) #delete
1560182244117:trait.values <- list(c4_grass = list(sla = 0.03, c2n_leaf = 35, stom_slope = 10, fineroot2leaf = 2, vcmax = 50)) #delete
1560182244119:## Copy and open default parameter files
1560182244120:ctsm.param.default <-
1560182244121:system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM')
1560182244123:if (!exists('local.rundir'))
1560182244124:local.rundir <- tempdir()
1560182244125:if (!exists('run.id'))
1560182244126:run.id <- 1
1560182244127:ctsm.param.file <-
1560182244128:file.path(local.rundir, paste0("ctsm_params.", run.id, ".nc"))
1560182244130:file.copy(ctsm.param.default, ctsm.param.file)
1560182244133:ctsm.param.nc <- ncdf4::nc_open(ctsm.param.file, write = TRUE)
1560182244304:## Loop over PFTS
1560182244305:npft <- length(trait.values)
1560182244306:PEcAn.logger::logger.debug('there are ',
1560182244307:npft,
1560182244308:'PFTs in this run, they are named:',
1560182244309:names(trait.values))
1560182244313:ctsm_pftnames <-
1560182244314:stringr::str_trim(tolower(ncdf4::ncvar_get(ctsm.param.nc, "pftname")))
1560182244336:i <- 1 #delete
1560182244338:#for (i in seq_len(npft)) {
1560182244339:pft.name <- names(trait.values)[i]
1560182244340:if (is.null(pft.name) | is.na(pft.name)) {
1560182244341:PEcAn.logger::logger.error("pft.name missing")
1560182244342:} else {
1560182244343:PEcAn.logger::logger.info(paste("PFT =", pft.name))
1560182244344:PEcAn.logger::logger.debug(paste0("ctsm PFT number: ", which(ctsm_pftnames == pft.name)))
1560182244345:}
1560182244348:if (pft.name == 'env')
1560182244349:next   ## HACK, need to remove env from default
1560182244351:## Match PFT name to COLUMN
1560182244352:ipft <- match(tolower(pft.name), ctsm_pftnames)
1560182244353:PEcAn.logger::logger.debug(paste0("CTSM pft index number: ", ipft))
1560182244356:if (is.na(ipft)) {
1560182244357:PEcAn.logger::logger.severe(
1560182244358:paste(
1560182244359:"Unmatched PFT",
1560182244360:pft.name,
1560182244361:"in CTSM PEcAn does not yet support non-default PFTs for this model"
1560182244362:)
1560182244363:)
1560182244364:}
1560182244366:## Special variables used in conversions
1560182244367:leafC <- 0.48
1560182244368:fnr <- 7.16 #mass ratio of total Rubisco molecular mass to nitrogen in Rubisco (g Rubisco g-1 N in Rubisco)
1560182244369:ar <- 60 #specific activity of Rubisco (µmol CO2 g-1 Rubisco s-1)
1560182244371:sla_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop") #delete
1560182244374:c2n_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn") #delete
1560182244380:sto_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "mbbopt") #delete
1560182244383:frl_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "froot_leaf") #delete
1560182244386:flnr_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "flnr") #delete
1560182244390:## Loop over VARIABLES
1560182244391:pft.trait.values <- trait.values[[i]]
1560182253022:for (v in seq_along(pft.trait.values)) {
1560182253023:var <- names(pft.trait.values)[v]
1560182253025:### ----- Leaf physiological parameters
1560182253026:update_vars <- function(nc, varid, vals, start = ipft, count = 1){
1560182253027:ncdf4::ncvar_put(nc, varid, vals, start, count)
1560182253028:}
1560182253030:if (var == "c2n_leaf") {
1560182253031:update_vars(ctsm.param.nc, "leafcn", pft.trait.values[v])
1560182253032:}
1560182253035:#if(var == "sla") {update_vars(ctsm.param.nc, "slatop", udunits2::ud.convert(pft.trait.values[v], "m2 kg-1", "m2 g-1") / leafC)}
1560182253036:#update_vars("stom_slope", "mbbopt", vals = pft.trait.values[v])
1560182253037:#update_vars("fineroot2leaf", "froot_leaf", pft.trait.values[v])
1560182253038:#update_vars("vcmax", "flnr", as.numeric(pft.trait.values[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar))
1560182253040:# if (var == "sla") {
1560182253041:#   ## default 0.03846
1560182253042:#   ncdf4::ncvar_put(
1560182253043:#     nc = ctsm.param.nc,
1560182253044:#     varid = "slatop",
1560182253045:#     start = ipft,
1560182253046:#     count = 1,
1560182253047:#     vals = udunits2::ud.convert(pft.trait.values[v], "m2 kg-1", "m2 g-1") / leafC
1560182253049:#   )
1560182253050:# }
1560182253051:# if (var == "c2n_leaf"){
1560182253052:#   ## default 35.36068
1560182253053:#   ncdf4::ncvar_put(
1560182253054:#     nc = ctsm.param.nc,
1560182253055:#     varid = "leafcn",
1560182253056:#     start = ipft,
1560182253057:#     count = 1,
1560182253058:#     vals = pft.trait.values[v]
1560182253059:#   )
1560182253060:# }
1560182253061:# if (var == "stom_slope"){
1560182253062:#   ## default 9.757532
1560182253063:#   ncdf4::ncvar_put(
1560182253065:#     nc = ctsm.param.nc,
1560182253066:#     varid = "mbbopt",
1560182253067:#     start = ipft,
1560182253068:#     count = 1,
1560182253069:#     vals = pft.trait.values[v]
1560182253070:#   )
1560182253071:# }
1560182253073:# if (var == "fineroot2leaf"){
1560182253074:#   ## default 1.5
1560182253075:#   ncdf4::ncvar_put(
1560182253076:#     nc = ctsm.param.nc,
1560182253077:#     varid = "froot_leaf",
1560182253078:#     start = ipft,
1560182253079:#     count = 1,
1560182253080:#     vals = pft.trait.values[v]
1560182253081:#   )
1560182253083:# }
1560182253084:# if (var == "vcmax"){
1560182253085:#   ## default 0.09
1560182253086:#   ncdf4::ncvar_put(
1560182253087:#     nc = ctsm.param.nc,
1560182253088:#     varid = "flnr",
1560182253089:#     start = ipft,
1560182253090:#     count = 1,
1560182253091:#     vals = as.numeric(pft.trait.values[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar)
1560182253092:#   )
1560182253094:# }
1560182253095:} ## end loop over VARIABLES
1560182288814:sla_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")
1560182288822:c2n_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")
1560182288827:sto_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "mbbopt")
1560182288830:frl_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "froot_leaf")
1560182288833:flnr_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "flnr")
1560182288836:sla_old[15]
1560182288838:sla_new[15]
1560182288840:c2n_old[15]
1560182288841:c2n_new[15]
1560182288843:sto_old[15]
1560182288844:sto_new[15]
1560182288846:frl_old[15]
1560182288847:frl_new[15]
1560182288849:flnr_old[15]
1560182288850:flnr_new[15]
1560182387093:.libPaths("~/R_libs/") #delete
1560182387680:library(PEcAn.CTSM) #delete
1560182387739:trait.values <- list(c4_grass = list(sla = 0.03, c2n_leaf = 35, stom_slope = 10, fineroot2leaf = 2, vcmax = 50)) #delete
1560182387741:## Copy and open default parameter files
1560182387742:ctsm.param.default <-
1560182387743:system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM')
1560182387751:if (!exists('local.rundir'))
1560182387752:local.rundir <- tempdir()
1560182387909:if (!exists('run.id'))
1560182388171:run.id <- 1
1560182389200:ctsm.param.file <-
1560182389201:file.path(local.rundir, paste0("ctsm_params.", run.id, ".nc"))
1560182389207:file.copy(ctsm.param.default, ctsm.param.file)
1560182389217:ctsm.param.nc <- ncdf4::nc_open(ctsm.param.file, write = TRUE)
1560182389400:## Loop over PFTS
1560182389401:npft <- length(trait.values)
1560182390185:PEcAn.logger::logger.debug('there are ',
1560182390186:npft,
1560182390188:'PFTs in this run, they are named:',
1560182390189:names(trait.values))
1560182390355:ctsm_pftnames <-
1560182390356:stringr::str_trim(tolower(ncdf4::ncvar_get(ctsm.param.nc, "pftname")))
1560182390439:i <- 1 #delete
1560182390603:#for (i in seq_len(npft)) {
1560182390605:pft.name <- names(trait.values)[i]
1560182390783:if (is.null(pft.name) | is.na(pft.name)) {
1560182390784:PEcAn.logger::logger.error("pft.name missing")
1560182390785:} else {
1560182390786:PEcAn.logger::logger.info(paste("PFT =", pft.name))
1560182390788:PEcAn.logger::logger.debug(paste0("ctsm PFT number: ", which(ctsm_pftnames == pft.name)))
1560182390790:}
1560182390871:if (pft.name == 'env')
1560182391041:next   ## HACK, need to remove env from default
1560182391521:## Match PFT name to COLUMN
1560182391522:ipft <- match(tolower(pft.name), ctsm_pftnames)
1560182391809:PEcAn.logger::logger.debug(paste0("CTSM pft index number: ", ipft))
1560182391984:if (is.na(ipft)) {
1560182391986:PEcAn.logger::logger.severe(
1560182391987:paste(
1560182391988:"Unmatched PFT",
1560182391989:pft.name,
1560182391991:"in CTSM PEcAn does not yet support non-default PFTs for this model"
1560182391992:)
1560182391993:)
1560182391995:}
1560182392152:## Special variables used in conversions
1560182392154:leafC <- 0.48
1560182392624:fnr <- 7.16 #mass ratio of total Rubisco molecular mass to nitrogen in Rubisco (g Rubisco g-1 N in Rubisco)
1560182392827:ar <- 60 #specific activity of Rubisco (µmol CO2 g-1 Rubisco s-1)
1560182392993:sla_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop") #delete
1560182393142:c2n_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn") #delete
1560182393341:sto_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "mbbopt") #delete
1560182393432:frl_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "froot_leaf") #delete
1560182393582:flnr_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "flnr") #delete
1560182393994:## Loop over VARIABLES
1560182393995:pft.trait.values <- trait.values[[i]]
1560182394509:for (v in seq_along(pft.trait.values)) {
1560182394510:var <- names(pft.trait.values)[v]
1560182394512:### ----- Leaf physiological parameters
1560182394513:update_vars <- function(nc, varid, vals, start = ipft, count = 1){
1560182394514:ncdf4::ncvar_put(nc, varid, vals, start, count)
1560182394515:}
1560182394517:if (var == "c2n_leaf") {update_vars(ctsm.param.nc, "leafcn", pft.trait.values[v])}
1560182394519:#if(var == "sla") {update_vars(ctsm.param.nc, "slatop", udunits2::ud.convert(pft.trait.values[v], "m2 kg-1", "m2 g-1") / leafC)}
1560182394520:#update_vars("stom_slope", "mbbopt", vals = pft.trait.values[v])
1560182394521:#update_vars("fineroot2leaf", "froot_leaf", pft.trait.values[v])
1560182394522:#update_vars("vcmax", "flnr", as.numeric(pft.trait.values[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar))
1560182394524:# if (var == "sla") {
1560182394525:#   ## default 0.03846
1560182394527:#   ncdf4::ncvar_put(
1560182394528:#     nc = ctsm.param.nc,
1560182394529:#     varid = "slatop",
1560182394530:#     start = ipft,
1560182394531:#     count = 1,
1560182394532:#     vals = udunits2::ud.convert(pft.trait.values[v], "m2 kg-1", "m2 g-1") / leafC
1560182394533:#   )
1560182394534:# }
1560182394535:# if (var == "c2n_leaf"){
1560182394536:#   ## default 35.36068
1560182394537:#   ncdf4::ncvar_put(
1560182394538:#     nc = ctsm.param.nc,
1560182394539:#     varid = "leafcn",
1560182394540:#     start = ipft,
1560182394541:#     count = 1,
1560182394542:#     vals = pft.trait.values[v]
1560182394543:#   )
1560182394544:# }
1560182394545:# if (var == "stom_slope"){
1560182394547:#   ## default 9.757532
1560182394548:#   ncdf4::ncvar_put(
1560182394549:#     nc = ctsm.param.nc,
1560182394550:#     varid = "mbbopt",
1560182394551:#     start = ipft,
1560182394552:#     count = 1,
1560182394553:#     vals = pft.trait.values[v]
1560182394554:#   )
1560182394555:# }
1560182394556:# if (var == "fineroot2leaf"){
1560182394557:#   ## default 1.5
1560182394558:#   ncdf4::ncvar_put(
1560182394559:#     nc = ctsm.param.nc,
1560182394560:#     varid = "froot_leaf",
1560182394561:#     start = ipft,
1560182394562:#     count = 1,
1560182394563:#     vals = pft.trait.values[v]
1560182394564:#   )
1560182394565:# }
1560182394566:# if (var == "vcmax"){
1560182394568:#   ## default 0.09
1560182394569:#   ncdf4::ncvar_put(
1560182394570:#     nc = ctsm.param.nc,
1560182394571:#     varid = "flnr",
1560182394572:#     start = ipft,
1560182394573:#     count = 1,
1560182394574:#     vals = as.numeric(pft.trait.values[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar)
1560182394575:#   )
1560182394576:# }
1560182394577:} ## end loop over VARIABLES
1560182400382:sla_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")
1560182400385:c2n_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")
1560182400445:sto_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "mbbopt")
1560182400448:frl_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "froot_leaf")
1560182400451:flnr_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "flnr")
1560182400454:sla_old[15]
1560182400456:sla_new[15]
1560182400457:c2n_old[15]
1560182400459:c2n_new[15]
1560182400460:sto_old[15]
1560182400462:sto_new[15]
1560182400463:frl_old[15]
1560182400464:frl_new[15]
1560182400466:flnr_old[15]
1560182400467:flnr_new[15]
1560182447330:.libPaths("~/R_libs/") #delete
1560182447904:library(PEcAn.CTSM) #delete
1560182447965:trait.values <- list(c4_grass = list(sla = 0.03, c2n_leaf = 35, stom_slope = 10, fineroot2leaf = 2, vcmax = 50)) #delete
1560182447969:## Copy and open default parameter files
1560182447970:ctsm.param.default <-
1560182447972:system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM')
1560182448086:if (!exists('local.rundir'))
1560182448185:local.rundir <- tempdir()
1560182448416:if (!exists('run.id'))
1560182449466:run.id <- 1
1560182449502:ctsm.param.file <-
1560182449503:file.path(local.rundir, paste0("ctsm_params.", run.id, ".nc"))
1560182449507:file.copy(ctsm.param.default, ctsm.param.file)
1560182449530:ctsm.param.nc <- ncdf4::nc_open(ctsm.param.file, write = TRUE)
1560182449704:## Loop over PFTS
1560182449705:npft <- length(trait.values)
1560182450385:PEcAn.logger::logger.debug('there are ',
1560182450387:npft,
1560182450388:'PFTs in this run, they are named:',
1560182450388:names(trait.values))
1560182450574:ctsm_pftnames <-
1560182450575:stringr::str_trim(tolower(ncdf4::ncvar_get(ctsm.param.nc, "pftname")))
1560182450759:i <- 1 #delete
1560182450900:#for (i in seq_len(npft)) {
1560182450901:pft.name <- names(trait.values)[i]
1560182451016:if (is.null(pft.name) | is.na(pft.name)) {
1560182451018:PEcAn.logger::logger.error("pft.name missing")
1560182451019:} else {
1560182451019:PEcAn.logger::logger.info(paste("PFT =", pft.name))
1560182451020:PEcAn.logger::logger.debug(paste0("ctsm PFT number: ", which(ctsm_pftnames == pft.name)))
1560182451021:}
1560182451186:if (pft.name == 'env')
1560182451252:next   ## HACK, need to remove env from default
1560182451415:## Match PFT name to COLUMN
1560182451416:ipft <- match(tolower(pft.name), ctsm_pftnames)
1560182451516:PEcAn.logger::logger.debug(paste0("CTSM pft index number: ", ipft))
1560182451696:if (is.na(ipft)) {
1560182451697:PEcAn.logger::logger.severe(
1560182451698:paste(
1560182451699:"Unmatched PFT",
1560182451700:pft.name,
1560182451701:"in CTSM PEcAn does not yet support non-default PFTs for this model"
1560182451702:)
1560182451703:)
1560182451704:}
1560182451994:## Special variables used in conversions
1560182451995:leafC <- 0.48
1560182452786:fnr <- 7.16 #mass ratio of total Rubisco molecular mass to nitrogen in Rubisco (g Rubisco g-1 N in Rubisco)
1560182452954:ar <- 60 #specific activity of Rubisco (µmol CO2 g-1 Rubisco s-1)
1560182453110:sla_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop") #delete
1560182453233:c2n_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn") #delete
1560182453430:sto_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "mbbopt") #delete
1560182453483:frl_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "froot_leaf") #delete
1560182453966:flnr_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "flnr") #delete
1560182454311:## Loop over VARIABLES
1560182454312:pft.trait.values <- trait.values[[i]]
1560182454748:for (v in seq_along(pft.trait.values)) {
1560182454749:var <- names(pft.trait.values)[v]
1560182454751:### ----- Leaf physiological parameters
1560182454752:update_vars <- function(nc = ctsm.param.nc, varid, vals, start = ipft, count = 1){
1560182454753:ncdf4::ncvar_put(nc, varid, vals, start, count)
1560182454754:}
1560182454756:if (var == "c2n_leaf") {update_vars("leafcn", pft.trait.values[v])}
1560182454758:#if(var == "sla") {update_vars(ctsm.param.nc, "slatop", udunits2::ud.convert(pft.trait.values[v], "m2 kg-1", "m2 g-1") / leafC)}
1560182454759:#update_vars("stom_slope", "mbbopt", vals = pft.trait.values[v])
1560182454760:#update_vars("fineroot2leaf", "froot_leaf", pft.trait.values[v])
1560182454761:#update_vars("vcmax", "flnr", as.numeric(pft.trait.values[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar))
1560182454763:# if (var == "sla") {
1560182454764:#   ## default 0.03846
1560182454765:#   ncdf4::ncvar_put(
1560182454766:#     nc = ctsm.param.nc,
1560182454767:#     varid = "slatop",
1560182454768:#     start = ipft,
1560182454769:#     count = 1,
1560182454770:#     vals = udunits2::ud.convert(pft.trait.values[v], "m2 kg-1", "m2 g-1") / leafC
1560182454771:#   )
1560182454772:# }
1560182454773:# if (var == "c2n_leaf"){
1560182454774:#   ## default 35.36068
1560182454775:#   ncdf4::ncvar_put(
1560182454776:#     nc = ctsm.param.nc,
1560182454777:#     varid = "leafcn",
1560182454778:#     start = ipft,
1560182454779:#     count = 1,
1560182454780:#     vals = pft.trait.values[v]
1560182454781:#   )
1560182454782:# }
1560182454783:# if (var == "stom_slope"){
1560182454784:#   ## default 9.757532
1560182454785:#   ncdf4::ncvar_put(
1560182454786:#     nc = ctsm.param.nc,
1560182454787:#     varid = "mbbopt",
1560182454788:#     start = ipft,
1560182454789:#     count = 1,
1560182454790:#     vals = pft.trait.values[v]
1560182454791:#   )
1560182454792:# }
1560182454793:# if (var == "fineroot2leaf"){
1560182454794:#   ## default 1.5
1560182454795:#   ncdf4::ncvar_put(
1560182454796:#     nc = ctsm.param.nc,
1560182454797:#     varid = "froot_leaf",
1560182454798:#     start = ipft,
1560182454799:#     count = 1,
1560182454800:#     vals = pft.trait.values[v]
1560182454801:#   )
1560182454802:# }
1560182454803:# if (var == "vcmax"){
1560182454804:#   ## default 0.09
1560182454805:#   ncdf4::ncvar_put(
1560182454806:#     nc = ctsm.param.nc,
1560182454807:#     varid = "flnr",
1560182454808:#     start = ipft,
1560182454809:#     count = 1,
1560182454810:#     vals = as.numeric(pft.trait.values[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar)
1560182454811:#   )
1560182454812:# }
1560182454814:} ## end loop over VARIABLES
1560182543807:.libPaths("~/R_libs/") #delete
1560182544345:library(PEcAn.CTSM) #delete
1560182544404:trait.values <- list(c4_grass = list(sla = 0.03, c2n_leaf = 35, stom_slope = 10, fineroot2leaf = 2, vcmax = 50)) #delete
1560182544406:## Copy and open default parameter files
1560182544407:ctsm.param.default <-
1560182544409:system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM')
1560182544492:if (!exists('local.rundir'))
1560182544617:local.rundir <- tempdir()
1560182544852:if (!exists('run.id'))
1560182544858:run.id <- 1
1560182545953:ctsm.param.file <-
1560182545955:file.path(local.rundir, paste0("ctsm_params.", run.id, ".nc"))
1560182545958:file.copy(ctsm.param.default, ctsm.param.file)
1560182545985:ctsm.param.nc <- ncdf4::nc_open(ctsm.param.file, write = TRUE)
1560182546159:## Loop over PFTS
1560182546160:npft <- length(trait.values)
1560182547265:PEcAn.logger::logger.debug('there are ',
1560182547266:npft,
1560182547267:'PFTs in this run, they are named:',
1560182547268:names(trait.values))
1560182547409:ctsm_pftnames <-
1560182547410:stringr::str_trim(tolower(ncdf4::ncvar_get(ctsm.param.nc, "pftname")))
1560182547551:i <- 1 #delete
1560182547678:#for (i in seq_len(npft)) {
1560182547679:pft.name <- names(trait.values)[i]
1560182547849:if (is.null(pft.name) | is.na(pft.name)) {
1560182547850:PEcAn.logger::logger.error("pft.name missing")
1560182547851:} else {
1560182547852:PEcAn.logger::logger.info(paste("PFT =", pft.name))
1560182547853:PEcAn.logger::logger.debug(paste0("ctsm PFT number: ", which(ctsm_pftnames == pft.name)))
1560182547854:}
1560182548065:if (pft.name == 'env')
1560182548133:next   ## HACK, need to remove env from default
1560182548281:## Match PFT name to COLUMN
1560182548282:ipft <- match(tolower(pft.name), ctsm_pftnames)
1560182548377:PEcAn.logger::logger.debug(paste0("CTSM pft index number: ", ipft))
1560182548516:if (is.na(ipft)) {
1560182548517:PEcAn.logger::logger.severe(
1560182548518:paste(
1560182548518:"Unmatched PFT",
1560182548519:pft.name,
1560182548520:"in CTSM PEcAn does not yet support non-default PFTs for this model"
1560182548521:)
1560182548522:)
1560182548523:}
1560182548822:## Special variables used in conversions
1560182548823:leafC <- 0.48
1560182549233:fnr <- 7.16 #mass ratio of total Rubisco molecular mass to nitrogen in Rubisco (g Rubisco g-1 N in Rubisco)
1560182549409:ar <- 60 #specific activity of Rubisco (µmol CO2 g-1 Rubisco s-1)
1560182549597:sla_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop") #delete
1560182549777:c2n_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn") #delete
1560182549883:sto_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "mbbopt") #delete
1560182550079:frl_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "froot_leaf") #delete
1560182550109:flnr_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "flnr") #delete
1560182550839:## Loop over VARIABLES
1560182550840:pft.trait.values <- trait.values[[i]]
1560182551659:for (v in seq_along(pft.trait.values)) {
1560182551660:var <- names(pft.trait.values)[v]
1560182551662:### ----- Leaf physiological parameters
1560182551663:update_vars <- function(nc = ctsm.param.nc, varid, vals, start = ipft, count = 1){
1560182551664:ncdf4::ncvar_put(nc, varid, vals, start, count)
1560182551665:}
1560182551667:if (var == "c2n_leaf") {update_vars(varid = "leafcn", vals = pft.trait.values[v])}
1560182551668:#if(var == "sla") {update_vars(ctsm.param.nc, "slatop", udunits2::ud.convert(pft.trait.values[v], "m2 kg-1", "m2 g-1") / leafC)}
1560182551669:#update_vars("stom_slope", "mbbopt", vals = pft.trait.values[v])
1560182551670:#update_vars("fineroot2leaf", "froot_leaf", pft.trait.values[v])
1560182551671:#update_vars("vcmax", "flnr", as.numeric(pft.trait.values[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar))
1560182551673:# if (var == "sla") {
1560182551674:#   ## default 0.03846
1560182551675:#   ncdf4::ncvar_put(
1560182551676:#     nc = ctsm.param.nc,
1560182551677:#     varid = "slatop",
1560182551678:#     start = ipft,
1560182551679:#     count = 1,
1560182551680:#     vals = udunits2::ud.convert(pft.trait.values[v], "m2 kg-1", "m2 g-1") / leafC
1560182551681:#   )
1560182551682:# }
1560182551683:# if (var == "c2n_leaf"){
1560182551684:#   ## default 35.36068
1560182551685:#   ncdf4::ncvar_put(
1560182551686:#     nc = ctsm.param.nc,
1560182551687:#     varid = "leafcn",
1560182551688:#     start = ipft,
1560182551689:#     count = 1,
1560182551690:#     vals = pft.trait.values[v]
1560182551691:#   )
1560182551692:# }
1560182551693:# if (var == "stom_slope"){
1560182551694:#   ## default 9.757532
1560182551695:#   ncdf4::ncvar_put(
1560182551696:#     nc = ctsm.param.nc,
1560182551697:#     varid = "mbbopt",
1560182551698:#     start = ipft,
1560182551699:#     count = 1,
1560182551700:#     vals = pft.trait.values[v]
1560182551701:#   )
1560182551702:# }
1560182551703:# if (var == "fineroot2leaf"){
1560182551704:#   ## default 1.5
1560182551705:#   ncdf4::ncvar_put(
1560182551706:#     nc = ctsm.param.nc,
1560182551707:#     varid = "froot_leaf",
1560182551708:#     start = ipft,
1560182551709:#     count = 1,
1560182551710:#     vals = pft.trait.values[v]
1560182551711:#   )
1560182551712:# }
1560182551713:# if (var == "vcmax"){
1560182551714:#   ## default 0.09
1560182551715:#   ncdf4::ncvar_put(
1560182551716:#     nc = ctsm.param.nc,
1560182551717:#     varid = "flnr",
1560182551718:#     start = ipft,
1560182551719:#     count = 1,
1560182551720:#     vals = as.numeric(pft.trait.values[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar)
1560182551721:#   )
1560182551722:# }
1560182551723:} ## end loop over VARIABLES
1560182558936:sla_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")
1560182558939:c2n_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")
1560182558995:sto_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "mbbopt")
1560182558998:frl_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "froot_leaf")
1560182559001:flnr_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "flnr")
1560182559004:sla_old[15]
1560182559006:sla_new[15]
1560182559007:c2n_old[15]
1560182559008:c2n_new[15]
1560182559010:sto_old[15]
1560182559011:sto_new[15]
1560182559013:frl_old[15]
1560182559014:frl_new[15]
1560182559015:flnr_old[15]
1560182559017:flnr_new[15]
1560182684586:.libPaths("~/R_libs/") #delete
1560182685130:library(PEcAn.CTSM) #delete
1560182685189:trait.values <- list(c4_grass = list(sla = 0.03, c2n_leaf = 35, stom_slope = 10, fineroot2leaf = 2, vcmax = 50)) #delete
1560182685191:## Copy and open default parameter files
1560182685192:ctsm.param.default <-
1560182685194:system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM')
1560182685201:if (!exists('local.rundir'))
1560182685251:local.rundir <- tempdir()
1560182685378:if (!exists('run.id'))
1560182685642:run.id <- 1
1560182685664:ctsm.param.file <-
1560182685666:file.path(local.rundir, paste0("ctsm_params.", run.id, ".nc"))
1560182686795:file.copy(ctsm.param.default, ctsm.param.file)
1560182686828:ctsm.param.nc <- ncdf4::nc_open(ctsm.param.file, write = TRUE)
1560182687008:## Loop over PFTS
1560182687009:npft <- length(trait.values)
1560182687011:PEcAn.logger::logger.debug('there are ',
1560182687012:npft,
1560182687012:'PFTs in this run, they are named:',
1560182687013:names(trait.values))
1560182687017:ctsm_pftnames <-
1560182687018:stringr::str_trim(tolower(ncdf4::ncvar_get(ctsm.param.nc, "pftname")))
1560182687045:i <- 1 #delete
1560182687084:#for (i in seq_len(npft)) {
1560182687085:pft.name <- names(trait.values)[i]
1560182687088:if (is.null(pft.name) | is.na(pft.name)) {
1560182687089:PEcAn.logger::logger.error("pft.name missing")
1560182687090:} else {
1560182687091:PEcAn.logger::logger.info(paste("PFT =", pft.name))
1560182687092:PEcAn.logger::logger.debug(paste0("ctsm PFT number: ", which(ctsm_pftnames == pft.name)))
1560182687093:}
1560182687200:if (pft.name == 'env')
1560182687500:next   ## HACK, need to remove env from default
1560182687756:## Match PFT name to COLUMN
1560182687758:ipft <- match(tolower(pft.name), ctsm_pftnames)
1560182688059:PEcAn.logger::logger.debug(paste0("CTSM pft index number: ", ipft))
1560182688535:if (is.na(ipft)) {
1560182688537:PEcAn.logger::logger.severe(
1560182688539:paste(
1560182688541:"Unmatched PFT",
1560182688543:pft.name,
1560182688545:"in CTSM PEcAn does not yet support non-default PFTs for this model"
1560182688546:)
1560182688547:)
1560182688548:}
1560182689068:## Special variables used in conversions
1560182689069:leafC <- 0.48
1560182689289:fnr <- 7.16 #mass ratio of total Rubisco molecular mass to nitrogen in Rubisco (g Rubisco g-1 N in Rubisco)
1560182689435:ar <- 60 #specific activity of Rubisco (µmol CO2 g-1 Rubisco s-1)
1560182689739:sla_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop") #delete
1560182689887:c2n_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn") #delete
1560182689954:sto_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "mbbopt") #delete
1560182690157:frl_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "froot_leaf") #delete
1560182690425:flnr_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "flnr") #delete
1560182690899:## Loop over VARIABLES
1560182690901:pft.trait.values <- trait.values[[i]]
1560182692015:for (v in seq_along(pft.trait.values)) {
1560182692016:pecan_var <- names(pft.trait.values)[v]
1560182692018:### ----- Leaf physiological parameters
1560182692020:update_vars <- function(nc = ctsm.param.nc, ctsm_var, vals, start = ipft, count = 1){
1560182692021:ncdf4::ncvar_put(nc, varid = ctsm_var, vals, start, count)
1560182692022:}
1560182692024:if (pecan_var == "c2n_leaf") {update_vars(ctsm_var = "leafcn", vals = pft.trait.values[v])}
1560182692026:#if(var == "sla") {update_vars(ctsm.param.nc, "slatop", udunits2::ud.convert(pft.trait.values[v], "m2 kg-1", "m2 g-1") / leafC)}
1560182692027:#update_vars("stom_slope", "mbbopt", vals = pft.trait.values[v])
1560182692028:#update_vars("fineroot2leaf", "froot_leaf", pft.trait.values[v])
1560182692030:#update_vars("vcmax", "flnr", as.numeric(pft.trait.values[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar))
1560182692032:# if (var == "sla") {
1560182692033:#   ## default 0.03846
1560182692034:#   ncdf4::ncvar_put(
1560182692035:#     nc = ctsm.param.nc,
1560182692036:#     varid = "slatop",
1560182692037:#     start = ipft,
1560182692038:#     count = 1,
1560182692040:#     vals = udunits2::ud.convert(pft.trait.values[v], "m2 kg-1", "m2 g-1") / leafC
1560182692041:#   )
1560182692042:# }
1560182692043:# if (var == "c2n_leaf"){
1560182692044:#   ## default 35.36068
1560182692045:#   ncdf4::ncvar_put(
1560182692046:#     nc = ctsm.param.nc,
1560182692047:#     varid = "leafcn",
1560182692048:#     start = ipft,
1560182692049:#     count = 1,
1560182692051:#     vals = pft.trait.values[v]
1560182692052:#   )
1560182692053:# }
1560182692054:# if (var == "stom_slope"){
1560182692055:#   ## default 9.757532
1560182692056:#   ncdf4::ncvar_put(
1560182692057:#     nc = ctsm.param.nc,
1560182692059:#     varid = "mbbopt",
1560182692060:#     start = ipft,
1560182692061:#     count = 1,
1560182692062:#     vals = pft.trait.values[v]
1560182692063:#   )
1560182692064:# }
1560182692065:# if (var == "fineroot2leaf"){
1560182692066:#   ## default 1.5
1560182692068:#   ncdf4::ncvar_put(
1560182692069:#     nc = ctsm.param.nc,
1560182692070:#     varid = "froot_leaf",
1560182692071:#     start = ipft,
1560182692072:#     count = 1,
1560182692073:#     vals = pft.trait.values[v]
1560182692074:#   )
1560182692075:# }
1560182692077:# if (var == "vcmax"){
1560182692078:#   ## default 0.09
1560182692079:#   ncdf4::ncvar_put(
1560182692080:#     nc = ctsm.param.nc,
1560182692081:#     varid = "flnr",
1560182692082:#     start = ipft,
1560182692083:#     count = 1,
1560182692084:#     vals = as.numeric(pft.trait.values[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar)
1560182692086:#   )
1560182692087:# }
1560182692088:} ## end loop over VARIABLES
1560182697157:sla_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")
1560182697163:c2n_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")
1560182697220:sto_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "mbbopt")
1560182697224:frl_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "froot_leaf")
1560182697227:flnr_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "flnr")
1560182697230:sla_old[15]
1560182697231:sla_new[15]
1560182697232:c2n_old[15]
1560182697234:c2n_new[15]
1560182697235:sto_old[15]
1560182697237:sto_new[15]
1560182697238:frl_old[15]
1560182697239:frl_new[15]
1560182697241:flnr_old[15]
1560182697242:flnr_new[15]
1560182884503:.libPaths("~/R_libs/") #delete
1560182885053:library(PEcAn.CTSM) #delete
1560182885115:trait.values <- list(c4_grass = list(sla = 0.03, c2n_leaf = 35, stom_slope = 10, fineroot2leaf = 2, vcmax = 50)) #delete
1560182885116:## Copy and open default parameter files
1560182885117:ctsm.param.default <-
1560182885119:system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM')
1560182885183:if (!exists('local.rundir'))
1560182885546:local.rundir <- tempdir()
1560182886772:run.id <- 1
1560182886775:if (!exists('run.id'))
1560182886799:ctsm.param.file <-
1560182886799:file.path(local.rundir, paste0("ctsm_params.", run.id, ".nc"))
1560182886817:file.copy(ctsm.param.default, ctsm.param.file)
1560182887433:ctsm.param.nc <- ncdf4::nc_open(ctsm.param.file, write = TRUE)
1560182887625:## Loop over PFTS
1560182887627:npft <- length(trait.values)
1560182887753:PEcAn.logger::logger.debug('there are ',
1560182887755:npft,
1560182887757:'PFTs in this run, they are named:',
1560182887759:names(trait.values))
1560182887853:ctsm_pftnames <-
1560182887855:stringr::str_trim(tolower(ncdf4::ncvar_get(ctsm.param.nc, "pftname")))
1560182888036:i <- 1 #delete
1560182888191:#for (i in seq_len(npft)) {
1560182888192:pft.name <- names(trait.values)[i]
1560182888324:if (is.null(pft.name) | is.na(pft.name)) {
1560182888326:PEcAn.logger::logger.error("pft.name missing")
1560182888327:} else {
1560182888329:PEcAn.logger::logger.info(paste("PFT =", pft.name))
1560182888331:PEcAn.logger::logger.debug(paste0("ctsm PFT number: ", which(ctsm_pftnames == pft.name)))
1560182888333:}
1560182888432:if (pft.name == 'env')
1560182888564:next   ## HACK, need to remove env from default
1560182888806:## Match PFT name to COLUMN
1560182888808:ipft <- match(tolower(pft.name), ctsm_pftnames)
1560182888934:PEcAn.logger::logger.debug(paste0("CTSM pft index number: ", ipft))
1560182889093:if (is.na(ipft)) {
1560182889095:PEcAn.logger::logger.severe(
1560182889097:paste(
1560182889099:"Unmatched PFT",
1560182889101:pft.name,
1560182889103:"in CTSM PEcAn does not yet support non-default PFTs for this model"
1560182889105:)
1560182889106:)
1560182889108:}
1560182889223:## Special variables used in conversions
1560182889225:leafC <- 0.48
1560182889393:fnr <- 7.16 #mass ratio of total Rubisco molecular mass to nitrogen in Rubisco (g Rubisco g-1 N in Rubisco)
1560182889572:ar <- 60 #specific activity of Rubisco (µmol CO2 g-1 Rubisco s-1)
1560182889663:sla_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop") #delete
1560182889900:c2n_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn") #delete
1560182890046:sto_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "mbbopt") #delete
1560182890142:frl_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "froot_leaf") #delete
1560182890406:flnr_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "flnr") #delete
1560182890962:## Loop over VARIABLES
1560182890964:pft_pecan_vals <- trait.values[[i]]
1560182891418:for (v in seq_along(pft_pecan_vals)) {
1560182891420:pecan_var <- names(pft_pecan_vals)[v]
1560182891423:### ----- Leaf physiological parameters
1560182891425:update_vars <- function(nc = ctsm.param.nc, ctsm_var, ctsm_vals, start = ipft, count = 1){
1560182891427:ncdf4::ncvar_put(nc, varid = ctsm_var, vals = ctsm_vals, start, count)
1560182891429:}
1560182891432:if (pecan_var == "c2n_leaf") {update_vars(ctsm_var = "leafcn", ctsm_vals = pft_pecan_vals[v])}
1560182891434:#if(var == "sla") {update_vars(ctsm.param.nc, "slatop", udunits2::ud.convert(pft.trait.values[v], "m2 kg-1", "m2 g-1") / leafC)}
1560182891435:#update_vars("stom_slope", "mbbopt", vals = pft.trait.values[v])
1560182891437:#update_vars("fineroot2leaf", "froot_leaf", pft.trait.values[v])
1560182891438:#update_vars("vcmax", "flnr", as.numeric(pft.trait.values[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar))
1560182891440:# if (var == "sla") {
1560182891441:#   ## default 0.03846
1560182891442:#   ncdf4::ncvar_put(
1560182891443:#     nc = ctsm.param.nc,
1560182891444:#     varid = "slatop",
1560182891446:#     start = ipft,
1560182891447:#     count = 1,
1560182891448:#     vals = udunits2::ud.convert(pft.trait.values[v], "m2 kg-1", "m2 g-1") / leafC
1560182891449:#   )
1560182891450:# }
1560182891451:# if (var == "c2n_leaf"){
1560182891452:#   ## default 35.36068
1560182891457:#   ncdf4::ncvar_put(
1560182891458:#     nc = ctsm.param.nc,
1560182891459:#     varid = "leafcn",
1560182891460:#     start = ipft,
1560182891461:#     count = 1,
1560182891462:#     vals = pft.trait.values[v]
1560182891464:#   )
1560182891465:# }
1560182891466:# if (var == "stom_slope"){
1560182891467:#   ## default 9.757532
1560182891468:#   ncdf4::ncvar_put(
1560182891469:#     nc = ctsm.param.nc,
1560182891471:#     varid = "mbbopt",
1560182891472:#     start = ipft,
1560182891473:#     count = 1,
1560182891474:#     vals = pft.trait.values[v]
1560182891475:#   )
1560182891476:# }
1560182891477:# if (var == "fineroot2leaf"){
1560182891479:#   ## default 1.5
1560182891480:#   ncdf4::ncvar_put(
1560182891481:#     nc = ctsm.param.nc,
1560182891482:#     varid = "froot_leaf",
1560182891483:#     start = ipft,
1560182891484:#     count = 1,
1560182891485:#     vals = pft.trait.values[v]
1560182891487:#   )
1560182891488:# }
1560182891489:# if (var == "vcmax"){
1560182891490:#   ## default 0.09
1560182891491:#   ncdf4::ncvar_put(
1560182891492:#     nc = ctsm.param.nc,
1560182891493:#     varid = "flnr",
1560182891495:#     start = ipft,
1560182891496:#     count = 1,
1560182891497:#     vals = as.numeric(pft.trait.values[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar)
1560182891498:#   )
1560182891499:# }
1560182891501:} ## end loop over VARIABLES
1560182911084:.libPaths("~/R_libs/") #delete
1560182911631:library(PEcAn.CTSM) #delete
1560182912163:trait.values <- list(c4_grass = list(sla = 0.03, c2n_leaf = 35, stom_slope = 10, fineroot2leaf = 2, vcmax = 50)) #delete
1560182914420:## Copy and open default parameter files
1560182914422:ctsm.param.default <-
1560182914424:system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM')
1560182914854:if (!exists('local.rundir'))
1560182915329:local.rundir <- tempdir()
1560182915753:if (!exists('run.id'))
1560182916101:run.id <- 1
1560182916775:ctsm.param.file <-
1560182916776:file.path(local.rundir, paste0("ctsm_params.", run.id, ".nc"))
1560182917387:file.copy(ctsm.param.default, ctsm.param.file)
1560182917784:ctsm.param.nc <- ncdf4::nc_open(ctsm.param.file, write = TRUE)
1560182918608:## Loop over PFTS
1560182918610:npft <- length(trait.values)
1560182919175:PEcAn.logger::logger.debug('there are ',
1560182919177:npft,
1560182919179:'PFTs in this run, they are named:',
1560182919181:names(trait.values))
1560182919573:ctsm_pftnames <-
1560182919574:stringr::str_trim(tolower(ncdf4::ncvar_get(ctsm.param.nc, "pftname")))
1560182920202:i <- 1 #delete
1560182920720:#for (i in seq_len(npft)) {
1560182920722:pft.name <- names(trait.values)[i]
1560182921164:if (is.null(pft.name) | is.na(pft.name)) {
1560182921167:PEcAn.logger::logger.error("pft.name missing")
1560182921169:} else {
1560182921171:PEcAn.logger::logger.info(paste("PFT =", pft.name))
1560182921173:PEcAn.logger::logger.debug(paste0("ctsm PFT number: ", which(ctsm_pftnames == pft.name)))
1560182921175:}
1560182921617:if (pft.name == 'env')
1560182922268:next   ## HACK, need to remove env from default
1560182922710:## Match PFT name to COLUMN
1560182922712:ipft <- match(tolower(pft.name), ctsm_pftnames)
1560182923121:PEcAn.logger::logger.debug(paste0("CTSM pft index number: ", ipft))
1560182923536:if (is.na(ipft)) {
1560182923538:PEcAn.logger::logger.severe(
1560182923540:paste(
1560182923542:"Unmatched PFT",
1560182923544:pft.name,
1560182923545:"in CTSM PEcAn does not yet support non-default PFTs for this model"
1560182923546:)
1560182923547:)
1560182923548:}
1560182924038:## Special variables used in conversions
1560182924040:leafC <- 0.48
1560182924646:fnr <- 7.16 #mass ratio of total Rubisco molecular mass to nitrogen in Rubisco (g Rubisco g-1 N in Rubisco)
1560182924997:ar <- 60 #specific activity of Rubisco (µmol CO2 g-1 Rubisco s-1)
1560182925501:sla_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop") #delete
1560182925881:c2n_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn") #delete
1560182926273:sto_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "mbbopt") #delete
1560182926578:frl_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "froot_leaf") #delete
1560182927236:flnr_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "flnr") #delete
1560182927630:## Loop over VARIABLES
1560182927631:pft_pecan_vals <- trait.values[[i]]
1560182928204:for (v in seq_along(pft_pecan_vals)) {
1560182928206:pecan_var <- names(pft_pecan_vals)[v]
1560182928210:### ----- Leaf physiological parameters
1560182928211:update_vars <- function(nc = ctsm.param.nc, ctsm_var, ctsm_vals, start = ipft, count = 1){
1560182928213:ncdf4::ncvar_put(nc, varid = ctsm_var, vals = ctsm_vals, start, count)
1560182928215:}
1560182928218:if (pecan_var == "c2n_leaf") {update_vars(ctsm_var = "leafcn", ctsm_vals = pft_pecan_vals[v])}
1560182928220:#if(var == "sla") {update_vars(ctsm.param.nc, "slatop", udunits2::ud.convert(pft.trait.values[v], "m2 kg-1", "m2 g-1") / leafC)}
1560182928222:#update_vars("stom_slope", "mbbopt", vals = pft.trait.values[v])
1560182928223:#update_vars("fineroot2leaf", "froot_leaf", pft.trait.values[v])
1560182928224:#update_vars("vcmax", "flnr", as.numeric(pft.trait.values[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar))
1560182928226:# if (var == "sla") {
1560182928227:#   ## default 0.03846
1560182928228:#   ncdf4::ncvar_put(
1560182928229:#     nc = ctsm.param.nc,
1560182928230:#     varid = "slatop",
1560182928231:#     start = ipft,
1560182928233:#     count = 1,
1560182928234:#     vals = udunits2::ud.convert(pft.trait.values[v], "m2 kg-1", "m2 g-1") / leafC
1560182928235:#   )
1560182928236:# }
1560182928237:# if (var == "c2n_leaf"){
1560182928238:#   ## default 35.36068
1560182928239:#   ncdf4::ncvar_put(
1560182928240:#     nc = ctsm.param.nc,
1560182928241:#     varid = "leafcn",
1560182928242:#     start = ipft,
1560182928243:#     count = 1,
1560182928244:#     vals = pft.trait.values[v]
1560182928246:#   )
1560182928247:# }
1560182928248:# if (var == "stom_slope"){
1560182928249:#   ## default 9.757532
1560182928250:#   ncdf4::ncvar_put(
1560182928251:#     nc = ctsm.param.nc,
1560182928252:#     varid = "mbbopt",
1560182928253:#     start = ipft,
1560182928254:#     count = 1,
1560182928255:#     vals = pft.trait.values[v]
1560182928256:#   )
1560182928258:# }
1560182928259:# if (var == "fineroot2leaf"){
1560182928260:#   ## default 1.5
1560182928261:#   ncdf4::ncvar_put(
1560182928262:#     nc = ctsm.param.nc,
1560182928263:#     varid = "froot_leaf",
1560182928264:#     start = ipft,
1560182928265:#     count = 1,
1560182928266:#     vals = pft.trait.values[v]
1560182928267:#   )
1560182928268:# }
1560182928269:# if (var == "vcmax"){
1560182928270:#   ## default 0.09
1560182928271:#   ncdf4::ncvar_put(
1560182928272:#     nc = ctsm.param.nc,
1560182928274:#     varid = "flnr",
1560182928275:#     start = ipft,
1560182928276:#     count = 1,
1560182928277:#     vals = as.numeric(pft.trait.values[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar)
1560182928278:#   )
1560182928279:# }
1560182928280:} ## end loop over VARIABLES
1560182933108:sla_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")
1560182933115:c2n_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")
1560182933119:sto_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "mbbopt")
1560182933174:frl_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "froot_leaf")
1560182933177:flnr_new <- ncdf4::ncvar_get(ctsm.param.nc, varid = "flnr")
1560182933181:sla_old[15]
1560182933182:sla_new[15]
1560182933184:c2n_old[15]
1560182933185:c2n_new[15]
1560182933187:sto_old[15]
1560182933188:sto_new[15]
1560182933190:frl_old[15]
1560182933192:frl_new[15]
1560182933193:flnr_old[15]
1560182933195:flnr_new[15]
1560185444047:.libPaths("~/R_libs/") #delete
1560185444051:library(PEcAn.CTSM) #delete
1560185444145:trait.values <- list(c4_grass = list(sla = 0.03, c2n_leaf = 35, stom_slope = 10, fineroot2leaf = 2, vcmax = 50)) #delete
1560185444146:## Copy and open default parameter files
1560185444147:ctsm.param.default <-
1560185444148:system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM')
1560185444150:if (!exists('local.rundir'))
1560185444151:local.rundir <- tempdir()
1560185444152:if (!exists('run.id'))
1560185444153:run.id <- 1
1560185444154:ctsm.param.file <-
1560185444155:file.path(local.rundir, paste0("ctsm_params.", run.id, ".nc"))
1560185444157:file.copy(ctsm.param.default, ctsm.param.file)
1560185444159:ctsm.param.nc <- ncdf4::nc_open(ctsm.param.file, write = TRUE)
1560185444338:## Loop over PFTS
1560185444339:npft <- length(trait.values)
1560185444340:PEcAn.logger::logger.debug('there are ',
1560185444341:npft,
1560185444342:'PFTs in this run, they are named:',
1560185444343:names(trait.values))
1560185444347:ctsm_pftnames <-
1560185444348:stringr::str_trim(tolower(ncdf4::ncvar_get(ctsm.param.nc, "pftname")))
1560185444371:i <- 1 #delete
1560185444372:#for (i in seq_len(npft)) {
1560185444373:pft.name <- names(trait.values)[i]
1560185444374:if (is.null(pft.name) | is.na(pft.name)) {
1560185444375:PEcAn.logger::logger.error("pft.name missing")
1560185444376:} else {
1560185444377:PEcAn.logger::logger.info(paste("PFT =", pft.name))
1560185444378:PEcAn.logger::logger.debug(paste0("ctsm PFT number: ", which(ctsm_pftnames == pft.name)))
1560185444379:}
1560185444382:if (pft.name == 'env')
1560185444383:next   ## HACK, need to remove env from default
1560185444385:## Match PFT name to COLUMN
1560185444386:ipft <- match(tolower(pft.name), ctsm_pftnames)
1560185444387:PEcAn.logger::logger.debug(paste0("CTSM pft index number: ", ipft))
1560185444390:if (is.na(ipft)) {
1560185444391:PEcAn.logger::logger.severe(
1560185444392:paste(
1560185444392:"Unmatched PFT",
1560185444394:pft.name,
1560185444394:"in CTSM PEcAn does not yet support non-default PFTs for this model"
1560185444395:)
1560185444396:)
1560185444397:}
1560185444399:## Special variables used in conversions
1560185444400:leafC <- 0.48
1560185444401:fnr <- 7.16 #mass ratio of total Rubisco molecular mass to nitrogen in Rubisco (g Rubisco g-1 N in Rubisco)
1560185444402:ar <- 60 #specific activity of Rubisco (µmol CO2 g-1 Rubisco s-1)
1560185444404:sla_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop") #delete
1560185444407:c2n_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn") #delete
1560185444413:sto_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "mbbopt") #delete
1560185444416:frl_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "froot_leaf") #delete
1560185444419:flnr_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "flnr") #delete
1560185444423:## Loop over VARIABLES
1560185444424:pft_pecan_vals <- trait.values[[i]]
1560185450452:for (v in seq_along(pft_pecan_vals)) {
1560185450453:pecan_var <- names(pft_pecan_vals)[v]
1560185450457:### ----- Leaf physiological parameters
1560185450459:update_vars <- function(nc = ctsm.param.nc, ctsm_var, ctsm_vals, start = ipft, count = 1){
1560185450461:ncdf4::ncvar_put(nc, varid = ctsm_var, vals = ctsm_vals, start, count)
1560185450462:}
1560185450464:if (pecan_var == "c2n_leaf") {update_vars(ctsm_var = "leafcn", ctsm_vals = pft_pecan_vals[v])}
1560185450465:if (pecan_var == "sla") {update_vars(ctsm_var = "slatop", ctsm_vals = udunits2::ud.convert(pecan_pft_vals[v], "m2 kg-1", "m2 g-1") / leafC))}
1560185450466:if (pecan_var == "stom_slope") {update_vars(ctsm_var = "mbbopt", ctsm_vals = pft_pecan_vals[v])}
1560185450467:if (pecan_var == "fineroot2leaf") {update_vars(ctsm_var = "froot_leaf", ctsm_vals = pft_pecan_vals[v])}
1560185450469:if (pecan_var == "vcmax") {update_vars(ctsm_var = "flnr", ctsm_vals = as.numeric(pft.trait.values[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar))}
1560185450471:# if (var == "sla") {
1560185450472:#   ## default 0.03846
1560185450473:#   ncdf4::ncvar_put(
1560185450474:#     nc = ctsm.param.nc,
1560185450475:#     varid = "slatop",
1560185450476:#     start = ipft,
1560185450477:#     count = 1,
1560185450478:#     vals = udunits2::ud.convert(pft.trait.values[v], "m2 kg-1", "m2 g-1") / leafC
1560185450479:#   )
1560185450480:# }
1560185450481:# if (var == "c2n_leaf"){
1560185450482:#   ## default 35.36068
1560185450483:#   ncdf4::ncvar_put(
1560185450484:#     nc = ctsm.param.nc,
1560185450485:#     varid = "leafcn",
1560185450486:#     start = ipft,
1560185450487:#     count = 1,
1560185450488:#     vals = pft.trait.values[v]
1560185450489:#   )
1560185450490:# }
1560185450491:# if (var == "stom_slope"){
1560185450491:#   ## default 9.757532
1560185450492:#   ncdf4::ncvar_put(
1560185450493:#     nc = ctsm.param.nc,
1560185450494:#     varid = "mbbopt",
1560185450495:#     start = ipft,
1560185450496:#     count = 1,
1560185450497:#     vals = pft.trait.values[v]
1560185450498:#   )
1560185450498:# }
1560185450499:# if (var == "fineroot2leaf"){
1560185450500:#   ## default 1.5
1560185450501:#   ncdf4::ncvar_put(
1560185450502:#     nc = ctsm.param.nc,
1560185450503:#     varid = "froot_leaf",
1560185450504:#     start = ipft,
1560185450505:#     count = 1,
1560185450506:#     vals = pft.trait.values[v]
1560185450507:#   )
1560185450507:# }
1560185450508:# if (var == "vcmax"){
1560185450509:#   ## default 0.09
1560185450510:#   ncdf4::ncvar_put(
1560185450511:#     nc = ctsm.param.nc,
1560185450512:#     varid = "flnr",
1560185450513:#     start = ipft,
1560185450514:#     count = 1,
1560185450515:#     vals = as.numeric(pft.trait.values[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar)
1560185450516:#   )
1560185450517:# }
1560185450518:} ## end loop over VARIABLES
1560186250691:.libPaths("~/R_libs/") #delete
1560186251236:library(PEcAn.CTSM) #delete
1560186252136:trait.values <- list(c4_grass = list(sla = 0.03, c2n_leaf = 35, stom_slope = 10, fineroot2leaf = 2, vcmax = 50)) #delete
1560186255491:## Copy and open default parameter files
1560186255492:ctsm.param.default <-
1560186255493:system.file('clm5_params.c171117_0001.nc', package = 'PEcAn.CTSM')
1560186255864:if (!exists('local.rundir'))
1560186256213:local.rundir <- tempdir()
1560186256418:if (!exists('run.id'))
1560186256642:run.id <- 1
1560186256891:ctsm.param.file <-
1560186256892:file.path(local.rundir, paste0("ctsm_params.", run.id, ".nc"))
1560186257307:file.copy(ctsm.param.default, ctsm.param.file)
1560186257606:ctsm.param.nc <- ncdf4::nc_open(ctsm.param.file, write = TRUE)
1560186258637:## Loop over PFTS
1560186258638:npft <- length(trait.values)
1560186259251:PEcAn.logger::logger.debug('there are ',
1560186259252:npft,
1560186259253:'PFTs in this run, they are named:',
1560186259254:names(trait.values))
1560186260272:ctsm_pftnames <-
1560186260273:stringr::str_trim(tolower(ncdf4::ncvar_get(ctsm.param.nc, "pftname")))
1560186261232:i <- 1 #delete
1560186261922:#for (i in seq_len(npft)) {
1560186261923:pft.name <- names(trait.values)[i]
1560186262651:if (is.null(pft.name) | is.na(pft.name)) {
1560186262652:PEcAn.logger::logger.error("pft.name missing")
1560186262653:} else {
1560186262654:PEcAn.logger::logger.info(paste("PFT =", pft.name))
1560186262655:PEcAn.logger::logger.debug(paste0("ctsm PFT number: ", which(ctsm_pftnames == pft.name)))
1560186262656:}
1560186263789:if (pft.name == 'env')
1560186264290:next   ## HACK, need to remove env from default
1560186264892:## Match PFT name to COLUMN
1560186264893:ipft <- match(tolower(pft.name), ctsm_pftnames)
1560186265273:PEcAn.logger::logger.debug(paste0("CTSM pft index number: ", ipft))
1560186266243:if (is.na(ipft)) {
1560186266245:PEcAn.logger::logger.severe(
1560186266246:paste(
1560186266247:"Unmatched PFT",
1560186266248:pft.name,
1560186266249:"in CTSM PEcAn does not yet support non-default PFTs for this model"
1560186266250:)
1560186266251:)
1560186266252:}
1560186266966:## Special variables used in conversions
1560186266968:leafC <- 0.48
1560186268144:fnr <- 7.16 #mass ratio of total Rubisco molecular mass to nitrogen in Rubisco (g Rubisco g-1 N in Rubisco)
1560186268451:ar <- 60 #specific activity of Rubisco (µmol CO2 g-1 Rubisco s-1)
1560186268710:sla_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop") #delete
1560186268796:c2n_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn") #delete
1560186268916:sto_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "mbbopt") #delete
1560186269068:frl_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "froot_leaf") #delete
1560186269376:flnr_old <- ncdf4::ncvar_get(ctsm.param.nc, varid = "flnr") #delete
1560186270290:## Loop over VARIABLES
1560186270291:pft_pecan_vals <- trait.values[[i]]
1560186272002:for (v in seq_along(pft_pecan_vals)) {
1560186272003:pecan_var <- names(pft_pecan_vals)[v]
1560186272005:### ----- Leaf physiological parameters
1560186272006:update_vars <- function(nc = ctsm.param.nc, ctsm_var, ctsm_vals, start = ipft, count = 1){
1560186272007:ncdf4::ncvar_put(nc, varid = ctsm_var, vals = ctsm_vals, start, count)
1560186272008:}
1560186272010:if (pecan_var == "c2n_leaf") {update_vars(ctsm_var = "leafcn", ctsm_vals = pft_pecan_vals[v])}
1560186272011:if (pecan_var == "sla") {update_vars(ctsm_var = "slatop", ctsm_vals = udunits2::ud.convert(pecan_pft_vals[v], "m2 kg-1", "m2 g-1") / leafC))}
1560186272012:if (pecan_var == "stom_slope") {update_vars(ctsm_var = "mbbopt", ctsm_vals = pft_pecan_vals[v])}
1560186272013:if (pecan_var == "fineroot2leaf") {update_vars(ctsm_var = "froot_leaf", ctsm_vals = pft_pecan_vals[v])}
1560186272015:if (pecan_var == "vcmax") {update_vars(ctsm_var = "flnr", ctsm_vals = as.numeric(pft.trait.values[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar))}
1560186272017:# if (var == "sla") {
1560186272019:#   ## default 0.03846
1560186272020:#   ncdf4::ncvar_put(
1560186272021:#     nc = ctsm.param.nc,
1560186272022:#     varid = "slatop",
1560186272023:#     start = ipft,
1560186272024:#     count = 1,
1560186272025:#     vals = udunits2::ud.convert(pft.trait.values[v], "m2 kg-1", "m2 g-1") / leafC
1560186272026:#   )
1560186272027:# }
1560186272027:# if (var == "c2n_leaf"){
1560186272028:#   ## default 35.36068
1560186272029:#   ncdf4::ncvar_put(
1560186272030:#     nc = ctsm.param.nc,
1560186272031:#     varid = "leafcn",
1560186272032:#     start = ipft,
1560186272033:#     count = 1,
1560186272034:#     vals = pft.trait.values[v]
1560186272035:#   )
1560186272036:# }
1560186272037:# if (var == "stom_slope"){
1560186272038:#   ## default 9.757532
1560186272039:#   ncdf4::ncvar_put(
1560186272040:#     nc = ctsm.param.nc,
1560186272041:#     varid = "mbbopt",
1560186272042:#     start = ipft,
1560186272043:#     count = 1,
1560186272043:#     vals = pft.trait.values[v]
1560186272044:#   )
1560186272045:# }
1560186272046:# if (var == "fineroot2leaf"){
1560186272047:#   ## default 1.5
1560186272048:#   ncdf4::ncvar_put(
1560186272049:#     nc = ctsm.param.nc,
1560186272050:#     varid = "froot_leaf",
1560186272051:#     start = ipft,
1560186272052:#     count = 1,
1560186272053:#     vals = pft.trait.values[v]
1560186272054:#   )
1560186272055:# }
1560186272056:# if (var == "vcmax"){
1560186272056:#   ## default 0.09
1560186272057:#   ncdf4::ncvar_put(
1560186272058:#     nc = ctsm.param.nc,
1560186272059:#     varid = "flnr",
1560186272060:#     start = ipft,
1560186272061:#     count = 1,
1560186272062:#     vals = as.numeric(pft.trait.values[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar)
1560186272063:#   )
1560186272064:# }
1560186272065:} ## end loop over VARIABLES
1560186299043:for (v in seq_along(pft_pecan_vals)) {
1560186299045:pecan_var <- names(pft_pecan_vals)[v]
1560186299048:### ----- Leaf physiological parameters
1560186299050:update_vars <- function(nc = ctsm.param.nc, ctsm_var, ctsm_vals, start = ipft, count = 1){
1560186299052:ncdf4::ncvar_put(nc, varid = ctsm_var, vals = ctsm_vals, start, count)
1560186299054:}
1560186299057:if (pecan_var == "c2n_leaf") {update_vars(ctsm_var = "leafcn", ctsm_vals = pft_pecan_vals[v])}
1560186299058:# if (pecan_var == "sla") {update_vars(ctsm_var = "slatop", ctsm_vals = udunits2::ud.convert(pecan_pft_vals[v], "m2 kg-1", "m2 g-1") / leafC))}
1560186299059:# if (pecan_var == "stom_slope") {update_vars(ctsm_var = "mbbopt", ctsm_vals = pft_pecan_vals[v])}
1560186299060:# if (pecan_var == "fineroot2leaf") {update_vars(ctsm_var = "froot_leaf", ctsm_vals = pft_pecan_vals[v])}
1560186299061:# if (pecan_var == "vcmax") {update_vars(ctsm_var = "flnr", ctsm_vals = as.numeric(pft.trait.values[v]) / ((1/(ncdf4::ncvar_get(ctsm.param.nc, varid = "leafcn")[ipft] * ncdf4::ncvar_get(ctsm.param.nc, varid = "slatop")[ipft])) * fnr * ar))}
1560186299063:# if (var == "sla") {
1560186299064:#   ## default 0.03846
1560186299065:#   ncdf4::ncvar_put(
1560186299066:#     nc = ctsm.param.nc,
1560186299067:#     varid = "slatop",
1560186299068:#     start = ipft,
1560186299069:#     count = 1,
1560186299070:#     vals = udunits2::ud.convert(pft.trait.values[v], "m2 kg-1", "m2 g-1") / leafC
1560186299071:#   )
1560186299073:# }
1560186299074:# if (var == "c2n_leaf"){
1560186299075:#   ## default 35.36068
1560186299076:#   ncdf4::ncvar_put(
1560186299077:#     nc = ctsm.param.nc,
1560186299078:#     varid = "leafcn",
1560186299079:#     start = ipft,
1560186299080:#     count = 1,
1560186299081:#     vals = pft.trait.values[v]
1560186299082:#   )
1560186299083:# }
1560186299084:# if (var == "stom_slope"){
1560186299085:#   ## default 9.757532
1560186299086:#   ncdf4::ncvar_put(
1560186299088:#     nc = ctsm.param.nc,
1560186299089:#     varid = "mbbopt",
1560186299090:#     start = ipft,
1560186299091:#     count = 1,
1560186299092:#     vals = pft.trait.values[v]
1560186299093:#   )
1560186299094:# }
1560186299095:# if (var == "fineroot2leaf"){
1560186299096:#   ## default 1.5
1560186299097:#   ncdf4::ncvar_put(
1560186299098:#     nc = ctsm.param.nc,
1560186299099:#     varid = "froot_leaf",
1560186299100:#     start = ipft,
1560186299101:#     count = 1,
1560186299102:#     vals = pft.trait.values[v]
1560186299103:#   )
1560186299104:# }
1560186299105:# if (var == "vcmax"){
1560186299106:#   ## default 0.09
1560186299108:#   ncdf4::ncvar_put(
1560186299109:#     nc = ctsm.param.nc,
1560186299110:#     varid = "flnr",
