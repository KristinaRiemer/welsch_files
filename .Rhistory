View(biocros)
# Pull down new parameters distribution from BETY
biocros <- tbl(bety, 'modeltypes') %>% filter(name == 'BIOCRO') %>% collect
View(biocros)
new_pfts <- tbl(bety, 'pfts') %>%
filter(modeltype_id %in% biocros$id) %>%
data.frame()
# Pull down new parameters distribution from BETY
pfts <- tbl(bety, 'pfts')
# Pull down new parameters distribution from BETY
pfts <- tbl(bety, 'pfts') %>% transmute(pft_id = id)
View(pfts)
settings <- PEcAn.settings::read.settings("pecan/tests/pecan.kr.biocro.xml")
# ----------------------------------------------------------------------
# Load required libraries
# ----------------------------------------------------------------------
library(PEcAn.all)
library(PEcAn.utils)
library(RCurl)
# make sure always to call status.end
options(warn=1)
options(error=quote({
PEcAn.utils::status.end("ERROR")
PEcAn.remote::kill.tunnel(settings)
if (!interactive()) {
q(status = 1)
}
}))
# ----------------------------------------------------------------------
# PEcAn Workflow
# ----------------------------------------------------------------------
# Open and read in settings file for PEcAn run.
args <- commandArgs(trailingOnly = TRUE)
is.na(args[1])
if (is.na(args[1])){
settings <- PEcAn.settings::read.settings("pecan/tests/pecan.kr.biocro.xml")
} else {
settings.file <- args[1]
settings <- PEcAn.settings::read.settings(settings.file)
}
# Check for additional modules that will require adding settings
if("benchmarking" %in% names(settings)){
library(PEcAn.benchmark)
settings <- papply(settings, read_settings_BRR)
}
if("sitegroup" %in% names(settings)){
if(is.null(settings$sitegroup$nSite)){
settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
sitegroupId = settings$sitegroup$id)
} else {
settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
sitegroupId = settings$sitegroup$id,
nSite = settings$sitegroup$nSite)
}
settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
}
# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
#settings$host$name <- fqdn()
settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
settings$model
# Write pecan.CHECKED.xml
PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
# start from scratch if no continue is passed in
statusFile <- file.path(settings$outdir, "STATUS")
if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
file.remove(statusFile)
}
# Do conversions
settings <- PEcAn.workflow::do_conversions(settings)
?convert.input
traceback()
debugonce(convert.input)
# Do conversions
settings <- PEcAn.workflow::do_conversions(settings)
settings
settings <- read.settings('pecan.CHECKED.xml')
settings$outdir
settings <- read.settings(file.path(settings$outdir, 'pecan.CHECKED.xml'))
# Do conversions
settings <- PEcAn.workflow::do_conversions(settings)
# ----------------------------------------------------------------------
# PEcAn Workflow
# ----------------------------------------------------------------------
# Open and read in settings file for PEcAn run.
args <- commandArgs(trailingOnly = TRUE)
if (is.na(args[1])){
settings <- PEcAn.settings::read.settings("pecan/tests/pecan.kr.biocro.xml")
} else {
settings.file <- args[1]
settings <- PEcAn.settings::read.settings(settings.file)
}
# Check for additional modules that will require adding settings
if("benchmarking" %in% names(settings)){
library(PEcAn.benchmark)
settings <- papply(settings, read_settings_BRR)
}
if("sitegroup" %in% names(settings)){
if(is.null(settings$sitegroup$nSite)){
settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
sitegroupId = settings$sitegroup$id)
} else {
settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
sitegroupId = settings$sitegroup$id,
nSite = settings$sitegroup$nSite)
}
settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
}
# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
#settings$host$name <- fqdn()
settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
# Write pecan.CHECKED.xml
PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
# start from scratch if no continue is passed in
statusFile <- file.path(settings$outdir, "STATUS")
if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
file.remove(statusFile)
}
#settings <- read.settings(file.path(settings$outdir, 'pecan.CHECKED.xml'))
# Do conversions
settings <- PEcAn.workflow::do_conversions(settings)
input.id
input.args <- list(...)
PEcAn.logger::logger.debug(paste("Convert.Inputs", fcn, input.id, host$name, outfolder, formatname,
mimetype, site.id, start_date, end_date))
host$name
input.id
system.file(package = 'BioCro')
dir(system.file(package = 'BioCro'))
dir(system.file(package = 'BioCro', 'extdata'))
dir(system.file(package = 'BioCro', 'extdata', 'met2011.csv'))
system.file(package = 'BioCro', 'extdata/met2011.csv')
# ----------------------------------------------------------------------
# Load required libraries
# ----------------------------------------------------------------------
library(PEcAn.all)
library(PEcAn.utils)
library(RCurl)
# make sure always to call status.end
options(warn=1)
# make sure always to call status.end
options(warn=1)
options(error=quote({
PEcAn.utils::status.end("ERROR")
PEcAn.remote::kill.tunnel(settings)
if (!interactive()) {
q(status = 1)
}
}))
# ----------------------------------------------------------------------
# PEcAn Workflow
# ----------------------------------------------------------------------
# Open and read in settings file for PEcAn run.
args <- commandArgs(trailingOnly = TRUE)
if (is.na(args[1])){
settings <- PEcAn.settings::read.settings("pecan/tests/pecan.kr.biocro.xml")
} else {
settings.file <- args[1]
settings <- PEcAn.settings::read.settings(settings.file)
}
# Check for additional modules that will require adding settings
if("benchmarking" %in% names(settings)){
library(PEcAn.benchmark)
settings <- papply(settings, read_settings_BRR)
}
if("sitegroup" %in% names(settings)){
if(is.null(settings$sitegroup$nSite)){
settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
sitegroupId = settings$sitegroup$id)
} else {
settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
sitegroupId = settings$sitegroup$id,
nSite = settings$sitegroup$nSite)
}
settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
}
# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
#settings$host$name <- fqdn()
settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
settings <- PEcAn.settings::read.settings("pecan/tests/pecan.kr.biocro.xml")
# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
#settings$host$name <- fqdn()
settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
# ----------------------------------------------------------------------
# PEcAn Workflow
# ----------------------------------------------------------------------
# Open and read in settings file for PEcAn run.
args <- commandArgs(trailingOnly = TRUE)
if (is.na(args[1])){
settings <- PEcAn.settings::read.settings("pecan/tests/pecan.kr.biocro.xml")
} else {
settings.file <- args[1]
settings <- PEcAn.settings::read.settings(settings.file)
}
# Check for additional modules that will require adding settings
if("benchmarking" %in% names(settings)){
library(PEcAn.benchmark)
settings <- papply(settings, read_settings_BRR)
}
if("sitegroup" %in% names(settings)){
if(is.null(settings$sitegroup$nSite)){
settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
sitegroupId = settings$sitegroup$id)
} else {
settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
sitegroupId = settings$sitegroup$id,
nSite = settings$sitegroup$nSite)
}
settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
}
# make sure always to call status.end
options(warn=1)
options(error=quote({
PEcAn.utils::status.end("ERROR")
PEcAn.remote::kill.tunnel(settings)
if (!interactive()) {
q(status = 1)
}
}))
# ----------------------------------------------------------------------
# PEcAn Workflow
# ----------------------------------------------------------------------
# Open and read in settings file for PEcAn run.
args <- commandArgs(trailingOnly = TRUE)
if (is.na(args[1])){
settings <- PEcAn.settings::read.settings("pecan/tests/pecan.kr.biocro.xml")
} else {
settings.file <- args[1]
settings <- PEcAn.settings::read.settings(settings.file)
}
# Check for additional modules that will require adding settings
if("benchmarking" %in% names(settings)){
library(PEcAn.benchmark)
settings <- papply(settings, read_settings_BRR)
}
if("sitegroup" %in% names(settings)){
if(is.null(settings$sitegroup$nSite)){
settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
sitegroupId = settings$sitegroup$id)
} else {
settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
sitegroupId = settings$sitegroup$id,
nSite = settings$sitegroup$nSite)
}
settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
}
# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
#settings$host$name <- fqdn()
settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
Sys.getenv('HOSTNAME')
Sys.getenv('USER')
Sys.getenv('HOST')
# ----------------------------------------------------------------------
# PEcAn Workflow
# ----------------------------------------------------------------------
# Open and read in settings file for PEcAn run.
args <- commandArgs(trailingOnly = TRUE)
if (is.na(args[1])){
settings <- PEcAn.settings::read.settings("pecan/tests/pecan.kr.biocro.xml")
} else {
settings.file <- args[1]
settings <- PEcAn.settings::read.settings(settings.file)
}
# Check for additional modules that will require adding settings
if("benchmarking" %in% names(settings)){
library(PEcAn.benchmark)
settings <- papply(settings, read_settings_BRR)
}
if("sitegroup" %in% names(settings)){
if(is.null(settings$sitegroup$nSite)){
settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
sitegroupId = settings$sitegroup$id)
} else {
settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
sitegroupId = settings$sitegroup$id,
nSite = settings$sitegroup$nSite)
}
settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
}
# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
#settings$host$name <- fqdn()
settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
# Write pecan.CHECKED.xml
PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
# start from scratch if no continue is passed in
statusFile <- file.path(settings$outdir, "STATUS")
if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
file.remove(statusFile)
}
#settings <- read.settings(file.path(settings$outdir, 'pecan.CHECKED.xml'))
# Do conversions
settings <- PEcAn.workflow::do_conversions(settings)
# Query the trait database for data and priors
if (PEcAn.utils::status.check("TRAIT") == 0){
PEcAn.utils::status.start("TRAIT")
settings <- PEcAn.workflow::runModule.get.trait.data(settings)
PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
PEcAn.utils::status.end()
} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
}
settings <- PEcAn.workflow::runModule.get.trait.data(settings)
PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
PEcAn.utils::status.check("TRAIT") == 0
file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))
# Query the trait database for data and priors
if (PEcAn.utils::status.check("TRAIT") == 0){
PEcAn.utils::status.start("TRAIT")
settings <- PEcAn.workflow::runModule.get.trait.data(settings)
PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
PEcAn.utils::status.end()
} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
}
# # Query the trait database for data and priors
# if (PEcAn.utils::status.check("TRAIT") == 0){
# PEcAn.utils::status.start("TRAIT")
settings <- PEcAn.workflow::runModule.get.trait.data(settings)
PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
PEcAn.utils::status.end()
!is.null(settings$meta.analysis)
PEcAn.MA::runModule.run.meta.analysis(settings)
# # Query the trait database for data and priors
# if (PEcAn.utils::status.check("TRAIT") == 0){
# PEcAn.utils::status.start("TRAIT")
settings <- PEcAn.workflow::runModule.get.trait.data(settings)
# # Query the trait database for data and priors
# if (PEcAn.utils::status.check("TRAIT") == 0){
# PEcAn.utils::status.start("TRAIT")
settings <- PEcAn.workflow::runModule.get.trait.data(settings)
settings <- PEcAn.settings::read.settings("pecan/tests/pecan.kr.biocro.xml")
# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
#settings$host$name <- fqdn()
settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
# Write pecan.CHECKED.xml
PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
# start from scratch if no continue is passed in
statusFile <- file.path(settings$outdir, "STATUS")
# start from scratch if no continue is passed in
statusFile <- file.path(settings$outdir, "STATUS")
if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
file.remove(statusFile)
}
settings <- PEcAn.workflow::runModule.get.trait.data(settings)
PEcAn.utils::status.start("META")
PEcAn.MA::runModule.run.meta.analysis(settings)
# ----------------------------------------------------------------------
# Load required libraries
# ----------------------------------------------------------------------
library(PEcAn.all)
library(PEcAn.utils)
library(RCurl)
settings <- PEcAn.settings::read.settings("pecan/tests/pecan.kr.biocro.xml")
# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
#settings$host$name <- fqdn()
settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
# Write pecan.CHECKED.xml
PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
# start from scratch if no continue is passed in
statusFile <- file.path(settings$outdir, "STATUS")
if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
file.remove(statusFile)
}
# # Query the trait database for data and priors
# if (PEcAn.utils::status.check("TRAIT") == 0){
# PEcAn.utils::status.start("TRAIT")
settings <- PEcAn.workflow::runModule.get.trait.data(settings)
# Run the PEcAn meta.analysis
PEcAn.utils::status.start("META")
PEcAn.MA::runModule.run.meta.analysis(settings)
settings$meta.analysis <- ''
# # Query the trait database for data and priors
# if (PEcAn.utils::status.check("TRAIT") == 0){
# PEcAn.utils::status.start("TRAIT")
settings <- PEcAn.workflow::runModule.get.trait.data(settings)
settings <- PEcAn.workflow::runModule.run.write.configs(settings)
# make sure always to call status.end
options(warn=1)
options(error=quote({
PEcAn.utils::status.end("ERROR")
PEcAn.remote::kill.tunnel(settings)
if (!interactive()) {
q(status = 1)
}
}))
# ----------------------------------------------------------------------
# PEcAn Workflow
# ----------------------------------------------------------------------
# Open and read in settings file for PEcAn run.
args <- commandArgs(trailingOnly = TRUE)
if (is.na(args[1])){
settings <- PEcAn.settings::read.settings("pecan/tests/pecan.kr.biocro.xml")
} else {
settings.file <- args[1]
settings <- PEcAn.settings::read.settings(settings.file)
}
# Check for additional modules that will require adding settings
if("benchmarking" %in% names(settings)){
library(PEcAn.benchmark)
settings <- papply(settings, read_settings_BRR)
}
if("sitegroup" %in% names(settings)){
if(is.null(settings$sitegroup$nSite)){
settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
sitegroupId = settings$sitegroup$id)
} else {
settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
sitegroupId = settings$sitegroup$id,
nSite = settings$sitegroup$nSite)
}
settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
}
# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
# Write pecan.CHECKED.xml
PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
# start from scratch if no continue is passed in
statusFile <- file.path(settings$outdir, "STATUS")
if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
file.remove(statusFile)
}
# Do conversions
settings <- PEcAn.workflow::do_conversions(settings)
# Query the trait database for data and priors
if (PEcAn.utils::status.check("TRAIT") == 0){
PEcAn.utils::status.start("TRAIT")
settings <- PEcAn.workflow::runModule.get.trait.data(settings)
PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')
PEcAn.utils::status.end()
} else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {
settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml'))
}
settings <- PEcAn.workflow::runModule.get.trait.data(settings)
settings <- PEcAn.workflow::runModule.get.trait.data(settings)
PEcAn.MA::runModule.run.meta.analysis(settings)
library(dplyr)
# Open and read in settings file for PEcAn run.
args <- commandArgs(trailingOnly = TRUE)
if (is.na(args[1])){
settings <- PEcAn.settings::read.settings("pecan/tests/pecan64.sipnet.xml")
} else {
settings.file = args[1]
settings <- PEcAn.settings::read.settings(settings.file)
}
# Open up a connection to BETY
bety <-dplyr::src_postgres(host = settings$database$bety$host,
user = settings$database$bety$user,
password = settings$database$bety$password,
dbname = settings$database$bety$dbname)
new_model <- tbl(bety, 'models') %>%
filter(id == 9000000001)
new_model
getw
getwd()
bety
settings$database$bety$host
settings$database$bety$user
settings$database$bety$password
settings$database$bety$dbname
getwd()
# ----------------------------------------------------------------------
# Load required libraries
# ----------------------------------------------------------------------
library(PEcAn.all)
library(PEcAn.utils)
library(RCurl)
# make sure always to call status.end
options(warn=1)
options(error=quote({
PEcAn.utils::status.end("ERROR")
PEcAn.remote::kill.tunnel(settings)
if (!interactive()) {
q(status = 1)
}
}))
# ----------------------------------------------------------------------
# PEcAn Workflow
# ----------------------------------------------------------------------
# Open and read in settings file for PEcAn run.
args <- commandArgs(trailingOnly = TRUE)
if (is.na(args[1])){
settings <- PEcAn.settings::read.settings("pecan/tests/pecan.clm.params.xml")
} else {
settings.file <- args[1]
settings <- PEcAn.settings::read.settings(settings.file)
}
# Check for additional modules that will require adding settings
if("benchmarking" %in% names(settings)){
library(PEcAn.benchmark)
settings <- papply(settings, read_settings_BRR)
}
if("sitegroup" %in% names(settings)){
if(is.null(settings$sitegroup$nSite)){
settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
sitegroupId = settings$sitegroup$id)
} else {
settings <- PEcAn.settings::createSitegroupMultiSettings(settings,
sitegroupId = settings$sitegroup$id,
nSite = settings$sitegroup$nSite)
}
settings$sitegroup <- NULL ## zero out so don't expand a second time if re-reading
}
# Update/fix/check settings. Will only run the first time it's called, unless force=TRUE
settings <- PEcAn.settings::prepare.settings(settings, force = FALSE)
# Write pecan.CHECKED.xml
PEcAn.settings::write.settings(settings, outputfile = "pecan.CHECKED.xml")
# start from scratch if no continue is passed in
statusFile <- file.path(settings$outdir, "STATUS")
if (length(which(commandArgs() == "--continue")) == 0 && file.exists(statusFile)) {
file.remove(statusFile)
}
# Do conversions
settings <- PEcAn.workflow::do_conversions(settings)
